{"version":3,"file":"decimal.js-light-ZKFLnszB.js","sources":["../../node_modules/decimal.js-light/decimal.mjs"],"sourcesContent":["/*\r\n *  decimal.js-light v2.5.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js-light\r\n *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Expat Licence\r\n */\r\n\r\n\r\n// ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //\r\n\r\n\r\n// The limit on the value of `precision`, and on the value of the first argument to\r\n// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\nvar MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  defaults = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n    // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to MAX_E\r\n\r\n    // The natural logarithm of 10.\r\n    // 115 digits\r\n    LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n  },\r\n\r\n\r\n// ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //\r\n\r\n\r\n  Decimal,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  ONE,\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n  MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n  // Decimal.prototype object\r\n  P = {};\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue                       abs\r\n *  comparedTo                          cmp\r\n *  decimalPlaces                       dp\r\n *  dividedBy                           div\r\n *  dividedToIntegerBy                  idiv\r\n *  equals                              eq\r\n *  exponent\r\n *  greaterThan                         gt\r\n *  greaterThanOrEqualTo                gte\r\n *  isInteger                           isint\r\n *  isNegative                          isneg\r\n *  isPositive                          ispos\r\n *  isZero\r\n *  lessThan                            lt\r\n *  lessThanOrEqualTo                   lte\r\n *  logarithm                           log\r\n *  minus                               sub\r\n *  modulo                              mod\r\n *  naturalExponential                  exp\r\n *  naturalLogarithm                    ln\r\n *  negated                             neg\r\n *  plus                                add\r\n *  precision                           sd\r\n *  squareRoot                          sqrt\r\n *  times                               mul\r\n *  toDecimalPlaces                     todp\r\n *  toExponential\r\n *  toFixed\r\n *  toInteger                           toint\r\n *  toNumber\r\n *  toPower                             pow\r\n *  toPrecision\r\n *  toSignificantDigits                 tosd\r\n *  toString\r\n *  valueOf                             val\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s) x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this;\r\n\r\n  y = new x.constructor(y);\r\n\r\n  // Signs differ?\r\n  if (x.s !== y.s) return x.s || -y.s;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n  xdL = x.d.length;\r\n  ydL = y.d.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var x = this,\r\n    w = x.d.length - 1,\r\n    dp = (w - x.e) * LOG_BASE;\r\n\r\n  // Subtract the number of trailing zeros of the last word.\r\n  w = x.d[w];\r\n  if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n  return dp < 0 ? 0 : dp;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, truncated to `precision` significant digits.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.idiv = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n *\r\n */\r\nP.exponent = function () {\r\n  return getBase10Exponent(this);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  return this.cmp(y) >= 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isint = function () {\r\n  return this.e > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isneg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.ispos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return this.s === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n * `precision` significant digits.\r\n *\r\n * If no base is specified, return log[10](x).\r\n *\r\n * log[base](x) = ln(x) / ln(base)\r\n *\r\n * The maximum error of the result is 1 ulp (unit in the last place).\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var r,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    wpr = pr + 5;\r\n\r\n  // Default base is 10.\r\n  if (base === void 0) {\r\n    base = new Ctor(10);\r\n  } else {\r\n    base = new Ctor(base);\r\n\r\n    // log[-b](x) = NaN\r\n    // log[0](x)  = NaN\r\n    // log[1](x)  = NaN\r\n    if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  // log[b](-x) = NaN\r\n  // log[b](0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // log[b](1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  external = false;\r\n  r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // x % 0 = NaN\r\n  if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n  // Return x if x is 0.\r\n  if (!x.s) return round(new Ctor(x), pr);\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n  q = divide(x, y, 0, 1).times(y);\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return exp(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * truncated to `precision` significant digits.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return ln(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s || 0;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var e, sd, w,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  e = getBase10Exponent(x) + 1;\r\n  w = x.d.length - 1;\r\n  sd = w * LOG_BASE + 1;\r\n  w = x.d[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n  }\r\n\r\n  return z && e > sd ? e : sd;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var e, n, pr, r, s, t, wpr,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative or zero?\r\n  if (x.s < 1) {\r\n    if (!x.s) return new Ctor(0);\r\n\r\n    // sqrt(-x) = NaN\r\n    throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  e = getBase10Exponent(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  pr = Ctor.precision;\r\n  s = wpr = pr + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n      n = n.slice(wpr - 3, wpr + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (s == wpr && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        round(t, pr + 1, 0);\r\n\r\n        if (t.times(t).eq(x)) {\r\n          r = t;\r\n          break;\r\n        }\r\n      } else if (n != '9999') {\r\n        break;\r\n      }\r\n\r\n      wpr += 4;\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  // Return 0 if either is 0.\r\n  if (!x.s || !y.s) return new Ctor(0);\r\n\r\n  y.s *= x.s;\r\n  e = x.e + y.e;\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = e;\r\n\r\n  return external ? round(y, Ctor.precision) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.todp = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = toString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), dp + 1, rm);\r\n    str = toString(x, true, dp + 1);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) return toString(x);\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n  str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isneg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.toInteger = P.toint = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n * truncated to `precision` significant digits.\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * The maximum error is 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, sign, yIsInt,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    guard = 12,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // pow(x, 0) = 1\r\n  if (!y.s) return new Ctor(ONE);\r\n\r\n  x = new Ctor(x);\r\n\r\n  // pow(0, y > 0) = 0\r\n  // pow(0, y < 0) = Infinity\r\n  if (!x.s) {\r\n    if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n    return x;\r\n  }\r\n\r\n  // pow(1, y) = 1\r\n  if (x.eq(ONE)) return x;\r\n\r\n  pr = Ctor.precision;\r\n\r\n  // pow(x, 1) = x\r\n  if (y.eq(ONE)) return round(x, pr);\r\n\r\n  e = y.e;\r\n  k = y.d.length - 1;\r\n  yIsInt = e >= k;\r\n  sign = x.s;\r\n\r\n  if (!yIsInt) {\r\n\r\n    // pow(x < 0, y non-integer) = NaN\r\n    if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = new Ctor(ONE);\r\n\r\n    // Max k of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (k % 2) {\r\n        r = r.times(x);\r\n        truncate(r.d, e);\r\n      }\r\n\r\n      k = mathfloor(k / 2);\r\n      if (k === 0) break;\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, e);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n  }\r\n\r\n  // Result is negative if x is negative and the last digit of integer y is odd.\r\n  sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n  x.s = 1;\r\n  external = false;\r\n  r = y.times(ln(x, pr + guard));\r\n  external = true;\r\n  r = exp(r);\r\n  r.s = sign;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var e, str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), sd, rm);\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toSignificantDigits = P.tosd = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return round(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {\r\n  var x = this,\r\n    e = getBase10Exponent(x),\r\n    Ctor = x.constructor;\r\n\r\n  return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  add                 P.minus, P.plus\r\n *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n *  exp                 P.exp, P.pow\r\n *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n *                      P.toString, divide, round, toString, exp, ln\r\n *  getLn10             P.log, ln\r\n *  getZeroString       digitsToString, toString\r\n *  ln                  P.log, P.ln, P.pow, exp\r\n *  parseDecimal        Decimal\r\n *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n *                      divide, getLn10, exp, ln\r\n *  subtract            P.minus, P.plus\r\n *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n *  truncate            P.pow\r\n *\r\n *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n */\r\n\r\n\r\nfunction add(x, y) {\r\n  var carry, d, e, i, k, len, xd, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // If either is zero...\r\n  if (!x.s || !y.s) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!y.s) y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  k = x.e;\r\n  e = y.e;\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % BASE | 0;\r\n      carry = temp / BASE | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * BASE + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, dp) {\r\n    var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either 0?\r\n    if (!x.s) return new Ctor(x);\r\n    if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n    e = x.e - y.e;\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n    if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n    } else if (dp) {\r\n      sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) return new Ctor(0);\r\n\r\n    // Convert precision in number of base 10 digits to base 1e7 digits.\r\n    sd = sd / LOG_BASE + 2 | 0;\r\n    i = 0;\r\n\r\n    // divisor < 1e7\r\n    if (yL == 1) {\r\n      k = 0;\r\n      yd = yd[0];\r\n      sd++;\r\n\r\n      // k is the carry.\r\n      for (; (i < xL || k) && sd--; i++) {\r\n        t = k * BASE + (xd[i] || 0);\r\n        qd[i] = t / yd | 0;\r\n        k = t % yd | 0;\r\n      }\r\n\r\n    // divisor >= 1e7\r\n    } else {\r\n\r\n      // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n      k = BASE / (yd[0] + 1) | 0;\r\n\r\n      if (k > 1) {\r\n        yd = multiplyInteger(yd, k);\r\n        xd = multiplyInteger(xd, k);\r\n        yL = yd.length;\r\n        xL = xd.length;\r\n      }\r\n\r\n      xi = yL;\r\n      rem = xd.slice(0, yL);\r\n      remL = rem.length;\r\n\r\n      // Add zeros to make remainder as long as divisor.\r\n      for (; remL < yL;) rem[remL++] = 0;\r\n\r\n      yz = yd.slice();\r\n      yz.unshift(0);\r\n      yd0 = yd[0];\r\n\r\n      if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n      do {\r\n        k = 0;\r\n\r\n        // Compare divisor and remainder.\r\n        cmp = compare(yd, rem, yL, remL);\r\n\r\n        // If divisor < remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Calculate trial digit, k.\r\n          rem0 = rem[0];\r\n          if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n          // k will be how many times the divisor goes into the current remainder.\r\n          k = rem0 / yd0 | 0;\r\n\r\n          //  Algorithm:\r\n          //  1. product = divisor * trial digit (k)\r\n          //  2. if product > remainder: product -= divisor, k--\r\n          //  3. remainder -= product\r\n          //  4. if product was < remainder at 2:\r\n          //    5. compare new remainder and divisor\r\n          //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n          if (k > 1) {\r\n            if (k >= BASE) k = BASE - 1;\r\n\r\n            // product = divisor * trial digit.\r\n            prod = multiplyInteger(yd, k);\r\n            prodL = prod.length;\r\n            remL = rem.length;\r\n\r\n            // Compare product and remainder.\r\n            cmp = compare(prod, rem, prodL, remL);\r\n\r\n            // product > remainder.\r\n            if (cmp == 1) {\r\n              k--;\r\n\r\n              // Subtract divisor from product.\r\n              subtract(prod, yL < prodL ? yz : yd, prodL);\r\n            }\r\n          } else {\r\n\r\n            // cmp is -1.\r\n            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n            if (k == 0) cmp = k = 1;\r\n            prod = yd.slice();\r\n          }\r\n\r\n          prodL = prod.length;\r\n          if (prodL < remL) prod.unshift(0);\r\n\r\n          // Subtract product from remainder.\r\n          subtract(rem, prod, remL);\r\n\r\n          // If product was < previous remainder.\r\n          if (cmp == -1) {\r\n            remL = rem.length;\r\n\r\n            // Compare divisor and new remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < new remainder, subtract divisor from remainder.\r\n            if (cmp < 1) {\r\n              k++;\r\n\r\n              // Subtract divisor from remainder.\r\n              subtract(rem, yL < remL ? yz : yd, remL);\r\n            }\r\n          }\r\n\r\n          remL = rem.length;\r\n        } else if (cmp === 0) {\r\n          k++;\r\n          rem = [0];\r\n        }    // if cmp === 1, k will be 0\r\n\r\n        // Add the next digit, k, to the result array.\r\n        qd[i++] = k;\r\n\r\n        // Update the remainder.\r\n        if (cmp && rem[0]) {\r\n          rem[remL++] = xd[xi] || 0;\r\n        } else {\r\n          rem = [xd[xi]];\r\n          remL = 1;\r\n        }\r\n\r\n      } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n    }\r\n\r\n    // Leading zero?\r\n    if (!qd[0]) qd.shift();\r\n\r\n    q.e = e;\r\n\r\n    return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n * significant digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n */\r\nfunction exp(x, sd) {\r\n  var denominator, guard, pow, sum, t, wpr,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n  // exp(0) = 1\r\n  if (!x.s) return new Ctor(ONE);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  while (x.abs().gte(0.1)) {\r\n    x = x.times(t);    // x = x / 2^5\r\n    k += 5;\r\n  }\r\n\r\n  // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(ONE);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = round(pow.times(x), wpr);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      while (k--) sum = round(sum.times(sum), wpr);\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(x) {\r\n  var e = x.e * LOG_BASE,\r\n    w = x.d[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for (; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n\r\n  if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(decimalError + 'LN10 precision limit exceeded');\r\n  }\r\n\r\n  return round(new Ctor(Ctor.LN10), sd);\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n * digits.\r\n *\r\n *  ln(n) is non-terminating (n != 1)\r\n *\r\n */\r\nfunction ln(y, sd) {\r\n  var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // ln(-x) = NaN\r\n  // ln(0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // ln(1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  if (x.eq(10)) {\r\n    if (sd == null) external = true;\r\n    return getLn10(Ctor, wpr);\r\n  }\r\n\r\n  wpr += guard;\r\n  Ctor.precision = wpr;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n  e = getBase10Exponent(x);\r\n\r\n  if (Math.abs(e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n    Ctor.precision = pr;\r\n    return sd == null ? (external = true, round(x, pr)) : x;\r\n  }\r\n\r\n  // x is reduced to a value near 1.\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n  x2 = round(x.times(x), wpr);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = round(numerator.times(x2), wpr);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    e = e - i - 1;\r\n    x.e = mathfloor(e / LOG_BASE);\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n  } else {\r\n\r\n    // Zero.\r\n    x.s = 0;\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n */\r\n function round(x, sd, rm) {\r\n  var i, j, k, n, rd, doRound, w, xdi,\r\n    xd = x.d;\r\n\r\n  // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n  // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n  // xdi: the index of w within xd.\r\n  // n: the number of digits of w.\r\n  // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n  // they had leading zeros)\r\n  // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n  // Get the length of the first word of the digits array xd.\r\n  for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n  i = sd - n;\r\n\r\n  // Is the rounding digit in the first word of xd?\r\n  if (i < 0) {\r\n    i += LOG_BASE;\r\n    j = sd;\r\n    w = xd[xdi = 0];\r\n  } else {\r\n    xdi = Math.ceil((i + 1) / LOG_BASE);\r\n    k = xd.length;\r\n    if (xdi >= k) return x;\r\n    w = k = xd[xdi];\r\n\r\n    // Get the number of digits of w.\r\n    for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n    // Get the index of rd within w.\r\n    i %= LOG_BASE;\r\n\r\n    // Get the index of rd within w, adjusted for leading zeros.\r\n    // The number of leading zeros of w is given by LOG_BASE - n.\r\n    j = i - LOG_BASE + n;\r\n  }\r\n\r\n  if (rm !== void 0) {\r\n    k = mathpow(10, n - j - 1);\r\n\r\n    // Get the rounding digit at index j of w.\r\n    rd = w / k % 10 | 0;\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n    // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n    // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n    // 714.\r\n\r\n    doRound = rm < 4\r\n      ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n  }\r\n\r\n  if (sd < 1 || !xd[0]) {\r\n    if (doRound) {\r\n      k = getBase10Exponent(x);\r\n      xd.length = 1;\r\n\r\n      // Convert sd to decimal places.\r\n      sd = sd - k - 1;\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n      x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n    } else {\r\n      xd.length = 1;\r\n\r\n      // Zero.\r\n      xd[0] = x.e = x.s = 0;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n  // Remove excess digits.\r\n  if (i == 0) {\r\n    xd.length = xdi;\r\n    k = 1;\r\n    xdi--;\r\n  } else {\r\n    xd.length = xdi + 1;\r\n    k = mathpow(10, LOG_BASE - i);\r\n\r\n    // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n    // j > 0 means i > number of leading zeros of w.\r\n    xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n  }\r\n\r\n  if (doRound) {\r\n    for (;;) {\r\n\r\n      // Is the digit to be rounded up in the first word of xd?\r\n      if (xdi == 0) {\r\n        if ((xd[0] += k) == BASE) {\r\n          xd[0] = 1;\r\n          ++x.e;\r\n        }\r\n\r\n        break;\r\n      } else {\r\n        xd[xdi] += k;\r\n        if (xd[xdi] != BASE) break;\r\n        xd[xdi--] = 0;\r\n        k = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n  if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n    throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction subtract(x, y) {\r\n  var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // Return y negated if x is zero.\r\n  // Return x if y is zero and x is non-zero.\r\n  if (!x.s || !y.s) {\r\n    if (y.s) y.s = -y.s;\r\n    else y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are non-zero numbers with the same sign.\r\n\r\n  e = y.e;\r\n  xe = x.e;\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of zeros\r\n    // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n    // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to xd if shorter.\r\n  // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(0);\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction toString(x, isExp, sd) {\r\n  var k,\r\n    e = getBase10Exponent(x),\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (e < 0 ? 'e' : 'e+') + e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  clone\r\n *  config/set\r\n */\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * value {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(value) {\r\n    var x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (value instanceof Decimal) {\r\n      x.s = value.s;\r\n      x.e = value.e;\r\n      x.d = (value = value.d) ? value.slice() : value;\r\n      return;\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n\r\n      // Reject Infinity/NaN.\r\n      if (value * 0 !== 0) {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      if (value > 0) {\r\n        x.s = 1;\r\n      } else if (value < 0) {\r\n        value = -value;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 0;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (value === ~~value && value < 1e7) {\r\n        x.e = 0;\r\n        x.d = [value];\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, value.toString());\r\n    } else if (typeof value !== 'string') {\r\n      throw Error(invalidArgument + value);\r\n    }\r\n\r\n    // Minus sign?\r\n    if (value.charCodeAt(0) === 45) {\r\n      value = value.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      x.s = 1;\r\n    }\r\n\r\n    if (isDecimal.test(value)) parseDecimal(x, value);\r\n    else throw Error(invalidArgument + value);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n  Decimal.clone = clone;\r\n  Decimal.config = Decimal.set = config;\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n    for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw Error(decimalError + 'Object expected');\r\n  }\r\n  var i, p, v,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -1 / 0, 0,\r\n      'toExpPos', 0, 1 / 0\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if ((v = obj[p = ps[i]]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if ((v = obj[p = 'LN10']) !== void 0) {\r\n      if (v == Math.LN10) this[p] = new this(v);\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = clone(defaults);\r\n\r\n// Internal constant.\r\nONE = new Decimal(1);\r\n\r\nexport default Decimal;\r\n"],"names":["MAX_DIGITS","defaults","Decimal","external","decimalError","invalidArgument","exponentOutOfRange","mathfloor","mathpow","isDecimal","ONE","BASE","LOG_BASE","MAX_SAFE_INTEGER","MAX_E","P","x","y","i","j","xdL","ydL","w","dp","divide","Ctor","round","getBase10Exponent","base","pr","wpr","ln","subtract","add","q","exp","z","e","sd","n","r","s","t","digitsToString","carry","k","rL","xd","yd","rm","checkInt32","str","toString","sign","yIsInt","guard","yn","truncate","d","len","min","max","ws","indexOfLastWord","getZeroString","multiplyInteger","temp","compare","a","b","aL","bL","cmp","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","denominator","pow","sum","getLn10","zs","c","c0","numerator","x2","parseDecimal","rd","doRound","xdi","xe","xLTy","isExp","arr","clone","obj","p","ps","value","config","v","Decimal$1"],"mappings":"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","x_google_ignoreList":[0]}