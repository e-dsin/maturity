{"version":3,"file":"index-BB50JTR2.js","sources":["../../src/utils/logger.ts","../../src/services/api.ts","../../src/contexts/AuthContext.tsx","../../src/layouts/MainLayout.tsx","../../src/layouts/AuthLayout.tsx","../../src/pages/auth/Login.tsx","../../src/pages/dashboard/index.tsx","../../src/pages/dashboard/questionnaires/index.tsx","../../src/pages/dashboard/questionnaires/[id].tsx","../../src/pages/dashboard/questionnaires/admin.tsx","../../src/components/common/DataPickerWrapper.tsx","../../src/pages/dashboard/applications/index.tsx","../../src/pages/dashboard/organisations/index.tsx","../../src/utils/AnalyseUtils.ts","../../src/components/dashboard/StatsCard.tsx","../../src/components/dashboard/EntrepriseScoresPanel.jsx","../../src/components/dashboard/AnalysesInterpretationsUI.tsx","../../src/pages/dashboard/AnalysesInterpretations.tsx","../../src/pages/dashboard/AnalysesInterpretationfunctions.tsx","../../src/pages/dashboard/CalculateScore.tsx","../../src/pages/dashboard/forms/index.tsx","../../src/pages/dashboard/forms/FormDetail.tsx","../../src/pages/dashboard/forms/FormNew.tsx","../../src/pages/Administration/index.tsx","../../src/pages/MaturityModelAdmin/index.tsx","../../src/components/ProtectedRoute.tsx","../../src/App.tsx","../../src/components/common/Toast.tsx","../../src/contexts/ToastContext.tsx","../../src/main.tsx"],"sourcesContent":["// src/utils/logger.ts\r\n\r\n/**\r\n * Module de logging pour le frontend\r\n * Permet d'envoyer les logs au backend et de les stocker localement\r\n */\r\n\r\n// Types pour le logger\r\nexport type LogLevel = 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';\r\n\r\nexport interface LogEntry {\r\n  level: LogLevel;\r\n  message: string;\r\n  timestamp: string;\r\n  details?: Record<string, any>;\r\n}\r\n\r\nexport interface LogMetadata {\r\n  userId?: string;\r\n  sessionId: string;\r\n  userAgent: string;\r\n  language: string;\r\n  screenSize: string;\r\n  batchId: string;\r\n  [key: string]: any;\r\n}\r\n\r\n// Configuration du logger\r\ninterface LoggerConfig {\r\n  minLevel: LogLevel;\r\n  sendToServer: boolean;\r\n  serverUrl: string;\r\n  batchSize: number;\r\n  sendInterval: number;\r\n  includeUserInfo: boolean;\r\n}\r\n\r\n// Configuration par défaut\r\nconst defaultConfig: LoggerConfig = {\r\n  minLevel: import.meta.env.PROD ? 'INFO' : 'DEBUG',\r\n  sendToServer: import.meta.env.PROD,\r\n  serverUrl: '/api/logs',\r\n  batchSize: 10,\r\n  sendInterval: 30000, // 30s\r\n  includeUserInfo: true,\r\n};\r\n\r\n// Ordre des niveaux de logs pour faciliter les comparaisons\r\nconst LOG_LEVEL_ORDER: Record<LogLevel, number> = {\r\n  'DEBUG': 0,\r\n  'INFO': 1,\r\n  'WARN': 2,\r\n  'ERROR': 3,\r\n};\r\n\r\n// Classe principale du logger\r\nclass Logger {\r\n  private config: LoggerConfig;\r\n  private logBuffer: LogEntry[] = [];\r\n  private sendTimer: number | null = null;\r\n  private sessionId: string;\r\n  \r\n  constructor(customConfig: Partial<LoggerConfig> = {}) {\r\n    // Fusionner la configuration personnalisée avec la configuration par défaut\r\n    this.config = { ...defaultConfig, ...customConfig };\r\n    \r\n    // Initialiser ou récupérer l'ID de session\r\n    this.sessionId = this.getOrCreateSessionId();\r\n    \r\n    // Démarrer le timer d'envoi si nécessaire\r\n    if (this.config.sendToServer) {\r\n      this.startSendTimer();\r\n      this.setupUnloadHandler();\r\n    }\r\n    \r\n    // Capturer les erreurs non gérées\r\n    this.setupErrorCapture();\r\n  }\r\n  \r\n  /**\r\n   * Obtient ou crée un ID de session\r\n   */\r\n  private getOrCreateSessionId(): string {\r\n    let sessionId = sessionStorage.getItem('logSessionId');\r\n    if (!sessionId) {\r\n      sessionId = Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n      sessionStorage.setItem('logSessionId', sessionId);\r\n    }\r\n    return sessionId;\r\n  }\r\n  \r\n  /**\r\n   * Configure le timer d'envoi des logs\r\n   */\r\n  private startSendTimer(): void {\r\n    if (this.sendTimer) {\r\n      window.clearInterval(this.sendTimer);\r\n    }\r\n    \r\n    this.sendTimer = window.setInterval(() => {\r\n      this.sendLogs();\r\n    }, this.config.sendInterval);\r\n  }\r\n  \r\n  /**\r\n   * Capture les erreurs non gérées\r\n   */\r\n  private setupErrorCapture(): void {\r\n    window.addEventListener('error', (event) => {\r\n      this.error('Erreur non gérée', {\r\n        message: event.message,\r\n        filename: event.filename,\r\n        lineno: event.lineno,\r\n        colno: event.colno,\r\n        stack: event.error?.stack,\r\n      });\r\n      return false;\r\n    });\r\n    \r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.error('Promesse rejetée non gérée', {\r\n        reason: event.reason?.message || String(event.reason),\r\n        stack: event.reason?.stack,\r\n      });\r\n      return false;\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Envoie les logs au serveur\r\n   */\r\n  private async sendLogs(force: boolean = false): Promise<void> {\r\n    if (!this.config.sendToServer || (this.logBuffer.length < this.config.batchSize && !force)) {\r\n      return;\r\n    }\r\n    \r\n    if (this.logBuffer.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    const logsToSend = [...this.logBuffer];\r\n    this.logBuffer = [];\r\n    \r\n    try {\r\n      const metadata: LogMetadata = {\r\n        sessionId: this.sessionId,\r\n        batchId: Date.now().toString(36),\r\n        userAgent: navigator.userAgent,\r\n        language: navigator.language,\r\n        screenSize: `${window.innerWidth}x${window.innerHeight}`,\r\n        userId: localStorage.getItem('userId') || undefined,\r\n        url: window.location.href,\r\n        referrer: document.referrer,\r\n      };\r\n      \r\n      const response = await fetch(this.config.serverUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          logs: logsToSend,\r\n          metadata,\r\n        }),\r\n        // Timeout\r\n        signal: AbortSignal.timeout ? AbortSignal.timeout(5000) : undefined,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        console.error(`Échec d'envoi des logs: ${response.status}`);\r\n        // Remettre les logs dans le buffer\r\n        this.logBuffer = [...logsToSend, ...this.logBuffer];\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'envoi des logs:', error);\r\n      // Remettre les logs dans le buffer\r\n      this.logBuffer = [...logsToSend, ...this.logBuffer];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Configure le gestionnaire d'événement unload\r\n   */\r\n  private setupUnloadHandler(): void {\r\n    window.addEventListener('beforeunload', () => {\r\n      this.sendLogs(true);\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Ajoute une entrée de log\r\n   */\r\n  private addLog(level: LogLevel, message: string, details: Record<string, any> = {}): void {\r\n    // Vérifier le niveau de log\r\n    if (LOG_LEVEL_ORDER[level] < LOG_LEVEL_ORDER[this.config.minLevel]) {\r\n      return;\r\n    }\r\n    \r\n    // Créer l'entrée de log\r\n    const logEntry: LogEntry = {\r\n      level,\r\n      message,\r\n      timestamp: new Date().toISOString(),\r\n      details: { ...details },\r\n    };\r\n    \r\n    // Ajouter l'entrée au buffer\r\n    this.logBuffer.push(logEntry);\r\n    \r\n    // Afficher dans la console\r\n    switch (level) {\r\n      case 'DEBUG':\r\n        console.debug(`[${level}] ${message}`, details);\r\n        break;\r\n      case 'INFO':\r\n        console.info(`[${level}] ${message}`, details);\r\n        break;\r\n      case 'WARN':\r\n        console.warn(`[${level}] ${message}`, details);\r\n        break;\r\n      case 'ERROR':\r\n        console.error(`[${level}] ${message}`, details);\r\n        // Envoyer immédiatement les erreurs\r\n        this.sendLogs(true);\r\n        break;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * API publique pour les différents niveaux de logs\r\n   */\r\n  public debug(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('DEBUG', message, details);\r\n  }\r\n  \r\n  public info(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('INFO', message, details);\r\n  }\r\n  \r\n  public warn(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('WARN', message, details);\r\n  }\r\n  \r\n  public error(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('ERROR', message, details);\r\n  }\r\n  \r\n  /**\r\n   * Force l'envoi des logs au serveur\r\n   */\r\n  public flush(): Promise<void> {\r\n    return this.sendLogs(true);\r\n  }\r\n  \r\n  /**\r\n   * Met à jour la configuration\r\n   */\r\n  public setConfig(newConfig: Partial<LoggerConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    \r\n    // Mettre à jour le timer si nécessaire\r\n    if (this.config.sendToServer) {\r\n      this.startSendTimer();\r\n    } else if (this.sendTimer) {\r\n      window.clearInterval(this.sendTimer);\r\n      this.sendTimer = null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Log d'un événement utilisateur\r\n   */\r\n  public logUserAction(action: string, details: Record<string, any> = {}): void {\r\n    this.info(`Action utilisateur: ${action}`, {\r\n      type: 'user_action',\r\n      action,\r\n      ...details\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Log d'une navigation\r\n   */\r\n  public logNavigation(path: string, details: Record<string, any> = {}): void {\r\n    this.info(`Navigation: ${path}`, {\r\n      type: 'navigation',\r\n      path,\r\n      ...details\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Log de performance\r\n   */\r\n  public logPerformance(operation: string, durationMs: number, details: Record<string, any> = {}): void {\r\n    this.info(`Performance: ${operation} (${durationMs}ms)`, {\r\n      type: 'performance',\r\n      operation,\r\n      durationMs,\r\n      ...details\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Log d'appel API\r\n   */\r\n  public logApiCall(endpoint: string, method: string, status: number, durationMs: number, details: Record<string, any> = {}): void {\r\n    const level = status >= 400 ? 'ERROR' : 'INFO';\r\n    \r\n    this.addLog(level, `API ${method} ${endpoint}: ${status} (${durationMs}ms)`, {\r\n      type: 'api_call',\r\n      endpoint,\r\n      method,\r\n      status,\r\n      durationMs,\r\n      ...details\r\n    });\r\n  }\r\n}\r\n\r\n// Créer et exporter une instance par défaut\r\nconst logger = new Logger();\r\n\r\nexport default logger;","// src/services/api.ts - Version mise à jour pour le backend déployé\r\nimport axios, { AxiosInstance, AxiosResponse, AxiosRequestConfig } from 'axios';\r\nimport logger from '../utils/logger';\r\n\r\n// Configuration des URLs selon l'environnement\r\nconst getAPIBaseURL = (): string => {\r\n  // En production ou quand VITE_API_URL est définie, utiliser la valeur configurée\r\n  if (import.meta.env.VITE_API_URL) {\r\n    return import.meta.env.VITE_API_URL;\r\n  }\r\n  \r\n  // Par défaut, utiliser le backend déployé\r\n  return 'https://api-dev.dev-maturity.e-dsin.fr';\r\n};\r\n\r\nconst API_URL = getAPIBaseURL();\r\nconst API_PREFIX = '/api';\r\n\r\nconsole.log('🌐 Configuration API:', {\r\n  baseURL: API_URL,\r\n  environment: import.meta.env.MODE,\r\n  isDev: import.meta.env.DEV,\r\n  customUrl: import.meta.env.VITE_API_URL\r\n});\r\n\r\n// Créer une instance d'axios avec la configuration de base\r\nconst apiClient: AxiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // Ajouter timeout et credentials\r\n  timeout: 30000,\r\n  withCredentials: true,\r\n});\r\n\r\n// Intercepteur pour les requêtes\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    // Ajouter un marqueur de temps pour mesurer la durée\r\n    (config as any).metadata = { startTime: Date.now() };\r\n    \r\n    // Récupérer le token d'authentification du localStorage\r\n    const token = localStorage.getItem('auth_token');\r\n    \r\n    // Ajouter le token aux en-têtes si disponible\r\n    if (token && config.headers) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    // Ajouter les headers CORS explicites\r\n    if (config.headers) {\r\n      config.headers['Accept'] = 'application/json';\r\n      config.headers['Cache-Control'] = 'no-cache';\r\n    }\r\n    \r\n    // Logger la requête en toute sécurité\r\n    const logData = {\r\n      method: config.method?.toUpperCase() || 'GET',\r\n      url: config.url || 'unknown',\r\n      baseURL: config.baseURL,\r\n      hasToken: !!token\r\n    };\r\n    \r\n    // Ajouter les données de manière sécurisée en mode dev uniquement\r\n    if (import.meta.env.DEV && config.data) {\r\n      try {\r\n        const dataString = typeof config.data === 'string' \r\n          ? config.data \r\n          : JSON.stringify(config.data);\r\n        \r\n        logData['data'] = dataString.substring(0, 500);\r\n      } catch (err) {\r\n        // Ignorer les erreurs de sérialisation\r\n      }\r\n    }\r\n    \r\n    logger.debug(`API Request: ${logData.method} ${logData.url}`, logData);\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Logger l'erreur de requête en toute sécurité\r\n    const errorMessage = error?.message || 'Erreur inconnue de requête API';\r\n    const errorStack = error?.stack || '';\r\n    \r\n    logger.error('Erreur de requête API', {\r\n      message: errorMessage,\r\n      stack: errorStack\r\n    });\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Intercepteur pour les réponses\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    // Calculer la durée de la requête de manière sécurisée\r\n    const duration = calculateRequestDuration(response.config);\r\n    const url = response.config?.url || 'unknown';\r\n    const method = response.config?.method?.toUpperCase() || 'GET';\r\n    \r\n    // Logger la réponse réussie\r\n    logger.info(`API Response: ${method} ${url} - ${response.status}`, {\r\n      status: response.status,\r\n      statusText: response.statusText || '',\r\n      duration,\r\n      size: response.data ? JSON.stringify(response.data).length : 0,\r\n      url\r\n    });\r\n    \r\n    // Traitement des réponses réussies\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Préparer les données de l'erreur de manière sécurisée\r\n    const errorData = {\r\n      url: error.config?.url || 'unknown',\r\n      method: error.config?.method?.toUpperCase() || 'UNKNOWN',\r\n      status: error.response?.status,\r\n      statusText: error.response?.statusText || '',\r\n      duration: error.config ? calculateRequestDuration(error.config) : null,\r\n      message: error?.message || 'Erreur inconnue',\r\n      baseURL: error.config?.baseURL\r\n    };\r\n    \r\n    // Gestion spécifique des erreurs\r\n    if (error.response?.status === 401) {\r\n      logger.warn('Session expirée ou non authentifiée', errorData);\r\n      // Nettoyer le token et rediriger vers login\r\n      localStorage.removeItem('auth_token');\r\n      \r\n      // Éviter les redirections infinies\r\n      if (!window.location.pathname.includes('/auth/login')) {\r\n        window.location.href = '/auth/login';\r\n      }\r\n    } else if (error.response?.status === 0 || error.code === 'NETWORK_ERROR') {\r\n      // Erreur de réseau\r\n      logger.error('Erreur de réseau - Backend inaccessible', {\r\n        ...errorData,\r\n        type: 'NETWORK_ERROR',\r\n        backendURL: API_URL\r\n      });\r\n    } else if (error.response?.status >= 500) {\r\n      // Erreur serveur\r\n      logger.error('Erreur serveur backend', {\r\n        ...errorData,\r\n        type: 'SERVER_ERROR'\r\n      });\r\n    } else {\r\n      // Autres erreurs (400, 403, 404, etc.)\r\n      logger.error('Erreur de réponse API', {\r\n        ...errorData,\r\n        // Inclure les données de réponse en développement uniquement\r\n        ...(import.meta.env.DEV && error.response?.data && { \r\n          response: JSON.stringify(error.response.data).substring(0, 500),\r\n          stack: error?.stack || ''\r\n        })\r\n      });\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Fonction utilitaire pour normaliser les chemins d'API\r\nconst normalizePath = (url: string): string => {\r\n  // Si l'URL commence déjà par API_PREFIX, ne pas l'ajouter à nouveau\r\n  if (url.startsWith(API_PREFIX)) {\r\n    return url;\r\n  }\r\n  \r\n  // Endpoints spéciaux qui ne nécessitent pas /api/ (health checks, etc.)\r\n  const specialEndpoints = ['/health', '/health-simple'];\r\n  if (specialEndpoints.some(endpoint => url.startsWith(endpoint))) {\r\n    return url;\r\n  }\r\n  \r\n  // Pour tous les autres endpoints, ajouter /api/\r\n  const normalizedUrl = `${API_PREFIX}${url.startsWith('/') ? url : `/${url}`}`;\r\n  \r\n  // Debug en développement\r\n  if (import.meta.env.DEV) {\r\n    console.log(`🔄 URL Normalization: \"${url}\" → \"${normalizedUrl}\"`);\r\n  }\r\n  \r\n  return normalizedUrl;\r\n};\r\n\r\n// Fonction pour calculer la durée d'une requête de manière sécurisée\r\nconst calculateRequestDuration = (config: any): number => {\r\n  try {\r\n    if (config?.metadata?.startTime) {\r\n      return Date.now() - config.metadata.startTime;\r\n    }\r\n  } catch (err) {\r\n    // Ignorer les erreurs\r\n  }\r\n  return 0;\r\n};\r\n\r\n// Fonctions de wrapper pour mesurer les performances et gérer les exceptions\r\nconst withPerformanceLogging = async <T>(\r\n  method: string,\r\n  url: string,\r\n  operation: () => Promise<T>,\r\n  extraDetails: Record<string, any> = {}\r\n): Promise<T> => {\r\n  const normalizedUrl = normalizePath(url);\r\n  const startTime = performance.now();\r\n  \r\n  try {\r\n    const result = await operation();\r\n    const duration = performance.now() - startTime;\r\n    \r\n    // Logger le succès uniquement si la durée est anormalement longue\r\n    if (duration > 2000) { // Plus de 2 secondes\r\n      logger.warn(`API Performance: ${method} ${normalizedUrl} - ${Math.round(duration)}ms (SLOW)`, {\r\n        ...extraDetails,\r\n        duration,\r\n        baseURL: API_URL\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    // L'erreur est déjà loggée dans l'intercepteur de réponse\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Test de connectivité\r\nexport const testConnection = async (): Promise<boolean> => {\r\n  try {\r\n    await apiClient.get('/health', { timeout: 5000 });\r\n    logger.info('✅ Test de connectivité réussi', { backendURL: API_URL });\r\n    return true;\r\n  } catch (error) {\r\n    logger.error('❌ Test de connectivité échoué', { \r\n      backendURL: API_URL,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n    return false;\r\n  }\r\n};\r\n\r\n// Service API avec gestion des erreurs améliorée\r\nconst api = {\r\n  /**\r\n   * Test de connectivité au backend\r\n   */\r\n  testConnection,\r\n\r\n  /**\r\n   * Récupère l'URL de base configurée\r\n   */\r\n  getBaseURL: () => API_URL,\r\n\r\n  /**\r\n   * Effectue une requête GET\r\n   * @param url - URL de la requête\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  get: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'GET',\r\n      normalizedUrl,\r\n      () => apiClient.get<T>(normalizedUrl, config).then((response: AxiosResponse<T>) => response.data),\r\n      { params: config?.params }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête POST\r\n   * @param url - URL de la requête\r\n   * @param data - Données à envoyer\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'POST',\r\n      normalizedUrl,\r\n      () => apiClient.post<T>(normalizedUrl, data, config).then((response: AxiosResponse<T>) => response.data),\r\n      { dataSize: data ? JSON.stringify(data).length : 0 }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête PUT\r\n   * @param url - URL de la requête\r\n   * @param data - Données à envoyer\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'PUT',\r\n      normalizedUrl,\r\n      () => apiClient.put<T>(normalizedUrl, data, config).then((response: AxiosResponse<T>) => response.data),\r\n      { dataSize: data ? JSON.stringify(data).length : 0 }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête PATCH\r\n   * @param url - URL de la requête\r\n   * @param data - Données à envoyer\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'PATCH',\r\n      normalizedUrl,\r\n      () => apiClient.patch<T>(normalizedUrl, data, config).then((response: AxiosResponse<T>) => response.data),\r\n      { dataSize: data ? JSON.stringify(data).length : 0 }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête DELETE\r\n   * @param url - URL de la requête\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  delete: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'DELETE',\r\n      normalizedUrl,\r\n      () => apiClient.delete<T>(normalizedUrl, config).then((response: AxiosResponse<T>) => response.data),\r\n      {}\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête de téléchargement de fichier (en blob)\r\n   * @param url - URL de la requête\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données blob de la réponse\r\n   */\r\n  downloadFile: (url: string, config?: AxiosRequestConfig): Promise<Blob> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<Blob>(\r\n      'GET',\r\n      normalizedUrl,\r\n      () => apiClient.get(normalizedUrl, { \r\n        ...config,\r\n        responseType: 'blob' \r\n      }).then(response => response.data),\r\n      { responseType: 'blob' }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue un téléversement de fichier\r\n   * @param url - URL de la requête\r\n   * @param formData - FormData contenant le fichier\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  uploadFile: <T = any>(url: string, formData: FormData, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'POST',\r\n      normalizedUrl,\r\n      () => apiClient.post<T>(normalizedUrl, formData, {\r\n        ...config,\r\n        headers: {\r\n          ...config?.headers,\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      }).then(response => response.data),\r\n      { formDataEntries: Array.from(formData.keys()).join(',') }\r\n    );\r\n  }\r\n};\r\n\r\nexport default api;","// src/contexts/AuthContext.tsx - Version corrigée pour le rôle\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport api from '../services/api';\r\n\r\n// === CONFIGURATION DES MODULES (conservée) ===\r\nconst ALL_APP_MODULES = {\r\n  DASHBOARD: {\r\n    nom_module: 'DASHBOARD',\r\n    route_base: '/',\r\n    description: 'Tableau de bord principal',\r\n    icone: 'dashboard',\r\n    ordre: 1\r\n  },\r\n  QUESTIONNAIRES: {\r\n    nom_module: 'QUESTIONNAIRES',\r\n    route_base: '/questionnaires',\r\n    description: 'Gestion des questionnaires',\r\n    icone: 'quiz',\r\n    ordre: 2\r\n  },\r\n  FORMULAIRES: {\r\n    nom_module: 'FORMULAIRES',\r\n    route_base: '/formulaires',\r\n    description: 'Gestion des formulaires',\r\n    icone: 'assignment',\r\n    ordre: 3\r\n  },\r\n  ANALYSES: {\r\n    nom_module: 'ANALYSES',\r\n    route_base: '/analyses-fonctions',\r\n    description: 'Analyses et recommandations',\r\n    icone: 'analytics',\r\n    ordre: 4\r\n  },\r\n  APPLICATIONS: {\r\n    nom_module: 'APPLICATIONS',\r\n    route_base: '/applications',\r\n    description: 'Portfolio applications',\r\n    icone: 'apps',\r\n    ordre: 5\r\n  },\r\n  ENTREPRISES: {\r\n    nom_module: 'ENTREPRISES',\r\n    route_base: '/organisations',\r\n    description: 'Gestion des organisations',\r\n    icone: 'business',\r\n    ordre: 6\r\n  },\r\n  ADMINISTRATION: {\r\n    nom_module: 'ADMINISTRATION',\r\n    route_base: '/admin',\r\n    description: 'Administration système',\r\n    icone: 'admin_panel_settings',\r\n    ordre: 10,\r\n    sous_modules: {\r\n      USERS: {\r\n        nom_module: 'ADMIN_USERS',\r\n        route_base: '/admin/users',\r\n        description: 'Gestion des utilisateurs',\r\n        icone: 'people'\r\n      },\r\n      PERMISSIONS: {\r\n        nom_module: 'ADMIN_PERMISSIONS',\r\n        route_base: '/admin/permissions',\r\n        description: 'Gestion des permissions',\r\n        icone: 'security'\r\n      },\r\n      ROLES: {\r\n        nom_module: 'ADMIN_ROLES',\r\n        route_base: '/admin/roles',\r\n        description: 'Gestion des rôles',\r\n        icone: 'account_circle'\r\n      },\r\n      MATURITY: {\r\n        nom_module: 'ADMIN_MATURITY',\r\n        route_base: '/admin/maturity-model',\r\n        description: 'Modèle de maturité',\r\n        icone: 'model_training'\r\n      },\r\n      SYSTEM: {\r\n        nom_module: 'ADMIN_SYSTEM',\r\n        route_base: '/admin/system',\r\n        description: 'Configuration système',\r\n        icone: 'settings'\r\n      }\r\n    }\r\n  }\r\n} as const;\r\n\r\n// === INTERFACES ADAPTÉES ===\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  email: string;\r\n  organisation: string;\r\n  nom_role: string;\r\n  niveau_acces: 'ENTREPRISE' | 'GLOBAL';\r\n  id_entreprise?: string;\r\n  nom_entreprise?: string;\r\n  anciennete_role?: number;\r\n}\r\n\r\ninterface Permission {\r\n  nom_module: string;\r\n  route_base: string;\r\n  peut_voir: boolean;\r\n  peut_editer: boolean;\r\n  peut_supprimer: boolean;\r\n  peut_administrer: boolean;\r\n  sous_permissions?: Permission[];\r\n}\r\n\r\ninterface AuthContextType {\r\n  currentUser: Acteur | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  register: (userData: RegisterData) => Promise<void>;\r\n  forgotPassword: (email: string) => Promise<void>;\r\n  updateProfile: (userData: Partial<Acteur>) => Promise<void>;\r\n  error: string | null;\r\n  permissions: Permission[];\r\n  hasGlobalAccess: boolean;\r\n  hasPermission: (module: string, action: string) => boolean;\r\n  canAccessRoute: (route: string) => boolean;\r\n  canAccessAdminModule: (subModule: string) => boolean;\r\n  getAccessibleModules: () => Permission[];\r\n  getAdminSubModules: () => Permission[];\r\n  refreshPermissions: () => Promise<void>;\r\n  isAdmin: () => boolean;\r\n  isSuperAdmin: () => boolean;\r\n  getAllAppModules: () => typeof ALL_APP_MODULES;\r\n}\r\n\r\ninterface RegisterData {\r\n  nom_prenom: string;\r\n  email: string;\r\n  password: string;\r\n  organisation: string;\r\n  id_entreprise?: string;\r\n  id_role: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType>({\r\n  currentUser: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n  login: async () => {},\r\n  logout: async () => {},\r\n  register: async () => {},\r\n  forgotPassword: async () => {},\r\n  updateProfile: async () => {},\r\n  error: null,\r\n  permissions: [],\r\n  hasGlobalAccess: false,\r\n  hasPermission: () => false,\r\n  canAccessRoute: () => false,\r\n  canAccessAdminModule: () => false,\r\n  getAccessibleModules: () => [],\r\n  getAdminSubModules: () => [],\r\n  refreshPermissions: async () => {},\r\n  isAdmin: () => false,\r\n  isSuperAdmin: () => false,\r\n  getAllAppModules: () => ALL_APP_MODULES,\r\n});\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\ninterface AuthProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  // États\r\n  const [currentUser, setCurrentUser] = useState<Acteur | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [permissions, setPermissions] = useState<Permission[]>([]);\r\n  const [hasGlobalAccess, setHasGlobalAccess] = useState<boolean>(false);\r\n\r\n  // === FONCTIONS HELPER OPTIMISÉES ===\r\n  const isUserAdmin = useCallback((user: Acteur | null): boolean => {\r\n    if (!user) return false;\r\n    \r\n    const role = user.nom_role?.toUpperCase();\r\n    return role === 'ADMINISTRATEUR' || \r\n           role === 'SUPER_ADMINISTRATEUR' ||\r\n           user.niveau_acces === 'GLOBAL';\r\n  }, []);\r\n\r\n  const isUserSuperAdmin = useCallback((user: Acteur | null): boolean => {\r\n    if (!user) return false;\r\n    \r\n    const role = user.nom_role?.toUpperCase();\r\n    return role === 'SUPER_ADMINISTRATEUR';\r\n  }, []);\r\n\r\n  // === GÉNÉRATION AUTOMATIQUE DES PERMISSIONS ADMIN ===\r\n  const generateFullAdminPermissions = useCallback((): Permission[] => {\r\n    const permissions: Permission[] = [];\r\n    \r\n    Object.values(ALL_APP_MODULES).forEach(module => {\r\n      const mainPermission: Permission = {\r\n        nom_module: module.nom_module,\r\n        route_base: module.route_base,\r\n        peut_voir: true,\r\n        peut_editer: true,\r\n        peut_supprimer: true,\r\n        peut_administrer: true\r\n      };\r\n\r\n      if ('sous_modules' in module && module.sous_modules) {\r\n        mainPermission.sous_permissions = Object.values(module.sous_modules).map(sousModule => ({\r\n          nom_module: sousModule.nom_module,\r\n          route_base: sousModule.route_base,\r\n          peut_voir: true,\r\n          peut_editer: true,\r\n          peut_supprimer: true,\r\n          peut_administrer: true\r\n        }));\r\n      }\r\n\r\n      permissions.push(mainPermission);\r\n    });\r\n\r\n    return permissions;\r\n  }, []);\r\n\r\n  // === PERMISSIONS PAR DÉFAUT BASÉES SUR LES RÔLES ===\r\n  const getDefaultPermissionsForRole = useCallback((nomRole: string, niveauAcces: string): Permission[] => {\r\n    const basePermissions: Permission[] = [\r\n      { \r\n        nom_module: 'DASHBOARD', \r\n        route_base: '/', \r\n        peut_voir: true, \r\n        peut_editer: false, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      },\r\n      { \r\n        nom_module: 'QUESTIONNAIRES', \r\n        route_base: '/questionnaires', \r\n        peut_voir: true, \r\n        peut_editer: true, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      },\r\n      { \r\n        nom_module: 'FORMULAIRES', \r\n        route_base: '/formulaires', \r\n        peut_voir: true, \r\n        peut_editer: true, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      },\r\n      { \r\n        nom_module: 'ANALYSES', \r\n        route_base: '/analyses-fonctions', \r\n        peut_voir: true, \r\n        peut_editer: false, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      }\r\n    ];\r\n\r\n    // Normaliser le nom du rôle pour la comparaison\r\n    const roleUpper = nomRole?.toUpperCase();\r\n    \r\n    console.log('🔑 Analyse du rôle:', {\r\n      nomRole: nomRole,\r\n      roleUpper: roleUpper,\r\n      niveauAcces: niveauAcces\r\n    });\r\n\r\n    // === SUPER ADMINISTRATEUR ET ADMINISTRATEUR : TOUTES LES PERMISSIONS ===\r\n    if (roleUpper === 'SUPER_ADMINISTRATEUR' || roleUpper === 'ADMINISTRATEUR' || niveauAcces === 'GLOBAL') {\r\n      console.log('🔑 Génération permissions Administrateur (TOUTES PERMISSIONS)');\r\n      return generateFullAdminPermissions();\r\n    }\r\n    \r\n    // === CONSULTANT : PERMISSIONS ÉTENDUES ===\r\n    if (roleUpper === 'CONSULTANT') {\r\n      console.log('🔑 Génération permissions Consultant (ÉTENDUES)');\r\n      return basePermissions.map(p => ({\r\n        ...p,\r\n        peut_voir: true,\r\n        peut_editer: true,\r\n        peut_supprimer: true,\r\n        peut_administrer: false\r\n      })).concat([\r\n        { \r\n          nom_module: 'APPLICATIONS', \r\n          route_base: '/applications', \r\n          peut_voir: true, \r\n          peut_editer: true, \r\n          peut_supprimer: false, \r\n          peut_administrer: false \r\n        },\r\n        { \r\n          nom_module: 'ENTREPRISES', \r\n          route_base: '/organisations', \r\n          peut_voir: true, \r\n          peut_editer: true, \r\n          peut_supprimer: false, \r\n          peut_administrer: false \r\n        }\r\n      ]);\r\n    }\r\n\r\n    // === MANAGER : PERMISSIONS MOYENNES ===\r\n    if (roleUpper === 'MANAGER') {\r\n      console.log('🔑 Génération permissions Manager (MOYENNES)');\r\n      return basePermissions.map(p => ({\r\n        ...p,\r\n        peut_voir: true,\r\n        peut_editer: p.nom_module !== 'DASHBOARD',\r\n        peut_supprimer: false,\r\n        peut_administrer: false\r\n      })).concat([\r\n        { \r\n          nom_module: 'APPLICATIONS', \r\n          route_base: '/applications', \r\n          peut_voir: true, \r\n          peut_editer: false, \r\n          peut_supprimer: false, \r\n          peut_administrer: false \r\n        }\r\n      ]);\r\n    }\r\n\r\n    // === INTERVENANT : PERMISSIONS DE BASE ===\r\n    console.log('🔑 Génération permissions Intervenant (BASE)');\r\n    return basePermissions;\r\n  }, [generateFullAdminPermissions]);\r\n\r\n  // === VÉRIFICATION AUTH ===\r\n  const checkAuthStatus = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem('auth_token');\r\n      \r\n      if (token) {\r\n        console.log('🔑 Token trouvé, vérification...');\r\n        \r\n        try {\r\n          // Essayer le nouveau endpoint avec permissions si disponible\r\n          const permissionsResponse = await api.get('user/permissions');\r\n          \r\n          setCurrentUser(permissionsResponse.user);\r\n          setPermissions(permissionsResponse.permissions || []);\r\n          setHasGlobalAccess(permissionsResponse.hasGlobalAccess || isUserAdmin(permissionsResponse.user));\r\n          setIsAuthenticated(true);\r\n          setError(null);\r\n          \r\n          console.log('✅ Utilisateur authentifié avec système de permissions');\r\n          \r\n        } catch (permErr) {\r\n          console.log('⚠️ Endpoint permissions non disponible, utilisation /auth/me...');\r\n          \r\n          // Fallback sur /auth/me\r\n          const response = await api.get('auth/me');\r\n          const user = response.user || response.data?.user;\r\n          \r\n          if (user) {\r\n            console.log('🔍 Utilisateur depuis /auth/me:', user);\r\n            \r\n            setCurrentUser(user);\r\n            setPermissions(getDefaultPermissionsForRole(user.nom_role, user.niveau_acces));\r\n            setHasGlobalAccess(isUserAdmin(user));\r\n            setIsAuthenticated(true);\r\n            setError(null);\r\n            \r\n            console.log('✅ Utilisateur authentifié (fallback /auth/me)');\r\n          }\r\n        }\r\n      } else {\r\n        console.log('ℹ️ Aucun token trouvé');\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('⚠️ Erreur d\\'authentification:', err.message);\r\n      localStorage.removeItem('auth_token');\r\n      setCurrentUser(null);\r\n      setPermissions([]);\r\n      setHasGlobalAccess(false);\r\n      setIsAuthenticated(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [isUserAdmin, getDefaultPermissionsForRole]);\r\n\r\n  // === FONCTION LOGIN ===\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      setIsLoading(true);\r\n      \r\n      console.log('🔄 === DÉBUT LOGIN ===');\r\n      console.log('📧 Email:', email);\r\n      \r\n      const response = await api.post('auth/login', { email, password });\r\n      \r\n      if (response.token && response.user) {\r\n        console.log('🔍 Réponse login complète:', response);\r\n        console.log('🔍 Utilisateur reçu:', response.user);\r\n        \r\n        localStorage.setItem('auth_token', response.token);\r\n        \r\n        setCurrentUser(response.user);\r\n        setPermissions(getDefaultPermissionsForRole(response.user.nom_role, response.user.niveau_acces));\r\n        setHasGlobalAccess(isUserAdmin(response.user));\r\n        setIsAuthenticated(true);\r\n        \r\n        console.log('✅ === LOGIN RÉUSSI ===');\r\n        console.log('👤 Utilisateur:', {\r\n          email: response.user.email,\r\n          nom_role: response.user.nom_role,\r\n          niveau_acces: response.user.niveau_acces,\r\n          isAdmin: isUserAdmin(response.user),\r\n          isSuperAdmin: isUserSuperAdmin(response.user)\r\n        });\r\n      } else {\r\n        throw new Error('Réponse de connexion invalide');\r\n      }\r\n      \r\n    } catch (err: any) {\r\n      console.error('❌ === ERREUR LOGIN ===');\r\n      console.error('Message:', err.response?.data?.message || err.message);\r\n      \r\n      const errorMessage = err.response?.data?.message || err.message || 'Erreur de connexion';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      console.log('🏁 === FIN LOGIN ===');\r\n    }\r\n  };\r\n\r\n  // === AUTRES FONCTIONS (adaptées) ===\r\n  const logout = async () => {\r\n    try {\r\n      await api.post('auth/logout');\r\n    } catch (err) {\r\n      console.warn('Erreur lors de la déconnexion:', err);\r\n    } finally {\r\n      localStorage.removeItem('auth_token');\r\n      setCurrentUser(null);\r\n      setPermissions([]);\r\n      setHasGlobalAccess(false);\r\n      setIsAuthenticated(false);\r\n      console.log('✅ Déconnexion réussie');\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterData) => {\r\n    try {\r\n      setError(null);\r\n      setIsLoading(true);\r\n      \r\n      const response = await api.post('auth/register', userData);\r\n      \r\n      if (response.token && response.user) {\r\n        localStorage.setItem('auth_token', response.token);\r\n        \r\n        setCurrentUser(response.user);\r\n        setPermissions(getDefaultPermissionsForRole(response.user.nom_role, response.user.niveau_acces));\r\n        setHasGlobalAccess(isUserAdmin(response.user));\r\n        setIsAuthenticated(true);\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || 'Erreur lors de l\\'inscription';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email: string) => {\r\n    try {\r\n      setError(null);\r\n      await api.post('auth/forgot-password', { email });\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || 'Erreur lors de la récupération';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (userData: Partial<Acteur>) => {\r\n    try {\r\n      setError(null);\r\n      const response = await api.put('auth/profile', userData);\r\n      \r\n      if (response.user) {\r\n        setCurrentUser(response.user);\r\n        setHasGlobalAccess(isUserAdmin(response.user));\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || 'Erreur lors de la mise à jour';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // === FONCTIONS PERMISSIONS ===\r\n  const isAdmin = useCallback((): boolean => {\r\n    return isUserAdmin(currentUser);\r\n  }, [currentUser, isUserAdmin]);\r\n\r\n  const isSuperAdmin = useCallback((): boolean => {\r\n    return isUserSuperAdmin(currentUser);\r\n  }, [currentUser, isUserSuperAdmin]);\r\n\r\n  const hasPermission = useCallback((module: string, action: string): boolean => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return true;\r\n    }\r\n\r\n    let permission = permissions.find(p => \r\n      p.nom_module.toUpperCase() === module.toUpperCase()\r\n    );\r\n\r\n    if (!permission) {\r\n      for (const p of permissions) {\r\n        if (p.sous_permissions) {\r\n          permission = p.sous_permissions.find(sp => \r\n            sp.nom_module.toUpperCase() === module.toUpperCase()\r\n          );\r\n          if (permission) break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!permission) return false;\r\n\r\n    switch (action.toLowerCase()) {\r\n      case 'voir':\r\n      case 'view':\r\n        return permission.peut_voir;\r\n      case 'editer':\r\n      case 'edit':\r\n        return permission.peut_editer;\r\n      case 'supprimer':\r\n      case 'delete':\r\n        return permission.peut_supprimer;\r\n      case 'administrer':\r\n      case 'admin':\r\n        return permission.peut_administrer;\r\n      default:\r\n        return false;\r\n    }\r\n  }, [currentUser, permissions, hasGlobalAccess, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const canAccessRoute = useCallback((route: string): boolean => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return true;\r\n    }\r\n\r\n    const cleanRoute = route.startsWith('/') ? route.substring(1) : route;\r\n    \r\n    const routeToModuleMap: { [key: string]: string } = {\r\n      '': 'DASHBOARD',\r\n      'dashboard': 'DASHBOARD',\r\n      'questionnaires': 'QUESTIONNAIRES',\r\n      'formulaires': 'FORMULAIRES',\r\n      'analyses-fonctions': 'ANALYSES',\r\n      'analyses-interpretations': 'ANALYSES',\r\n      'applications': 'APPLICATIONS',\r\n      'organisations': 'ENTREPRISES',\r\n      'admin': 'ADMINISTRATION',\r\n      'admin/users': 'ADMIN_USERS',\r\n      'admin/permissions': 'ADMIN_PERMISSIONS',\r\n      'admin/roles': 'ADMIN_ROLES',\r\n      'admin/maturity-model': 'ADMIN_MATURITY',\r\n      'admin/system': 'ADMIN_SYSTEM',\r\n      'users': 'ADMIN_USERS',\r\n    };\r\n\r\n    let moduleForRoute = null;\r\n    for (const [routePath, moduleName] of Object.entries(routeToModuleMap)) {\r\n      if (cleanRoute.startsWith(routePath)) {\r\n        moduleForRoute = moduleName;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!moduleForRoute) return false;\r\n    \r\n    return hasPermission(moduleForRoute, 'voir');\r\n  }, [currentUser, hasGlobalAccess, hasPermission, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const canAccessAdminModule = useCallback((subModule: string): boolean => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return true;\r\n    }\r\n\r\n    return hasPermission(`ADMIN_${subModule.toUpperCase()}`, 'voir');\r\n  }, [currentUser, hasGlobalAccess, hasPermission, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const getAccessibleModules = useCallback((): Permission[] => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return generateFullAdminPermissions();\r\n    }\r\n    return permissions.filter(permission => permission.peut_voir);\r\n  }, [currentUser, hasGlobalAccess, permissions, generateFullAdminPermissions, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const getAdminSubModules = useCallback((): Permission[] => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      const adminModule = ALL_APP_MODULES.ADMINISTRATION;\r\n      if (adminModule.sous_modules) {\r\n        return Object.values(adminModule.sous_modules).map(sousModule => ({\r\n          nom_module: sousModule.nom_module,\r\n          route_base: sousModule.route_base,\r\n          peut_voir: true,\r\n          peut_editer: true,\r\n          peut_supprimer: true,\r\n          peut_administrer: true\r\n        }));\r\n      }\r\n    }\r\n\r\n    const adminPermission = permissions.find(p => p.nom_module === 'ADMINISTRATION');\r\n    return adminPermission?.sous_permissions?.filter(sp => sp.peut_voir) || [];\r\n  }, [currentUser, hasGlobalAccess, permissions, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const refreshPermissions = useCallback(async (): Promise<void> => {\r\n    if (isAuthenticated) {\r\n      await checkAuthStatus();\r\n    }\r\n  }, [isAuthenticated, checkAuthStatus]);\r\n\r\n  const getAllAppModules = useCallback(() => ALL_APP_MODULES, []);\r\n\r\n  // === EFFET D'INITIALISATION ===\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, [checkAuthStatus]);\r\n\r\n  // === VALEUR DU CONTEXTE ===\r\n  const value = {\r\n    currentUser,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    register,\r\n    forgotPassword,\r\n    updateProfile,\r\n    error,\r\n    permissions,\r\n    hasGlobalAccess,\r\n    hasPermission,\r\n    canAccessRoute,\r\n    canAccessAdminModule,\r\n    getAccessibleModules,\r\n    getAdminSubModules,\r\n    refreshPermissions,\r\n    isAdmin,\r\n    isSuperAdmin,\r\n    getAllAppModules,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;","import React, { useState } from 'react';\r\nimport { \r\n  Box, \r\n  Drawer, \r\n  AppBar, \r\n  Toolbar, \r\n  Typography, \r\n  Divider, \r\n  IconButton, \r\n  List, \r\n  ListItem, \r\n  ListItemButton, \r\n  ListItemIcon, \r\n  ListItemText,\r\n  CssBaseline,\r\n  useTheme,\r\n  useMediaQuery,\r\n  Collapse,\r\n  Badge,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  Menu as MenuIcon,\r\n  Dashboard as DashboardIcon,\r\n  Computer as ComputerIcon,\r\n  Assessment as AssessmentIcon,\r\n  People as PeopleIcon,\r\n  BusinessCenter as BusinessIcon,\r\n  QuestionAnswer as QuestionIcon,\r\n  ChevronLeft as ChevronLeftIcon,\r\n  Assignment as AssignmentIcon,\r\n  AdminPanelSettings as AdminIcon,\r\n  ExpandLess,\r\n  ExpandMore,\r\n  Security as SecurityIcon,\r\n  AccountCircle as RoleIcon,\r\n  Settings as SettingsIcon,\r\n  ModelTraining as MaturityIcon,\r\n  Logout as LogoutIcon,\r\n  Business as OrganizationIcon\r\n} from '@mui/icons-material';\r\nimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst drawerWidth = 280; // Largeur augmentée pour les sous-menus\r\n\r\n// Configuration des éléments de menu avec permissions\r\ninterface MenuItem {\r\n  text: string;\r\n  icon: React.ReactElement;\r\n  path?: string;\r\n  module?: string;\r\n  action?: string;\r\n  subItems?: MenuItem[];\r\n  adminOnly?: boolean;\r\n  divider?: boolean;\r\n}\r\n\r\nconst MainLayout: React.FC = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\r\n  const [open, setOpen] = useState(!isMobile);\r\n  const [adminMenuOpen, setAdminMenuOpen] = useState(false);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { \r\n    currentUser, \r\n    hasPermission, \r\n    canAccessRoute, \r\n    canAccessAdminModule,\r\n    isAdmin,\r\n    isSuperAdmin,\r\n    logout,\r\n    getAdminSubModules\r\n  } = useAuth();\r\n\r\n  // Configuration des éléments de menu avec la nouvelle structure\r\n  const menuItems: MenuItem[] = [\r\n    {\r\n      text: 'Dashboard',\r\n      icon: <DashboardIcon />,\r\n      path: '/',\r\n      module: 'DASHBOARD',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Analyses & Recommandations',\r\n      icon: <AssessmentIcon />,\r\n      path: '/analyses-fonctions',\r\n      module: 'ANALYSES',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Formulaires',\r\n      icon: <AssignmentIcon />,\r\n      path: '/formulaires',\r\n      module: 'FORMULAIRES',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Questionnaires',\r\n      icon: <QuestionIcon />,\r\n      path: '/questionnaires',\r\n      module: 'QUESTIONNAIRES',\r\n      action: 'voir'\r\n    },\r\n      \r\n    // Divider avant administration\r\n    {\r\n      text: '',\r\n      icon: <></>,\r\n      divider: true\r\n    },\r\n    // === MODULE D'ADMINISTRATION UNIFIÉ ===\r\n    {\r\n      text: 'Administration',\r\n      icon: <AdminIcon />,\r\n      module: 'ADMINISTRATION',\r\n      action: 'voir',\r\n      adminOnly: true,\r\n      subItems: [\r\n        {\r\n          text: 'Gestion des Utilisateurs',\r\n          icon: <PeopleIcon />,\r\n          path: '/admin',\r\n          module: 'ADMIN_USERS',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Permissions & Rôles',\r\n          icon: <SecurityIcon />,\r\n          path: '/admin',\r\n          module: 'ADMIN_PERMISSIONS',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Entreprises',\r\n          icon: <BusinessIcon />,\r\n          path: '/admin',\r\n          module: 'ADMINISTRATION',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Modèle de Maturité',\r\n          icon: <MaturityIcon />,\r\n          path: '/admin/maturity-model',\r\n          module: 'ADMIN_MATURITY',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Configuration Système',\r\n          icon: <SettingsIcon />,\r\n          path: '/admin/system',\r\n          module: 'ADMIN_SYSTEM',\r\n          action: 'voir'\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const handleDrawerToggle = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const handleNavigate = (path: string) => {\r\n    navigate(path);\r\n    if (isMobile) {\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleAdminMenuToggle = () => {\r\n    setAdminMenuOpen(!adminMenuOpen);\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      await logout();\r\n      navigate('/auth/login');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la déconnexion:', error);\r\n    }\r\n  };\r\n\r\n  // Fonction pour vérifier si un élément de menu est accessible\r\n  const isMenuItemAccessible = (item: MenuItem): boolean => {\r\n    // Si l'item est marqué admin seulement et l'utilisateur n'est pas admin\r\n    if (item.adminOnly && !isAdmin() && !isSuperAdmin()) {\r\n      return false;\r\n    }\r\n\r\n    // Si l'item a un module et une action spécifiés\r\n    if (item.module && item.action) {\r\n      return hasPermission(item.module, item.action);\r\n    }\r\n\r\n    // Si l'item a un path, vérifier l'accès via la route\r\n    if (item.path) {\r\n      return canAccessRoute(item.path);\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  // Fonction pour vérifier si un élément de menu est actif\r\n  const isMenuItemActive = (item: MenuItem): boolean => {\r\n    if (item.path) {\r\n      // Pour les items d'administration, considérer comme actif si on est sur /admin\r\n      if (item.path === '/admin' && location.pathname.startsWith('/admin')) {\r\n        return true;\r\n      }\r\n      return location.pathname === item.path || location.pathname.startsWith(item.path + '/');\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Fonction pour vérifier si le menu admin contient des éléments actifs\r\n  const isAdminMenuActive = (): boolean => {\r\n    return location.pathname.startsWith('/admin');\r\n  };\r\n\r\n  // Fonction pour rendre un élément de menu\r\n  const renderMenuItem = (item: MenuItem, isSubItem = false) => {\r\n    if (item.divider) {\r\n      return <Divider key=\"divider\" sx={{ my: 1 }} />;\r\n    }\r\n\r\n    if (!isMenuItemAccessible(item)) {\r\n      return null;\r\n    }\r\n\r\n    const isActive = isMenuItemActive(item);\r\n    const hasSubItems = item.subItems && item.subItems.length > 0;\r\n\r\n    return (\r\n      <ListItem key={item.text} disablePadding sx={{ pl: isSubItem ? 4 : 0 }}>\r\n        <ListItemButton \r\n          selected={isActive}\r\n          onClick={() => {\r\n            if (hasSubItems && item.text === 'Administration') {\r\n              handleAdminMenuToggle();\r\n            } else if (item.path) {\r\n              handleNavigate(item.path);\r\n            }\r\n          }}\r\n          sx={{\r\n            borderRadius: 1,\r\n            mx: 1,\r\n            mb: 0.5,\r\n            ...(isActive && {\r\n              backgroundColor: 'primary.main',\r\n              color: 'primary.contrastText',\r\n              '&:hover': {\r\n                backgroundColor: 'primary.dark',\r\n              },\r\n              '& .MuiListItemIcon-root': {\r\n                color: 'primary.contrastText',\r\n              }\r\n            })\r\n          }}\r\n        >\r\n          <ListItemIcon sx={{ minWidth: 40 }}>\r\n            {item.icon}\r\n          </ListItemIcon>\r\n          <ListItemText \r\n            primary={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Typography variant=\"body2\" sx={{ fontWeight: isActive ? 600 : 400 }}>\r\n                  {item.text}\r\n                </Typography>\r\n                {item.adminOnly && (\r\n                  <Chip \r\n                    label=\"Admin\" \r\n                    size=\"small\" \r\n                    color=\"secondary\" \r\n                    sx={{ \r\n                      height: 20, \r\n                      fontSize: '0.7rem',\r\n                      ...(isActive && {\r\n                        backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n                        color: 'inherit'\r\n                      })\r\n                    }} \r\n                  />\r\n                )}\r\n                {hasSubItems && (\r\n                  adminMenuOpen ? <ExpandLess /> : <ExpandMore />\r\n                )}\r\n              </Box>\r\n            }\r\n          />\r\n        </ListItemButton>\r\n      </ListItem>\r\n    );\r\n  };\r\n\r\n  // Fonction pour rendre les sous-éléments d'administration\r\n  const renderAdminSubItems = () => {\r\n    const adminItem = menuItems.find(item => item.text === 'Administration');\r\n    if (!adminItem || !adminItem.subItems) return null;\r\n\r\n    return (\r\n      <Collapse in={adminMenuOpen} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          {adminItem.subItems.map(subItem => {\r\n            if (!isMenuItemAccessible(subItem)) return null;\r\n            \r\n            const isActive = isMenuItemActive(subItem);\r\n            \r\n            return (\r\n              <ListItem key={subItem.text} disablePadding sx={{ pl: 2 }}>\r\n                <ListItemButton \r\n                  selected={isActive}\r\n                  onClick={() => subItem.path && handleNavigate(subItem.path)}\r\n                  sx={{\r\n                    borderRadius: 1,\r\n                    mx: 1,\r\n                    mb: 0.5,\r\n                    backgroundColor: isActive ? 'rgba(0, 0, 0, 0.08)' : 'transparent',\r\n                    '&:hover': {\r\n                      backgroundColor: isActive ? 'rgba(0, 0, 0, 0.12)' : 'rgba(0, 0, 0, 0.04)',\r\n                    }\r\n                  }}\r\n                >\r\n                  <ListItemIcon sx={{ minWidth: 40, ml: 2 }}>\r\n                    {subItem.icon}\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary={\r\n                      <Typography variant=\"body2\" sx={{ fontWeight: isActive ? 600 : 400 }}>\r\n                        {subItem.text}\r\n                      </Typography>\r\n                    }\r\n                  />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      </Collapse>\r\n    );\r\n  };\r\n\r\n  // Auto-ouvrir le menu admin si on est sur une page d'administration\r\n  React.useEffect(() => {\r\n    if (isAdminMenuActive()) {\r\n      setAdminMenuOpen(true);\r\n    }\r\n  }, [location.pathname]);\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex' }}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        sx={{\r\n          zIndex: theme.zIndex.drawer + 1,\r\n          width: { sm: open ? `calc(100% - ${drawerWidth}px)` : '100%' },\r\n          ml: { sm: open ? `${drawerWidth}px` : 0 },\r\n          transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n          }),\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            sx={{ mr: 2 }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Plateforme d'Évaluation de Maturité - DSIN\r\n          </Typography>\r\n          \r\n          {/* Informations utilisateur et déconnexion */}\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n            <Box sx={{ textAlign: 'right', display: { xs: 'none', sm: 'block' } }}>\r\n              <Typography variant=\"body2\" sx={{ opacity: 0.9 }}>\r\n                {currentUser?.nom_prenom}\r\n              </Typography>\r\n              <Typography variant=\"caption\" sx={{ opacity: 0.7 }}>\r\n                {currentUser?.nom_role || currentUser?.role} - {currentUser?.organisation}\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {(isAdmin() || isSuperAdmin()) && (\r\n              <Badge color=\"secondary\" variant=\"dot\">\r\n                <AdminIcon />\r\n              </Badge>\r\n            )}\r\n            \r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={handleLogout}\r\n              title=\"Déconnexion\"\r\n            >\r\n              <LogoutIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n      <Drawer\r\n        variant={isMobile ? \"temporary\" : \"permanent\"}\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        sx={{\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n          [`& .MuiDrawer-paper`]: { \r\n            width: drawerWidth, \r\n            boxSizing: 'border-box',\r\n            ...(isMobile && {\r\n              boxShadow: theme.shadows[8]\r\n            })\r\n          },\r\n        }}\r\n      >\r\n        <Toolbar \r\n          sx={{ \r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between',\r\n            px: 2,\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <img \r\n              src=\"/logo_qwanza.svg\" \r\n              alt=\"Logo\" \r\n              style={{ height: 32, width: 'auto' }}\r\n            />\r\n           </Box>\r\n          <IconButton onClick={handleDrawerToggle}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n        <Divider />\r\n        \r\n        <Box sx={{ overflow: 'auto', flex: 1 }}>\r\n          <List component=\"nav\" sx={{ px: 1, py: 2 }}>\r\n            {menuItems.map((item) => {\r\n              if (item.text === 'Administration') {\r\n                // Traitement spécial pour le menu administration\r\n                return (\r\n                  <React.Fragment key=\"administration\">\r\n                    {renderMenuItem(item)}\r\n                    {renderAdminSubItems()}\r\n                  </React.Fragment>\r\n                );\r\n              }\r\n              return renderMenuItem(item);\r\n            })}\r\n          </List>\r\n        </Box>\r\n\r\n        {/* Footer du drawer avec informations utilisateur */}\r\n        <Box sx={{ p: 2, borderTop: '1px solid', borderColor: 'divider' }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\r\n            <PeopleIcon sx={{ fontSize: 16, color: 'text.secondary' }} />\r\n            <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n              Connecté en tant que:\r\n            </Typography>\r\n          </Box>\r\n          <Typography variant=\"body2\" sx={{ fontWeight: 600, mb: 0.5 }}>\r\n            {currentUser?.nom_prenom}\r\n          </Typography>\r\n          <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n            {currentUser?.nom_role || currentUser?.role}\r\n            {(isAdmin() || isSuperAdmin()) && (\r\n              <Chip \r\n                label=\"Admin\" \r\n                size=\"small\" \r\n                color=\"primary\" \r\n                sx={{ ml: 1, height: 16, fontSize: '0.7rem' }} \r\n              />\r\n            )}\r\n          </Typography>\r\n        </Box>\r\n      </Drawer>\r\n      \r\n      <Box \r\n        component=\"main\" \r\n        sx={{ \r\n          flexGrow: 1, \r\n          p: 3,\r\n          width: { sm: `calc(100% - ${open ? drawerWidth : 0}px)` },\r\n          ml: { sm: open ? `${drawerWidth}px` : 0 },\r\n          transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n          }),\r\n        }}\r\n      >\r\n        <Toolbar /> {/* This creates space for the AppBar */}\r\n        <Outlet />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MainLayout;","// src/layouts/AuthLayout.tsx\r\nimport React from 'react';\r\nimport { Link, Outlet } from 'react-router-dom';\r\n\r\ninterface AuthLayoutProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst AuthLayout: React.FC<AuthLayoutProps> = ({ children }) => {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\r\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <Link to=\"/\">\r\n          <img\r\n            className=\"mx-auto h-12 w-auto\"\r\n            src=\"/logo_qwanza.svg\"\r\n            alt=\"Plateforme Évaluation Maturité DSIN\"\r\n          />\r\n        </Link>\r\n        <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\r\n          Plateforme d'Évaluation Maturité DSIN\r\n        </h2>\r\n      </div>\r\n\r\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\r\n         <Outlet />\r\n        </div>\r\n        \r\n        <div className=\"mt-6 text-center text-sm text-gray-500\">\r\n          <p>© Qwanza 2025 - All right reserved</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthLayout;","// src/pages/auth/Login.tsx - Version corrigée pour éviter les boucles\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Alert,\r\n  CircularProgress,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Paper,\r\n  Container\r\n} from '@mui/material';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\ninterface LocationState {\r\n  from?: {\r\n    pathname: string;\r\n  };\r\n}\r\n\r\nconst Login: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { login, error, isLoading, isAuthenticated } = useAuth();\r\n  \r\n  const [formData, setFormData] = useState({\r\n    email: 'intervenant@qwanza.fr', // Pré-remplir avec l'admin\r\n    password: 'Intervenant@01', // Mot de passe par défaut\r\n    rememberMe: false\r\n  });\r\n  \r\n  const [localError, setLocalError] = useState<string | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  \r\n  // Corriger la redirection par défaut vers '/' au lieu de '/dashboard'\r\n  const from = (location.state as LocationState)?.from?.pathname || '/';\r\n\r\n  // Rediriger si déjà authentifié - OPTIMISÉ pour éviter les boucles\r\n  useEffect(() => {\r\n    // Attendre que le loading soit terminé avant de rediriger\r\n    if (isAuthenticated && !isLoading) {\r\n      console.log('✅ Utilisateur déjà authentifié, redirection vers:', from);\r\n      navigate(from, { replace: true });\r\n    }\r\n  }, [isAuthenticated, isLoading, navigate, from]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, checked } = event.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: name === 'rememberMe' ? checked : value\r\n    }));\r\n    \r\n    // Clear errors when user starts typing\r\n    if (localError) setLocalError(null);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    setLocalError(null);\r\n\r\n    if (!formData.email || !formData.password) {\r\n      setLocalError('Veuillez remplir tous les champs');\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      console.log('🔄 Tentative de connexion avec:', formData.email);\r\n      await login(formData.email, formData.password);\r\n      \r\n      // La redirection se fera automatiquement via useEffect\r\n      console.log('✅ Connexion réussie');\r\n      \r\n    } catch (err: any) {\r\n      console.error('❌ Erreur de connexion:', err);\r\n      setLocalError(err.message || 'Erreur de connexion. Vérifiez vos identifiants.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Affichage de chargement global\r\n  if (isLoading) {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n          <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n            Vérification de l'authentification...\r\n          </Typography>\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <Box\r\n        sx={{\r\n          marginTop: 8,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Paper elevation={3} sx={{ padding: 4, width: '100%' }}>\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n            {/* En-tête amélioré */}\r\n            <Typography \r\n              component=\"h1\" \r\n              variant=\"h4\" \r\n              gutterBottom\r\n              sx={{ \r\n                color: 'primary.main',\r\n                fontWeight: 'bold'\r\n              }}\r\n            >\r\n              eQwanza\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" paragraph>\r\n              Plateforme d'Évaluation de Maturité - Accédez à votre espace\r\n            </Typography>\r\n            \r\n            {/* Affichage des erreurs */}\r\n            {(error || localError) && (\r\n              <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\r\n                {error || localError}\r\n              </Alert>\r\n            )}\r\n            \r\n            <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1, width: '100%' }}>\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Adresse email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                value={formData.email}\r\n                onChange={handleChange}\r\n                disabled={isSubmitting || isLoading}\r\n              />\r\n              \r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Mot de passe\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={formData.password}\r\n                onChange={handleChange}\r\n                disabled={isSubmitting || isLoading}\r\n              />\r\n              \r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    value=\"remember\"\r\n                    color=\"primary\"\r\n                    name=\"rememberMe\"\r\n                    checked={formData.rememberMe}\r\n                    onChange={handleChange}\r\n                    disabled={isSubmitting || isLoading}\r\n                  />\r\n                }\r\n                label=\"Se souvenir de moi\"\r\n              />\r\n              \r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{ mt: 3, mb: 2, py: 1.5 }}\r\n                disabled={isSubmitting || isLoading}\r\n                startIcon={isSubmitting ? <CircularProgress size={20} /> : null}\r\n              >\r\n                {isSubmitting ? 'Connexion en cours...' : 'Se connecter'}\r\n              </Button>\r\n              \r\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\r\n                <Link to=\"/auth/register\" style={{ textDecoration: 'none' }}>\r\n                  <Typography variant=\"body2\" color=\"primary\">\r\n                    Pas encore de compte ? S'inscrire\r\n                  </Typography>\r\n                </Link>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n        \r\n        {/* Aide pour les développeurs - Mise à jour */}\r\n        {process.env.NODE_ENV === 'development' && (\r\n          <Paper elevation={1} sx={{ mt: 2, p: 2, bgcolor: 'info.light', width: '100%' }}>\r\n            <Typography variant=\"caption\" color=\"info.contrastText\">\r\n              <strong>🧪 Mode Développement</strong><br />\r\n              <strong>Email:</strong> admin@qwanza.fr<br />\r\n              <strong>Mot de passe:</strong> ********<br />\r\n              <strong>Rôle:</strong> Administrateur (accès total)<br />\r\n              <em>Ces identifiants sont pré-remplis pour faciliter les tests</em>\r\n            </Typography>\r\n          </Paper>\r\n        )}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../services/api';\r\nimport logger from '../../utils/logger';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Alert,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Tabs,\r\n  Tab,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Avatar,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  Snackbar,\r\n} from '@mui/material';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n} from 'recharts';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport AssessmentIcon from '@mui/icons-material/Assessment';\r\nimport DomainIcon from '@mui/icons-material/Domain';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n\r\n\r\n// Types mis à jour selon la nouvelle structure API\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  secteur: string;\r\n  score_global: number;\r\n}\r\n\r\ninterface SecteurData {\r\n  nom: string;\r\n  nombre_entreprises: number;\r\n  score_moyen: number;\r\n}\r\n\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n  score_global: number;\r\n}\r\n\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n  score_global: number;\r\n  mode_hebergement: string;\r\n  technologie: string;\r\n}\r\n\r\n// Interface mise à jour pour correspondre à la nouvelle structure\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_acteur: string;\r\n  acteur_nom: string;\r\n  id_application: string;\r\n  nom_application: string;\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  id_questionnaire: string;\r\n  questionnaire_nom: string;\r\n  thematiques: string[]; // Array de strings selon la nouvelle structure\r\n  fonctions: string[]; // Array de strings selon la nouvelle structure\r\n  date_creation: string;\r\n  date_modification: string;\r\n  statut: 'Brouillon' | 'Soumis' | 'Validé';\r\n  progression: number;\r\n  total_questions?: number;\r\n  total_reponses?: number;\r\n  score_actuel?: number;\r\n  score_maximum?: number;\r\n}\r\n\r\n// Couleurs pour les graphiques\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658', '#8DD1E1', '#A4DE6C', '#D0ED57'];\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [refreshing, setRefreshing] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n  \r\n  // États pour les données\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [secteurs, setSecteurs] = useState<SecteurData[]>([]);\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [formulaires, setFormulaires] = useState<Formulaire[]>([]);\r\n  \r\n  // États pour les filtres\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [hebergementFilter, setHebergementFilter] = useState<string>('all');\r\n  const [technologieFilter, setTechnologieFilter] = useState<string>('all');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Options de filtrage\r\n  const [hebergementOptions, setHebergementOptions] = useState<string[]>([]);\r\n  const [technologieOptions, setTechnologieOptions] = useState<string[]>([]);\r\n\r\n  // Fonction de récupération des données avec la nouvelle structure API\r\n  const fetchDashboardData = async (isRefresh = false) => {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      if (isRefresh) {\r\n        setRefreshing(true);\r\n      } else {\r\n        setLoading(true);\r\n      }\r\n      setError(null);\r\n\r\n      logger.debug('Chargement des données du dashboard');\r\n\r\n      // Récupération parallèle de toutes les données nécessaires\r\n      const [\r\n        entreprisesResponse,\r\n        fonctionsResponse,\r\n        applicationsResponse,\r\n        formulairesResponse\r\n      ] = await Promise.all([\r\n        api.get('entreprises'),\r\n        api.get('fonctions'),\r\n        api.get('applications'),\r\n        api.get('formulaires') // Utilisation de l'endpoint unifié\r\n      ]);\r\n\r\n      // Normalisation des réponses avec la logique mise à jour\r\n      const entreprisesData = normalizeApiResponse<Entreprise>(entreprisesResponse, 'entreprises');\r\n      const fonctionsData = normalizeApiResponse<Fonction>(fonctionsResponse, 'fonctions');\r\n      const applicationsData = normalizeApiResponse<Application>(applicationsResponse, 'applications');\r\n      const formulairesData = normalizeApiResponse<Formulaire>(formulairesResponse, 'formulaires');\r\n\r\n      // Traitement des données\r\n      setEntreprises(entreprisesData);\r\n      \r\n      // Calculer les statistiques par secteur\r\n      const secteursData = calculerStatistiquesSecteur(entreprisesData);\r\n      setSecteurs(secteursData);\r\n      \r\n      setFonctions(fonctionsData);\r\n      \r\n      // Filtrer les applications avec score valide\r\n      const applicationsAvecScore = applicationsData.filter(app => \r\n        app.score_global !== undefined && app.score_global !== null\r\n      );\r\n      setApplications(applicationsAvecScore);\r\n      \r\n      // Extraire les options de filtrage\r\n      const hebergements = [...new Set(applicationsAvecScore\r\n        .map(app => app.mode_hebergement)\r\n        .filter(Boolean))];\r\n      \r\n      const technologies = [...new Set(applicationsAvecScore\r\n        .map(app => app.technologie)\r\n        .filter(Boolean))];\r\n      \r\n      setHebergementOptions(hebergements);\r\n      setTechnologieOptions(technologies);\r\n      \r\n      // Normaliser les formulaires avec la nouvelle structure\r\n      const normalizedFormulaires = formulairesData.map(form => ({\r\n        ...form,\r\n        // S'assurer que les thématiques et fonctions sont des arrays\r\n        thematiques: Array.isArray(form.thematiques) ? form.thematiques : [],\r\n        fonctions: Array.isArray(form.fonctions) ? form.fonctions : [],\r\n        // Garder la compatibilité avec les anciens champs\r\n        questionnaire_nom: form.questionnaire_nom || 'Questionnaire sans nom',\r\n        acteur_nom: form.acteur_nom || 'Utilisateur inconnu',\r\n        nom_application: form.nom_application || 'Application inconnue'\r\n      }));\r\n      \r\n      setFormulaires(normalizedFormulaires);\r\n\r\n      const duration = performance.now() - startTime;\r\n      logger.info(`Dashboard data loaded successfully in ${Math.round(duration)}ms`, {\r\n        entreprises: entreprisesData.length,\r\n        fonctions: fonctionsData.length,\r\n        applications: applicationsAvecScore.length,\r\n        formulaires: normalizedFormulaires.length\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des données:', error);\r\n      setError('Impossible de charger les données du tableau de bord.');\r\n      logger.error('Erreur chargement dashboard:', error);\r\n    } finally {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n\r\n  // Fonction utilitaire pour normaliser les réponses API\r\n  const normalizeApiResponse = <T,>(response: any, dataType: string): T[] => {\r\n    if (Array.isArray(response)) {\r\n      return response;\r\n    } else if (response && response.data && Array.isArray(response.data)) {\r\n      return response.data;\r\n    } else {\r\n      console.warn(`Format de réponse inattendu pour ${dataType}:`, response);\r\n      logger.warn(`Unexpected response format for ${dataType}`, { response });\r\n      return [];\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n  }, []);\r\n\r\n  // Fonction utilitaire pour gérer les scores null/undefined\r\n  const getScoreWithFallback = (score: any, defaultValue: number = 0): number => {\r\n    if (score === null || score === undefined || isNaN(score)) {\r\n      return defaultValue;\r\n    }\r\n    return parseFloat(score) || defaultValue;\r\n  };\r\n\r\n  const calculerStatistiquesSecteur = (entreprises: Entreprise[]): SecteurData[] => {\r\n    // Regrouper par secteur\r\n    const secteursMap = entreprises.reduce((acc, entreprise) => {\r\n      const secteur = entreprise.secteur || 'Non défini';\r\n      \r\n      if (!acc[secteur]) {\r\n        acc[secteur] = { \r\n          scoreTotal: 0, \r\n          count: 0 \r\n        };\r\n      }\r\n      \r\n      // Utiliser le score avec fallback\r\n      const score = getScoreWithFallback(entreprise.score_global, 0);\r\n      if (score > 0) {\r\n        acc[secteur].scoreTotal += score;\r\n        acc[secteur].count++;\r\n      }\r\n      \r\n      return acc;\r\n    }, {} as Record<string, { scoreTotal: number, count: number }>);\r\n    \r\n    // Convertir en tableau et calculer les moyennes\r\n    return Object.entries(secteursMap)\r\n      .map(([nom, { scoreTotal, count }]) => ({\r\n        nom,\r\n        nombre_entreprises: count,\r\n        score_moyen: count > 0 ? scoreTotal / count : 0\r\n      }))\r\n      .filter(secteur => secteur.nombre_entreprises > 0) // Filtrer les secteurs sans données\r\n      .sort((a, b) => b.score_moyen - a.score_moyen);\r\n  };\r\n\r\n  // Fonction pour formater les scores avec gestion des cas null\r\n  const formatScore = (scoreActuel: any, scoreMaximum: any): string => {\r\n    const actuel = getScoreWithFallback(scoreActuel, 0);\r\n    const maximum = getScoreWithFallback(scoreMaximum, 1);\r\n    \r\n    if (maximum === 0) {\r\n      return \"0 / 0\";\r\n    }\r\n    \r\n    return `${actuel.toFixed(1)} / ${maximum.toFixed(1)}`;\r\n  };\r\n\r\n  // Fonction pour calculer le pourcentage de score avec sécurité\r\n  const calculateScorePercentage = (scoreActuel: any, scoreMaximum: any): number => {\r\n    const actuel = getScoreWithFallback(scoreActuel, 0);\r\n    const maximum = getScoreWithFallback(scoreMaximum, 1);\r\n    \r\n    if (maximum === 0) return 0;\r\n    return (actuel / maximum) * 5; // Convertir en échelle 0-5\r\n  };\r\n\r\n  const countFormulairesByFunction = () => {\r\n    if (!formulaires || !formulaires.length) return [];\r\n    \r\n    logger.debug('Counting formulaires by function', { count: formulaires.length });\r\n    \r\n    // Compter les formulaires par fonction en utilisant la nouvelle structure\r\n    const countByFunction = formulaires.reduce((acc, form) => {\r\n      // Utiliser les fonctions array de la nouvelle structure\r\n      const fonctionsArray = form.fonctions || [];\r\n      \r\n      if (fonctionsArray.length === 0) {\r\n        // Si pas de fonctions, utiliser une catégorie par défaut\r\n        acc['Non défini'] = (acc['Non défini'] || 0) + 1;\r\n      } else {\r\n        // Compter pour chaque fonction\r\n        fonctionsArray.forEach(fonction => {\r\n          acc[fonction] = (acc[fonction] || 0) + 1;\r\n        });\r\n      }\r\n      \r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n    \r\n    // Convertir en format pour graphique et filtrer les entrées vides\r\n    return Object.entries(countByFunction)\r\n      .filter(([name, value]) => name && name.trim() !== '' && value > 0)\r\n      .map(([name, value]) => ({\r\n        name,\r\n        value\r\n      }));\r\n  };\r\n\r\n  const getFilteredApplications = () => {\r\n    if (!applications || !applications.length) return [];\r\n    \r\n    return applications\r\n      .filter(app => \r\n        (hebergementFilter === 'all' || app.mode_hebergement === hebergementFilter) &&\r\n        (technologieFilter === 'all' || app.technologie === technologieFilter)\r\n      )\r\n      .sort((a, b) => {\r\n        const scoreA = getScoreWithFallback(a.score_global, 0);\r\n        const scoreB = getScoreWithFallback(b.score_global, 0);\r\n        return scoreB - scoreA;\r\n      })\r\n      .slice(0, 10);\r\n  };\r\n\r\n  const calculateGlobalFunctionScore = () => {\r\n    if (!fonctions || !fonctions.length) return 'N/A';\r\n    \r\n    const validScores = fonctions\r\n      .map(f => getScoreWithFallback(f.score_global, 0))\r\n      .filter(score => score > 0);\r\n    \r\n    if (!validScores.length) return 'N/A';\r\n    \r\n    const total = validScores.reduce((sum, score) => sum + score, 0);\r\n    return (total / validScores.length).toFixed(2);\r\n  };\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    fetchDashboardData(true);\r\n  };\r\n\r\n  const CustomTooltip = ({ active, payload, label }: {\r\n    active?: boolean;\r\n    payload?: Array<{ value: number }>;\r\n    label?: string;\r\n  }) => {\r\n    if (active && payload?.length) {\r\n      return (\r\n        <Paper sx={{ p: 1 }}>\r\n          <Typography variant=\"body2\">{`${label}`}</Typography>\r\n          <Typography variant=\"body2\">{`Score: ${payload[0].value.toFixed(2)}`}</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Fonction pour déterminer la couleur basée sur le score\r\n  const getScoreColor = (score: number): \"success\" | \"warning\" | \"error\" => {\r\n    if (score >= 3.5) return \"success\";\r\n    if (score >= 2) return \"warning\";\r\n    return \"error\";\r\n  };\r\n\r\n  // Formater la date\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit'\r\n      });\r\n    } catch (e) {\r\n      logger.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n\r\n  if (loading && !refreshing) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n      {successMessage && (\r\n        <Alert \r\n          severity=\"success\" \r\n          sx={{ mb: 2 }} \r\n          onClose={() => setSuccessMessage(null)}\r\n        >\r\n          {successMessage}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* Titre du tableau de bord */}\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2, mb: 2 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Box>\r\n                <Typography component=\"h1\" variant=\"h4\" color=\"primary\" gutterBottom>\r\n                  Tableau de bord de maturité\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  Vue d'ensemble des scores de maturité par secteur, fonction et application.\r\n                </Typography>\r\n              </Box>\r\n              <Box display=\"flex\" gap={1}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<RefreshIcon />}\r\n                  onClick={handleRefresh}\r\n                  disabled={refreshing}\r\n                >\r\n                  {refreshing ? 'Actualisation...' : 'Actualiser'}\r\n                </Button>\r\n        \r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Statistiques globales en format carte */}\r\n        <Grid item xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#0B4E87', mr: 2 }}>\r\n                  <BusinessIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Entreprises</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {entreprises?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                évaluées dans la plateforme\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#4CAF50', mr: 2 }}>\r\n                  <AssessmentIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Fonctions</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {fonctions?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                analysées au total\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#FF9800', mr: 2 }}>\r\n                  <DomainIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Applications</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {applications?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                avec score de maturité\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#F44336', mr: 2 }}>\r\n                  <DescriptionIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Formulaires</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {formulaires?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                renseignés au total\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        {/* Synthèse des entreprises par secteur */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Maturité par Secteur d'Activité\r\n            </Typography>\r\n            {secteurs && secteurs.length > 0 ? (\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart data={secteurs}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"nom\" />\r\n                  <YAxis domain={[0, 5]} />\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Legend />\r\n                  <Bar \r\n                    dataKey=\"score_moyen\" \r\n                    fill=\"#0B4E87\" \r\n                    name=\"Score moyen\"\r\n                    barSize={40}\r\n                  >\r\n                    {secteurs.map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                    ))}\r\n                  </Bar>\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            ) : (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={300} flexDirection=\"column\">\r\n                <Typography variant=\"body1\" color=\"textSecondary\" align=\"center\">\r\n                  Aucune donnée de score disponible\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"textSecondary\" align=\"center\" sx={{ mt: 1 }}>\r\n                  Les scores apparaîtront une fois les analyses de maturité effectuées\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n            <Typography variant=\"caption\" sx={{ display: 'block', mt: 1 }}>\r\n              Nombre d'entreprises par secteur indiqué entre parenthèses\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Nombre de formulaires par fonction */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Formulaires par Fonction\r\n            </Typography>\r\n            {formulaires && formulaires.length > 0 && countFormulairesByFunction().length > 0 ? (\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <PieChart>\r\n                  <Pie\r\n                    data={countFormulairesByFunction()}\r\n                    dataKey=\"value\"\r\n                    nameKey=\"name\"\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    outerRadius={80}\r\n                    fill=\"#8884d8\"\r\n                    label\r\n                  >\r\n                    {countFormulairesByFunction().map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                    ))}\r\n                  </Pie>\r\n                  <Tooltip />\r\n                  <Legend />\r\n                </PieChart>\r\n              </ResponsiveContainer>\r\n            ) : (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={300} flexDirection=\"column\">\r\n                <Typography variant=\"body1\" color=\"textSecondary\" align=\"center\">\r\n                  Aucun formulaire avec fonctions valides\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"textSecondary\" align=\"center\" sx={{ mt: 1 }}>\r\n                  Créez des formulaires liés à des fonctions pour voir les statistiques\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des 10 derniers formulaires */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              10 Derniers Formulaires\r\n            </Typography>\r\n            <Box display=\"flex\" mb={2}>\r\n              <TextField\r\n                size=\"small\"\r\n                placeholder=\"Rechercher un formulaire...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                fullWidth\r\n                InputProps={{ \r\n                  startAdornment: <InputAdornment position=\"start\"><SearchIcon /></InputAdornment> \r\n                }}\r\n              />\r\n            </Box>\r\n            {formulaires\r\n              .filter(form => \r\n                (form.nom_application && form.nom_application.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n                (form.fonctions && form.fonctions.some(f => f.toLowerCase().includes(searchTerm.toLowerCase()))) ||\r\n                (form.acteur_nom && form.acteur_nom.toLowerCase().includes(searchTerm.toLowerCase()))\r\n              )\r\n              .slice(0, 10)\r\n              .map((form, index) => (\r\n                <React.Fragment key={form.id_formulaire || `form-${index}`}>\r\n                  <ListItem\r\n                    component=\"div\"\r\n                    onClick={() => navigate(`/formulaires/${form.id_formulaire}`)}\r\n                    sx={{ \r\n                      borderLeft: '4px solid', \r\n                      borderColor: (() => {\r\n                        const scorePercent = calculateScorePercentage(form.score_actuel, form.score_maximum);\r\n                        return scorePercent >= 3.5 ? '#4CAF50' : \r\n                               scorePercent >= 2 ? '#FF9800' : '#F44336';\r\n                      })(),\r\n                      mb: 1,\r\n                      bgcolor: '#f9f9f9',\r\n                      cursor: 'pointer',\r\n                      '&:hover': {\r\n                        bgcolor: '#f0f0f0',\r\n                      }\r\n                    }}\r\n                  >\r\n                    <ListItemText\r\n                      primary={\r\n                        <Box>\r\n                          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', color: '#0B4E87' }}>\r\n                            Questionnaire: {form.questionnaire_nom}\r\n                          </Typography>\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={0.5}>\r\n                            <Typography variant=\"body2\" component=\"span\">\r\n                              Application: {form.nom_application}\r\n                            </Typography>\r\n                            <Chip \r\n                              label={`Score: ${formatScore(form.score_actuel, form.score_maximum)}`} \r\n                              size=\"small\" \r\n                              color={getScoreColor(calculateScorePercentage(form.score_actuel, form.score_maximum))}\r\n                              sx={{ fontWeight: 'bold' }}\r\n                            />\r\n                          </Box>\r\n                          {form.fonctions && form.fonctions.length > 0 && (\r\n                            <Box mt={0.5}>\r\n                              <Typography variant=\"caption\" color=\"textSecondary\">\r\n                                Fonctions: {form.fonctions.join(', ')}\r\n                              </Typography>\r\n                            </Box>\r\n                          )}\r\n                        </Box>\r\n                      }\r\n                      secondary={\r\n                        <Box mt={1}>\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Typography variant=\"body2\" component=\"span\" sx={{ fontWeight: 'medium' }}>\r\n                              Acteur: {form.acteur_nom}\r\n                            </Typography>\r\n                            <Chip \r\n                              label={form.statut}\r\n                              size=\"small\"\r\n                              color={getScoreColor(form.statut === 'Validé' ? 5 : form.statut === 'Soumis' ? 3 : 1)}\r\n                            />\r\n                          </Box>\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={0.5}>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                              Créé le: {form.date_creation ? formatDate(form.date_creation) : 'Date inconnue'}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                              Modifié le: {form.date_modification ? formatDate(form.date_modification) : 'Date inconnue'}\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                  {index < Math.min(formulaires.length, 10) - 1 && <Divider />}\r\n                </React.Fragment>\r\n              ))}\r\n            {formulaires.filter(form => \r\n              (form.nom_application && form.nom_application.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n              (form.fonctions && form.fonctions.some(f => f.toLowerCase().includes(searchTerm.toLowerCase()))) ||\r\n              (form.acteur_nom && form.acteur_nom.toLowerCase().includes(searchTerm.toLowerCase()))\r\n            ).length === 0 && (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={150}>\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                  Aucun formulaire ne correspond à votre recherche\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Tooltip,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  FileCopy as CloneIcon,\r\n  QuestionAnswer as QuestionIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  nom: string;\r\n  description?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface QuestionnaireStat {\r\n  numQuestions: number;\r\n  numReponses: number;\r\n  numUtilisateurs: number;\r\n}\r\n\r\nconst QuestionnairesIndex: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\r\n  const [questionnaireStats, setQuestionnaireStats] = useState<{ [key: string]: QuestionnaireStat }>({});\r\n  \r\n  // Récupérer tous les questionnaires au chargement\r\n  useEffect(() => {\r\n    fetchQuestionnaires();\r\n  }, []);\r\n\r\n  // Récupérer tous les questionnaires\r\n  const fetchQuestionnaires = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Retirer le préfixe '/api' car il est ajouté par le service api\r\n      const response = await api.get('questionnaires');\r\n      \r\n      // Vérifier et adapter la réponse en fonction de sa structure\r\n      let questionnaireData: Questionnaire[] = [];\r\n      if (Array.isArray(response)) {\r\n        questionnaireData = response;\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        questionnaireData = response.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour questionnaires:', response);\r\n        setError('Format de données inattendu pour les questionnaires');\r\n      }\r\n      \r\n      // Normaliser les données des questionnaires\r\n      const normalizedQuestionnaires = questionnaireData.map((q: any) => ({\r\n        id_questionnaire: q.id_questionnaire,\r\n        nom: q.nom || q.titre || 'Sans nom',\r\n        description: q.description || '',\r\n        date_creation: q.date_creation || new Date().toISOString(),\r\n        date_modification: q.date_modification || q.date_creation || new Date().toISOString()\r\n      }));\r\n      \r\n      setQuestionnaires(normalizedQuestionnaires);\r\n      \r\n      // Récupérer les statistiques pour chaque questionnaire\r\n      // Adapter le chemin pour correspondre à la route backend\r\n      const statsResponse = await api.get('questionnaires/stats');\r\n      \r\n      let statsData = [];\r\n      if (Array.isArray(statsResponse)) {\r\n        statsData = statsResponse;\r\n      } else if (statsResponse && statsResponse.data && Array.isArray(statsResponse.data)) {\r\n        statsData = statsResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les statistiques:', statsResponse);\r\n        // Ne pas mettre d'erreur ici, car les statistiques ne sont pas critiques\r\n      }\r\n      \r\n      // Convertir le tableau en objet pour faciliter l'accès\r\n      // Gérer différents formats possibles dans la réponse\r\n      const statsObj = statsData.reduce((acc: { [key: string]: QuestionnaireStat }, stat: any) => {\r\n        acc[stat.id_questionnaire] = {\r\n          numQuestions: stat.numQuestions || 0,\r\n          numReponses: stat.numReponses || stat.num_evaluations || 0,\r\n          numUtilisateurs: stat.numUtilisateurs || 0\r\n        };\r\n        return acc;\r\n      }, {});\r\n      \r\n      setQuestionnaireStats(statsObj);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des questionnaires:', error);\r\n      setError('Impossible de charger les questionnaires. Veuillez réessayer.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Navigation vers la vue détaillée d'un questionnaire\r\n  const handleViewQuestionnaire = (questionnaire: Questionnaire) => {\r\n    navigate(`/questionnaires/${questionnaire.id_questionnaire}`);\r\n  };\r\n\r\n  // Navigation vers la page d'administration\r\n  const handleGoToAdmin = () => {\r\n    navigate('/questionnaires/admin');\r\n  };\r\n\r\n  // Formater la date en gérant les erreurs potentielles\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        day: '2-digit',\r\n        month: 'short',\r\n        year: 'numeric'\r\n      });\r\n    } catch (e) {\r\n      console.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n\r\n  // Récupérer les statistiques avec une gestion robuste des erreurs\r\n  const getStats = (questionnaireId: string, statType: keyof QuestionnaireStat) => {\r\n    try {\r\n      return questionnaireStats[questionnaireId]?.[statType] || 0;\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Questionnaires d'Évaluation\r\n              </Typography>\r\n              <Box>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  onClick={handleGoToAdmin}\r\n                  sx={{ mr: 1 }}\r\n                >\r\n                  Administration\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={handleGoToAdmin}\r\n                >\r\n                  Nouveau Questionnaire\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des questionnaires */}\r\n        <Grid xs={12}>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Nom</TableCell>\r\n                  <TableCell>Description</TableCell>\r\n                  <TableCell>Questions</TableCell>\r\n                  <TableCell>Réponses</TableCell>\r\n                  <TableCell>Utilisateurs</TableCell>\r\n                  <TableCell>Dernière modification</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {questionnaires.length > 0 ? (\r\n                  questionnaires.map((questionnaire) => (\r\n                    <TableRow key={questionnaire.id_questionnaire} hover>\r\n                      <TableCell>{questionnaire.nom}</TableCell>\r\n                      <TableCell>\r\n                        {questionnaire.description && questionnaire.description.length > 50\r\n                          ? `${questionnaire.description.substring(0, 50)}...`\r\n                          : questionnaire.description || 'Aucune description'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          icon={<QuestionIcon />}\r\n                          label={getStats(questionnaire.id_questionnaire, 'numQuestions')}\r\n                          color={\r\n                            getStats(questionnaire.id_questionnaire, 'numQuestions') > 0 \r\n                              ? 'success' \r\n                              : 'default'\r\n                          }\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {getStats(questionnaire.id_questionnaire, 'numReponses')}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {getStats(questionnaire.id_questionnaire, 'numUtilisateurs')}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {formatDate(questionnaire.date_modification)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Tooltip title=\"Voir les détails\">\r\n                          <IconButton \r\n                            color=\"info\" \r\n                            onClick={() => handleViewQuestionnaire(questionnaire)}\r\n                          >\r\n                            <ExpandMoreIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                ) : (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} align=\"center\">\r\n                      <Typography variant=\"body1\" sx={{ py: 2 }}>\r\n                        Aucun questionnaire disponible\r\n                      </Typography>\r\n                      <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\" \r\n                        startIcon={<AddIcon />}\r\n                        onClick={handleGoToAdmin}\r\n                      >\r\n                        Créer le premier questionnaire\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionnairesIndex;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\n\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Badge,\r\n  IconButton,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Divider,\r\n  Tooltip,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Edit as EditIcon,\r\n  Assessment as AssessmentIcon,\r\n  QuestionAnswer as QuestionIcon,\r\n  People as PeopleIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  nom: string;\r\n  description?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  id_questionnaire: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre: number;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface QuestionnaireStat {\r\n  numQuestions: number;\r\n  numReponses: number;\r\n  numUtilisateurs: number;\r\n}\r\n\r\nconst QuestionnaireDetail: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [questionnaire, setQuestionnaire] = useState<Questionnaire | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [stats, setStats] = useState<QuestionnaireStat | null>(null);\r\n  \r\n  // Charger les données du questionnaire au chargement\r\n  useEffect(() => {\r\n    if (id) {\r\n      fetchQuestionnaireData(id);\r\n    } else {\r\n      setError(\"Identifiant de questionnaire manquant\");\r\n      setLoading(false);\r\n    }\r\n  }, [id]);\r\n  \r\n  // Récupérer les données du questionnaire\r\n  const fetchQuestionnaireData = async (questionnaireId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Récupérer les informations du questionnaire\r\n      const questionnaireResponse = await api.get(`questionnaires/${questionnaireId}`);\r\n      \r\n      // Normaliser la réponse\r\n      let questionnaireData = null;\r\n      if (questionnaireResponse && typeof questionnaireResponse === 'object') {\r\n        if (Array.isArray(questionnaireResponse)) {\r\n          questionnaireData = questionnaireResponse[0]; // Prendre le premier si c'est un tableau\r\n        } else if (questionnaireResponse.data) {\r\n          questionnaireData = questionnaireResponse.data;\r\n        } else {\r\n          questionnaireData = questionnaireResponse;\r\n        }\r\n      }\r\n      \r\n      if (questionnaireData && questionnaireData.id_questionnaire) {\r\n        setQuestionnaire(questionnaireData);\r\n      } else {\r\n        setError(\"Format de réponse inattendu pour le questionnaire\");\r\n        console.warn(\"Format de réponse inattendu pour le questionnaire:\", questionnaireResponse);\r\n      }\r\n      \r\n      // Récupérer les questions\r\n      try {\r\n        const questionsResponse = await api.get(`questionnaires/${questionnaireId}/questions`);\r\n        \r\n        let questionsData = [];\r\n        if (Array.isArray(questionsResponse)) {\r\n          questionsData = questionsResponse;\r\n        } else if (questionsResponse && questionsResponse.data && Array.isArray(questionsResponse.data)) {\r\n          questionsData = questionsResponse.data;\r\n        } else {\r\n          console.warn(\"Format de réponse inattendu pour les questions:\", questionsResponse);\r\n        }\r\n        \r\n        setQuestions(questionsData);\r\n      } catch (questionsError) {\r\n        console.error('Erreur lors du chargement des questions:', questionsError);\r\n        setQuestions([]);\r\n      }\r\n      \r\n      // Récupérer les statistiques\r\n      try {\r\n        let statsResponse;\r\n        try {\r\n          // Essayer d'abord avec le singulier\r\n          statsResponse = await api.get(`questionnaire/stats/${questionnaireId}`);\r\n        } catch (statsSingularError) {\r\n          // Ensuite avec le pluriel\r\n          statsResponse = await api.get(`questionnaires/stats/${questionnaireId}`);\r\n        }\r\n        \r\n        let statsData = null;\r\n        if (statsResponse && typeof statsResponse === 'object') {\r\n          if (statsResponse.data) {\r\n            statsData = statsResponse.data;\r\n          } else {\r\n            statsData = statsResponse;\r\n          }\r\n        }\r\n        \r\n        if (statsData) {\r\n          setStats({\r\n            numQuestions: statsData.numQuestions || statsData.num_questions || 0,\r\n            numReponses: statsData.numReponses || statsData.num_evaluations || 0,\r\n            numUtilisateurs: statsData.numUtilisateurs || statsData.num_utilisateurs || 0\r\n          });\r\n        } else {\r\n          // Statistiques par défaut si aucune donnée n'est disponible\r\n          setStats({\r\n            numQuestions: questions.length,\r\n            numReponses: 0,\r\n            numUtilisateurs: 0\r\n          });\r\n        }\r\n      } catch (statsError) {\r\n        console.error('Erreur lors du chargement des statistiques:', statsError);\r\n        // Statistiques par défaut en cas d'erreur\r\n        setStats({\r\n          numQuestions: questions.length,\r\n          numReponses: 0,\r\n          numUtilisateurs: 0\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des données du questionnaire:', error);\r\n      setError(\"Impossible de charger les données du questionnaire\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Retour à la liste des questionnaires\r\n  const handleBackToList = () => {\r\n    navigate('/questionnaires');\r\n  };\r\n  \r\n  // Navigation vers la page d'administration\r\n  const handleGoToAdmin = () => {\r\n    navigate(`/questionnaires/admin?id=${id}`);\r\n  };\r\n  \r\n  // Formater la date de manière sécurisée\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        day: '2-digit',\r\n        month: 'short',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    } catch (e) {\r\n      console.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  if (error) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            onClick={handleBackToList}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Retour à la liste\r\n          </Button>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n  if (!questionnaire) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\r\n          <Typography variant=\"h5\" color=\"error\" gutterBottom>\r\n            Questionnaire non trouvé\r\n          </Typography>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            onClick={handleBackToList}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Retour à la liste\r\n          </Button>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n  // Trier les questions par ordre\r\n  const sortedQuestions = [...questions].sort((a, b) => \r\n    (a.ordre || 0) - (b.ordre || 0)\r\n  );\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <IconButton color=\"primary\" onClick={handleBackToList} sx={{ mr: 1 }}>\r\n                  <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                  {questionnaire.nom}\r\n                </Typography>\r\n              </Box>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<EditIcon />}\r\n                onClick={handleGoToAdmin}\r\n              >\r\n                Modifier\r\n              </Button>\r\n            </Box>\r\n            \r\n            <Typography variant=\"body1\" paragraph>\r\n              {questionnaire.description || 'Aucune description détaillée disponible.'}\r\n            </Typography>\r\n            \r\n            <Box sx={{ mt: 2, mb: 1 }}>\r\n              <Chip \r\n                label={`Créé le ${formatDate(questionnaire.date_creation || new Date().toISOString())}`} \r\n                variant=\"outlined\" \r\n                size=\"small\" \r\n                sx={{ mr: 1 }}\r\n              />\r\n              <Chip \r\n                label={`Dernière modification: ${formatDate(questionnaire.date_modification || questionnaire.date_creation || new Date().toISOString())}`} \r\n                variant=\"outlined\" \r\n                size=\"small\" \r\n                color=\"info\"\r\n              />\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Statistiques */}\r\n        <Grid xs={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid xs={12} md={4}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Badge \r\n                      badgeContent={stats?.numQuestions || 0} \r\n                      color=\"primary\"\r\n                      max={999}\r\n                      sx={{ mb: 1 }}\r\n                    >\r\n                      <QuestionIcon fontSize=\"large\" />\r\n                    </Badge>\r\n                    <Typography variant=\"body1\" align=\"center\" fontWeight=\"bold\">\r\n                      Questions\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid xs={12} md={4}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Badge \r\n                      badgeContent={stats?.numReponses || 0} \r\n                      color=\"success\"\r\n                      max={999}\r\n                      sx={{ mb: 1 }}\r\n                    >\r\n                      <AssessmentIcon fontSize=\"large\" />\r\n                    </Badge>\r\n                    <Typography variant=\"body1\" align=\"center\" fontWeight=\"bold\">\r\n                      Réponses\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid xs={12} md={4}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Badge \r\n                      badgeContent={stats?.numUtilisateurs || 0} \r\n                      color=\"info\"\r\n                      max={999}\r\n                      sx={{ mb: 1 }}\r\n                    >\r\n                      <PeopleIcon fontSize=\"large\" />\r\n                    </Badge>\r\n                    <Typography variant=\"body1\" align=\"center\" fontWeight=\"bold\">\r\n                      Utilisateurs\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        \r\n        {/* Liste des questions */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Questions ({sortedQuestions.length})\r\n            </Typography>\r\n            \r\n            <Divider sx={{ mb: 2 }} />\r\n            \r\n            {sortedQuestions.length > 0 ? (\r\n              sortedQuestions.map((question) => (\r\n                <Accordion key={question.id_question}>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Grid container spacing={1} alignItems=\"center\">\r\n                      <Grid xs={1}>\r\n                        <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                          {question.ordre || '?'}.\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid xs={10}>\r\n                        <Typography variant=\"body1\">\r\n                          {question.texte || 'Question sans texte'}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid xs={1}>\r\n                        <Tooltip title={`Pondération: ${question.ponderation || 0}`}>\r\n                          <Chip \r\n                            label={question.ponderation || 0} \r\n                            color={\r\n                              question.ponderation >= 4 ? 'error' :\r\n                              question.ponderation >= 3 ? 'warning' :\r\n                              question.ponderation >= 2 ? 'info' : 'default'\r\n                            }\r\n                            size=\"small\"\r\n                          />\r\n                        </Tooltip>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Grid container spacing={2}>\r\n                      <Grid xs={12}>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          <strong>Pondération:</strong> {question.ponderation || 0} \r\n                          {question.ponderation >= 4 ? ' (Critique)' : \r\n                           question.ponderation >= 3 ? ' (Important)' : \r\n                           question.ponderation >= 2 ? ' (Significatif)' : ' (Mineur)'}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          <strong>Ajouté le:</strong> {formatDate(question.date_creation || new Date().toISOString())}\r\n                        </Typography>\r\n                        {question.date_modification && question.date_creation && \r\n                         question.date_modification !== question.date_creation && (\r\n                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n                            <strong>Dernière modification:</strong> {formatDate(question.date_modification)}\r\n                          </Typography>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              ))\r\n            ) : (\r\n              <Box textAlign=\"center\" py={4}>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  Ce questionnaire ne contient aucune question.\r\n                </Typography>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  onClick={handleGoToAdmin}\r\n                  sx={{ mt: 2 }}\r\n                >\r\n                  Ajouter des questions\r\n                </Button>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionnaireDetail;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  TextField,\r\n  IconButton,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Tabs,\r\n  Tab,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Tooltip,\r\n  Alert,\r\n  Snackbar,\r\n  ListItemButton,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  FormHelperText,\r\n  Chip,\r\n  Checkbox,\r\n  ListSubheader\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Save as SaveIcon,\r\n  Close as CloseIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  FileCopy as CloneIcon,\r\n  DragIndicator as DragIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  nom?: string;\r\n  fonction?: string; // Pour la compatibilité\r\n  thematique?: string; // Pour la compatibilité\r\n  description?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  id_questionnaire?: string; // Maintenant optionnel\r\n  id_thematique: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre: number;\r\n  date_creation: string;\r\n  date_modification: string;\r\n  thematique_nom?: string;\r\n}\r\n\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n  description?: string;\r\n  nombre_thematiques?: number;\r\n}\r\n\r\ninterface Thematique {\r\n  id_thematique: string;\r\n  nom: string;\r\n  description?: string;\r\n  id_fonction: string;\r\n  fonction_nom?: string;\r\n}\r\n\r\ninterface QuestionnaireFormValues {\r\n  nom: string;\r\n  description?: string;\r\n  thematiques: string[];\r\n}\r\n\r\ninterface QuestionFormValues {\r\n  id_questionnaire?: string;\r\n  id_thematique: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre?: number | string;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`admin-tabpanel-${index}`}\r\n      aria-labelledby={`admin-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst initialQuestionnaireFormValues: QuestionnaireFormValues = {\r\n  nom: '',\r\n  description: '',\r\n  thematiques: []\r\n};\r\n\r\nconst initialQuestionFormValues: QuestionFormValues = {\r\n  id_thematique: '',\r\n  texte: '',\r\n  ponderation: 1,\r\n  ordre: 0\r\n};\r\n\r\nconst QuestionnaireAdmin: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const questionnaireId = searchParams.get('id');\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\r\n  const [selectedQuestionnaire, setSelectedQuestionnaire] = useState<Questionnaire | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [thematiques, setThematiques] = useState<Thematique[]>([]);\r\n  const [selectedThematiques, setSelectedThematiques] = useState<string[]>([]);\r\n  const [loadingFonctions, setLoadingFonctions] = useState<boolean>(false);\r\n  const [loadingThematiques, setLoadingThematiques] = useState<boolean>(false);\r\n  \r\n  // États pour les formulaires\r\n  const [questionnaireFormValues, setQuestionnaireFormValues] = useState<QuestionnaireFormValues>(initialQuestionnaireFormValues);\r\n  const [questionFormValues, setQuestionFormValues] = useState<QuestionFormValues>(initialQuestionFormValues);\r\n  \r\n  // États pour les dialogues\r\n  const [openQuestionnaireDialog, setOpenQuestionnaireDialog] = useState<boolean>(false);\r\n  const [openQuestionDialog, setOpenQuestionDialog] = useState<boolean>(false);\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState<boolean>(false);\r\n  const [openDeleteQuestionDialog, setOpenDeleteQuestionDialog] = useState<boolean>(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState<Question | null>(null);\r\n  \r\n  // État pour les notifications\r\n  const [snackbar, setSnackbar] = useState<{\r\n    open: boolean;\r\n    message: string;\r\n    severity: 'success' | 'info' | 'warning' | 'error';\r\n  }>({\r\n    open: false,\r\n    message: '',\r\n    severity: 'info'\r\n  });\r\n  \r\n  // États pour le mode d'édition\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [questionDialogMode, setQuestionDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Chargement initial\r\n  useEffect(() => {\r\n    console.log('🚀 Initialisation du composant QuestionnaireAdmin');\r\n    \r\n    const loadData = async () => {\r\n      try {\r\n        // Charger d'abord les fonctions et thématiques\r\n        await Promise.all([\r\n          fetchFonctions(),\r\n          fetchThematiques()\r\n        ]);\r\n        \r\n        // Puis charger les questionnaires\r\n        await fetchQuestionnaires();\r\n        \r\n        // Si un ID de questionnaire est spécifié, le charger\r\n        if (questionnaireId) {\r\n          console.log('🎯 Chargement du questionnaire spécifique:', questionnaireId);\r\n          await fetchQuestionnaireById(questionnaireId);\r\n          setTabValue(1); // Aller à l'onglet des questions\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Erreur lors du chargement initial:', error);\r\n      }\r\n    };\r\n    \r\n    loadData();\r\n  }, [questionnaireId]);\r\n\r\n  // Récupérer toutes les thématiques\r\n  const fetchThematiques = async () => {\r\n    setLoadingThematiques(true);\r\n    try {\r\n      console.log('🔍 Chargement des thématiques...');\r\n      const response = await api.get('thematiques');\r\n      const data = Array.isArray(response) ? response : response.data || [];\r\n      console.log('✅ Thématiques reçues:', data.length);\r\n      setThematiques(data);\r\n    } catch (error) {\r\n      console.error('❌ Erreur lors du chargement des thématiques:', error);\r\n      setThematiques([]);\r\n    } finally {\r\n      setLoadingThematiques(false);\r\n    }\r\n  };\r\n  \r\n  // Récupérer tous les questionnaires\r\n  const fetchQuestionnaires = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('🔍 Chargement des questionnaires...');\r\n      const response = await api.get('questionnaires');\r\n      console.log('✅ Questionnaires reçus:', response);\r\n      \r\n      let questionnaireData = [];\r\n      if (Array.isArray(response)) {\r\n        questionnaireData = response;\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        questionnaireData = response.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour questionnaires:', response);\r\n        setError('Format de données inattendu pour les questionnaires');\r\n        questionnaireData = [];\r\n      }\r\n      \r\n      setQuestionnaires(questionnaireData);\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors du chargement des questionnaires:', error);\r\n      showSnackbar('Erreur lors du chargement des questionnaires.', 'error');\r\n      setError('Impossible de charger les questionnaires');\r\n      setQuestionnaires([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Récupérer toutes les fonctions\r\n  const fetchFonctions = async () => {\r\n    setLoadingFonctions(true);\r\n    \r\n    try {\r\n      console.log('🔍 Chargement des fonctions depuis /fonctions...');\r\n      const response = await api.get('fonctions');\r\n      console.log('✅ Fonctions reçues:', response);\r\n      \r\n      let fonctionsData = [];\r\n      if (Array.isArray(response)) {\r\n        fonctionsData = response;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour fonctions:', response);\r\n        fonctionsData = [];\r\n      }\r\n      \r\n      setFonctions(fonctionsData);\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors du chargement des fonctions:', error);\r\n      showSnackbar('Erreur lors du chargement des fonctions.', 'warning');\r\n      setFonctions([]);\r\n    } finally {\r\n      setLoadingFonctions(false);\r\n    }\r\n  };\r\n  \r\n  // Récupérer un questionnaire par son ID\r\n  const fetchQuestionnaireById = async (id: string) => {\r\n    try {\r\n      console.log('🔍 Chargement du questionnaire:', id);\r\n      const questionnaireResponse = await api.get(`questionnaires/${id}`);\r\n      console.log('✅ Questionnaire reçu:', questionnaireResponse);\r\n      \r\n      let questionnaireData = null;\r\n      if (questionnaireResponse && typeof questionnaireResponse === 'object') {\r\n        if (Array.isArray(questionnaireResponse)) {\r\n          questionnaireData = questionnaireResponse[0];\r\n        } else if (questionnaireResponse.data) {\r\n          questionnaireData = questionnaireResponse.data;\r\n        } else {\r\n          questionnaireData = questionnaireResponse;\r\n        }\r\n      }\r\n      \r\n      if (questionnaireData && questionnaireData.id_questionnaire) {\r\n        setSelectedQuestionnaire(questionnaireData);\r\n      }\r\n      \r\n      // Récupérer les questions\r\n      try {\r\n        console.log('🔍 Chargement des questions pour:', id);\r\n        const questionsResponse = await api.get(`questionnaires/${id}/questions`);\r\n        console.log('✅ Questions reçues:', questionsResponse);\r\n        \r\n        let questionsData = [];\r\n        if (Array.isArray(questionsResponse)) {\r\n          questionsData = questionsResponse;\r\n        } else if (questionsResponse && questionsResponse.data && Array.isArray(questionsResponse.data)) {\r\n          questionsData = questionsResponse.data;\r\n        }\r\n        \r\n        setQuestions(questionsData.sort((a: Question, b: Question) => (a.ordre || 0) - (b.ordre || 0)));\r\n      } catch (questionsError: any) {\r\n        console.error('❌ Erreur lors du chargement des questions:', questionsError);\r\n        setQuestions([]);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors du chargement du questionnaire:', error);\r\n      showSnackbar('Erreur lors du chargement du questionnaire.', 'error');\r\n    }\r\n  };\r\n  \r\n  // Gérer l'ouverture du dialogue de création de questionnaire\r\n  const handleOpenCreateQuestionnaireDialog = () => {\r\n    console.log('🆕 Ouverture du dialogue de création');\r\n    setDialogMode('create');\r\n    setQuestionnaireFormValues(initialQuestionnaireFormValues);\r\n    setSelectedThematiques([]);\r\n    setOpenQuestionnaireDialog(true);\r\n    \r\n    // Charger les thématiques si pas encore fait\r\n    if (thematiques.length === 0) {\r\n      fetchThematiques();\r\n    }\r\n  };\r\n  \r\n  // Gérer l'ouverture du dialogue d'édition de questionnaire\r\n  const handleOpenEditQuestionnaireDialog = async (questionnaire: Questionnaire) => {\r\n    setDialogMode('edit');\r\n    \r\n    // Charger les thématiques du questionnaire\r\n    try {\r\n      const themesResponse = await api.get(`questionnaire-thematiques/${questionnaire.id_questionnaire}/thematiques`);\r\n      const linkedThemes = Array.isArray(themesResponse) ? themesResponse : themesResponse.data || [];\r\n      const themeIds = linkedThemes.map((t: any) => t.id_thematique);\r\n      \r\n      setQuestionnaireFormValues({\r\n        nom: questionnaire.nom || `${questionnaire.fonction || ''} - ${questionnaire.thematique || ''}`,\r\n        description: questionnaire.description || '',\r\n        thematiques: themeIds\r\n      });\r\n      setSelectedThematiques(themeIds);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des thématiques:', error);\r\n      setQuestionnaireFormValues({\r\n        nom: questionnaire.nom || `${questionnaire.fonction || ''} - ${questionnaire.thematique || ''}`,\r\n        description: questionnaire.description || '',\r\n        thematiques: []\r\n      });\r\n      setSelectedThematiques([]);\r\n    }\r\n    \r\n    setOpenQuestionnaireDialog(true);\r\n    \r\n    // Charger toutes les thématiques disponibles si pas encore fait\r\n    if (thematiques.length === 0) {\r\n      fetchThematiques();\r\n    }\r\n  };\r\n  \r\n  // Fermer le dialogue de questionnaire\r\n  const handleCloseQuestionnaireDialog = () => {\r\n    setOpenQuestionnaireDialog(false);\r\n  };\r\n  \r\n  // Soumettre le formulaire de questionnaire\r\n  const handleSubmitQuestionnaire = async () => {\r\n    try {\r\n      console.log('🚀 Soumission du questionnaire');\r\n      \r\n      if (!questionnaireFormValues.nom.trim()) {\r\n        showSnackbar('Le nom est obligatoire.', 'warning');\r\n        return;\r\n      }\r\n      \r\n      if (selectedThematiques.length === 0) {\r\n        showSnackbar('Sélectionnez au moins une thématique.', 'warning');\r\n        return;\r\n      }\r\n\r\n      const questionnaireData = {\r\n        nom: questionnaireFormValues.nom.trim(),\r\n        description: questionnaireFormValues.description,\r\n        thematiques: selectedThematiques\r\n      };\r\n\r\n      console.log('📤 Données à envoyer:', questionnaireData);\r\n\r\n      if (dialogMode === 'create') {\r\n        const response = await api.post('questionnaires', questionnaireData);\r\n        console.log('✅ Questionnaire créé:', response);\r\n        \r\n        await fetchQuestionnaires();\r\n        showSnackbar('Questionnaire créé avec succès.', 'success');\r\n        \r\n        const newId = response?.data?.id_questionnaire || response?.id_questionnaire;\r\n        if (newId) {\r\n          await fetchQuestionnaireById(newId);\r\n          setTabValue(1);\r\n        }\r\n      } else if (dialogMode === 'edit' && selectedQuestionnaire) {\r\n        const response = await api.put(\r\n          `questionnaires/${selectedQuestionnaire.id_questionnaire}`, \r\n          questionnaireData\r\n        );\r\n        console.log('✅ Questionnaire mis à jour:', response);\r\n        \r\n        await fetchQuestionnaires();\r\n        await fetchQuestionnaireById(selectedQuestionnaire.id_questionnaire);\r\n        showSnackbar('Questionnaire mis à jour avec succès.', 'success');\r\n      }\r\n      \r\n      handleCloseQuestionnaireDialog();\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde du questionnaire.', 'error');\r\n    }\r\n  };\r\n  \r\n  // Gérer l'ouverture du dialogue de confirmation de suppression\r\n  const handleOpenDeleteDialog = (questionnaire: Questionnaire) => {\r\n    setSelectedQuestionnaire(questionnaire);\r\n    setOpenDeleteDialog(true);\r\n  };\r\n  \r\n  // Fermer le dialogue de confirmation de suppression\r\n  const handleCloseDeleteDialog = () => {\r\n    setOpenDeleteDialog(false);\r\n  };\r\n  \r\n  // Supprimer un questionnaire\r\n  const handleDeleteQuestionnaire = async () => {\r\n    if (!selectedQuestionnaire) return;\r\n    \r\n    try {\r\n      console.log('🗑️ Suppression du questionnaire:', selectedQuestionnaire.id_questionnaire);\r\n      await api.delete(`questionnaires/${selectedQuestionnaire.id_questionnaire}`);\r\n      console.log('✅ Questionnaire supprimé');\r\n      \r\n      await fetchQuestionnaires();\r\n      setSelectedQuestionnaire(null);\r\n      setQuestions([]);\r\n      setTabValue(0);\r\n      handleCloseDeleteDialog();\r\n      showSnackbar('Questionnaire supprimé avec succès.', 'success');\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors de la suppression du questionnaire:', error);\r\n      showSnackbar('Erreur lors de la suppression du questionnaire.', 'error');\r\n    }\r\n  };\r\n\r\n  // Sélectionner un questionnaire pour l'édition\r\n  const handleSelectQuestionnaire = async (questionnaire: Questionnaire) => {\r\n    setSelectedQuestionnaire(questionnaire);\r\n    await fetchQuestionnaireById(questionnaire.id_questionnaire);\r\n    setTabValue(1);\r\n    navigate(`/questionnaires/admin?id=${questionnaire.id_questionnaire}`, { replace: true });\r\n  };\r\n\r\n  // Gérer le changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Autres fonctions restent identiques...\r\n  \r\n  // Afficher une notification\r\n  const showSnackbar = (message: string, severity: 'success' | 'info' | 'warning' | 'error') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n\r\n  // Fermer la notification\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({ ...snackbar, open: false });\r\n  };\r\n\r\n  // Navigation vers la liste des questionnaires\r\n  const handleBackToList = () => {\r\n    navigate('/questionnaires');\r\n  };\r\n\r\n  if (loading && questionnaires.length === 0) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <IconButton color=\"primary\" onClick={handleBackToList} sx={{ mr: 1 }}>\r\n                  <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                  Administration des Questionnaires\r\n                </Typography>\r\n              </Box>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleOpenCreateQuestionnaireDialog}\r\n              >\r\n                Nouveau Questionnaire\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Onglets */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ width: '100%' }}>\r\n            <Tabs\r\n              value={tabValue}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"Liste des Questionnaires\" />\r\n              \r\n            </Tabs>\r\n\r\n            {/* Onglet Liste des Questionnaires */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Questionnaires disponibles\r\n                </Typography>\r\n                <Divider />\r\n              </Box>\r\n              \r\n              {questionnaires.length > 0 ? (\r\n                <List>\r\n                  {questionnaires.map((questionnaire) => (\r\n                    <ListItemButton\r\n                      key={questionnaire.id_questionnaire}\r\n                      onClick={() => handleSelectQuestionnaire(questionnaire)}\r\n                      selected={selectedQuestionnaire?.id_questionnaire === questionnaire.id_questionnaire}\r\n                      sx={{ \r\n                        borderRadius: 1, \r\n                        mb: 1,\r\n                        border: '1px solid',\r\n                        borderColor: 'divider'\r\n                      }}\r\n                    >\r\n                      <ListItemText\r\n                        primary={\r\n                          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                            {questionnaire.nom }\r\n                          </Typography>\r\n                        }\r\n                        secondary={\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {questionnaire.description || 'Aucune description'}\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <Tooltip title=\"Éditer\">\r\n                          <IconButton \r\n                            edge=\"end\" \r\n                            color=\"primary\" \r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleOpenEditQuestionnaireDialog(questionnaire);\r\n                            }}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Supprimer\">\r\n                          <IconButton \r\n                            edge=\"end\" \r\n                            color=\"error\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleOpenDeleteDialog(questionnaire);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                  ))}\r\n                </List>\r\n              ) : (\r\n                <Box textAlign=\"center\" py={4}>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    Aucun questionnaire disponible.\r\n                  </Typography>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\" \r\n                    startIcon={<AddIcon />}\r\n                    onClick={handleOpenCreateQuestionnaireDialog}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Créer un questionnaire\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </TabPanel>\r\n\r\n            {/* Onglet Gestion des Questions */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              {selectedQuestionnaire ? (\r\n                <>\r\n                  <Card sx={{ mb: 3 }}>\r\n                    <CardHeader \r\n                      title={selectedQuestionnaire.nom || `${selectedQuestionnaire.fonction || 'Sans titre'}`}\r\n                      action={\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          startIcon={<EditIcon />}\r\n                          onClick={() => handleOpenEditQuestionnaireDialog(selectedQuestionnaire)}\r\n                        >\r\n                          Modifier\r\n                        </Button>\r\n                      }\r\n                    />\r\n                    <CardContent>\r\n                      <Typography variant=\"body1\" paragraph>\r\n                        {selectedQuestionnaire.description || 'Aucune description disponible.'}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Questions ({questions.length})\r\n                  </Typography>\r\n                  <Divider sx={{ mb: 2 }} />\r\n                  \r\n                  {questions.length > 0 ? (\r\n                    <Box>\r\n                      {/* Grouper les questions par thématique */}\r\n                      {Object.entries(\r\n                        questions.reduce((acc, question) => {\r\n                          const thematique = question.thematique_nom || 'Sans thématique';\r\n                          if (!acc[thematique]) acc[thematique] = [];\r\n                          acc[thematique].push(question);\r\n                          return acc;\r\n                        }, {} as Record<string, Question[]>)\r\n                      ).map(([thematique, themeQuestions]) => (\r\n                        <Box key={thematique} sx={{ mb: 3 }}>\r\n                          <Typography variant=\"subtitle1\" fontWeight=\"bold\" gutterBottom>\r\n                            {thematique}\r\n                          </Typography>\r\n                          {themeQuestions\r\n                            .sort((a, b) => (a.ordre || 0) - (b.ordre || 0))\r\n                            .map((question) => (\r\n                              <Accordion key={question.id_question}>\r\n                                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                  <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\r\n                                    <Typography sx={{ width: '5%', mr: 1 }}>\r\n                                      <strong>{question.ordre || '?'}.</strong>\r\n                                    </Typography>\r\n                                    <Typography sx={{ width: '80%' }}>\r\n                                      {question.texte || 'Question sans texte'}\r\n                                    </Typography>\r\n                                    <Typography sx={{ width: '15%', textAlign: 'right' }}>\r\n                                      Pond.: {question.ponderation || 0}\r\n                                    </Typography>\r\n                                  </Box>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                    <strong>Pondération:</strong> {question.ponderation || 0}\r\n                                  </Typography>\r\n                                </AccordionDetails>\r\n                              </Accordion>\r\n                            ))}\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                  ) : (\r\n                    <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                      Aucune question trouvée. Les questions sont automatiquement chargées depuis les thématiques sélectionnées.\r\n                    </Alert>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <Box textAlign=\"center\" py={4}>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    Veuillez sélectionner un questionnaire dans l'onglet précédent.\r\n                  </Typography>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => setTabValue(0)}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Retour à la liste\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialog pour créer/modifier un questionnaire */}\r\n      <Dialog open={openQuestionnaireDialog} onClose={handleCloseQuestionnaireDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer un nouveau questionnaire' : 'Modifier le questionnaire'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"nom\"\r\n                  name=\"nom\"\r\n                  label=\"Nom du questionnaire\"\r\n                  value={questionnaireFormValues.nom}\r\n                  onChange={(e) => setQuestionnaireFormValues({...questionnaireFormValues, nom: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  label=\"Description\"\r\n                  multiline\r\n                  rows={3}\r\n                  value={questionnaireFormValues.description || ''}\r\n                  onChange={(e) => setQuestionnaireFormValues({...questionnaireFormValues, description: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <FormControl fullWidth required>\r\n                  <InputLabel>Thématiques</InputLabel>\r\n                  <Select\r\n                    multiple\r\n                    value={selectedThematiques}\r\n                    onChange={(e) => setSelectedThematiques(e.target.value as string[])}\r\n                    renderValue={(selected) => (\r\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                        {selected.map((value) => {\r\n                          const theme = thematiques.find(t => t.id_thematique === value);\r\n                          return <Chip key={value} label={theme?.nom || value} size=\"small\" />;\r\n                        })}\r\n                      </Box>\r\n                    )}\r\n                  >\r\n                    {loadingThematiques ? (\r\n                      <MenuItem disabled>Chargement des thématiques...</MenuItem>\r\n                    ) : thematiques.length === 0 ? (\r\n                      <MenuItem disabled>Aucune thématique disponible</MenuItem>\r\n                    ) : (\r\n                      Object.entries(\r\n                        thematiques.reduce((acc, theme) => {\r\n                          const fonction = theme.fonction_nom || 'Sans fonction';\r\n                          if (!acc[fonction]) acc[fonction] = [];\r\n                          acc[fonction].push(theme);\r\n                          return acc;\r\n                        }, {} as Record<string, Thematique[]>)\r\n                      ).map(([fonction, themes]) => [\r\n                        <ListSubheader key={fonction}>{fonction}</ListSubheader>,\r\n                        ...themes.map((theme) => (\r\n                          <MenuItem key={theme.id_thematique} value={theme.id_thematique}>\r\n                            <Checkbox checked={selectedThematiques.includes(theme.id_thematique)} />\r\n                            <ListItemText \r\n                              primary={theme.nom} \r\n                              secondary={theme.description} \r\n                            />\r\n                          </MenuItem>\r\n                        ))\r\n                      ]).flat()\r\n                    )}\r\n                  </Select>\r\n                  <FormHelperText>Sélectionnez une ou plusieurs thématiques</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseQuestionnaireDialog}>Annuler</Button>\r\n          <Button \r\n            onClick={handleSubmitQuestionnaire} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={!questionnaireFormValues.nom.trim() || selectedThematiques.length === 0}\r\n          >\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression */}\r\n      <Dialog open={openDeleteDialog} onClose={handleCloseDeleteDialog}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer le questionnaire \"{selectedQuestionnaire?.nom || 'Sans titre'}\" ?\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDeleteDialog}>Annuler</Button>\r\n          <Button onClick={handleDeleteQuestionnaire} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Notification */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionnaireAdmin;","import React from 'react';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { fr } from 'date-fns/locale';\r\nimport { TextField, TextFieldProps } from '@mui/material';\r\n\r\ninterface DatePickerWrapperProps {\r\n  label: string;\r\n  value: Date | null;\r\n  onChange: (date: Date | null) => void;\r\n  minDate?: Date;\r\n  maxDate?: Date;\r\n  disabled?: boolean;\r\n  fullWidth?: boolean;\r\n  required?: boolean;\r\n  helperText?: string;\r\n  textFieldProps?: Partial<TextFieldProps>;\r\n}\r\n\r\n/**\r\n * Composant wrapper pour le DatePicker de MUI qui gère la configuration de l'adaptateur\r\n * Ceci facilite l'utilisation cohérente des DatePickers dans l'application\r\n */\r\nconst DatePickerWrapper: React.FC<DatePickerWrapperProps> = ({\r\n  label,\r\n  value,\r\n  onChange,\r\n  minDate,\r\n  maxDate,\r\n  disabled = false,\r\n  fullWidth = true,\r\n  required = false,\r\n  helperText,\r\n  textFieldProps = {}\r\n}) => {\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={fr}>\r\n      <DatePicker\r\n        label={label}\r\n        value={value}\r\n        onChange={onChange}\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        disabled={disabled}\r\n        slotProps={{\r\n          textField: {\r\n            fullWidth,\r\n            required,\r\n            helperText,\r\n            ...textFieldProps\r\n          }\r\n        }}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default DatePickerWrapper;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\nimport { \r\n  Container, \r\n  Grid, \r\n  Paper, \r\n  Typography, \r\n  Box, \r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport { \r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Assessment as AssessmentIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DatePickerWrapper from '../../../components/common/DataPickerWrapper';\r\n\r\n// Types\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n  statut: string;\r\n  type: string;\r\n  hebergement: string;\r\n  architecture_logicielle: string;\r\n  date_mise_en_prod?: string;\r\n  editeur?: string;\r\n  language?: string;\r\n  description?: string;\r\n}\r\n\r\ninterface FormValues {\r\n  nom_application: string;\r\n  statut: string;\r\n  type: string;\r\n  hebergement: string;\r\n  architecture_logicielle: string;\r\n  date_mise_en_prod?: string;\r\n  editeur?: string;\r\n  language?: string;\r\n  description?: string;\r\n}\r\n\r\nconst initialFormValues: FormValues = {\r\n  nom_application: '',\r\n  statut: 'Projet',\r\n  type: 'Build',\r\n  hebergement: 'Cloud',\r\n  architecture_logicielle: 'MVC',\r\n  date_mise_en_prod: undefined,\r\n  editeur: '',\r\n  language: '',\r\n  description: ''\r\n};\r\n\r\nconst Applications: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n  const [currentApplication, setCurrentApplication] = useState<Application | null>(null);\r\n  const [formValues, setFormValues] = useState<FormValues>(initialFormValues);\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState<boolean>(false);\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchApplications();\r\n  }, []);\r\n\r\n  const fetchApplications = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n      const response = await api.get('applications');\r\n      \r\n      // Vérifier si la réponse est un tableau ou si elle a une propriété data qui est un tableau\r\n      if (Array.isArray(response)) {\r\n        setApplications(response);\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        setApplications(response.data);\r\n      } else {\r\n        console.warn('Format de réponse inattendu:', response);\r\n        setApplications([]);\r\n        setError('Format de données inattendu. Impossible de charger les applications.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des applications:', error);\r\n      setError('Impossible de charger les applications. Veuillez réessayer plus tard.');\r\n      setApplications([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleOpenCreateDialog = () => {\r\n    setDialogMode('create');\r\n    setFormValues(initialFormValues);\r\n    setSelectedDate(null);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleOpenEditDialog = (application: Application) => {\r\n    setDialogMode('edit');\r\n    setCurrentApplication(application);\r\n    setFormValues({\r\n      nom_application: application.nom_application,\r\n      statut: application.statut,\r\n      type: application.type,\r\n      hebergement: application.hebergement,\r\n      architecture_logicielle: application.architecture_logicielle,\r\n      date_mise_en_prod: application.date_mise_en_prod,\r\n      editeur: application.editeur || '',\r\n      language: application.language || '',\r\n      description: application.description || ''\r\n    });\r\n    \r\n    // Convertir la date si elle existe\r\n    if (application.date_mise_en_prod) {\r\n      setSelectedDate(new Date(application.date_mise_en_prod));\r\n    } else {\r\n      setSelectedDate(null);\r\n    }\r\n    \r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setCurrentApplication(null);\r\n  };\r\n\r\n  const handleFormChange = (event: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const name = event.target.name as keyof FormValues;\r\n    const value = event.target.value as string;\r\n    \r\n    setFormValues({\r\n      ...formValues,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    setSelectedDate(date);\r\n    if (date) {\r\n      const formattedDate = date.toISOString().split('T')[0];\r\n      setFormValues({\r\n        ...formValues,\r\n        date_mise_en_prod: formattedDate\r\n      });\r\n    } else {\r\n      setFormValues({\r\n        ...formValues,\r\n        date_mise_en_prod: undefined\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n        await api.post('applications', formValues);\r\n      } else if (dialogMode === 'edit' && currentApplication) {\r\n        // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n        await api.put(`applications/${currentApplication.id_application}`, formValues);\r\n      }\r\n      \r\n      fetchApplications();\r\n      handleCloseDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde de l\\'application:', error);\r\n      setError('Erreur lors de la sauvegarde de l\\'application. Veuillez réessayer.');\r\n    }\r\n  };\r\n\r\n  const handleOpenDeleteConfirm = (application: Application) => {\r\n    setCurrentApplication(application);\r\n    setDeleteConfirmOpen(true);\r\n  };\r\n\r\n  const handleCloseDeleteConfirm = () => {\r\n    setDeleteConfirmOpen(false);\r\n    setCurrentApplication(null);\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!currentApplication) return;\r\n    \r\n    try {\r\n      // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n      await api.delete(`applications/${currentApplication.id_application}`);\r\n      fetchApplications();\r\n      handleCloseDeleteConfirm();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de l\\'application:', error);\r\n      setError('Erreur lors de la suppression de l\\'application. Veuillez réessayer.');\r\n    }\r\n  };\r\n\r\n  const handleCalculateScore = (application: Application) => {\r\n    navigate(`/analyses/calculer/${application.id_application}`);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Gestion des applications\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleOpenCreateDialog}\r\n              >\r\n                Nouvelle Application\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des applications */}\r\n        <Grid xs={12}>\r\n          {applications.length === 0 ? (\r\n            <Alert severity=\"info\">\r\n              Aucune application trouvée. Créez votre première application en cliquant sur le bouton ci-dessus.\r\n            </Alert>\r\n          ) : (\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Nom</TableCell>\r\n                    <TableCell>Statut</TableCell>\r\n                    <TableCell>Type</TableCell>\r\n                    <TableCell>Hébergement</TableCell>\r\n                    <TableCell>Architecture</TableCell>\r\n                    <TableCell>Date mise en prod.</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {applications.map((app) => (\r\n                    <TableRow key={app.id_application} hover>\r\n                      <TableCell>{app.nom_application}</TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={app.statut} \r\n                          color={app.statut === 'Projet' ? 'info' : 'success'} \r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={app.type} \r\n                          color={app.type === 'Build' ? 'primary' : 'secondary'} \r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>{app.hebergement}</TableCell>\r\n                      <TableCell>{app.architecture_logicielle}</TableCell>\r\n                      <TableCell>\r\n                        {app.date_mise_en_prod \r\n                          ? new Date(app.date_mise_en_prod).toLocaleDateString('fr-FR') \r\n                          : 'Non définie'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <IconButton \r\n                          color=\"primary\" \r\n                          onClick={() => handleOpenEditDialog(app)}\r\n                          title=\"Modifier l'application\"\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton \r\n                          color=\"error\" \r\n                          onClick={() => handleOpenDeleteConfirm(app)}\r\n                          title=\"Supprimer l'application\"\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                        <IconButton \r\n                          color=\"info\" \r\n                          onClick={() => handleCalculateScore(app)}\r\n                          title=\"Calculer le score de maturité\"\r\n                        >\r\n                          <AssessmentIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialog pour créer/modifier */}\r\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer une nouvelle application' : 'Modifier l\\'application'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"nom_application\"\r\n                  name=\"nom_application\"\r\n                  label=\"Nom de l'application\"\r\n                  value={formValues.nom_application}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"statut-label\">Statut</InputLabel>\r\n                  <Select\r\n                    labelId=\"statut-label\"\r\n                    id=\"statut\"\r\n                    name=\"statut\"\r\n                    value={formValues.statut}\r\n                    label=\"Statut\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"Projet\">Projet</MenuItem>\r\n                    <MenuItem value=\"Run\">Run</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"type-label\">Type</InputLabel>\r\n                  <Select\r\n                    labelId=\"type-label\"\r\n                    id=\"type\"\r\n                    name=\"type\"\r\n                    value={formValues.type}\r\n                    label=\"Type\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"Build\">Build</MenuItem>\r\n                    <MenuItem value=\"Buy\">Buy</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"hebergement-label\">Hébergement</InputLabel>\r\n                  <Select\r\n                    labelId=\"hebergement-label\"\r\n                    id=\"hebergement\"\r\n                    name=\"hebergement\"\r\n                    value={formValues.hebergement}\r\n                    label=\"Hébergement\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"Cloud\">Cloud</MenuItem>\r\n                    <MenuItem value=\"Prem\">Prem</MenuItem>\r\n                    <MenuItem value=\"Hybrid\">Hybrid</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"architecture-label\">Architecture</InputLabel>\r\n                  <Select\r\n                    labelId=\"architecture-label\"\r\n                    id=\"architecture_logicielle\"\r\n                    name=\"architecture_logicielle\"\r\n                    value={formValues.architecture_logicielle}\r\n                    label=\"Architecture\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"ERP\">ERP</MenuItem>\r\n                    <MenuItem value=\"Multitenant SAAS\">Multitenant SAAS</MenuItem>\r\n                    <MenuItem value=\"MVC\">MVC</MenuItem>\r\n                    <MenuItem value=\"Monolithique\">Monolithique</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <DatePickerWrapper\r\n                  label=\"Date de mise en production\"\r\n                  value={selectedDate}\r\n                  onChange={handleDateChange}\r\n                  textFieldProps={{\r\n                    variant: 'outlined'\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"editeur\"\r\n                  name=\"editeur\"\r\n                  label=\"Éditeur\"\r\n                  value={formValues.editeur}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"language\"\r\n                  name=\"language\"\r\n                  label=\"Langage principal\"\r\n                  value={formValues.language}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  label=\"Description\"\r\n                  multiline\r\n                  rows={4}\r\n                  value={formValues.description}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Annuler</Button>\r\n          <Button \r\n            onClick={handleSubmit} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={!formValues.nom_application}\r\n          >\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression */}\r\n      <Dialog open={deleteConfirmOpen} onClose={handleCloseDeleteConfirm}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer l'application \"{currentApplication?.nom_application}\" ?\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDeleteConfirm}>Annuler</Button>\r\n          <Button onClick={handleDelete} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Applications;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\n\r\n  import {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Tabs,\r\n  Tab,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  Radar,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  BarChart,\r\n  Bar,\r\n  Cell\r\n} from 'recharts';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Organisation {\r\n  nom: string;\r\n  nombre_applications: number;\r\n  nombre_analyses: number;\r\n  score_moyen: number;\r\n}\r\n\r\ninterface Analyse {\r\n  idAnalyse: string;\r\n  idApplication: string;\r\n  nomApplication: string;\r\n  scoreGlobal: number;\r\n  interpretation: {\r\n    niveau: string;\r\n    description: string;\r\n    recommandations: string;\r\n  };\r\n  thematiques: {\r\n    thematique: string;\r\n    score: number;\r\n  }[];\r\n  dateAnalyse: string;\r\n}\r\n\r\ninterface ScoreMoyen {\r\n  thematique: string;\r\n  score: number;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`organization-tabpanel-${index}`}\r\n      aria-labelledby={`organization-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Générer des couleurs pour les graphiques\r\nconst COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042', '#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#a4de6c', '#d0ed57'];\r\n\r\n// Composant principal\r\nconst Organisations: React.FC = () => {\r\n  const { name } = useParams<{ name?: string }>();\r\n  const navigate = useNavigate();\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [organisations, setOrganisations] = useState<Organisation[]>([]);\r\n  const [analyses, setAnalyses] = useState<Analyse[]>([]);\r\n  const [scoresMoyens, setScoresMoyens] = useState<ScoreMoyen[]>([]);\r\n  const [selectedOrganisation, setSelectedOrganisation] = useState<string>('');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Charger les organisations et analyses\r\n  useEffect(() => {\r\n    fetchOrganisations().then(() => {\r\n      if (name) {\r\n        setSelectedOrganisation(name);\r\n        fetchAnalysesOrganisation(name);\r\n      }\r\n    });\r\n  }, [name]);\r\n\r\n  // Récupérer toutes les organisations uniques (extraites des acteurs)\r\n  const fetchOrganisations = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await api.get('acteurs');\r\n      \r\n      // Extraire les organisations uniques\r\n      const orgs = [...new Set(response.data.map((acteur: any) => acteur.organisation))].filter(Boolean);\r\n      \r\n      // Préparer les données statistiques des organisations\r\n      const organisationsData: Organisation[] = [];\r\n      \r\n      for (const org of orgs) {\r\n        // Pour chaque organisation, récupérer les statistiques\r\n        try {\r\n          const appCount = await api.get(`acteurs/organisation/${org}/applications/count`);\r\n          const analyses = await api.get(`interpretation/organisation/${org}`);\r\n          \r\n          const scoreTotal = analyses.data.reduce((sum: number, analyse: Analyse) => sum + analyse.scoreGlobal, 0);\r\n          const scoreMoyen = analyses.data.length > 0 ? scoreTotal / analyses.data.length : 0;\r\n          \r\n          organisationsData.push({\r\n            nom: org,\r\n            nombre_applications: appCount.data.count,\r\n            nombre_analyses: analyses.data.length,\r\n            score_moyen: scoreMoyen\r\n          });\r\n        } catch (error) {\r\n          console.error(`Erreur lors de la récupération des statistiques pour ${org}:`, error);\r\n        }\r\n      }\r\n      \r\n      setOrganisations(organisationsData);\r\n      \r\n      if (!name && organisationsData.length > 0) {\r\n        setSelectedOrganisation(organisationsData[0].nom);\r\n        fetchAnalysesOrganisation(organisationsData[0].nom);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des organisations:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Récupérer les analyses d'une organisation\r\n  const fetchAnalysesOrganisation = async (orgName: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const analysesResponse = await api.get(`interpretation/organisation/${orgName}`);\r\n      setAnalyses(analysesResponse.data);\r\n      \r\n      const scoresMoyensResponse = await api.get(`interpretation/organisation/${orgName}/scores-moyens`);\r\n      setScoresMoyens(scoresMoyensResponse.data);\r\n      \r\n      setTabValue(0);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des analyses:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Gérer le changement d'organisation\r\n  const handleOrganisationChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const orgName = event.target.value as string;\r\n    setSelectedOrganisation(orgName);\r\n    navigate(`/organisations/${orgName}`);\r\n  };\r\n\r\n  // Gérer le changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Formater les données pour le radar chart\r\n  const formatForRadarChart = (data: ScoreMoyen[]) => {\r\n    return data.map(item => ({\r\n      thematique: item.thematique,\r\n      score: item.score,\r\n      fullMark: 5\r\n    }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Analyse par Organisation\r\n              </Typography>\r\n              <FormControl sx={{ minWidth: 200 }}>\r\n                <InputLabel id=\"organisation-select-label\">Organisation</InputLabel>\r\n                <Select\r\n                  labelId=\"organisation-select-label\"\r\n                  id=\"organisation-select\"\r\n                  value={selectedOrganisation}\r\n                  onChange={handleOrganisationChange}\r\n                  label=\"Organisation\"\r\n                >\r\n                  {organisations.map((org) => (\r\n                    <MenuItem key={org.nom} value={org.nom}>\r\n                      {org.nom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Box>\r\n            \r\n            {/* Statistiques de l'organisation sélectionnée */}\r\n            {selectedOrganisation && (\r\n              <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                <Grid xs={12} md={4}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" align=\"center\">\r\n                        {organisations.find(org => org.nom === selectedOrganisation)?.nombre_applications || 0}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" align=\"center\">\r\n                        Applications\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid xs={12} md={4}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" align=\"center\">\r\n                        {organisations.find(org => org.nom === selectedOrganisation)?.nombre_analyses || 0}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" align=\"center\">\r\n                        Analyses\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid xs={12} md={4}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" align=\"center\">\r\n                        {(organisations.find(org => org.nom === selectedOrganisation)?.score_moyen || 0).toFixed(2)}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" align=\"center\">\r\n                        Score Moyen\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Onglets */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ width: '100%' }}>\r\n            <Tabs\r\n              value={tabValue}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"Vue d'ensemble\" />\r\n              <Tab label=\"Scores par Thématique\" />\r\n              <Tab label=\"Applications\" />\r\n            </Tabs>\r\n\r\n            {/* Onglet Vue d'ensemble */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Grid container spacing={3}>\r\n                {/* Radar Chart pour les scores par thématique */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Scores moyens par thématique\" />\r\n                    <CardContent>\r\n                      {scoresMoyens.length > 0 ? (\r\n                        <ResponsiveContainer width=\"100%\" height={400}>\r\n                          <RadarChart outerRadius={150} data={formatForRadarChart(scoresMoyens)}>\r\n                            <PolarGrid />\r\n                            <PolarAngleAxis dataKey=\"thematique\" />\r\n                            <PolarRadiusAxis domain={[0, 5]} />\r\n                            <Radar\r\n                              name=\"Score\"\r\n                              dataKey=\"score\"\r\n                              stroke=\"#8884d8\"\r\n                              fill=\"#8884d8\"\r\n                              fillOpacity={0.6}\r\n                            />\r\n                            <Legend />\r\n                          </RadarChart>\r\n                        </ResponsiveContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                {/* Bar Chart pour les scores globaux par application */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Scores globaux par application\" />\r\n                    <CardContent>\r\n                      {analyses.length > 0 ? (\r\n                        <ResponsiveContainer width=\"100%\" height={400}>\r\n                          <BarChart\r\n                            data={analyses.map(analyse => ({\r\n                              name: analyse.nomApplication,\r\n                              score: analyse.scoreGlobal\r\n                            }))}\r\n                            margin={{ top: 5, right: 30, left: 20, bottom: 100 }}\r\n                          >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis \r\n                              dataKey=\"name\" \r\n                              tick={{ angle: -45, textAnchor: 'end' }}\r\n                              height={100}\r\n                            />\r\n                            <YAxis domain={[0, 5]} />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"score\" name=\"Score Global\">\r\n                              {analyses.map((entry, index) => (\r\n                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                              ))}\r\n                            </Bar>\r\n                          </BarChart>\r\n                        </ResponsiveContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                {/* Statistiques par niveau de maturité */}\r\n                <Grid xs={12}>\r\n                  <Card>\r\n                    <CardHeader title=\"Répartition par niveau de maturité\" />\r\n                    <CardContent>\r\n                      {analyses.length > 0 ? (\r\n                        <>\r\n                          <Grid container spacing={2}>\r\n                            {Array.from(new Set(analyses.map(a => a.interpretation.niveau))).map((niveau, index) => {\r\n                              const count = analyses.filter(a => a.interpretation.niveau === niveau).length;\r\n                              const percentage = (count / analyses.length * 100).toFixed(1);\r\n                              \r\n                              return (\r\n                                <Grid xs={6} md={3} key={niveau}>\r\n                                  <Card variant=\"outlined\">\r\n                                    <CardContent sx={{ textAlign: 'center' }}>\r\n                                      <Typography variant=\"h6\" gutterBottom>\r\n                                        {niveau}\r\n                                      </Typography>\r\n                                      <Typography variant=\"h4\" color={COLORS[index % COLORS.length]}>\r\n                                        {count}\r\n                                      </Typography>\r\n                                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                        {percentage}% des applications\r\n                                      </Typography>\r\n                                    </CardContent>\r\n                                  </Card>\r\n                                </Grid>\r\n                              );\r\n                            })}\r\n                          </Grid>\r\n                        </>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Scores par Thématique */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Grid container spacing={3}>\r\n                {/* Tableau des scores moyens par thématique */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Scores moyens par thématique\" />\r\n                    <CardContent>\r\n                      {scoresMoyens.length > 0 ? (\r\n                        <TableContainer>\r\n                          <Table>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>Thématique</TableCell>\r\n                                <TableCell>Score Moyen</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {scoresMoyens.map((score) => (\r\n                                <TableRow key={score.thematique}>\r\n                                  <TableCell>{score.thematique}</TableCell>\r\n                                  <TableCell>\r\n                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                      <Box width=\"50px\" mr={1}>\r\n                                        {score.score.toFixed(2)}\r\n                                      </Box>\r\n                                      <Box flex={1} mr={1}>\r\n                                        <div style={{ \r\n                                          height: '10px', \r\n                                          width: `${score.score / 5 * 100}%`, \r\n                                          backgroundColor: '#8884d8',\r\n                                          borderRadius: '5px'\r\n                                        }} />\r\n                                      </Box>\r\n                                      <Box width=\"30px\">\r\n                                        <Chip \r\n                                          label={score.score >= 4 ? 'A' : \r\n                                                score.score >= 3 ? 'B' : \r\n                                                score.score >= 2 ? 'C' : \r\n                                                score.score >= 1 ? 'D' : 'E'}\r\n                                          size=\"small\"\r\n                                          color={score.score >= 4 ? 'success' : \r\n                                                 score.score >= 3 ? 'info' : \r\n                                                 score.score >= 2 ? 'warning' : \r\n                                                 'error'}\r\n                                        />\r\n                                      </Box>\r\n                                    </Box>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                {/* Détail des applications par thématique */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Détail par application et thématique\" />\r\n                    <CardContent>\r\n                      {scoresMoyens.length > 0 ? (\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                          <Table stickyHeader>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>Application</TableCell>\r\n                                <TableCell>Thématique</TableCell>\r\n                                <TableCell>Score</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {analyses.flatMap((analyse) => \r\n                                analyse.thematiques.map((theme) => (\r\n                                  <TableRow key={`${analyse.idAnalyse}-${theme.thematique}`}>\r\n                                    <TableCell>{analyse.nomApplication}</TableCell>\r\n                                    <TableCell>{theme.thematique}</TableCell>\r\n                                    <TableCell>\r\n                                      <Box display=\"flex\" alignItems=\"center\">\r\n                                        <Box width=\"30px\" mr={1}>\r\n                                          {theme.score.toFixed(1)}\r\n                                        </Box>\r\n                                        <Box flex={1}>\r\n                                          <div style={{ \r\n                                            height: '8px', \r\n                                            width: `${theme.score / 5 * 100}%`, \r\n                                            backgroundColor: '#82ca9d',\r\n                                            borderRadius: '4px'\r\n                                          }} />\r\n                                        </Box>\r\n                                      </Box>\r\n                                    </TableCell>\r\n                                  </TableRow>\r\n                                ))\r\n                              )}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Applications */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Grid container spacing={3}>\r\n                {/* Liste des applications */}\r\n                <Grid xs={12}>\r\n                  <TableContainer component={Paper}>\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Application</TableCell>\r\n                          <TableCell>Score Global</TableCell>\r\n                          <TableCell>Niveau de Maturité</TableCell>\r\n                          <TableCell>Date d'Analyse</TableCell>\r\n                          <TableCell>Actions</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {analyses.map((analyse) => (\r\n                          <TableRow key={analyse.idAnalyse} hover>\r\n                            <TableCell>{analyse.nomApplication}</TableCell>\r\n                            <TableCell>\r\n                              <Box display=\"flex\" alignItems=\"center\">\r\n                                <Box width=\"50px\" mr={1}>\r\n                                  {analyse.scoreGlobal.toFixed(2)}\r\n                                </Box>\r\n                                <Box flex={1}>\r\n                                  <div style={{ \r\n                                    height: '10px', \r\n                                    width: `${analyse.scoreGlobal / 5 * 100}%`,\r\n                                    backgroundColor: COLORS[analyses.indexOf(analyse) % COLORS.length],\r\n                                    borderRadius: '5px'\r\n                                  }} />\r\n                                </Box>\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Chip \r\n                                label={analyse.interpretation.niveau} \r\n                                color={\r\n                                  analyse.scoreGlobal >= 4 ? 'success' : \r\n                                  analyse.scoreGlobal >= 3 ? 'info' : \r\n                                  analyse.scoreGlobal >= 2 ? 'warning' : \r\n                                  'error'\r\n                                }\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              {new Date(analyse.dateAnalyse).toLocaleDateString('fr-FR')}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Button \r\n                                variant=\"outlined\" \r\n                                size=\"small\"\r\n                                onClick={() => navigate(`/analyses-interpretations/${analyse.idAnalyse}`)}\r\n                              >\r\n                                Détails\r\n                              </Button>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Organisations;","// src/pages/dashboard/utils/AnalysesUtils.ts\r\nimport { Analyse, Thematique } from '../types/AnalysesTypes';\r\n\r\n// Fonction pour convertir les thématiques en format pour le RadarChart\r\nexport const convertToRadarData = (thematiques: Thematique[] = []) => {\r\n  // Préparer les données pour le radar chart\r\n  return thematiques.map(theme => ({\r\n    thematique: theme.thematique,\r\n    score: theme.score,\r\n    fullMark: 5 // Score maximum possible\r\n  }));\r\n};\r\n\r\n// Normaliser l'objet analyse pour gérer les différents formats possibles (camelCase vs snake_case)\r\nexport const normalizeAnalyse = (analyse: Analyse): Analyse => {\r\n    // S'assurer que les scores globaux sont des nombres\r\n    const score_global = \r\n      typeof analyse.score_global === 'number' ? analyse.score_global :\r\n      typeof analyse.score_global === 'string' ? parseFloat(analyse.score_global) :\r\n      typeof analyse.scoreGlobal === 'number' ? analyse.scoreGlobal :\r\n      typeof analyse.scoreGlobal === 'string' ? parseFloat(analyse.scoreGlobal) : \r\n      null;\r\n    \r\n    // Normaliser les thématiques s'il y en a\r\n    const thematiques = Array.isArray(analyse.thematiques) \r\n      ? analyse.thematiques.map(theme => ({\r\n          ...theme,\r\n          // S'assurer que le score de la thématique est un nombre\r\n          score: typeof theme.score === 'number' ? theme.score :\r\n                 typeof theme.score === 'string' ? parseFloat(theme.score) : 0,\r\n          // S'assurer que le nombre de réponses est un nombre\r\n          nombre_reponses: typeof theme.nombre_reponses === 'number' ? theme.nombre_reponses :\r\n                          typeof theme.nombre_reponses === 'string' ? parseInt(theme.nombre_reponses, 10) : 0\r\n        }))\r\n      : [];\r\n  \r\n    return {\r\n      ...analyse,\r\n      nom_application: analyse.nom_application || analyse.nom || 'Application inconnue',\r\n      nom: analyse.nom || analyse.nom_application || 'Application inconnue',\r\n      score_global: score_global,\r\n      scoreGlobal: score_global,\r\n      thematiques\r\n    };\r\n  };\r\n\r\n// Fonction pour formater la date\r\nexport const formatDate = (dateString: string) => {\r\n  try {\r\n    return new Date(dateString).toLocaleDateString('fr-FR');\r\n  } catch (e) {\r\n    return 'Date inconnue';\r\n  }\r\n};\r\n\r\n// src/utils/AnalyseUtils.ts\r\n\r\n/**\r\n * Fonction pour obtenir la couleur MUI en fonction du niveau de maturité\r\n */\r\nexport const getNiveauColor = (niveau: string): \"success\" | \"info\" | \"warning\" | \"error\" | \"default\" => {\r\n  // Niveaux numériques\r\n  if (niveau.includes('5') || niveau.includes('Optimisé') || niveau.includes('Avancé')) return 'success';\r\n  if (niveau.includes('4') || niveau.includes('Géré')) return 'success';\r\n  if (niveau.includes('3') || niveau.includes('Mesuré') || niveau.includes('Intermédiaire')) return 'info';\r\n  if (niveau.includes('2') || niveau.includes('Défini')) return 'warning';\r\n  if (niveau.includes('1') || niveau.includes('Initial') || niveau.includes('Faible')) return 'error';\r\n  \r\n  // Niveaux qualitatifs\r\n  if (niveau.includes('Excellent')) return 'success';\r\n  if (niveau.includes('Bon')) return 'info';\r\n  if (niveau.includes('Moyen')) return 'warning';\r\n  if (niveau.includes('Faible')) return 'error';\r\n  \r\n  return 'default';\r\n};\r\n\r\n\r\n/**\r\n * Fonction pour calculer le score moyen d'une liste de scores\r\n */\r\nexport const calculateAverageScore = (scores: number[]): number => {\r\n  if (!scores || scores.length === 0) return 0;\r\n  const sum = scores.reduce((a, b) => a + b, 0);\r\n  return sum / scores.length;\r\n};\r\n\r\n/**\r\n * Fonction pour déterminer le niveau global en fonction du score\r\n */\r\nexport const determineNiveauGlobal = (score: number, fonction?: string): string => {\r\n  // Niveaux par défaut\r\n  if (score >= 4.5) return 'Niveau 5 - Optimisé';\r\n  if (score >= 3.5) return 'Niveau 4 - Géré';\r\n  if (score >= 2.5) return 'Niveau 3 - Mesuré';\r\n  if (score >= 1.5) return 'Niveau 2 - Défini';\r\n  return 'Niveau 1 - Initial';\r\n};\r\n\r\n/**\r\n * Fonction pour générer une recommandation basique en fonction du niveau\r\n */\r\nexport const generateBasicRecommendation = (score: number, fonction?: string): string => {\r\n  if (score >= 4.5) {\r\n    return \"Maintenir l'excellence par l'innovation continue et le partage des bonnes pratiques avec l'écosystème.\";\r\n  }\r\n  if (score >= 3.5) {\r\n    return \"Optimiser les processus existants et développer des mécanismes prédictifs.\";\r\n  }\r\n  if (score >= 2.5) {\r\n    return \"Automatiser davantage les contrôles et améliorer la mesure des performances.\";\r\n  }\r\n  if (score >= 1.5) {\r\n    return \"Standardiser les processus et renforcer le partage de connaissances entre équipes.\";\r\n  }\r\n  return \"Établir les fondations avec une sensibilisation et une formation des équipes.\";\r\n};","import React from 'react';\r\n\r\ninterface StatCardProps {\r\n  title: string;\r\n  value: string | number;\r\n  variant?: 'primary' | 'secondary' | 'accent1' | 'accent2' | 'accent3' | 'accent4';\r\n  size?: 'sm' | 'md' | 'lg';\r\n  subtitle?: string;\r\n  trend?: {\r\n    value: number;\r\n    label?: string;\r\n    isPositive?: boolean;\r\n  };\r\n}\r\n\r\nconst StatCard: React.FC<StatCardProps> = ({\r\n  title,\r\n  value,\r\n  variant = 'primary',\r\n  size = 'md',\r\n  subtitle,\r\n  trend\r\n}) => {\r\n  // Définir les classes basées sur la variante\r\n  const getVariantClasses = () => {\r\n    switch (variant) {\r\n      case 'primary':\r\n        return {\r\n          bg: 'bg-primary-50',\r\n          text: 'text-primary-900',\r\n          border: 'border-primary-200'\r\n        };\r\n      case 'secondary':\r\n        return {\r\n          bg: 'bg-secondary-50',\r\n          text: 'text-secondary-900',\r\n          border: 'border-secondary-200'\r\n        };\r\n      case 'accent1':\r\n        return {\r\n          bg: 'bg-accent1-light bg-opacity-30',\r\n          text: 'text-accent1',\r\n          border: 'border-accent1-light'\r\n        };\r\n      case 'accent2':\r\n        return {\r\n          bg: 'bg-accent2-light bg-opacity-30',\r\n          text: 'text-accent2',\r\n          border: 'border-accent2-light'\r\n        };\r\n      case 'accent3':\r\n        return {\r\n          bg: 'bg-accent3-light bg-opacity-30',\r\n          text: 'text-accent3',\r\n          border: 'border-accent3-light'\r\n        };\r\n      case 'accent4':\r\n        return {\r\n          bg: 'bg-accent4-light bg-opacity-30',\r\n          text: 'text-accent4',\r\n          border: 'border-accent4-light'\r\n        };\r\n      default:\r\n        return {\r\n          bg: 'bg-gray-50',\r\n          text: 'text-gray-900',\r\n          border: 'border-gray-200'\r\n        };\r\n    }\r\n  };\r\n\r\n  // Taille du composant\r\n  const getSizeClasses = () => {\r\n    switch (size) {\r\n      case 'sm':\r\n        return 'p-3';\r\n      case 'lg':\r\n        return 'p-5';\r\n      default:\r\n        return 'p-4';\r\n    }\r\n  };\r\n\r\n  const variantClasses = getVariantClasses();\r\n  const sizeClasses = getSizeClasses();\r\n\r\n  return (\r\n    <div className={`rounded-lg border ${variantClasses.bg} ${variantClasses.border} ${sizeClasses} shadow-card`}>\r\n      <div>\r\n        <p className=\"text-sm font-medium text-gray-500 mb-1\">{title}</p>\r\n        <div className=\"flex items-baseline\">\r\n          <h3 className={`text-2xl font-bold ${variantClasses.text}`}>{value}</h3>\r\n          {subtitle && <p className=\"ml-2 text-sm text-gray-500\">{subtitle}</p>}\r\n        </div>\r\n        \r\n        {trend && (\r\n          <p className=\"mt-1 flex items-center text-sm\">\r\n            <span className={trend.isPositive ? 'text-success-500' : 'text-danger-500'}>\r\n              {trend.isPositive ? '↑' : '↓'} {Math.abs(trend.value)}%\r\n            </span>\r\n            {trend.label && <span className=\"text-gray-500 ml-1\">{trend.label}</span>}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant pour afficher un ensemble de cartes statistiques\r\ninterface StatsGridProps {\r\n  stats: StatCardProps[];\r\n  columns?: 1 | 2 | 3 | 4 | 5 | 6;\r\n  className?: string;\r\n}\r\n\r\nconst StatsGrid: React.FC<StatsGridProps> = ({\r\n  stats,\r\n  columns = 4,\r\n  className = ''\r\n}) => {\r\n  const gridClasses = `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-${columns} gap-4 ${className}`;\r\n  \r\n  return (\r\n    <div className={gridClasses}>\r\n      {stats.map((stat, index) => (\r\n        <StatCard key={index} {...stat} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { StatCard, StatsGrid };","//\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  Box,\r\n  Grid,\r\n  Divider,\r\n  Chip,\r\n  CircularProgress,\r\n  Alert,\r\n  Button,\r\n  Tooltip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from '@mui/material';\r\nimport {\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip as RechartsTooltip,\r\n  Legend,\r\n} from 'recharts';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { StatCard } from '../../components/dashboard/StatsCard';\r\nimport api from '../../services/api';\r\n\r\nconst getNiveauColor = (score) => {\r\n  if (score >= 4) return 'success';\r\n  if (score >= 3) return 'info';\r\n  if (score >= 2) return 'warning';\r\n  return 'error';\r\n};\r\n\r\nconst getNiveauLabel = (score) => {\r\n  if (score >= 4) return 'Optimisé';\r\n  if (score >= 3) return 'Mesuré';\r\n  if (score >= 2) return 'Défini';\r\n  if (score >= 1) return 'Initial';\r\n  return 'Non défini';\r\n};\r\n\r\nconst EntrepriseScoresPanel = ({ entrepriseId }) => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [entreprise, setEntreprise] = useState(null);\r\n  const [analyses, setAnalyses] = useState([]);\r\n  const [historique, setHistorique] = useState([]);\r\n  const [updatingScore, setUpdatingScore] = useState(false);\r\n\r\n  const fetchEntrepriseData = async () => {\r\n    if (!entrepriseId) return;\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const [entrepriseData, analysesResponse, historiqueResponse] = await Promise.all([\r\n        api.get(`/entreprises/${entrepriseId}`),\r\n        api.get(`/analyses/entreprise/${entrepriseId}`),\r\n        api.get(`/historique/entreprise/${entrepriseId}`)\r\n      ]);\r\n      setEntreprise(entrepriseData);\r\n      setAnalyses(Array.isArray(analysesResponse) ? analysesResponse : analysesResponse.data || []);\r\n      setHistorique(historiqueResponse.historique_global || []);\r\n    } catch (err) {\r\n      console.error('Erreur lors de la récupération des données:', err);\r\n      setError('Impossible de charger les données.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const recalculateScore = async () => {\r\n    if (!entrepriseId) return;\r\n    setUpdatingScore(true);\r\n    setError(null);\r\n    try {\r\n      await api.post(`/entreprises/${entrepriseId}/calculer`);\r\n      await fetchEntrepriseData();\r\n    } catch (err) {\r\n      console.error('Erreur lors du recalcul:', err);\r\n      setError('Impossible de recalculer le score.');\r\n    } finally {\r\n      setUpdatingScore(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEntrepriseData();\r\n  }, [entrepriseId]);\r\n\r\n  const prepareChartData = () => {\r\n    if (!historique.length) return [];\r\n    return [...historique]\r\n      .sort((a, b) => new Date(a.date_mesure) - new Date(b.date_mesure))\r\n      .map(item => ({\r\n        date: new Date(item.date_mesure).toLocaleDateString('fr-FR'),\r\n        score: item.score_global || 0,\r\n      }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>;\r\n  }\r\n\r\n  if (!entreprise) {\r\n    return <Alert severity=\"info\">Aucune entreprise sélectionnée.</Alert>;\r\n  }\r\n\r\n  const scoreGlobal = entreprise.score_global || 0;\r\n  const niveauLabel = getNiveauLabel(scoreGlobal);\r\n  const niveauColor = getNiveauColor(scoreGlobal);\r\n  const chartData = prepareChartData();\r\n\r\n  return (\r\n    <Card variant=\"outlined\" sx={{ mb: 3 }}>\r\n      <CardHeader\r\n        title={\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Typography variant=\"h6\">Scores de maturité - {entreprise.nom_entreprise}</Typography>\r\n            <Tooltip title=\"Recalculer le score\">\r\n              <Button\r\n                size=\"small\"\r\n                startIcon={<RefreshIcon />}\r\n                onClick={recalculateScore}\r\n                disabled={updatingScore}\r\n              >\r\n                {updatingScore ? 'Calcul en cours...' : 'Recalculer'}\r\n              </Button>\r\n            </Tooltip>\r\n          </Box>\r\n        }\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={4}>\r\n            <StatCard\r\n              title=\"Score Global\"\r\n              value={typeof scoreGlobal === 'number' ? scoreGlobal.toFixed(2) : '0.00'}\r\n              variant=\"primary\"\r\n              subtitle={<Chip label={niveauLabel} color={niveauColor} />}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8}>\r\n            {chartData.length > 1 ? (\r\n              <Box height={250}>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <LineChart data={chartData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"date\" />\r\n                    <YAxis domain={[0, 5]} />\r\n                    <RechartsTooltip />\r\n                    <Legend />\r\n                    <Line\r\n                      type=\"monotone\"\r\n                      dataKey=\"score\"\r\n                      stroke=\"#0B4E87\"\r\n                      name=\"Score global\"\r\n                      activeDot={{ r: 8, fill: '#0B4E87' }}\r\n                    />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </Box>\r\n            ) : (\r\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height={250}>\r\n                <Typography color=\"text.secondary\">\r\n                  Pas assez de données historiques.\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Divider sx={{ my: 2 }} />\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Analyses des applications ({analyses.length})\r\n            </Typography>\r\n            {analyses.length > 0 ? (\r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Application</TableCell>\r\n                      <TableCell>Score Global</TableCell>\r\n                      <TableCell>Date d'analyse</TableCell>\r\n                      <TableCell>Actions</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {analyses.map((analyse) => (\r\n                      <TableRow key={analyse.id_analyse}>\r\n                        <TableCell>{analyse.nom_application || 'Non spécifié'}</TableCell>\r\n                        <TableCell>\r\n                          {typeof analyse.score_global === 'number' ? analyse.score_global.toFixed(2) : '0.00'}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {new Date(analyse.date_analyse).toLocaleDateString('fr-FR')}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Button\r\n                            size=\"small\"\r\n                            onClick={() => navigate(`/analyses-interpretations/${analyse.id_application}`)}\r\n                          >\r\n                            Détails\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            ) : (\r\n              <Alert severity=\"info\">Aucune analyse disponible pour cette entreprise.</Alert>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EntrepriseScoresPanel;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Autocomplete,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Drawer,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Chip,\r\n  IconButton,\r\n  TableSortLabel,\r\n  TablePagination,\r\n  InputAdornment,\r\n  ToggleButtonGroup,\r\n  ToggleButton,\r\n  Snackbar,\r\n} from '@mui/material';\r\nimport {\r\n  Radar,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  ResponsiveContainer,\r\n  Legend,\r\n} from 'recharts';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { fr } from 'date-fns/locale';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CalculateIcon from '@mui/icons-material/Calculate';\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport AppsTwoToneIcon from '@mui/icons-material/AppsTwoTone';\r\nimport EntrepriseScoresPanel from './EntrepriseScoresPanel';\r\nimport { StatCard } from '../dashboard/StatsCard';\r\nimport { AnalysesInterpretationsUIProps, TabPanelProps } from '../../types/AnalysesTypes';\r\nimport { getNiveauColor, formatDate } from '../../utils/AnalyseUtils';\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`analysis-tabpanel-${index}`}\r\n      aria-labelledby={`analysis-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const AnalysesInterpretationsUI: React.FC<AnalysesInterpretationsUIProps> = ({\r\n  loading,\r\n  error,\r\n  applications,\r\n  entreprises,\r\n  selectedApplication,\r\n  selectedEntreprise,\r\n  analyses,\r\n  selectedAnalyse,\r\n  interpretation,\r\n  historique,\r\n  filteredHistorique,\r\n  tabValue,\r\n  selectedThematique,\r\n  openDialog,\r\n  newAnalyseData,\r\n  interpretationsSummary,\r\n  page,\r\n  rowsPerPage,\r\n  order,\r\n  orderBy,\r\n  searchTerm,\r\n  filters,\r\n  showFilters,\r\n  uniqueThematiques,\r\n  handleApplicationChange,\r\n  handleEntrepriseChange,\r\n  handleAnalyseChange,\r\n  handleThematiqueChange,\r\n  handleTabChange,\r\n  handleOpenNewAnalyseDialog,\r\n  handleCloseDialog,\r\n  addThematique,\r\n  updateThematique,\r\n  removeThematique,\r\n  createNewAnalyse,\r\n  calculateNewAnalyse,\r\n  getScoreGlobal,\r\n  prepareHistoriqueData,\r\n  handleChangePage,\r\n  handleChangeRowsPerPage,\r\n  handleRequestSort,\r\n  getFilteredData,\r\n  getUniqueValues,\r\n  setSearchTerm,\r\n  setFilters,\r\n  setShowFilters,\r\n  fetchAllInterpretations,\r\n  fetchAnalysesByApplication,\r\n  fetchAnalysesByEntreprise,\r\n  fetchHistoriqueByEntreprise,\r\n}) => {\r\n  const [viewMode, setViewMode] = useState<'application' | 'entreprise'>(\r\n    selectedApplication ? 'application' : selectedEntreprise ? 'entreprise' : 'application'\r\n  );\r\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });\r\n\r\n  useEffect(() => {\r\n    if (selectedApplication && !selectedEntreprise) setViewMode('application');\r\n    else if (selectedEntreprise && !selectedApplication) setViewMode('entreprise');\r\n  }, [selectedApplication, selectedEntreprise]);\r\n\r\n  const toggleViewMode = () => {\r\n    if (viewMode === 'application') {\r\n      setViewMode('entreprise');\r\n      if (selectedApplication) {\r\n        const app = applications.find(a => a.id_application === selectedApplication);\r\n        if (app?.id_entreprise) {\r\n          handleEntrepriseChange({ target: { value: app.id_entreprise } } as any);\r\n        }\r\n      }\r\n    } else {\r\n      setViewMode('application');\r\n      if (selectedEntreprise && !selectedApplication) {\r\n        const appsOfEntreprise = applications.filter(a => a.id_entreprise === selectedEntreprise);\r\n        if (appsOfEntreprise.length > 0) {\r\n          handleApplicationChange({ target: { value: appsOfEntreprise[0].id_application } } as any);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const CustomRadarTooltip = ({ active, payload }: any) => {\r\n    if (active && payload?.length) {\r\n      return (\r\n        <Paper sx={{ p: 1 }}>\r\n          <Typography>{`Thématique: ${payload[0].payload.thematique}`}</Typography>\r\n          <Typography>{`Score: ${payload[0].value}`}</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n      >\r\n        <Alert severity={snackbar.severity}>{snackbar.message}</Alert>\r\n      </Snackbar>\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Analyses et Interprétations de Maturité\r\n              </Typography>\r\n              <Box>\r\n                <ToggleButtonGroup\r\n                  value={viewMode}\r\n                  exclusive\r\n                  onChange={(e, newMode) => newMode && toggleViewMode()}\r\n                  color=\"primary\"\r\n                  sx={{ mr: 2 }}\r\n                >\r\n                  <ToggleButton value=\"application\" startIcon={<AppsTwoToneIcon />}>\r\n                    Vue Application\r\n                  </ToggleButton>\r\n                  <ToggleButton value=\"entreprise\" startIcon={<BusinessIcon />}>\r\n                    Vue Entreprise\r\n                  </ToggleButton>\r\n                </ToggleButtonGroup>\r\n                {viewMode === 'application' && (\r\n                  <>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={handleOpenNewAnalyseDialog}\r\n                      sx={{ mr: 1 }}\r\n                    >\r\n                      Nouvelle Analyse\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={calculateNewAnalyse}\r\n                      startIcon={<CalculateIcon />}\r\n                    >\r\n                      Calculer Analyse\r\n                    </Button>\r\n                  </>\r\n                )}\r\n                {viewMode === 'entreprise' && selectedEntreprise && (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => fetchAnalysesByEntreprise(selectedEntreprise)}\r\n                    startIcon={<CalculateIcon />}\r\n                  >\r\n                    Calculer Scores\r\n                  </Button>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n\r\n            <Autocomplete\r\n              options={entreprises}\r\n              getOptionLabel={(option) => option.nom_entreprise}\r\n              value={entreprises.find(e => e.id_entreprise === selectedEntreprise) || null}\r\n              onChange={(e, newValue) => handleEntrepriseChange({ target: { value: newValue?.id_entreprise || '' } } as any)}\r\n              renderInput={(params) => <TextField {...params} label=\"Entreprise\" />}\r\n              sx={{ mb: 2 }}\r\n            />\r\n\r\n            {(viewMode === 'application' || selectedEntreprise) && (\r\n              <Autocomplete\r\n                options={applications.filter(app => !selectedEntreprise || app.id_entreprise === selectedEntreprise)}\r\n                getOptionLabel={(option) => option.nom_application}\r\n                value={applications.find(a => a.id_application === selectedApplication) || null}\r\n                onChange={(e, newValue) => handleApplicationChange({ target: { value: newValue?.id_application || '' } } as any)}\r\n                renderInput={(params) => <TextField {...params} label=\"Application\" />}\r\n                disabled={loading}\r\n              />\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {viewMode === 'entreprise' && selectedEntreprise ? (\r\n          <Grid xs={12}>\r\n            <EntrepriseScoresPanel entrepriseId={selectedEntreprise} />\r\n          </Grid>\r\n        ) : (\r\n          <>\r\n            {selectedAnalyse && (\r\n              <Grid xs={12} md={4}>\r\n                <StatCard\r\n                  title=\"Score Global\"\r\n                  value={getScoreGlobal()}\r\n                  variant=\"primary\"\r\n                  subtitle=\"Maturité\"\r\n                />\r\n              </Grid>\r\n            )}\r\n\r\n            <Grid xs={12}>\r\n              <Paper sx={{ width: '100%', mb: 2 }}>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" p={2}>\r\n                  <Typography variant=\"h6\">Récapitulatif des analyses</Typography>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <TextField\r\n                      size=\"small\"\r\n                      placeholder=\"Rechercher...\"\r\n                      value={searchTerm}\r\n                      onChange={(e) => setSearchTerm(e.target.value)}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <SearchIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      sx={{ mr: 2 }}\r\n                    />\r\n                    <Button startIcon={<FilterListIcon />} onClick={() => setShowFilters(true)}>\r\n                      Filtres\r\n                    </Button>\r\n                    <IconButton onClick={fetchAllInterpretations}>\r\n                      <RefreshIcon />\r\n                    </IconButton>\r\n                  </Box>\r\n                </Box>\r\n\r\n                <Drawer anchor=\"right\" open={showFilters} onClose={() => setShowFilters(false)}>\r\n                  <Box sx={{ width: 300, p: 2 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>Filtres</Typography>\r\n                    <Autocomplete\r\n                      options={getUniqueValues('nom_application')}\r\n                      value={filters.application}\r\n                      onChange={(e, newValue) => setFilters({ ...filters, application: newValue || '' })}\r\n                      renderInput={(params) => <TextField {...params} label=\"Application\" />}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <Autocomplete\r\n                      options={getUniqueValues('niveau_global')}\r\n                      value={filters.niveau}\r\n                      onChange={(e, newValue) => setFilters({ ...filters, niveau: newValue || '' })}\r\n                      renderInput={(params) => <TextField {...params} label=\"Niveau\" />}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Score min\"\r\n                      type=\"number\"\r\n                      value={filters.scoreMin}\r\n                      onChange={(e) => setFilters({ ...filters, scoreMin: e.target.value })}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Score max\"\r\n                      type=\"number\"\r\n                      value={filters.scoreMax}\r\n                      onChange={(e) => setFilters({ ...filters, scoreMax: e.target.value })}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <Button\r\n                      onClick={() => setFilters({ application: '', niveau: '', organisation: '', scoreMin: '', scoreMax: '' })}\r\n                    >\r\n                      Réinitialiser\r\n                    </Button>\r\n                  </Box>\r\n                </Drawer>\r\n\r\n                <TableContainer sx={{ maxHeight: 440 }}>\r\n                  <Table stickyHeader>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'nom_application'}\r\n                            direction={orderBy === 'nom_application' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('nom_application')}\r\n                          >\r\n                            Application\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'id_entreprise'}\r\n                            direction={orderBy === 'id_entreprise' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('id_entreprise')}\r\n                          >\r\n                            Entreprise\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'score_global'}\r\n                            direction={orderBy === 'score_global' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('score_global')}\r\n                          >\r\n                            Score\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'niveau_global'}\r\n                            direction={orderBy === 'niveau_global' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('niveau_global')}\r\n                          >\r\n                            Niveau\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'date_analyse'}\r\n                            direction={orderBy === 'date_analyse' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('date_analyse')}\r\n                          >\r\n                            Date\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>Actions</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {getFilteredData().map((interpretation) => {\r\n                        const entreprise = entreprises.find(e => e.id_entreprise === interpretation.id_entreprise);\r\n                        const entrepriseName = entreprise ? entreprise.nom_entreprise : 'Non spécifiée';\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            key={interpretation.id_analyse}\r\n                            selected={selectedApplication === interpretation.id_application}\r\n                            onClick={() => fetchAnalysesByApplication(interpretation.id_application)}\r\n                            sx={{ cursor: 'pointer' }}\r\n                          >\r\n                            <TableCell>{interpretation.nom_application}</TableCell>\r\n                            <TableCell>{entrepriseName}</TableCell>\r\n                            <TableCell>\r\n                              {typeof interpretation.score_global === 'number'\r\n                                ? interpretation.score_global.toFixed(2)\r\n                                : '0.00'}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Chip\r\n                                label={interpretation.niveau_global}\r\n                                color={getNiveauColor(interpretation.niveau_global)}\r\n                                size=\"small\"\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>{formatDate(interpretation.date_analyse)}</TableCell>\r\n                            <TableCell>\r\n                              <Button\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                color={selectedApplication === interpretation.id_application ? 'secondary' : 'primary'}\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                  fetchAnalysesByApplication(interpretation.id_application);\r\n                                }}\r\n                              >\r\n                                {selectedApplication === interpretation.id_application ? 'Sélectionnée' : 'Sélectionner'}\r\n                              </Button>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                      {getFilteredData().length === 0 && (\r\n                        <TableRow>\r\n                          <TableCell colSpan={6} align=\"center\">\r\n                            Aucune analyse trouvée\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n\r\n                <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25, 50]}\r\n                  component=\"div\"\r\n                  count={interpretationsSummary.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                  labelRowsPerPage=\"Lignes par page:\"\r\n                  labelDisplayedRows={({ from, to, count }) => `${from}-${to} sur ${count}`}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n\r\n            {selectedAnalyse && (\r\n              <>\r\n                <Grid xs={12}>\r\n                  <Card>\r\n                    <CardHeader title=\"Répartition par Thématique\" />\r\n                    <CardContent>\r\n                      {selectedAnalyse.thematiques?.length > 0 ? (\r\n                        <ResponsiveContainer width=\"100%\" height={350}>\r\n                          <RadarChart\r\n                            outerRadius={150}\r\n                            data={selectedAnalyse.thematiques.map(theme => ({\r\n                              thematique: theme.thematique,\r\n                              score: theme.score || 0,\r\n                              fullMark: 5,\r\n                            }))}\r\n                          >\r\n                            <PolarGrid />\r\n                            <PolarAngleAxis dataKey=\"thematique\" />\r\n                            <PolarRadiusAxis angle={30} domain={[0, 5]} />\r\n                            <Radar\r\n                              name=\"Score\"\r\n                              dataKey=\"score\"\r\n                              stroke=\"#0B4E87\"\r\n                              fill=\"#0B4E87\"\r\n                              fillOpacity={0.6}\r\n                            />\r\n                            <Legend />\r\n                            <RechartsTooltip content={<CustomRadarTooltip />} />\r\n                          </RadarChart>\r\n                        </ResponsiveContainer>\r\n                      ) : (\r\n                        <Typography align=\"center\">Aucune donnée de thématique disponible</Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                <Grid xs={12}>\r\n                  <Paper sx={{ width: '100%' }}>\r\n                    <Tabs\r\n                      value={tabValue}\r\n                      onChange={handleTabChange}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      variant=\"fullWidth\"\r\n                    >\r\n                      <Tab label=\"Interprétation\" />\r\n                      <Tab label=\"Détails par Thématique\" />\r\n                      <Tab label=\"Historique\" />\r\n                      <Tab label=\"Analyses Précédentes\" />\r\n                    </Tabs>\r\n\r\n                    <TabPanel value={tabValue} index={0}>\r\n                      {interpretation ? (\r\n                        <Grid container spacing={2}>\r\n                          <Grid xs={12}>\r\n                            <Card>\r\n                              <CardHeader\r\n                                title=\"Niveau de Maturité\"\r\n                                subheader={interpretation.niveau}\r\n                                action={\r\n                                  <Chip\r\n                                    label={interpretation.niveau}\r\n                                    color={getNiveauColor(interpretation.niveau)}\r\n                                    size=\"medium\"\r\n                                  />\r\n                                }\r\n                              />\r\n                              <CardContent>\r\n                                <Typography variant=\"body1\" paragraph>\r\n                                  {interpretation.description}\r\n                                </Typography>\r\n                              </CardContent>\r\n                            </Card>\r\n                          </Grid>\r\n                          <Grid xs={12}>\r\n                            <Card>\r\n                              <CardHeader title=\"Recommandations\" />\r\n                              <CardContent>\r\n                                <Typography variant=\"body1\" paragraph>\r\n                                  {interpretation.recommandations}\r\n                                </Typography>\r\n                              </CardContent>\r\n                            </Card>\r\n                          </Grid>\r\n                        </Grid>\r\n                      ) : (\r\n                        <Alert severity=\"info\">\r\n                          Aucune interprétation disponible.\r\n                        </Alert>\r\n                      )}\r\n                    </TabPanel>\r\n                    {/* Autres onglets inchangés */}\r\n                  </Paper>\r\n                </Grid>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </Grid>\r\n\r\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Créer une nouvelle analyse</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle1\" gutterBottom>\r\n            Application: {applications.find(app => app.id_application === selectedApplication)?.nom_application || 'Non sélectionnée'}\r\n          </Typography>\r\n          <Box sx={{ mt: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>Thématiques et Scores</Typography>\r\n            {newAnalyseData.thematiques.map((theme, index) => (\r\n              <Grid container spacing={2} key={index} sx={{ mb: 2 }}>\r\n                <Grid xs={5}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Thématique\"\r\n                    value={theme.thematique}\r\n                    onChange={(e) => updateThematique(index, 'thematique', e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"number\"\r\n                    label=\"Score\"\r\n                    value={theme.score}\r\n                    inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                    onChange={(e) => updateThematique(index, 'score', parseFloat(e.target.value))}\r\n                  />\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"number\"\r\n                    label=\"Nombre de réponses\"\r\n                    value={theme.nombre_reponses}\r\n                    inputProps={{ min: 0, step: 1 }}\r\n                    onChange={(e) => updateThematique(index, 'nombre_reponses', parseInt(e.target.value))}\r\n                  />\r\n                </Grid>\r\n                <Grid xs={1}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"error\"\r\n                    onClick={() => removeThematique(index)}\r\n                    sx={{ height: '100%' }}\r\n                  >\r\n                    X\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            ))}\r\n            <Button variant=\"outlined\" onClick={addThematique} sx={{ mt: 1 }}>\r\n              Ajouter une thématique\r\n            </Button>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Annuler</Button>\r\n          <Button\r\n            onClick={() => {\r\n              createNewAnalyse().then(() =>\r\n                setSnackbar({ open: true, message: 'Analyse créée avec succès', severity: 'success' })\r\n              ).catch(() =>\r\n                setSnackbar({ open: true, message: 'Erreur lors de la création', severity: 'error' })\r\n              );\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={newAnalyseData.thematiques.length === 0}\r\n          >\r\n            Créer l'analyse\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AnalysesInterpretationsUI;","// src/pages/dashboard/AnalysesInterpretations.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport api from '../../services/api';\r\nimport {\r\n  Application,\r\n  Analyse,\r\n  Interpretation,\r\n  HistoriqueScore,\r\n  Thematique,\r\n  Entreprise,\r\n  InterpretationSummary,\r\n  FilterState\r\n} from '../../types/AnalysesTypes';\r\nimport { normalizeAnalyse } from '../../utils/AnalyseUtils';\r\nimport { AnalysesInterpretationsUI } from '../../components/dashboard/AnalysesInterpretationsUI';\r\n\r\nconst AnalysesInterpretations: React.FC = () => {\r\n  const { id } = useParams<{ id?: string }>();\r\n  const navigate = useNavigate();\r\n  \r\n  // États de chargement et erreurs\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // États principaux liés aux données\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [selectedApplication, setSelectedApplication] = useState<string>('');\r\n  const [analyses, setAnalyses] = useState<Analyse[]>([]);\r\n  const [selectedAnalyse, setSelectedAnalyse] = useState<Analyse | null>(null);\r\n  const [interpretation, setInterpretation] = useState<Interpretation | null>(null);\r\n  const [historique, setHistorique] = useState<HistoriqueScore[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [selectedEntreprise, setSelectedEntreprise] = useState<string>('');\r\n\r\n  // États d'interface utilisateur\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  const [selectedThematique, setSelectedThematique] = useState<string>('');\r\n  const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n  const [newAnalyseData, setNewAnalyseData] = useState<{ id_application: string, thematiques: Thematique[] }>({\r\n    id_application: '',\r\n    thematiques: []\r\n  });\r\n  const [interpretationsSummary, setInterpretationsSummary] = useState<InterpretationSummary[]>([]);\r\n  \r\n  // États pour la pagination et le tri du tableau\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [order, setOrder] = useState<'asc' | 'desc'>('desc');\r\n  const [orderBy, setOrderBy] = useState<keyof InterpretationSummary>('date_analyse');\r\n  \r\n  // États pour le filtrage\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filters, setFilters] = useState<FilterState>({\r\n    application: '',\r\n    niveau: '',\r\n    organisation: '',\r\n    scoreMin: '',\r\n    scoreMax: ''\r\n  });\r\n  const [showFilters, setShowFilters] = useState(false);\r\n\r\n  // Préparation des données dérivées\r\n  const filteredHistorique = selectedThematique\r\n    ? historique.filter(item => item.thematique === selectedThematique)\r\n    : historique;\r\n  \r\n  const uniqueThematiques = [...new Set(historique.map(item => item.thematique))];\r\n\r\n  // Fonctions de chargement des données\r\n  \r\n  // Charger toutes les interprétations\r\n  const fetchAllInterpretations = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Récupérer toutes les interprétations\r\n      const interpretationsResponse = await api.get('interpretations');\r\n      \r\n      // Récupérer tous les mappings application-entreprise\r\n      // si l'API ne fournit pas directement cette relation\r\n      const appEntrepriseMapResponse = await api.get('applications/entreprise-mapping');\r\n      \r\n      if (Array.isArray(interpretationsResponse)) {\r\n        let interpretationsData = interpretationsResponse;\r\n        \r\n        // Si nous avons un mapping application-entreprise, l'utiliser pour enrichir les données\r\n        if (appEntrepriseMapResponse && typeof appEntrepriseMapResponse === 'object') {\r\n          // Créer un mapping d'ID d'application à ID d'entreprise\r\n          const appToEntrepriseMap = {};\r\n          \r\n          // Si le mapping est un tableau d'objets avec id_application et id_entreprise\r\n          if (Array.isArray(appEntrepriseMapResponse)) {\r\n            appEntrepriseMapResponse.forEach(mapping => {\r\n              appToEntrepriseMap[mapping.id_application] = mapping.id_entreprise;\r\n            });\r\n          } \r\n          // Si le mapping est un objet avec des clés d'application et des valeurs d'entreprise\r\n          else {\r\n            Object.keys(appEntrepriseMapResponse).forEach(appId => {\r\n              appToEntrepriseMap[appId] = appEntrepriseMapResponse[appId];\r\n            });\r\n          }\r\n          \r\n          // Enrichir les interprétations avec l'ID d'entreprise\r\n          interpretationsData = interpretationsData.map(interpretation => ({\r\n            ...interpretation,\r\n            id_entreprise: \r\n              // Utiliser l'ID d'entreprise s'il existe déjà\r\n              interpretation.id_entreprise || \r\n              // Sinon, le récupérer depuis le mapping\r\n              (appToEntrepriseMap[interpretation.id_application] || ''),\r\n            // Ajouter une organisation par défaut si elle n'existe pas\r\n            organisation: interpretation.organisation || 'DSIN'\r\n          }));\r\n        } else {\r\n          // Si nous n'avons pas de mapping, juste s'assurer que les champs requis existent\r\n          interpretationsData = interpretationsData.map(interpretation => ({\r\n            ...interpretation,\r\n            id_entreprise: interpretation.id_entreprise || '',\r\n            organisation: interpretation.organisation || 'DSIN'\r\n          }));\r\n        }\r\n        \r\n        // Mettre à jour l'état\r\n        setInterpretationsSummary(interpretationsData);\r\n        console.log(`Chargement de ${interpretationsData.length} interprétations`);\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les interprétations:', interpretationsResponse);\r\n        setInterpretationsSummary([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des interprétations:', error);\r\n      setError('Impossible de charger les interprétations');\r\n      setInterpretationsSummary([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Charger les applications au démarrage\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const [appsResponse, entrepriseResponse] = await Promise.all([\r\n          api.get('applications'),\r\n          api.get('entreprises')\r\n        ]);\r\n  \r\n        if (Array.isArray(appsResponse)) {\r\n          setApplications(appsResponse);\r\n        } else {\r\n          setError('Format de réponse inattendu pour les applications');\r\n          setApplications([]);\r\n        }\r\n  \r\n        if (Array.isArray(entrepriseResponse)) {\r\n          setEntreprises(entrepriseResponse);\r\n        } else {\r\n          setError('Format de réponse inattendu pour les entreprises');\r\n          setEntreprises([]);\r\n        }\r\n  \r\n        // Charger toutes les interprétations sans filtre d'entreprise par défaut\r\n        await fetchAllInterpretations();\r\n        \r\n        // Ne pas définir d'entreprise ou d'application par défaut\r\n        // pour éviter des erreurs de sélection\r\n        setSelectedEntreprise('');\r\n        setSelectedApplication('');\r\n        \r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données initiales:', error);\r\n        setError('Impossible de charger les données initiales');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n\r\n  // Gérer le changement d'application sélectionnée\r\n  const handleApplicationChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const appId = event.target.value as string;\r\n    setSelectedApplication(appId);\r\n    fetchAnalysesByApplication(appId);\r\n  };\r\n\r\n  // Charger l'historique des scores pour une entreprise\r\n  const fetchHistoriqueByEntreprise = async (entrepriseId: string) => {\r\n    try {\r\n      const response = await api.get(`historique/entreprise/${entrepriseId}`);\r\n      \r\n      if (Array.isArray(response)) {\r\n        setHistorique(response);\r\n        \r\n        // Mettre à jour la liste des thématiques uniques\r\n        const uniqueThemes = [...new Set(response.map(item => item.thematique))];\r\n        console.log(`${uniqueThemes.length} thématiques uniques trouvées dans l'historique de l'entreprise ${entrepriseId}`);\r\n        \r\n        // Si une thématique était déjà sélectionnée mais n'existe pas dans le nouvel ensemble, la réinitialiser\r\n        if (selectedThematique && !uniqueThemes.includes(selectedThematique)) {\r\n          setSelectedThematique('');\r\n        }\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour l\\'historique:', response);\r\n        setHistorique([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'historique pour l\\'entreprise:', error);\r\n      setHistorique([]);\r\n    }\r\n  };\r\n  // Charger les analyses par entreprise\r\n  // Fonction fetchAnalysesByEntreprise à ajouter dans AnalysesInterpretations.tsx\r\n  const fetchAnalysesByEntreprise = async (entrepriseId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.get(`analyses/entreprise/${entrepriseId}`);\r\n      \r\n      // Vérifier le format de la réponse\r\n      if (response && typeof response === 'object') {\r\n        console.log('Données d\\'entreprise reçues:', response);\r\n        \r\n        // Vérifier si l'objet contient un tableau d'analyses\r\n        if (response.analyses && Array.isArray(response.analyses)) {\r\n          const normalizedAnalyses = response.analyses.map(normalizeAnalyse);\r\n          setAnalyses(normalizedAnalyses);\r\n          \r\n          if (normalizedAnalyses.length > 0) {\r\n            const latestAnalyse = normalizedAnalyses[0];\r\n            setSelectedAnalyse(latestAnalyse);\r\n            fetchInterpretation(latestAnalyse.id_analyse);\r\n          } else {\r\n            setSelectedAnalyse(null);\r\n            setInterpretation(null);\r\n          }\r\n        } else {\r\n          // Si l'objet ne contient pas d'analyses, créer un tableau vide\r\n          console.warn('Aucune analyse trouvée dans la réponse de l\\'API pour l\\'entreprise:', entrepriseId);\r\n          setAnalyses([]);\r\n          setSelectedAnalyse(null);\r\n          setInterpretation(null);\r\n        }\r\n        \r\n        // Mettre à jour les applications disponibles pour cette entreprise\r\n        if (response.applications && Array.isArray(response.applications)) {\r\n          // Si vous voulez limiter la liste des applications à celles de l'entreprise sélectionnée\r\n          // setApplications(response.applications);\r\n          console.log(`${response.applications.length} applications trouvées pour l'entreprise ${entrepriseId}`);\r\n        }\r\n      } else if (Array.isArray(response)) {\r\n        // Si la réponse est un tableau (format alternatif)\r\n        const normalizedAnalyses = response.map(normalizeAnalyse);\r\n        setAnalyses(normalizedAnalyses);\r\n        \r\n        if (normalizedAnalyses.length > 0) {\r\n          const latestAnalyse = normalizedAnalyses[0];\r\n          setSelectedAnalyse(latestAnalyse);\r\n          fetchInterpretation(latestAnalyse.id_analyse);\r\n        } else {\r\n          setSelectedAnalyse(null);\r\n          setInterpretation(null);\r\n        }\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les analyses:', response);\r\n        setAnalyses([]);\r\n        setSelectedAnalyse(null);\r\n        setInterpretation(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des analyses pour l\\'entreprise:', error);\r\n      setError('Impossible de charger les analyses pour cette entreprise');\r\n      setAnalyses([]);\r\n      setSelectedAnalyse(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Charger les analyses quand une application est sélectionnée\r\n  const fetchAnalysesByApplication = async (appId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.get(`analyses/application/${appId}`);\r\n      \r\n      if (Array.isArray(response)) {\r\n        const normalizedAnalyses = response.map(normalizeAnalyse);\r\n        setAnalyses(normalizedAnalyses);\r\n        \r\n        if (normalizedAnalyses.length > 0) {\r\n          const latestAnalyse = normalizedAnalyses[0];\r\n          setSelectedAnalyse(latestAnalyse);\r\n          fetchInterpretation(latestAnalyse.id_analyse);\r\n          fetchHistorique(appId);\r\n        } else {\r\n          setSelectedAnalyse(null);\r\n          setInterpretation(null);\r\n          setHistorique([]);\r\n        }\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les analyses:', response);\r\n        setAnalyses([]);\r\n        setSelectedAnalyse(null);\r\n        setInterpretation(null);\r\n        setHistorique([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des analyses:', error);\r\n      setError('Impossible de charger les analyses');\r\n      setAnalyses([]);\r\n      setSelectedAnalyse(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Charger l'interprétation pour une analyse\r\n  const fetchInterpretation = async (analyseId: string) => {\r\n    try {\r\n      const response = await api.get(`interpretations/analyse/${analyseId}`);\r\n      \r\n      if (response && typeof response === 'object') {\r\n        const formattedInterpretation: Interpretation = {\r\n          niveau: response.niveau || 'Non évalué',\r\n          description: response.description || 'Aucune description disponible',\r\n          recommandations: response.recommandations || 'Aucune recommandation disponible',\r\n          score: response.score || 0\r\n        };\r\n        \r\n        setInterpretation(formattedInterpretation);\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour l\\'interprétation:', response);\r\n        setInterpretation(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'interprétation:', error);\r\n      setInterpretation(null);\r\n    }\r\n  };\r\n\r\n  // Charger l'historique des scores pour une application\r\n  const fetchHistorique = async (appId: string) => {\r\n    try {\r\n      const response = await api.get(`historique/application/${appId}`);\r\n      if (Array.isArray(response)) {\r\n        setHistorique(response);\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour l\\'historique:', response);\r\n        setHistorique([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'historique:', error);\r\n      setHistorique([]);\r\n    }\r\n  };\r\n\r\n   // Gestionnaires d'événements pour l'interface utilisateur\r\n  \r\n  // Gérer le changement d'entreprise sélectionnée\r\n  const handleEntrepriseChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n  const entrepriseId = event.target.value as string;\r\n  setSelectedEntreprise(entrepriseId || '');\r\n  \r\n  // Réinitialiser les données actuelles\r\n  setSelectedAnalyse(null);\r\n  setInterpretation(null);\r\n  \r\n  if (entrepriseId) {\r\n    // Si une entreprise est sélectionnée, charger les données pour cette entreprise\r\n    setLoading(true);\r\n    \r\n    // Récupérer les analyses pour cette entreprise\r\n    fetchAnalysesByEntreprise(entrepriseId);\r\n    \r\n    // Récupérer l'historique pour cette entreprise\r\n    fetchHistoriqueByEntreprise(entrepriseId);\r\n    \r\n    // Filtrer les interprétations pour cette entreprise\r\n    // Cette étape est importante pour mettre à jour le tableau récapitulatif\r\n    const filteredInterpretations = interpretationsSummary.filter(\r\n      item => item.id_entreprise === entrepriseId\r\n    );\r\n    \r\n    console.log(`Filtre entreprise appliqué: ${entrepriseId}, ${filteredInterpretations.length} résultats trouvés`);\r\n    \r\n    // Réinitialiser la pagination\r\n    setPage(0);\r\n  } else {\r\n    // Si \"Toutes les entreprises\" est sélectionné, charger toutes les analyses\r\n    fetchAllInterpretations();\r\n    setHistorique([]);\r\n    \r\n    // Réinitialiser l'application sélectionnée\r\n    setSelectedApplication('');\r\n  }\r\n  \r\n  // Réinitialiser les filtres supplémentaires\r\n  setFilters({\r\n    application: '',\r\n    niveau: '',\r\n    organisation: '',\r\n    scoreMin: '',\r\n    scoreMax: ''\r\n  });\r\n};\r\n\r\n  // Gérer le changement d'analyse sélectionnée\r\n  const handleAnalyseChange = (analyse: Analyse) => {\r\n    const normalizedAnalyse = normalizeAnalyse(analyse);\r\n    setSelectedAnalyse(normalizedAnalyse);\r\n    fetchInterpretation(normalizedAnalyse.id_analyse);\r\n  };\r\n\r\n  // Gérer le changement de thématique pour l'historique\r\n  const handleThematiqueChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setSelectedThematique(event.target.value as string);\r\n  };\r\n\r\n  // Gérer le changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Ouvrir le dialogue pour créer une nouvelle analyse\r\n  const handleOpenNewAnalyseDialog = () => {\r\n    setNewAnalyseData({\r\n      id_application: selectedApplication,\r\n      thematiques: []\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  // Fermer le dialogue\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  // Ajouter une thématique à la nouvelle analyse\r\n  const addThematique = () => {\r\n    setNewAnalyseData({\r\n      ...newAnalyseData,\r\n      thematiques: [\r\n        ...newAnalyseData.thematiques,\r\n        {\r\n          thematique: '',\r\n          score: 0,\r\n          nombre_reponses: 0\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  // Mettre à jour une thématique\r\n  const updateThematique = (index: number, field: keyof Thematique, value: any) => {\r\n    const updatedThematiques = [...newAnalyseData.thematiques];\r\n    updatedThematiques[index] = {\r\n      ...updatedThematiques[index],\r\n      [field]: value\r\n    };\r\n    \r\n    setNewAnalyseData({\r\n      ...newAnalyseData,\r\n      thematiques: updatedThematiques\r\n    });\r\n  };\r\n\r\n  // Supprimer une thématique\r\n  const removeThematique = (index: number) => {\r\n    const updatedThematiques = newAnalyseData.thematiques.filter((_, i) => i !== index);\r\n    setNewAnalyseData({\r\n      ...newAnalyseData,\r\n      thematiques: updatedThematiques\r\n    });\r\n  };\r\n\r\n  // Créer une nouvelle analyse\r\n  const createNewAnalyse = async () => {\r\n    try {\r\n      await api.post(`analyses`, newAnalyseData);\r\n      fetchAnalysesByApplication(selectedApplication);\r\n      fetchAllInterpretations();\r\n      handleCloseDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création de l\\'analyse:', error);\r\n      setError('Erreur lors de la création de l\\'analyse');\r\n    }\r\n  };\r\n\r\n  // Calculer une nouvelle analyse\r\n  const calculateNewAnalyse = async () => {\r\n    try {\r\n      await api.post(`analyses/calculer/${selectedApplication}`);\r\n      fetchAnalysesByApplication(selectedApplication);\r\n      fetchAllInterpretations();\r\n    } catch (error) {\r\n      console.error('Erreur lors du calcul de l\\'analyse:', error);\r\n      setError('Erreur lors du calcul de l\\'analyse');\r\n    }\r\n  };\r\n\r\n  // Fonctions utilitaires pour le traitement des données\r\n  \r\n  // Préparer les données pour le graphique d'historique\r\n  const prepareHistoriqueData = () => {\r\n    if (filteredHistorique.length === 0) return [];\r\n    \r\n    const sortedData = [...filteredHistorique].sort((a, b) => {\r\n      try {\r\n        return new Date(a.date_mesure).getTime() - new Date(b.date_mesure).getTime();\r\n      } catch (error) {\r\n        console.error('Erreur lors du tri des données historiques:', error);\r\n        return 0;\r\n      }\r\n    });\r\n    \r\n    return sortedData.map(item => {\r\n      try {\r\n        return {\r\n          date: new Date(item.date_mesure).toLocaleDateString('fr-FR'),\r\n          score: item.score,\r\n          thematique: item.thematique\r\n        };\r\n      } catch (error) {\r\n        console.error('Erreur lors de la préparation des données historiques:', error);\r\n        return {\r\n          date: 'Date inconnue',\r\n          score: item.score || 0,\r\n          thematique: item.thematique || 'Inconnue'\r\n        };\r\n      }\r\n    });\r\n  };\r\n\r\n  // Calculer le score global à afficher\r\n  const getScoreGlobal = () => {\r\n    if (!selectedAnalyse) return 'N/A';\r\n    \r\n    const score = selectedAnalyse.score_global !== undefined ? selectedAnalyse.score_global :\r\n                 selectedAnalyse.scoreGlobal !== undefined ? selectedAnalyse.scoreGlobal : null;\r\n    \r\n    return score !== null ? score.toFixed(2) : 'N/A';\r\n  };\r\n\r\n  // Fonctions de pagination et de tri pour le tableau\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleRequestSort = (property: keyof InterpretationSummary) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  // Filtrer les données du tableau récapitulatif\r\n  const getFilteredData = () => {\r\n    // Commencer avec toutes les interprétations\r\n    let filteredData = [...interpretationsSummary];\r\n    \r\n    // Filtrer par entreprise si une entreprise est sélectionnée\r\n    if (selectedEntreprise) {\r\n      filteredData = filteredData.filter(row => {\r\n        // Vérifier si l'ID d'entreprise correspond\r\n        // Si l'ID d'entreprise n'est pas disponible directement dans l'objet, nous pouvons\r\n        // utiliser une relation entre applications et entreprises\r\n        return row.id_entreprise === selectedEntreprise;\r\n      });\r\n      \r\n      console.log(`Filtré par entreprise ${selectedEntreprise}: ${filteredData.length} résultats`);\r\n    }\r\n    \r\n    // Appliquer les autres filtres\r\n    filteredData = filteredData.filter(row => {\r\n      // Filtre de recherche\r\n      const searchLower = searchTerm.toLowerCase();\r\n      const appNameMatch = row.nom_application?.toLowerCase().includes(searchLower) || false;\r\n      const niveauMatch = row.niveau_global?.toLowerCase().includes(searchLower) || false;\r\n      const orgMatch = row.organisation?.toLowerCase().includes(searchLower) || false;\r\n      \r\n      if (searchTerm && !appNameMatch && !niveauMatch && !orgMatch) {\r\n        return false;\r\n      }\r\n      \r\n      // Filtres avancés\r\n      if (filters.application && row.nom_application !== filters.application) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.niveau && row.niveau_global !== filters.niveau) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.organisation && row.organisation !== filters.organisation) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.scoreMin && typeof row.score_global === 'number' && \r\n          row.score_global < parseFloat(filters.scoreMin)) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.scoreMax && typeof row.score_global === 'number' && \r\n          row.score_global > parseFloat(filters.scoreMax)) {\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    });\r\n    \r\n    // Trier les données\r\n    filteredData.sort((a, b) => {\r\n      const valueA = a[orderBy];\r\n      const valueB = b[orderBy];\r\n      \r\n      if (typeof valueA === 'number' && typeof valueB === 'number') {\r\n        return order === 'asc' ? valueA - valueB : valueB - valueA;\r\n      }\r\n      \r\n      // Conversion en chaînes pour la comparaison\r\n      const strA = String(valueA || '');\r\n      const strB = String(valueB || '');\r\n      \r\n      return order === 'asc' \r\n        ? strA.localeCompare(strB)\r\n        : strB.localeCompare(strA);\r\n    });\r\n    \r\n    // Appliquer la pagination\r\n    return filteredData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\r\n  };\r\n\r\n  // Obtenir les options uniques pour les filtres déroulants\r\n  const getUniqueValues = (field: keyof InterpretationSummary) => {\r\n    return [...new Set(interpretationsSummary.map(item => item[field]))].filter(Boolean);\r\n  };\r\n\r\n  // Rendu du composant avec AnalysesInterpretationsUI\r\n  return (\r\n    <AnalysesInterpretationsUI\r\n    loading={loading}\r\n    error={error}\r\n    applications={applications}\r\n    entreprises={entreprises}\r\n    selectedApplication={selectedApplication}\r\n    selectedEntreprise={selectedEntreprise}\r\n    analyses={analyses}\r\n    selectedAnalyse={selectedAnalyse}\r\n    interpretation={interpretation}\r\n    historique={historique}\r\n    filteredHistorique={filteredHistorique}\r\n    tabValue={tabValue}\r\n    selectedThematique={selectedThematique}\r\n    openDialog={openDialog}\r\n    newAnalyseData={newAnalyseData}\r\n    interpretationsSummary={interpretationsSummary}\r\n    page={page}\r\n    rowsPerPage={rowsPerPage}\r\n    order={order}\r\n    orderBy={orderBy}\r\n    searchTerm={searchTerm}\r\n    filters={filters}\r\n    showFilters={showFilters}\r\n    uniqueThematiques={uniqueThematiques}\r\n    handleApplicationChange={handleApplicationChange}\r\n    handleEntrepriseChange={handleEntrepriseChange}\r\n    handleAnalyseChange={handleAnalyseChange}\r\n    handleThematiqueChange={handleThematiqueChange}\r\n    handleTabChange={handleTabChange}\r\n    handleOpenNewAnalyseDialog={handleOpenNewAnalyseDialog}\r\n    handleCloseDialog={handleCloseDialog}\r\n    addThematique={addThematique}\r\n    updateThematique={updateThematique}\r\n    removeThematique={removeThematique}\r\n    createNewAnalyse={createNewAnalyse}\r\n    calculateNewAnalyse={calculateNewAnalyse}\r\n    getScoreGlobal={getScoreGlobal}\r\n    prepareHistoriqueData={prepareHistoriqueData}\r\n    handleChangePage={handleChangePage}\r\n    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n    handleRequestSort={handleRequestSort}\r\n    getFilteredData={getFilteredData}\r\n    getUniqueValues={getUniqueValues}\r\n    setSearchTerm={setSearchTerm}\r\n    setFilters={setFilters}\r\n    setShowFilters={setShowFilters}\r\n    fetchAllInterpretations={fetchAllInterpretations}\r\n    fetchAnalysesByApplication={fetchAnalysesByApplication}\r\n    fetchAnalysesByEntreprise={fetchAnalysesByEntreprise}   \r\n    fetchHistoriqueByEntreprise={fetchHistoriqueByEntreprise} \r\n  />\r\n  );\r\n};\r\n\r\nexport default AnalysesInterpretations;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container, Grid, Paper, Typography, Box, CircularProgress, Card, CardContent, CardHeader,\r\n  Tabs, Tab, List, ListItem, ListItemText, Divider, Alert, FormControl, InputLabel,\r\n  MenuItem, Select, Chip,\r\n} from '@mui/material';\r\nimport {\r\n  Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer, Legend,\r\n} from 'recharts';\r\nimport { getNiveauColor } from '../../utils/AnalyseUtils';\r\nimport api from '../../services/api';\r\n\r\n// Types corrigés selon la vraie structure des données\r\ninterface Thematique {\r\n  id: string;\r\n  nom: string;\r\n  score: number;\r\n  score_moyen: number;\r\n  niveau: string;\r\n  recommandations: string;\r\n  description?: string;\r\n}\r\n\r\ninterface Fonction {\r\n  id: string;\r\n  nom: string;\r\n  score_global: number;\r\n  niveau: string;\r\n  recommandations: string;\r\n  description?: string;\r\n  thematiques: Thematique[];\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  secteur?: string;\r\n  score_global: string;\r\n  niveau_global: string;\r\n  recommandations_globales: string;\r\n  fonctions: Fonction[];\r\n}\r\n\r\n// Nouveaux types pour l'API Benchmark avec LLMs\r\ninterface LLMRecommendation {\r\n  source: 'ChatGPT' | 'Grok' | 'Claude';\r\n  score: number;\r\n  recommandation: string;\r\n  niveau_confiance: number; // 0-100\r\n}\r\n\r\ninterface BenchmarkThematiqueLLM {\r\n  nom: string;\r\n  score_moyen: number; // Moyenne des 3 LLMs\r\n  recommandations_llm: LLMRecommendation[];\r\n  ecart_type: number; // Variabilité entre les LLMs\r\n}\r\n\r\ninterface BenchmarkDataLLM {\r\n  secteur: string;\r\n  fonction: string;\r\n  date_analyse: string;\r\n  thematiques: BenchmarkThematiqueLLM[];\r\n  scores: {\r\n    niveau_entreprise: number;\r\n    niveau_fonction: number;\r\n    niveau_thematique: number;\r\n  };\r\n  metadata: {\r\n    version_api: string;\r\n    sources_utilisees: string[];\r\n    fiabilite_globale: number;\r\n  };\r\n}\r\n\r\n// Structure de la requête API\r\ninterface BenchmarkRequest {\r\n  secteur: string;\r\n  fonction: string;\r\n  thematiques: string[];\r\n}\r\n\r\n// Cache pour éviter les appels répétitifs\r\nconst benchmarkCache = new Map<string, BenchmarkDataLLM>();\r\n\r\n// Helper function améliorée pour gérer les scores\r\nconst formatScore = (score: string | number | undefined | null): string => {\r\n  if (score === undefined || score === null || score === '') return 'N/A';\r\n  const numScore = typeof score === 'string' ? parseFloat(score) : score;\r\n  return isNaN(numScore) ? 'N/A' : numScore.toFixed(1);\r\n};\r\n\r\n// Helper function pour s'assurer qu'un score est un nombre valide\r\nconst ensureValidScore = (score: any): number => {\r\n  if (typeof score === 'number' && !isNaN(score)) return score;\r\n  if (typeof score === 'string') {\r\n    const parsed = parseFloat(score);\r\n    return isNaN(parsed) ? 0 : parsed;\r\n  }\r\n  return 0;\r\n};\r\n\r\n// Fonction pour récupérer les données benchmark depuis l'API\r\nconst fetchBenchmarkData = async (\r\n  secteur: string, \r\n  fonction: string, \r\n  thematiques: string[]\r\n): Promise<BenchmarkDataLLM | null> => {\r\n  const cacheKey = `${secteur}_${fonction}_${thematiques.join('|')}`;\r\n  \r\n  // Vérifier le cache d'abord\r\n  if (benchmarkCache.has(cacheKey)) {\r\n    console.log('Benchmark data retrieved from cache');\r\n    return benchmarkCache.get(cacheKey)!;\r\n  }\r\n\r\n  try {\r\n    console.log('Fetching benchmark data from API...', { secteur, fonction, thematiques });\r\n    \r\n    const requestBody: BenchmarkRequest = {\r\n      secteur,\r\n      fonction,\r\n      thematiques\r\n    };\r\n\r\n    const response = await api.post('benchmark/analyze', requestBody);\r\n    \r\n    // Normaliser la réponse\r\n    let benchmarkData: BenchmarkDataLLM;\r\n    if (response && response.data) {\r\n      benchmarkData = response.data;\r\n    } else if (response) {\r\n      benchmarkData = response;\r\n    } else {\r\n      throw new Error('Aucune donnée reçue de l\\'API benchmark');\r\n    }\r\n\r\n    // Mettre en cache\r\n    benchmarkCache.set(cacheKey, benchmarkData);\r\n    \r\n    console.log('Benchmark data retrieved successfully:', benchmarkData);\r\n    return benchmarkData;\r\n    \r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des données benchmark:', error);\r\n    \r\n    // Fallback avec données mockées en cas d'erreur\r\n    return generateMockBenchmarkData(secteur, fonction, thematiques);\r\n  }\r\n};\r\n\r\n// Données de fallback en cas d'erreur API\r\nconst generateMockBenchmarkData = (\r\n  secteur: string, \r\n  fonction: string, \r\n  thematiques: string[]\r\n): BenchmarkDataLLM => {\r\n  return {\r\n    secteur,\r\n    fonction,\r\n    date_analyse: new Date().toISOString(),\r\n    thematiques: thematiques.map(theme => ({\r\n      nom: theme,\r\n      score_moyen: 3.0 + Math.random() * 1.5, // Score entre 3.0 et 4.5\r\n      ecart_type: 0.2 + Math.random() * 0.3,\r\n      recommandations_llm: [\r\n        {\r\n          source: 'ChatGPT',\r\n          score: 3.0 + Math.random() * 1.5,\r\n          recommandation: `Recommandation ChatGPT pour ${theme}: Optimiser les processus et améliorer l'efficacité opérationnelle en mettant l'accent sur l'automatisation et la standardisation.`,\r\n          niveau_confiance: 85 + Math.floor(Math.random() * 15)\r\n        },\r\n        {\r\n          source: 'Grok',\r\n          score: 3.0 + Math.random() * 1.5,\r\n          recommandation: `Recommandation Grok pour ${theme}: Implémenter des solutions innovantes et agiles en adoptant une approche disruptive et en exploitant les technologies émergentes.`,\r\n          niveau_confiance: 80 + Math.floor(Math.random() * 20)\r\n        },\r\n        {\r\n          source: 'Claude',\r\n          score: 3.0 + Math.random() * 1.5,\r\n          recommandation: `Recommandation Claude pour ${theme}: Structurer l'approche avec des méthodes éprouvées en privilégiant la qualité, la cohérence et une amélioration progressive.`,\r\n          niveau_confiance: 88 + Math.floor(Math.random() * 12)\r\n        }\r\n      ]\r\n    })),\r\n    scores: {\r\n      niveau_entreprise: 3.5,\r\n      niveau_fonction: 3.6,\r\n      niveau_thematique: 3.4\r\n    },\r\n    metadata: {\r\n      version_api: '1.0.0',\r\n      sources_utilisees: ['ChatGPT-4', 'Grok-2', 'Claude-3.5'],\r\n      fiabilite_globale: 87\r\n    }\r\n  };\r\n};\r\n\r\n// Derive global level and recommendations from score_global\r\nconst deriveGlobalLevelAndRecommendations = (scoreGlobal: number): { niveau_global: string; recommandations_globales: string } => {\r\n  if (scoreGlobal >= 4.5) {\r\n    return {\r\n      niveau_global: 'Niveau 5 - Optimisé',\r\n      recommandations_globales: 'Maintenir l\\'excellence par l\\'innovation continue et le partage des bonnes pratiques.'\r\n    };\r\n  } else if (scoreGlobal >= 3.5) {\r\n    return {\r\n      niveau_global: 'Niveau 4 - Géré',\r\n      recommandations_globales: 'Perfectionner les processus existants et développer des capacités prédictives.'\r\n    };\r\n  } else if (scoreGlobal >= 2.5) {\r\n    return {\r\n      niveau_global: 'Niveau 3 - Mesuré',\r\n      recommandations_globales: 'Renforcer la culture d\\'amélioration continue et automatiser davantage les processus.'\r\n    };\r\n  } else if (scoreGlobal >= 1.5) {\r\n    return {\r\n      niveau_global: 'Niveau 2 - Défini',\r\n      recommandations_globales: 'Standardiser les pratiques et formaliser les processus dans toute l\\'organisation.'\r\n    };\r\n  } else {\r\n    return {\r\n      niveau_global: 'Niveau 1 - Initial',\r\n      recommandations_globales: 'Initier une démarche d\\'amélioration structurée et identifier les processus critiques.'\r\n    };\r\n  }\r\n};\r\n\r\nconst AnalysesFonctions: React.FC = () => {\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [selectedEntreprise, setSelectedEntreprise] = useState<string>('');\r\n  const [selectedFonction, setSelectedFonction] = useState<string>('');\r\n  const [entrepriseDetails, setEntrepriseDetails] = useState<Entreprise | null>(null);\r\n  const [fonctionDetails, setFonctionDetails] = useState<Fonction | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string>('');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Nouveaux états pour l'API Benchmark\r\n  const [benchmarkDataLLM, setBenchmarkDataLLM] = useState<BenchmarkDataLLM | null>(null);\r\n  const [loadingBenchmark, setLoadingBenchmark] = useState<boolean>(false);\r\n  const [radarData, setRadarData] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadEntreprises();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log('Selected entreprise changed:', selectedEntreprise); // Debug log\r\n    if (selectedEntreprise) {\r\n      loadEntrepriseDetails(selectedEntreprise);\r\n    } else {\r\n      setEntrepriseDetails(null);\r\n      setFonctionDetails(null);\r\n    }\r\n  }, [selectedEntreprise]);\r\n\r\n  useEffect(() => {\r\n    if (entrepriseDetails && selectedFonction) {\r\n      const fonction = entrepriseDetails.fonctions.find(f => f.id === selectedFonction);\r\n      if (fonction) {\r\n        setFonctionDetails(fonction);\r\n      }\r\n    }\r\n  }, [selectedFonction, entrepriseDetails]);\r\n\r\n  // Appeler convertToRadarData quand les données changent\r\n  useEffect(() => {\r\n    if (fonctionDetails?.thematiques && entrepriseDetails) {\r\n      convertToRadarData(\r\n        fonctionDetails.thematiques,\r\n        entrepriseDetails.secteur || \"Finance\",\r\n        fonctionDetails.nom\r\n      );\r\n    }\r\n  }, [fonctionDetails, entrepriseDetails]);\r\n\r\n  // Fonction pour obtenir les données benchmark depuis l'API\r\n  const getBenchmarkData = async (\r\n    secteur: string, \r\n    fonction: string, \r\n    thematiques: Thematique[]\r\n  ): Promise<BenchmarkThematiqueLLM[]> => {\r\n    \r\n    if (!thematiques || thematiques.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      setLoadingBenchmark(true);\r\n      \r\n      const thematiqueNames = thematiques.map(t => t.nom);\r\n      const benchmarkData = await fetchBenchmarkData(secteur, fonction, thematiqueNames);\r\n      \r\n      if (benchmarkData) {\r\n        setBenchmarkDataLLM(benchmarkData);\r\n        return benchmarkData.thematiques;\r\n      }\r\n      \r\n      return [];\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du benchmark:', error);\r\n      return [];\r\n    } finally {\r\n      setLoadingBenchmark(false);\r\n    }\r\n  };\r\n\r\n  // Fonction utilitaire pour obtenir le score benchmark d'une thématique\r\n  const getBenchmarkScore = (\r\n    themeName: string, \r\n    benchmarkThematiques: BenchmarkThematiqueLLM[]\r\n  ): number => {\r\n    const benchmark = benchmarkThematiques.find(b => \r\n      b.nom.toLowerCase().includes(themeName.toLowerCase()) || \r\n      themeName.toLowerCase().includes(b.nom.toLowerCase())\r\n    );\r\n    \r\n    return benchmark ? benchmark.score_moyen : 3.5; // Score par défaut\r\n  };\r\n\r\n  // Convert thematiques to radar chart data with benchmark API\r\n  const convertToRadarData = async (\r\n    thematiques: Thematique[] = [], \r\n    secteur: string = \"Finance\", \r\n    fonctionName: string = \"RH\"\r\n  ) => {\r\n    console.log('Converting radar data with API benchmark:', { thematiques, secteur, fonctionName });\r\n    \r\n    if (!Array.isArray(thematiques) || thematiques.length === 0) {\r\n      console.warn('No thematiques data available for radar chart');\r\n      setRadarData([]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Obtenir les données benchmark depuis l'API\r\n      const benchmarkThematiques = await getBenchmarkData(secteur, fonctionName, thematiques);\r\n      \r\n      const newRadarData = thematiques.map((theme) => {\r\n        const score = ensureValidScore(theme.score || theme.score_moyen);\r\n        \r\n        // Trouver le score benchmark correspondant depuis l'API\r\n        const benchmarkScore = getBenchmarkScore(theme.nom, benchmarkThematiques);\r\n        \r\n        return {\r\n          thematique: theme.nom || 'Thématique inconnue',\r\n          score: score,\r\n          benchmark: benchmarkScore,\r\n          fullMark: 5,\r\n        };\r\n      }).filter(item => item.score > 0);\r\n      \r\n      console.log('Final radar data with API benchmark:', newRadarData);\r\n      setRadarData(newRadarData);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors de la conversion des données radar:', error);\r\n      // Fallback vers données locales en cas d'erreur\r\n      const fallbackData = thematiques.map((theme) => ({\r\n        thematique: theme.nom || 'Thématique inconnue',\r\n        score: ensureValidScore(theme.score || theme.score_moyen),\r\n        benchmark: 3.5,\r\n        fullMark: 5,\r\n      })).filter(item => item.score > 0);\r\n      \r\n      setRadarData(fallbackData);\r\n    }\r\n  };\r\n\r\n  const loadEntreprises = async () => {\r\n    try {\r\n      const response = await api.get('entreprises');\r\n      console.log('Response from entreprises API:', response); // Debug log\r\n      \r\n      // Normaliser la réponse selon le format observé dans les autres fichiers\r\n      let entreprisesData: any[] = [];\r\n      if (Array.isArray(response)) {\r\n        entreprisesData = response;\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        entreprisesData = response.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour entreprises:', response);\r\n        setError(\"Format de données invalide reçu du serveur.\");\r\n        return;\r\n      }\r\n\r\n      // Transformer les données d'entreprises au format attendu\r\n      const formattedEntreprises = entreprisesData.map(ent => ({\r\n        id_entreprise: ent.id_entreprise,\r\n        nom_entreprise: ent.nom_entreprise || ent.nom || 'Entreprise inconnue',\r\n        secteur: ent.secteur || 'Non défini',\r\n        score_global: '0',\r\n        niveau_global: 'Non évalué',\r\n        recommandations_globales: 'Aucune évaluation disponible',\r\n        fonctions: []\r\n      }));\r\n\r\n      console.log('Formatted entreprises:', formattedEntreprises); // Debug log\r\n      setEntreprises(formattedEntreprises);\r\n      \r\n      if (formattedEntreprises.length > 0) {\r\n        setSelectedEntreprise(formattedEntreprises[0].id_entreprise);\r\n      }\r\n    } catch (error: unknown) {\r\n      const err = error as Error;\r\n      console.error('Erreur lors du chargement des entreprises:', err.message);\r\n      setError(\"Impossible de charger la liste des entreprises.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadEntrepriseDetails = async (entrepriseId: string) => {\r\n    try {\r\n      setLoading(true);\r\n      console.log('Loading details for enterprise:', entrepriseId); // Debug log\r\n      \r\n      // Récupérer les détails de l'entreprise et ses fonctions depuis le bon endpoint\r\n      const [entrepriseResponse, fonctionsResponse] = await Promise.all([\r\n        api.get(`entreprises/${entrepriseId}`),\r\n        api.get(`entreprises/${entrepriseId}/fonctions`)\r\n      ]);\r\n      \r\n      console.log('Enterprise response:', entrepriseResponse); // Debug log\r\n      console.log('Functions response:', fonctionsResponse); // Debug log\r\n      \r\n      // Normaliser la réponse entreprise\r\n      let entrepriseData: any = {};\r\n      if (entrepriseResponse && entrepriseResponse.data) {\r\n        entrepriseData = entrepriseResponse.data;\r\n      } else if (entrepriseResponse) {\r\n        entrepriseData = entrepriseResponse;\r\n      }\r\n      \r\n      // Normaliser la réponse fonctions\r\n      let fonctionsData: any = {};\r\n      if (fonctionsResponse && fonctionsResponse.data) {\r\n        fonctionsData = fonctionsResponse.data;\r\n      } else if (fonctionsResponse) {\r\n        fonctionsData = fonctionsResponse;\r\n      }\r\n      \r\n      // Construire l'objet entreprise details\r\n      const scoreGlobal = ensureValidScore(fonctionsData.score_global || 0);\r\n      const derivedData = deriveGlobalLevelAndRecommendations(scoreGlobal);\r\n      \r\n      const entrepriseDetails: Entreprise = {\r\n        id_entreprise: entrepriseId,\r\n        nom_entreprise: entrepriseData.nom_entreprise || fonctionsData.entreprise || \"Entreprise inconnue\",\r\n        secteur: entrepriseData.secteur || \"Non défini\",\r\n        score_global: String(scoreGlobal),\r\n        niveau_global: fonctionsData.niveau_global || derivedData.niveau_global,\r\n        recommandations_globales: fonctionsData.recommandations_globales || derivedData.recommandations_globales,\r\n        fonctions: Array.isArray(fonctionsData.fonctions) ? fonctionsData.fonctions : []\r\n      };\r\n      \r\n      console.log('Final entreprise details:', entrepriseDetails); // Debug log\r\n      setEntrepriseDetails(entrepriseDetails);\r\n      \r\n      // Auto-select first function if available\r\n      if (entrepriseDetails.fonctions.length > 0) {\r\n        setSelectedFonction(entrepriseDetails.fonctions[0].id);\r\n      } else {\r\n        setSelectedFonction('');\r\n        setFonctionDetails(null);\r\n      }\r\n    } catch (error: unknown) {\r\n      const err = error as Error;\r\n      console.error('Erreur lors du chargement des détails de l\\'entreprise:', err.message);\r\n      setError(\"Impossible de charger les détails de l'entreprise.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle enterprise selection\r\n  const handleEntrepriseChange = (event: any) => {\r\n    const entrepriseId = event.target.value as string;\r\n    setSelectedEntreprise(entrepriseId);\r\n  };\r\n\r\n  // Handle function selection\r\n  const handleFonctionChange = (fonctionId: string) => {\r\n    setSelectedFonction(fonctionId);\r\n  };\r\n\r\n  // Handle tab change\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '80vh' }}>\r\n        <CircularProgress />\r\n        <Typography sx={{ ml: 2 }}>Chargement des données d'analyse...</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n          <br />\r\n          <Typography variant=\"caption\">\r\n            Vérifiez que l'entreprise sélectionnée possède des analyses de maturité.\r\n          </Typography>\r\n        </Alert>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Enterprise selection */}\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Analyses de maturité par Fonctions évaluées\r\n              </Typography>\r\n            </Box>\r\n\r\n            <FormControl fullWidth variant=\"outlined\" sx={{ mb: 2 }}>\r\n              <InputLabel id=\"entreprise-select-label\">Entreprise</InputLabel>\r\n              <Select\r\n                labelId=\"entreprise-select-label\"\r\n                id=\"entreprise-select\"\r\n                value={selectedEntreprise}\r\n                onChange={handleEntrepriseChange}\r\n                label=\"Entreprise\"\r\n              >\r\n                {entreprises && entreprises.length > 0 ? (\r\n                  entreprises.map((entreprise, index) => (\r\n                    <MenuItem key={`${entreprise.id_entreprise}-${index}`} value={entreprise.id_entreprise}>\r\n                      {entreprise.nom_entreprise}\r\n                    </MenuItem>\r\n                  ))\r\n                ) : (\r\n                  <MenuItem value=\"\">\r\n                    <em>Aucune entreprise disponible</em>\r\n                  </MenuItem>\r\n                )}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            {/* Debug info */}\r\n            {process.env.NODE_ENV === 'development' && (\r\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                Debug: {entreprises.length} entreprises chargées | \r\n                Sélectionnée: {selectedEntreprise || 'Aucune'}\r\n              </Alert>\r\n            )}\r\n\r\n            {entrepriseDetails && (\r\n              <Card sx={{ mb: 2 }}>\r\n                <CardHeader\r\n                  title={`Entreprise: ${entrepriseDetails.nom_entreprise}`}\r\n                  subheader={`Secteur: ${entrepriseDetails.secteur || 'Non défini'}`}\r\n                  action={\r\n                    <Chip\r\n                      label={`Score Global: ${formatScore(entrepriseDetails.score_global)}`}\r\n                      color={getNiveauColor(entrepriseDetails.niveau_global || '')}\r\n                    />\r\n                  }\r\n                />\r\n                <CardContent>\r\n                  <Typography variant=\"body2\">\r\n                    <strong>Niveau:</strong> {entrepriseDetails.niveau_global || 'Non défini'}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                    <strong>Recommandations:</strong> {entrepriseDetails.recommandations_globales || 'Aucune recommandation disponible'}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Function list */}\r\n        <Grid item xs={12} md={4}>\r\n          <Card>\r\n            <CardHeader title=\"Fonctions Analysées\" />\r\n            <CardContent sx={{ p: 0 }}>\r\n              {entrepriseDetails?.fonctions && entrepriseDetails.fonctions.length > 0 ? (\r\n                <List>\r\n                  {entrepriseDetails.fonctions.map((fonction, index) => (\r\n                    <React.Fragment key={`fonction-${fonction.id}-${index}`}>\r\n                      <ListItem\r\n                        onClick={() => handleFonctionChange(fonction.id)}\r\n                        sx={{\r\n                          borderLeft:\r\n                            selectedFonction === fonction.id ? '4px solid #0B4E87' : '4px solid transparent',\r\n                          bgcolor: selectedFonction === fonction.id ? 'rgba(11, 78, 135, 0.05)' : 'transparent',\r\n                          cursor: 'pointer',\r\n                        }}\r\n                      >\r\n                        <ListItemText\r\n                          primary={\r\n                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                              <Typography variant=\"subtitle1\">{fonction.nom}</Typography>\r\n                              <Chip\r\n                                label={formatScore(fonction.score_global)}\r\n                                color={getNiveauColor(fonction.niveau || '')}\r\n                                size=\"small\"\r\n                              />\r\n                            </Box>\r\n                          }\r\n                          secondary={\r\n                            <Typography variant=\"body2\" sx={{ mt: 0.5 }}>\r\n                              {fonction.niveau || 'Niveau non défini'}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </ListItem>\r\n                      {index < entrepriseDetails.fonctions.length - 1 && <Divider />}\r\n                    </React.Fragment>\r\n                  ))}\r\n                </List>\r\n              ) : (\r\n                <Alert severity=\"info\">Aucune fonction évaluée pour cette entreprise.</Alert>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Selected function analysis */}\r\n        <Grid item xs={12} md={8}>\r\n          {fonctionDetails ? (\r\n            <Card>\r\n              <CardHeader\r\n                title={`Analyse de la fonction: ${fonctionDetails.nom}`}\r\n                action={\r\n                  <Chip\r\n                    label={`Score: ${formatScore(fonctionDetails.score_global)}`}\r\n                    color={getNiveauColor(fonctionDetails.niveau || '')}\r\n                  />\r\n                }\r\n              />\r\n              <CardContent>\r\n                <Tabs\r\n                  value={tabValue}\r\n                  onChange={handleTabChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"fullWidth\"\r\n                  sx={{ mb: 2 }}\r\n                >\r\n                  <Tab label=\"Vue d'ensemble\" />\r\n                  <Tab label=\"Recommandations Qwanza\" />\r\n                  <Tab label=\"Recommandations LLM Publics\" />\r\n                </Tabs>\r\n\r\n                {/* Overview tab avec graphique RADAR corrigé */}\r\n                {tabValue === 0 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Score par Thématique vs Benchmark Marché\r\n                    </Typography>\r\n\r\n                    {fonctionDetails.thematiques && fonctionDetails.thematiques.length > 0 ? (\r\n                      <>\r\n                        <Box sx={{ width: '100%', height: 400 }}>\r\n                          <ResponsiveContainer width=\"100%\" height={350}>\r\n                            <RadarChart\r\n                              outerRadius={140}\r\n                              width={500}\r\n                              height={350}\r\n                              data={radarData} // Utilise les données de l'état\r\n                            >\r\n                              <PolarGrid />\r\n                              <PolarAngleAxis dataKey=\"thematique\" />\r\n                              <PolarRadiusAxis angle={30} domain={[0, 5]} />\r\n                              \r\n                              {/* Représentation des scores actuels (bleu) */}\r\n                              <Radar\r\n                                name=\"Score Actuel\"\r\n                                dataKey=\"score\"\r\n                                stroke=\"#0B4E87\"\r\n                                fill=\"#0B4E87\"\r\n                                fillOpacity={0.6}\r\n                              />\r\n                              \r\n                              {/* Représentation benchmark (vert avec trait interrompu) */}\r\n                              <Radar\r\n                                name=\"Benchmark Marché\"\r\n                                dataKey=\"benchmark\"\r\n                                stroke=\"#4CAF50\"\r\n                                fill=\"#4CAF50\"\r\n                                fillOpacity={0.3}\r\n                                strokeDasharray=\"5 5\"\r\n                                strokeWidth={2}\r\n                              />\r\n                            </RadarChart>\r\n                          </ResponsiveContainer>\r\n                          \r\n                          {/* Légende séparée avec espacement contrôlé */}\r\n                          <Box sx={{ \r\n                            display: 'flex', \r\n                            justifyContent: 'center', \r\n                            gap: 3, \r\n                            mt: '10px',\r\n                            alignItems: 'center' \r\n                          }}>\r\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                              <Box sx={{ \r\n                                width: 16, \r\n                                height: 16, \r\n                                backgroundColor: '#0B4E87', \r\n                                opacity: 0.6,\r\n                                borderRadius: 1 \r\n                              }} />\r\n                              <Typography variant=\"body2\">Score Actuel</Typography>\r\n                            </Box>\r\n                            \r\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                              <Box sx={{ \r\n                                width: 16, \r\n                                height: 16, \r\n                                backgroundColor: '#4CAF50', \r\n                                opacity: 0.3,\r\n                                border: '2px dashed #4CAF50',\r\n                                borderRadius: 1 \r\n                              }} />\r\n                              <Typography variant=\"body2\">Benchmark Marché</Typography>\r\n                            </Box>\r\n                            \r\n                            {loadingBenchmark && (\r\n                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, ml: 2 }}>\r\n                                <CircularProgress size={16} />\r\n                                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                  Chargement benchmark...\r\n                                </Typography>\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        </Box>\r\n                        \r\n                        {/* Métadonnées benchmark si disponibles */}\r\n                        {benchmarkDataLLM && benchmarkDataLLM.metadata && (\r\n                          <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                            <Typography variant=\"body2\">\r\n                              <strong>Benchmark basé sur :</strong> {benchmarkDataLLM.metadata.sources_utilisees?.join(', ') || 'Sources non disponibles'} | \r\n                              <strong> Fiabilité :</strong> {benchmarkDataLLM.metadata.fiabilite_globale || 'N/A'}% | \r\n                              <strong> Analyse du :</strong> {benchmarkDataLLM.date_analyse ? new Date(benchmarkDataLLM.date_analyse).toLocaleDateString('fr-FR') : 'Date non disponible'}\r\n                            </Typography>\r\n                          </Alert>\r\n                        )}\r\n                        \r\n                        {/* Détails des thématiques */}\r\n                        <Box sx={{ mt: 2 }}>\r\n                          <Typography variant=\"subtitle1\" gutterBottom fontWeight=\"bold\">\r\n                            Détail des scores par thématique:\r\n                          </Typography>\r\n                          <List>\r\n                            {fonctionDetails.thematiques.map((theme, index) => (\r\n                              <ListItem key={index}>\r\n                                <ListItemText\r\n                                  primary={\r\n                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                      <Typography variant=\"body1\">{theme.nom}</Typography>\r\n                                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                                        <Chip\r\n                                          label={`Actuel: ${formatScore(theme.score)}`}\r\n                                          color={getNiveauColor(theme.niveau || '')}\r\n                                          size=\"small\"\r\n                                        />\r\n                                        {benchmarkDataLLM && benchmarkDataLLM.thematiques && (\r\n                                          <Chip\r\n                                            label={`Benchmark: ${getBenchmarkScore(theme.nom, benchmarkDataLLM.thematiques).toFixed(1)}`}\r\n                                            variant=\"outlined\"\r\n                                            color=\"success\"\r\n                                            size=\"small\"\r\n                                          />\r\n                                        )}\r\n                                      </Box>\r\n                                    </Box>\r\n                                  }\r\n                                  secondary={theme.niveau}\r\n                                />\r\n                              </ListItem>\r\n                            ))}\r\n                          </List>\r\n                        </Box>\r\n                      </>\r\n                    ) : (\r\n                      <Alert severity=\"info\">\r\n                        Aucune donnée de thématique disponible pour cette fonction.\r\n                        <br />\r\n                        <Typography variant=\"caption\">\r\n                          Vérifiez que des formulaires ont été soumis et analysés pour cette fonction.\r\n                        </Typography>\r\n                      </Alert>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n\r\n                {/* Recommandations Qwanza tab */}\r\n                {tabValue === 1 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Recommandations Qwanza\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n                      <strong>Recommandations générales pour la fonction:</strong>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ mb: 3, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\r\n                      {fonctionDetails.recommandations || 'Aucune recommandation spécifique disponible pour cette fonction.'}\r\n                    </Typography>\r\n\r\n                    {fonctionDetails.thematiques && fonctionDetails.thematiques.length > 0 ? (\r\n                      <List>\r\n                        {fonctionDetails.thematiques.map((theme, index) => (\r\n                          <React.Fragment key={index}>\r\n                            <ListItem>\r\n                              <ListItemText\r\n                                primary={\r\n                                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">{theme.nom}</Typography>\r\n                                    <Chip\r\n                                      label={formatScore(theme.score)}\r\n                                      color={getNiveauColor(theme.niveau || '')}\r\n                                      size=\"small\"\r\n                                    />\r\n                                  </Box>\r\n                                }\r\n                                secondary={\r\n                                  <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                                    {theme.recommandations || 'Aucune recommandation spécifique pour cette thématique.'}\r\n                                  </Typography>\r\n                                }\r\n                              />\r\n                            </ListItem>\r\n                            {index < fonctionDetails.thematiques.length - 1 && <Divider />}\r\n                          </React.Fragment>\r\n                        ))}\r\n                      </List>\r\n                    ) : (\r\n                      <Alert severity=\"info\">Aucune recommandation thématique disponible pour cette fonction.</Alert>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n\r\n                {/* LLM Recommendations tab */}\r\n                {tabValue === 2 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Recommandations LLM Publics\r\n                    </Typography>\r\n                    \r\n                    {benchmarkDataLLM && benchmarkDataLLM.thematiques && benchmarkDataLLM.thematiques.length > 0 ? (\r\n                      <Box>\r\n                        {/* Métadonnées de l'analyse */}\r\n                        {benchmarkDataLLM.metadata && (\r\n                          <Card sx={{ mb: 3, bgcolor: 'grey.50' }}>\r\n                            <CardContent>\r\n                              <Typography variant=\"subtitle1\" fontWeight=\"bold\" gutterBottom>\r\n                                Informations sur l'analyse benchmark\r\n                              </Typography>\r\n                              <Grid container spacing={2}>\r\n                                <Grid item xs={12} sm={4}>\r\n                                  <Typography variant=\"body2\">\r\n                                    <strong>Sources:</strong> {benchmarkDataLLM.metadata.sources_utilisees?.join(', ') || 'Sources non disponibles'}\r\n                                  </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={4}>\r\n                                  <Typography variant=\"body2\">\r\n                                    <strong>Fiabilité globale:</strong> {benchmarkDataLLM.metadata.fiabilite_globale || 'N/A'}%\r\n                                  </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={4}>\r\n                                  <Typography variant=\"body2\">\r\n                                    <strong>Date d'analyse:</strong> {benchmarkDataLLM.date_analyse ? new Date(benchmarkDataLLM.date_analyse).toLocaleDateString('fr-FR') : 'Date non disponible'}\r\n                                  </Typography>\r\n                                </Grid>\r\n                              </Grid>\r\n                            </CardContent>\r\n                          </Card>\r\n                        )}\r\n\r\n                        {/* Recommandations par thématique */}\r\n                        {benchmarkDataLLM.thematiques.map((thematique, index) => (\r\n                          <Card key={index} sx={{ mb: 2 }}>\r\n                            <CardHeader\r\n                              title={thematique.nom}\r\n                              action={\r\n                                <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\r\n                                  <Chip\r\n                                    label={`Score moyen: ${thematique.score_moyen ? thematique.score_moyen.toFixed(1) : 'N/A'}`}\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                  />\r\n                                  <Chip\r\n                                    label={`Écart-type: ${thematique.ecart_type ? thematique.ecart_type.toFixed(2) : 'N/A'}`}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                  />\r\n                                </Box>\r\n                              }\r\n                            />\r\n                            <CardContent>\r\n                              {/* Recommandations de chaque LLM */}\r\n                              {thematique.recommandations_llm && thematique.recommandations_llm.length > 0 ? (\r\n                                <Grid container spacing={2}>\r\n                                  {thematique.recommandations_llm.map((rec, recIndex) => (\r\n                                    <Grid item xs={12} md={4} key={recIndex}>\r\n                                      <Card variant=\"outlined\" sx={{ height: '100%' }}>\r\n                                        <CardHeader\r\n                                          title={rec.source}\r\n                                          avatar={\r\n                                            <Box sx={{ \r\n                                              width: 32, \r\n                                              height: 32, \r\n                                              borderRadius: '50%',\r\n                                              bgcolor: rec.source === 'ChatGPT' ? '#10a37f' : \r\n                                                       rec.source === 'Grok' ? '#1da1f2' : '#ff6b35',\r\n                                              display: 'flex',\r\n                                              alignItems: 'center',\r\n                                              justifyContent: 'center',\r\n                                              color: 'white',\r\n                                              fontSize: '0.75rem',\r\n                                              fontWeight: 'bold'\r\n                                            }}>\r\n                                              {rec.source === 'ChatGPT' ? 'GPT' : \r\n                                               rec.source === 'Grok' ? 'GRK' : 'CLD'}\r\n                                            </Box>\r\n                                          }\r\n                                          action={\r\n                                            <Box sx={{ textAlign: 'right' }}>\r\n                                              <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                                                {rec.score ? rec.score.toFixed(1) : 'N/A'}/5\r\n                                              </Typography>\r\n                                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                                Confiance: {rec.niveau_confiance || 'N/A'}%\r\n                                              </Typography>\r\n                                            </Box>\r\n                                          }\r\n                                          sx={{ pb: 1 }}\r\n                                        />\r\n                                        <CardContent sx={{ pt: 0 }}>\r\n                                          <Typography variant=\"body2\">\r\n                                            {rec.recommandation || 'Aucune recommandation disponible'}\r\n                                          </Typography>\r\n                                        </CardContent>\r\n                                      </Card>\r\n                                    </Grid>\r\n                                  ))}\r\n                                </Grid>\r\n                              ) : (\r\n                                <Alert severity=\"info\">\r\n                                  Aucune recommandation LLM disponible pour cette thématique.\r\n                                </Alert>\r\n                              )}\r\n                            </CardContent>\r\n                          </Card>\r\n                        ))}\r\n                      </Box>\r\n                    ) : (\r\n                      <Box>\r\n                        {loadingBenchmark ? (\r\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, p: 3 }}>\r\n                            <CircularProgress size={24} />\r\n                            <Typography>Chargement des recommandations LLM...</Typography>\r\n                          </Box>\r\n                        ) : (\r\n                          <Alert severity=\"info\">\r\n                            Aucune recommandation LLM disponible pour cette fonction.\r\n                            <br />\r\n                            <Typography variant=\"caption\">\r\n                              Les recommandations seront générées automatiquement lors de la sélection d'une fonction avec des thématiques.\r\n                            </Typography>\r\n                          </Alert>\r\n                        )}\r\n                      </Box>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            <Alert severity=\"info\">Veuillez sélectionner une fonction pour voir son analyse détaillée.</Alert>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AnalysesFonctions;","// src/pages/dashboard/CalculateScore.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Alert,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Calculate as CalculateIcon,\r\n} from '@mui/icons-material';\r\nimport api from '../../services/api';\r\n\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n  statut: string;\r\n  type: string;\r\n  hebergement: string;\r\n  architecture_logicielle: string;\r\n}\r\n\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_application: string;\r\n  id_questionnaire: string;\r\n  id_acteur: string;\r\n  statut: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n  titre?: string;\r\n  questionnaire_titre?: string;\r\n  acteur_nom?: string;\r\n}\r\n\r\nconst CalculateScore: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [calculating, setCalculating] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [application, setApplication] = useState<Application | null>(null);\r\n  const [formulaires, setFormulaires] = useState<Formulaire[]>([]);\r\n  const [activeStep, setActiveStep] = useState<number>(0);\r\n\r\n  // Étapes du processus\r\n  const steps = [\r\n    'Vérification des formulaires',\r\n    'Calcul des scores',\r\n    'Génération de l\\'analyse'\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchApplicationData = async () => {\r\n      if (!id) {\r\n        setError(\"Identifiant de l'application manquant\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // Récupérer les informations de l'application\r\n        const appResponse = await api.get(`applications/${id}`);\r\n        if (appResponse) {\r\n          setApplication(appResponse);\r\n        }\r\n\r\n        // Récupérer tous les formulaires puis filtrer par id_application\r\n        // Puisque la route formulaires/application/:id n'existe pas\r\n        const formResponse = await api.get(`formulaires`);\r\n        \r\n        let formsData: Formulaire[] = [];\r\n        if (Array.isArray(formResponse)) {\r\n          formsData = formResponse.filter(form => form.id_application === id);\r\n        } else if (formResponse && formResponse.data && Array.isArray(formResponse.data)) {\r\n          formsData = formResponse.data.filter(form => form.id_application === id);\r\n        }\r\n        \r\n        setFormulaires(formsData);\r\n        setActiveStep(0);\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n        setError('Erreur lors du chargement des données. Veuillez réessayer plus tard.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchApplicationData();\r\n  }, [id]);\r\n\r\n  const handleCalculateScore = async () => {\r\n    if (!id) return;\r\n\r\n    setCalculating(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n\r\n    try {\r\n      // Première étape - Vérification des formulaires\r\n      setActiveStep(0);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulation de traitement\r\n\r\n      // Deuxième étape - Calcul des scores\r\n      setActiveStep(1);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulation de traitement\r\n\r\n      // Appel à l'API pour calculer le score\r\n      // D'après le schéma SQL, on doit appeler un endpoint qui invoquera la procédure stockée\r\n      // calculer_scores_maturite avec le paramètre id_application\r\n      const response = await api.post('analyses', { id_application: id });\r\n\r\n      // Troisième étape - Génération de l'analyse\r\n      setActiveStep(2);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulation de traitement\r\n\r\n      setSuccess('Le score de maturité a été calculé avec succès!');\r\n      \r\n      // Rediriger vers la page d'analyse après 2 secondes\r\n      setTimeout(() => {\r\n        navigate(`/analyses-interpretations/${id}`);\r\n      }, 2000);\r\n    } catch (error) {\r\n      console.error('Erreur lors du calcul du score:', error);\r\n      setError('Une erreur est survenue lors du calcul du score. Veuillez réessayer plus tard.');\r\n    } finally {\r\n      setCalculating(false);\r\n    }\r\n  };\r\n\r\n  // Vérifier si l'application a des formulaires avec des réponses\r\n  const canCalculateScore = formulaires.length > 0;\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n              <Button\r\n                color=\"primary\"\r\n                startIcon={<ArrowBackIcon />}\r\n                onClick={() => navigate('/applications')}\r\n                sx={{ mr: 2 }}\r\n              >\r\n                Retour aux applications\r\n              </Button>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Calcul du Score de Maturité\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {application && (\r\n              <Typography variant=\"subtitle1\">\r\n                Application: <strong>{application.nom_application}</strong> | \r\n                Type: <strong>{application.type}</strong> | \r\n                Statut: <strong>{application.statut}</strong>\r\n              </Typography>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Messages d'erreur ou de succès */}\r\n        {error && (\r\n          <Grid xs={12}>\r\n            <Alert severity=\"error\">{error}</Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        {success && (\r\n          <Grid xs={12}>\r\n            <Alert severity=\"success\">{success}</Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Stepper */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Stepper activeStep={activeStep} alternativeLabel>\r\n              {steps.map((label) => (\r\n                <Step key={label}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Vérification des formulaires */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Formulaires disponibles pour l'analyse\r\n            </Typography>\r\n            <Divider sx={{ mb: 2 }} />\r\n\r\n            {formulaires.length > 0 ? (\r\n              <Box>\r\n                <Typography variant=\"body1\" mb={2}>\r\n                  {formulaires.length} formulaire(s) trouvé(s) pour cette application.\r\n                </Typography>\r\n                \r\n                <List>\r\n                  {formulaires.map((form, index) => (\r\n                    <ListItem key={form.id_formulaire || index} divider>\r\n                      <ListItemText\r\n                        primary={form.titre || form.questionnaire_titre || `Formulaire ${index + 1}`}\r\n                        secondary={`Statut: ${form.statut || 'Non défini'} | Dernière modification: ${\r\n                          form.date_modification ? \r\n                          new Date(form.date_modification).toLocaleDateString('fr-FR') : \r\n                          'Non disponible'\r\n                        }`}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Box>\r\n            ) : (\r\n              <Alert severity=\"warning\">\r\n                Aucun formulaire n'est disponible pour cette application. Le calcul du score de maturité nécessite au moins un formulaire complété.\r\n              </Alert>\r\n            )}\r\n            \r\n            <Box display=\"flex\" justifyContent=\"center\" mt={3}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<CalculateIcon />}\r\n                onClick={handleCalculateScore}\r\n                disabled={calculating || !canCalculateScore}\r\n                size=\"large\"\r\n              >\r\n                {calculating ? 'Calcul en cours...' : 'Calculer le Score de Maturité'}\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Explication */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Comment se déroule le calcul ?\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n              Le score de maturité est calculé à partir des réponses aux questionnaires liés à cette application. \r\n              Le processus évalue plusieurs thématiques et fournit un score global ainsi que des scores par domaine.\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              <strong>Note :</strong> Pour obtenir un score pertinent, assurez-vous que les formulaires ont été \r\n              complétés avec soin et reflètent fidèlement la maturité DevSecOps de l'application.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CalculateScore;","// pages/dashboard/forms/index.tsx - Version complète avec TOUTES les fonctionnalités existantes + optimisations\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Alert,\r\n  CircularProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Button,\r\n  IconButton,\r\n  Chip,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Tooltip,\r\n  LinearProgress,\r\n  Card,\r\n  CardContent,\r\n  Snackbar\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  Refresh as RefreshIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  Assignment as AssignmentIcon,\r\n  Add as AddIcon,\r\n  FilterList as FilterIcon,\r\n  Speed as SpeedIcon,\r\n  Send as SendIcon,\r\n  TrendingUp as TrendingUpIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../../services/api'; // Utilisation du bon chemin d'import\r\nimport logger from '../../../utils/logger';\r\n\r\n// Types complets conservés de l'original\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_acteur: string;\r\n  acteur_nom: string;\r\n  id_application: string;\r\n  nom_application: string;\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  id_questionnaire: string;\r\n  questionnaire_nom: string;\r\n  thematiques: string[]; // Array of thematique names\r\n  fonctions: string[]; // Array of fonction names\r\n  date_creation: string;\r\n  date_modification: string;\r\n  statut: 'Brouillon' | 'Soumis' | 'Validé';\r\n  progression: number;\r\n  total_questions?: number;\r\n  total_reponses?: number;\r\n  commentaires?: string;\r\n}\r\n\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  loadTime: number;\r\n  count: number;\r\n  endpoint: string;\r\n  cacheStatus: string;\r\n  timestamp: string;\r\n}\r\n\r\ntype OrderBy = 'questionnaire_nom' | 'fonctions' | 'acteur_nom' | 'date_modification' | 'statut' | 'progression' | 'thematiques';\r\n\r\nconst Forms: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  // État des données (conservé de l'original)\r\n  const [formulaires, setFormulaires] = useState<Formulaire[]>([]);\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // État des filtres et tri (conservé de l'original)\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [fonctionFilter, setFonctionFilter] = useState('');\r\n  const [entrepriseFilter, setEntrepriseFilter] = useState('');\r\n  const [order, setOrder] = useState<'asc' | 'desc'>('desc');\r\n  const [orderBy, setOrderBy] = useState<OrderBy>('date_modification');\r\n\r\n  // État de la pagination (conservé de l'original)\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  // Nouveaux états pour les optimisations\r\n  const [useOptimizedMode, setUseOptimizedMode] = useState(true);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState<PerformanceMetrics | null>(null);\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n\r\n  // Fonction de calcul de progression en temps réel (conservée de l'original)\r\n  const calculateRealProgression = async (formulaire: any) => {\r\n    try {\r\n      // Récupérer les questions du questionnaire\r\n      const questionsResponse = await api.get(`questionnaires/${formulaire.id_questionnaire}/questions`);\r\n      const questions = Array.isArray(questionsResponse) ? questionsResponse : \r\n                      Array.isArray(questionsResponse.data) ? questionsResponse.data : [];\r\n      \r\n      // Récupérer les réponses du formulaire\r\n      const reponsesResponse = await api.get(`reponses/formulaire/${formulaire.id_formulaire}`);\r\n      const reponses = Array.isArray(reponsesResponse) ? reponsesResponse : [];\r\n      \r\n      // Calculer le pourcentage\r\n      const totalQuestions = questions.length;\r\n      const totalReponses = reponses.length;\r\n      \r\n      return totalQuestions > 0 ? Math.round((totalReponses / totalQuestions) * 100) : 0;\r\n    } catch (error) {\r\n      console.warn(`Erreur calcul progression pour ${formulaire.id_formulaire}:`, error);\r\n      // Fallback vers l'ancienne méthode\r\n      return Number(formulaire.progression) ?? (\r\n        formulaire.statut === 'Validé' ? 100 : \r\n        formulaire.statut === 'Soumis' ? 75 : \r\n        formulaire.statut === 'En cours' ? 50 : 25\r\n      );\r\n    }\r\n  };\r\n\r\n  // Récupérer les données avec optimisations (version améliorée)\r\n  const fetchData = useCallback(async (useOptimized = true) => {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      setError(null);\r\n      logger.debug(`Chargement des formulaires - Mode: ${useOptimized ? 'optimisé' : 'détaillé'}`);\r\n      \r\n      // Choix de l'endpoint selon le mode\r\n      const endpoint = useOptimized ? 'formulaires' : 'formulaires/detailed';\r\n      \r\n      // Récupérer les formulaires avec la nouvelle structure optimisée\r\n      const formulairesResponse = await api.get(endpoint);\r\n      \r\n      // Normaliser la réponse des formulaires (logique conservée)\r\n      let formulairesData: any[] = [];\r\n      if (Array.isArray(formulairesResponse)) {\r\n        formulairesData = formulairesResponse;\r\n      } else if (formulairesResponse && formulairesResponse.data && Array.isArray(formulairesResponse.data)) {\r\n        formulairesData = formulairesResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour formulaires:', formulairesResponse);\r\n        formulairesData = [];\r\n      }\r\n      \r\n      // Récupération parallèle des données de référence pour de meilleures performances\r\n      const [fonctionsResponse, entreprisesResponse] = await Promise.all([\r\n        api.get('fonctions'),\r\n        api.get('entreprises')\r\n      ]);\r\n     \r\n      // Normalisation des fonctions (logique conservée)\r\n      let fonctionsData: Fonction[] = [];\r\n      if (Array.isArray(fonctionsResponse)) {\r\n        fonctionsData = fonctionsResponse;\r\n      } else if (fonctionsResponse && fonctionsResponse.data && Array.isArray(fonctionsResponse.data)) {\r\n        fonctionsData = fonctionsResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour fonctions:', fonctionsResponse);\r\n        fonctionsData = [];\r\n      }\r\n      \r\n      // Normalisation des entreprises (logique conservée)\r\n      let entreprisesData: Entreprise[] = [];\r\n      if (Array.isArray(entreprisesResponse)) {\r\n        entreprisesData = entreprisesResponse;\r\n      } else if (entreprisesResponse && entreprisesResponse.data && Array.isArray(entreprisesResponse.data)) {\r\n        entreprisesData = entreprisesResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour entreprises:', entreprisesResponse);\r\n        entreprisesData = [];\r\n      }\r\n      \r\n      // Normaliser les propriétés des formulaires (logique conservée et améliorée)\r\n      const normalizedFormulaires = formulairesData.map(form => ({\r\n        id_formulaire: form.id_formulaire,\r\n        id_acteur: form.id_acteur || '',\r\n        acteur_nom: form.acteur_nom || 'Utilisateur inconnu',\r\n        id_application: form.id_application || '',\r\n        nom_application: form.nom_application || 'Application inconnue',\r\n        id_entreprise: form.id_entreprise || '',\r\n        nom_entreprise: form.nom_entreprise || 'Entreprise inconnue',\r\n        id_questionnaire: form.id_questionnaire || '',\r\n        questionnaire_nom: form.questionnaire_nom || form.nom || 'Questionnaire sans nom',\r\n        // Les thématiques et fonctions viennent maintenant des JOINs via questionnaire_thematiques\r\n        thematiques: Array.isArray(form.thematiques) ? form.thematiques :\r\n                    (form.thematiques ? form.thematiques.split(',').map(t => t.trim()) : []),\r\n        fonctions: Array.isArray(form.fonctions) ? form.fonctions :\r\n                  (form.fonctions ? form.fonctions.split(',').map(f => f.trim()) : []),\r\n        date_creation: form.date_creation || new Date().toISOString(),\r\n        date_modification: form.date_modification || form.date_creation || new Date().toISOString(),\r\n        statut: form.statut || 'Brouillon',\r\n        progression: Number(form.progression) ?? (\r\n          form.statut === 'Validé' ? 100 : \r\n          form.statut === 'Soumis' ? 75 : \r\n          form.statut === 'En cours' ? 50 : 25\r\n        ),\r\n        total_questions: form.total_questions || 0,\r\n        total_reponses: form.total_reponses || 0,\r\n        commentaires: form.commentaires || ''\r\n      }));\r\n      \r\n      const loadTime = Date.now() - startTime;\r\n      \r\n      // Enregistrer les métriques de performance\r\n      setPerformanceMetrics({\r\n        loadTime,\r\n        count: normalizedFormulaires.length,\r\n        endpoint,\r\n        cacheStatus: 'Non disponible',\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      setFormulaires(normalizedFormulaires);\r\n      setFonctions(fonctionsData);\r\n      setEntreprises(entreprisesData);\r\n      \r\n      logger.info(`✅ ${normalizedFormulaires.length} formulaires chargés en ${loadTime}ms via ${endpoint}`);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des données:', error);\r\n      setError('Impossible de charger les formulaires. Veuillez réessayer plus tard.');\r\n      setFormulaires([]);\r\n      logger.error('Erreur lors du chargement des formulaires:', error);\r\n    } finally {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    fetchData(useOptimizedMode);\r\n  }, [fetchData, useOptimizedMode]);\r\n  \r\n  // Rafraîchir les données (conservé de l'original)\r\n  const handleRefresh = () => {\r\n    setRefreshing(true);\r\n    fetchData(useOptimizedMode);\r\n  };\r\n\r\n  // Basculer entre mode optimisé et détaillé\r\n  const toggleOptimizedMode = () => {\r\n    const newMode = !useOptimizedMode;\r\n    setUseOptimizedMode(newMode);\r\n    setLoading(true);\r\n    fetchData(newMode);\r\n  };\r\n\r\n  // Diagnostic de performance\r\n  const runPerformanceTest = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('formulaires/debug/performance');\r\n      \r\n      if (response.data) {\r\n        const metrics = response.data;\r\n        alert(`Diagnostic de performance:\r\n        \r\nTests de performance:\r\n- Comptage simple: ${metrics.performance_tests?.simple_count || 'N/A'}\r\n- Chargement cache: ${metrics.performance_tests?.cache_load || 'N/A'}\r\n- Requête de base: ${metrics.performance_tests?.base_query || 'N/A'}\r\n\r\nCache: ${metrics.cache_status}\r\nTotal formulaires: ${metrics.total_formulaires}\r\n\r\nRecommandation: ${useOptimizedMode ? 'Mode optimisé activé ✅' : 'Activez le mode optimisé pour de meilleures performances'}`);\r\n\r\n        setPerformanceMetrics(prev => ({\r\n          ...prev,\r\n          cacheStatus: metrics.cache_status,\r\n          timestamp: new Date().toISOString()\r\n        } as PerformanceMetrics));\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du diagnostic:', error);\r\n      alert('Erreur lors du diagnostic de performance');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Filtrer les formulaires en fonction des critères (logique conservée de l'original)\r\n  const filteredFormulaires = formulaires.filter(form => {\r\n    const matchesSearch = searchTerm === '' || \r\n      (form.questionnaire_nom && form.questionnaire_nom.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (form.nom_entreprise && form.nom_entreprise.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (form.acteur_nom && form.acteur_nom.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (form.thematiques && form.thematiques.some(t => t.toLowerCase().includes(searchTerm.toLowerCase()))) ||\r\n      (form.fonctions && form.fonctions.some(f => f.toLowerCase().includes(searchTerm.toLowerCase())));\r\n    \r\n    const matchesStatus = statusFilter === '' || form.statut === statusFilter;\r\n    \r\n    // Filtre par fonction : vérifier si une des fonctions du questionnaire correspond\r\n    const matchesFonction = fonctionFilter === '' || \r\n      (form.fonctions && form.fonctions.includes(fonctionFilter));\r\n    \r\n    const matchesEntreprise = entrepriseFilter === '' || form.id_entreprise === entrepriseFilter;\r\n    \r\n    return matchesSearch && matchesStatus && matchesFonction && matchesEntreprise;\r\n  });\r\n  \r\n  // Trier les formulaires (logique conservée de l'original)\r\n  const sortedFormulaires = [...filteredFormulaires].sort((a, b) => {\r\n    let comparison = 0;\r\n    \r\n    switch (orderBy) {\r\n      case 'questionnaire_nom':\r\n        comparison = (a.questionnaire_nom || '').localeCompare(b.questionnaire_nom || '');\r\n        break;\r\n      case 'fonctions':\r\n        // Trier par la première fonction (ou toutes concatenées)\r\n        const aFonctions = a.fonctions?.join(', ') || '';\r\n        const bFonctions = b.fonctions?.join(', ') || '';\r\n        comparison = aFonctions.localeCompare(bFonctions);\r\n        break;\r\n      case 'acteur_nom':\r\n        comparison = (a.acteur_nom || '').localeCompare(b.acteur_nom || '');\r\n        break;\r\n      case 'date_modification':\r\n        comparison = new Date(a.date_modification).getTime() - new Date(b.date_modification).getTime();\r\n        break;\r\n      case 'statut':\r\n        comparison = a.statut.localeCompare(b.statut);\r\n        break;\r\n      case 'progression':\r\n        comparison = (a.progression || 0) - (b.progression || 0);\r\n        break;\r\n      case 'thematiques':\r\n        const aThematiques = a.thematiques?.join(', ') || '';\r\n        const bThematiques = b.thematiques?.join(', ') || '';\r\n        comparison = aThematiques.localeCompare(bThematiques);\r\n        break;\r\n      default:\r\n        comparison = 0;\r\n    }\r\n    \r\n    return order === 'asc' ? comparison : -comparison;\r\n  });\r\n  \r\n  // Paginer les formulaires (conservé de l'original)\r\n  const paginatedFormulaires = sortedFormulaires.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  \r\n  // Gérer le changement de page (conservé de l'original)\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n  \r\n  // Gérer le changement de nombre de lignes par page (conservé de l'original)\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  \r\n  // Gérer le tri (conservé de l'original)\r\n  const handleRequestSort = (property: OrderBy) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n  \r\n  // Helper pour obtenir la couleur selon le statut (conservé de l'original)\r\n  const getStatusColor = (status: 'Brouillon' | 'Soumis' | 'Validé') => {\r\n    switch (status) {\r\n      case 'Validé': return 'success';\r\n      case 'Soumis': return 'primary';\r\n      case 'Brouillon': return 'warning';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  // Helper pour obtenir la couleur de progression (conservé de l'original)\r\n  const getProgressColor = (progress: number = 0) => {\r\n    if (progress < 30) return 'error';\r\n    if (progress < 70) return 'warning';\r\n    return 'success';\r\n  };\r\n  \r\n  // Formater la date (conservé de l'original)\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit'\r\n      });\r\n    } catch (e) {\r\n      console.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n  \r\n  // Obtenir les fonctions uniques pour le filtre (conservé de l'original)\r\n  const uniqueFonctions = [...new Set(\r\n    formulaires.flatMap(form => form.fonctions || [])\r\n  )].filter(Boolean);\r\n\r\n  // Actions sur les formulaires (conservées et améliorées)\r\n  const handleView = (formulaire: Formulaire) => {\r\n    navigate(`/formulaires/${formulaire.id_formulaire}`);\r\n  };\r\n\r\n  const handleEdit = (formulaire: Formulaire) => {\r\n    // Rediriger vers la page de détail qui permet l'édition\r\n    navigate(`/formulaires/${formulaire.id_formulaire}`);\r\n  };\r\n\r\n  const handleDelete = async (formulaire: Formulaire) => {\r\n    if (window.confirm(`Êtes-vous sûr de vouloir supprimer ce formulaire \"${formulaire.questionnaire_nom}\" ?`)) {\r\n      try {\r\n        await api.delete(`formulaires/${formulaire.id_formulaire}`);\r\n        setFormulaires(prev => prev.filter(f => f.id_formulaire !== formulaire.id_formulaire));\r\n        setSuccessMessage('Formulaire supprimé avec succès');\r\n        logger.info(`Formulaire ${formulaire.id_formulaire} supprimé`);\r\n      } catch (error) {\r\n        console.error('Erreur lors de la suppression:', error);\r\n        setError('Erreur lors de la suppression du formulaire');\r\n        logger.error('Erreur suppression formulaire:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Nouvelle action : soumettre un formulaire\r\n  const handleSubmit = async (formulaire: Formulaire) => {\r\n    if (window.confirm(`Soumettre le formulaire \"${formulaire.questionnaire_nom}\" pour validation ?`)) {\r\n      try {\r\n        setLoading(true);\r\n        await api.put(`formulaires/${formulaire.id_formulaire}/submit`);\r\n        \r\n        // Mettre à jour le formulaire dans la liste\r\n        setFormulaires(prev => \r\n          prev.map(f => \r\n            f.id_formulaire === formulaire.id_formulaire \r\n              ? { ...f, statut: 'Soumis' as const, progression: Math.max(f.progression, 75) }\r\n              : f\r\n          )\r\n        );\r\n        \r\n        setSuccessMessage('Formulaire soumis avec succès');\r\n        logger.info(`Formulaire ${formulaire.id_formulaire} soumis`);\r\n      } catch (error) {\r\n        console.error('Erreur lors de la soumission:', error);\r\n        setError('Erreur lors de la soumission du formulaire');\r\n        logger.error('Erreur soumission formulaire:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCreateNew = () => {\r\n    navigate('/formulaires/new');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress size={60} />\r\n        <Typography variant=\"body2\" sx={{ ml: 2 }}>\r\n          Chargement des formulaires...\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\r\n      {/* Messages d'erreur et de succès */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError(null)}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Snackbar\r\n        open={!!successMessage}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSuccessMessage(null)}\r\n        message={successMessage}\r\n      />\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête avec métriques de performance */}\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Gestion des Formulaires d'Évaluation\r\n              </Typography>\r\n              <Box display=\"flex\" gap={1}>\r\n                <Tooltip title=\"Diagnostic de performance\">\r\n                  <IconButton onClick={runPerformanceTest} color=\"info\">\r\n                    <SpeedIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n                \r\n                <Tooltip title={useOptimizedMode ? \"Mode détaillé (plus lent)\" : \"Mode optimisé (plus rapide)\"}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    onClick={toggleOptimizedMode}\r\n                    startIcon={<TrendingUpIcon />}\r\n                    color={useOptimizedMode ? \"success\" : \"warning\"}\r\n                  >\r\n                    {useOptimizedMode ? 'Optimisé' : 'Détaillé'}\r\n                  </Button>\r\n                </Tooltip>\r\n                \r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  startIcon={<RefreshIcon />}\r\n                  onClick={handleRefresh}\r\n                  disabled={refreshing}\r\n                >\r\n                  Actualiser\r\n                </Button>\r\n                \r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={handleCreateNew}\r\n                >\r\n                  Nouveau Formulaire\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n            \r\n            {/* Métriques de performance */}\r\n            {performanceMetrics && (\r\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                <Typography variant=\"body2\">\r\n                  {performanceMetrics.count} formulaires chargés en {performanceMetrics.loadTime}ms \r\n                  via {performanceMetrics.endpoint}\r\n                  {useOptimizedMode && \" (mode optimisé)\"}\r\n                </Typography>\r\n              </Alert>\r\n            )}\r\n            \r\n            {/* Statistiques rapides (conservées de l'original) */}\r\n            <Grid container spacing={2} sx={{ mb: 2 }}>\r\n              <Grid item xs={12} sm={6} md={3}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                      Total Formulaires\r\n                    </Typography>\r\n                    <Typography variant=\"h4\">\r\n                      {formulaires.length}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6} md={3}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                      Validés\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" color=\"success.main\">\r\n                      {formulaires.filter(f => f.statut === 'Validé').length}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6} md={3}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                      En Cours\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" color=\"warning.main\">\r\n                      {formulaires.filter(f => f.statut === 'Soumis').length}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6} md={3}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                      Brouillons\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" color=\"info.main\">\r\n                      {formulaires.filter(f => f.statut === 'Brouillon').length}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Filtres (conservés de l'original) */}\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n              <Grid item xs={12} md={3}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Rechercher\"\r\n                  variant=\"outlined\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={2}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Statut</InputLabel>\r\n                  <Select\r\n                    value={statusFilter}\r\n                    label=\"Statut\"\r\n                    onChange={(e) => setStatusFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Tous</MenuItem>\r\n                    <MenuItem value=\"Brouillon\">Brouillon</MenuItem>\r\n                    <MenuItem value=\"Soumis\">Soumis</MenuItem>\r\n                    <MenuItem value=\"Validé\">Validé</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={2}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Fonction</InputLabel>\r\n                  <Select\r\n                    value={fonctionFilter}\r\n                    label=\"Fonction\"\r\n                    onChange={(e) => setFonctionFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Toutes</MenuItem>\r\n                    {uniqueFonctions.map((fonction) => (\r\n                      <MenuItem key={fonction} value={fonction}>\r\n                        {fonction}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={3}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Entreprise</InputLabel>\r\n                  <Select\r\n                    value={entrepriseFilter}\r\n                    label=\"Entreprise\"\r\n                    onChange={(e) => setEntrepriseFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Toutes</MenuItem>\r\n                    {entreprises.map((entreprise) => (\r\n                      <MenuItem key={entreprise.id_entreprise} value={entreprise.id_entreprise}>\r\n                        {entreprise.nom_entreprise}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={2}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  {filteredFormulaires.length} résultat(s)\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Tableau des formulaires (conservé intégralement de l'original avec améliorations) */}\r\n        <Grid item xs={12}>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <TableSortLabel\r\n                      active={orderBy === 'questionnaire_nom'}\r\n                      direction={orderBy === 'questionnaire_nom' ? order : 'asc'}\r\n                      onClick={() => handleRequestSort('questionnaire_nom')}\r\n                    >\r\n                      Questionnaire\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <TableSortLabel\r\n                      active={orderBy === 'fonctions'}\r\n                      direction={orderBy === 'fonctions' ? order : 'asc'}\r\n                      onClick={() => handleRequestSort('fonctions')}\r\n                    >\r\n                      Fonction(s)\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <TableSortLabel\r\n                      active={orderBy === 'acteur_nom'}\r\n                      direction={orderBy === 'acteur_nom' ? order : 'asc'}\r\n                      onClick={() => handleRequestSort('acteur_nom')}\r\n                    >\r\n                      Acteur\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <TableSortLabel\r\n                      active={orderBy === 'date_modification'}\r\n                      direction={orderBy === 'date_modification' ? order : 'asc'}\r\n                      onClick={() => handleRequestSort('date_modification')}\r\n                    >\r\n                      Dates\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <TableSortLabel\r\n                      active={orderBy === 'statut'}\r\n                      direction={orderBy === 'statut' ? order : 'asc'}\r\n                      onClick={() => handleRequestSort('statut')}\r\n                    >\r\n                      Statut\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <TableSortLabel\r\n                      active={orderBy === 'progression'}\r\n                      direction={orderBy === 'progression' ? order : 'asc'}\r\n                      onClick={() => handleRequestSort('progression')}\r\n                    >\r\n                      Progression\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {paginatedFormulaires.length > 0 ? (\r\n                  paginatedFormulaires.map((formulaire) => (\r\n                    <TableRow key={formulaire.id_formulaire} hover>\r\n                      {/* Questionnaire */}\r\n                      <TableCell>\r\n                        <Box>\r\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                            {formulaire.questionnaire_nom}\r\n                          </Typography>\r\n                          {formulaire.thematiques && formulaire.thematiques.length > 0 && (\r\n                            <Box sx={{ mt: 0.5 }}>\r\n                              {formulaire.thematiques.slice(0, 2).map((thematique, index) => (\r\n                                <Chip \r\n                                  key={index}\r\n                                  label={thematique} \r\n                                  size=\"small\" \r\n                                  color=\"secondary\" \r\n                                  variant=\"outlined\" \r\n                                  sx={{ mr: 0.5, mb: 0.5 }}\r\n                                />\r\n                              ))}\r\n                              {formulaire.thematiques.length > 2 && (\r\n                                <Chip \r\n                                  label={`+${formulaire.thematiques.length - 2}`} \r\n                                  size=\"small\" \r\n                                  color=\"default\" \r\n                                  variant=\"outlined\" \r\n                                />\r\n                              )}\r\n                            </Box>\r\n                          )}\r\n                        </Box>\r\n                      </TableCell>\r\n                      \r\n                      {/* Fonction(s) */}\r\n                      <TableCell>\r\n                        <Box>\r\n                          {formulaire.fonctions && formulaire.fonctions.length > 0 ? (\r\n                            formulaire.fonctions.slice(0, 2).map((fonction, index) => (\r\n                              <Chip \r\n                                key={index}\r\n                                label={fonction} \r\n                                color=\"primary\" \r\n                                variant=\"outlined\" \r\n                                size=\"small\"\r\n                                sx={{ mr: 0.5, mb: 0.5 }}\r\n                              />\r\n                            ))\r\n                          ) : (\r\n                            <Chip \r\n                              label=\"Aucune fonction\" \r\n                              color=\"default\" \r\n                              variant=\"outlined\" \r\n                              size=\"small\"\r\n                            />\r\n                          )}\r\n                          {formulaire.fonctions && formulaire.fonctions.length > 2 && (\r\n                            <Chip \r\n                              label={`+${formulaire.fonctions.length - 2}`} \r\n                              size=\"small\" \r\n                              color=\"default\" \r\n                              variant=\"outlined\" \r\n                            />\r\n                          )}\r\n                        </Box>\r\n                      </TableCell>\r\n                      \r\n                      {/* Acteur */}\r\n                      <TableCell>\r\n                        <Box>\r\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                            {formulaire.acteur_nom}\r\n                          </Typography>\r\n                          <Typography variant=\"caption\" color=\"textSecondary\">\r\n                            {formulaire.nom_entreprise}\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                      \r\n                      {/* Dates */}\r\n                      <TableCell>\r\n                        <Box>\r\n                          <Typography variant=\"body2\">\r\n                            Créé: {formatDate(formulaire.date_creation)}\r\n                          </Typography>\r\n                          <Typography variant=\"caption\" color=\"textSecondary\">\r\n                            Modifié: {formatDate(formulaire.date_modification)}\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                      \r\n                      {/* Statut */}\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={formulaire.statut} \r\n                          color={getStatusColor(formulaire.statut)}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      \r\n                      {/* Progression */}\r\n                      <TableCell>\r\n                        <Box sx={{ minWidth: 120 }}>\r\n                          <Box display=\"flex\" alignItems=\"center\" mb={0.5}>\r\n                            <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n                              {formulaire.progression}%\r\n                            </Typography>\r\n                            {formulaire.total_questions > 0 && (\r\n                              <Typography variant=\"caption\" color=\"textSecondary\">\r\n                                ({formulaire.total_reponses}/{formulaire.total_questions})\r\n                              </Typography>\r\n                            )}\r\n                          </Box>\r\n                          <LinearProgress \r\n                            variant=\"determinate\" \r\n                            value={formulaire.progression} \r\n                            color={getProgressColor(formulaire.progression)}\r\n                            sx={{ height: 6, borderRadius: 3 }}\r\n                          />\r\n                        </Box>\r\n                      </TableCell>\r\n                      \r\n                      {/* Actions améliorées */}\r\n                      <TableCell>\r\n                        <Box display=\"flex\" gap={0.5}>\r\n                          <Tooltip title=\"Voir les détails\">\r\n                            <IconButton \r\n                              size=\"small\" \r\n                              color=\"info\"\r\n                              onClick={() => handleView(formulaire)}\r\n                            >\r\n                              <ViewIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Modifier\">\r\n                            <IconButton \r\n                              size=\"small\" \r\n                              color=\"primary\"\r\n                              onClick={() => handleEdit(formulaire)}\r\n                            >\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          {formulaire.statut === 'Brouillon' && (\r\n                            <Tooltip title=\"Soumettre\">\r\n                              <IconButton \r\n                                size=\"small\" \r\n                                color=\"success\"\r\n                                onClick={() => handleSubmit(formulaire)}\r\n                              >\r\n                                <SendIcon />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          )}\r\n                          <Tooltip title=\"Supprimer\">\r\n                            <IconButton \r\n                              size=\"small\" \r\n                              color=\"error\"\r\n                              onClick={() => handleDelete(formulaire)}\r\n                            >\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </Box>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                ) : (\r\n                  <TableRow>\r\n                    <TableCell colSpan={7} align=\"center\">\r\n                      <Box py={4}>\r\n                        <AssignmentIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n                        <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n                          Aucun formulaire trouvé\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {formulaires.length === 0 \r\n                            ? \"Aucun formulaire n'a encore été créé.\"\r\n                            : \"Aucun formulaire ne correspond aux critères de recherche.\"}\r\n                        </Typography>\r\n                        {formulaires.length === 0 && (\r\n                          <Button \r\n                            variant=\"contained\" \r\n                            color=\"primary\" \r\n                            startIcon={<AddIcon />}\r\n                            sx={{ mt: 2 }}\r\n                            onClick={handleCreateNew}\r\n                          >\r\n                            Créer le premier formulaire\r\n                          </Button>\r\n                        )}\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n            \r\n            {/* Pagination (conservée de l'original) */}\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, 50]}\r\n              component=\"div\"\r\n              count={filteredFormulaires.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n              onRowsPerPageChange={handleChangeRowsPerPage}\r\n              labelRowsPerPage=\"Lignes par page:\"\r\n              labelDisplayedRows={({ from, to, count }) => \r\n                `${from}-${to} sur ${count !== -1 ? count : `plus de ${to}`}`\r\n              }\r\n            />\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Forms;","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container, Grid, Paper, Typography, Box, CircularProgress, Button,\r\n  Card, CardContent, Divider, TextField, FormControl, FormControlLabel, RadioGroup, Radio,\r\n  IconButton, Chip, Alert, Accordion, AccordionSummary, AccordionDetails, Tooltip, Badge,\r\n  Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Breadcrumbs, Link\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon, Save as SaveIcon, Send as SendIcon, Check as CheckIcon,\r\n  ExpandMore as ExpandMoreIcon, Home as HomeIcon, Business as BusinessIcon,\r\n  AccountTree as FunctionIcon, Person as PersonIcon, Warning as WarningIcon,\r\n  Comment as CommentIcon, InfoOutlined as InfoIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../../services/api';\r\n\r\n// Interfaces mises à jour\r\ninterface Thematique {\r\n  id: string;\r\n  nom: string;\r\n}\r\n\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_acteur: string;\r\n  acteur_nom: string;\r\n  id_application: string;\r\n  nom_application: string;\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  id_questionnaire: string;\r\n  questionnaire_nom: string;\r\n  thematiques: Thematique[];\r\n  fonctions: string[];\r\n  date_creation: string;\r\n  date_modification: string;\r\n  statut: 'Brouillon' | 'Soumis' | 'Validé';\r\n  progression: number;\r\n}\r\n\r\ninterface Reponse {\r\n  id_reponse: string;\r\n  id_formulaire: string;\r\n  id_question: string;\r\n  question_texte: string;\r\n  valeur_reponse: string;\r\n  score: number;\r\n  commentaire?: string;\r\n}\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  id_thematique: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre: number;\r\n  aide_reponse?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\nconst FormDetail: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [saving, setSaving] = useState<boolean>(false);\r\n  const [formulaire, setFormulaire] = useState<Formulaire | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [reponses, setReponses] = useState<Reponse[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [openConfirmDialog, setOpenConfirmDialog] = useState<{ open: boolean; action: 'Soumis' | 'Validé' | null }>({ open: false, action: null });\r\n\r\n  // Charger les données du formulaire\r\n  useEffect(() => {\r\n    const fetchFormulaire = async () => {\r\n      if (!id) {\r\n        setError('Identifiant du formulaire manquant');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // Récupérer les informations du formulaire\r\n        const formulaireResponse = await api.get(`formulaires/${id}`);\r\n        const formulaireData = formulaireResponse.data || formulaireResponse;\r\n\r\n        if (!formulaireData || typeof formulaireData !== 'object') {\r\n          throw new Error('Format de données du formulaire inattendu');\r\n        }\r\n\r\n        // Normaliser les données\r\n        const normalizedFormulaire: Formulaire = {\r\n          id_formulaire: formulaireData.id_formulaire || '',\r\n          id_acteur: formulaireData.acteur?.id_acteur || '',\r\n          acteur_nom: formulaireData.acteur?.nom_prenom || 'Utilisateur inconnu',\r\n          id_application: formulaireData.application?.id_application || '',\r\n          nom_application: formulaireData.application?.nom_application || 'Application inconnue',\r\n          id_entreprise: formulaireData.entreprise?.id_entreprise || '',\r\n          nom_entreprise: formulaireData.entreprise?.nom_entreprise || 'Entreprise inconnue',\r\n          id_questionnaire: formulaireData.questionnaire?.id_questionnaire || '',\r\n          questionnaire_nom: formulaireData.questionnaire?.nom || 'Questionnaire inconnu',\r\n          thematiques: Array.isArray(formulaireData.questionnaire?.thematiques)\r\n            ? formulaireData.questionnaire.thematiques.map((t: { id: string; nom: string }) => ({\r\n                id: t.id || '',\r\n                nom: t.nom || 'Thématique inconnue',\r\n              }))\r\n            : [],\r\n          fonctions: Array.isArray(formulaireData.questionnaire?.fonctions)\r\n            ? formulaireData.questionnaire.fonctions.map((f: { nom: string }) => f.nom).filter(Boolean)\r\n            : [],\r\n          date_creation: formulaireData.date_creation || new Date().toISOString(),\r\n          date_modification: formulaireData.date_modification || formulaireData.date_creation || new Date().toISOString(),\r\n          statut: formulaireData.statut || 'Brouillon',\r\n          progression: Number(formulaireData.progression) || 0,\r\n        };\r\n\r\n        setFormulaire(normalizedFormulaire);\r\n\r\n        if (!normalizedFormulaire.id_questionnaire) {\r\n          throw new Error('Questionnaire non valide associé au formulaire');\r\n        }\r\n\r\n        // Récupérer les questions pour chaque thématique\r\n        const questionsPromises = normalizedFormulaire.thematiques.map(async (thematique) => {\r\n          try {\r\n            const response = await api.get(`questions/thematique/${thematique.id}`);\r\n            const questions = Array.isArray(response) ? response : [];\r\n            return questions.map((q: any) => ({\r\n              id_question: q.id_question || '',\r\n              id_thematique: q.id_thematique || thematique.id,\r\n              texte: q.texte || 'Question inconnue',\r\n              ponderation: Number(q.ponderation) || 1,\r\n              ordre: Number(q.ordre) || 0,\r\n              aide_reponse: q.aide_reponse || undefined,\r\n              date_creation: q.date_creation || new Date().toISOString(),\r\n              date_modification: q.date_modification || q.date_creation || new Date().toISOString(),\r\n            }));\r\n          } catch (err) {\r\n            console.warn(`Erreur lors du chargement des questions pour la thématique ${thematique.nom}:`, err);\r\n            return [];\r\n          }\r\n        });\r\n\r\n        const questionsArrays = await Promise.all(questionsPromises);\r\n        const normalizedQuestions = questionsArrays.flat().sort((a: Question, b: Question) => a.ordre - b.ordre);\r\n        setQuestions(normalizedQuestions);\r\n\r\n        // Récupérer les réponses\r\n        const reponsesResponse = await api.get(`reponses/formulaire/${id}`);\r\n        const reponsesData = Array.isArray(reponsesResponse) ? reponsesResponse : [];\r\n        const normalizedReponses = reponsesData.map((r: any) => ({\r\n          id_reponse: r.id_reponse || '',\r\n          id_formulaire: r.id_formulaire || id,\r\n          id_question: r.id_question || '',\r\n          question_texte: r.question_texte || '',\r\n          valeur_reponse: r.valeur_reponse || '',\r\n          score: Number(r.score) || 0,\r\n          commentaire: r.commentaire || undefined,\r\n        }));\r\n        setReponses(normalizedReponses);\r\n      } catch (err: any) {\r\n        setError(err.message || 'Erreur lors du chargement du formulaire.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchFormulaire();\r\n  }, [id]);\r\n\r\n  // Calculs mémorisés\r\n  const isFormComplete = useMemo(\r\n    () => questions.length > 0 && questions.every((q) => reponses.some((r) => r.id_question === q.id_question)),\r\n    [questions, reponses]\r\n  );\r\n  const progression = useMemo(\r\n    () => (questions.length > 0 ? (reponses.length / questions.length) * 100 : 0),\r\n    [questions.length, reponses.length]\r\n  );\r\n  const commentCount = useMemo(\r\n    () => reponses.filter((r) => r.commentaire && r.commentaire.trim().length > 0).length,\r\n    [reponses]\r\n  );\r\n  const criticalQuestions = useMemo(\r\n    () => reponses.filter((r) => {\r\n      const score = parseFloat(r.valeur_reponse) || 0;\r\n      const question = questions.find((q) => q.id_question === r.id_question);\r\n      return score <= 2 && question && question.ponderation >= 3;\r\n    }).length,\r\n    [reponses, questions]\r\n  );\r\n\r\n  // Regrouper les questions par thématique\r\n  const questionsByThematique = useMemo(() => {\r\n    if (!formulaire) return {};\r\n\r\n    const grouped: { [key: string]: Question[] } = {};\r\n    formulaire.thematiques.forEach((thematique) => {\r\n      grouped[thematique.id] = questions\r\n        .filter((q) => q.id_thematique === thematique.id)\r\n        .sort((a, b) => a.ordre - b.ordre);\r\n    });\r\n    return grouped;\r\n  }, [formulaire, questions]);\r\n\r\n  // Trouver une réponse\r\n  const findReponse = (questionId: string) => reponses.find((r) => r.id_question === questionId);\r\n\r\n  // Mettre à jour une réponse\r\n  const updateReponse = (questionId: string, value: string) => {\r\n    const existingReponseIndex = reponses.findIndex((r) => r.id_question === questionId);\r\n    const question = questions.find((q) => q.id_question === questionId);\r\n\r\n    if (!question) return;\r\n\r\n    if (existingReponseIndex >= 0) {\r\n      const updatedReponses = [...reponses];\r\n      updatedReponses[existingReponseIndex] = {\r\n        ...updatedReponses[existingReponseIndex],\r\n        valeur_reponse: value,\r\n        score: parseInt(value) || 0,\r\n      };\r\n      setReponses(updatedReponses);\r\n    } else {\r\n      const newReponse: Reponse = {\r\n        id_reponse: `temp_${Date.now()}`,\r\n        id_formulaire: id || '',\r\n        id_question: questionId,\r\n        question_texte: question.texte,\r\n        valeur_reponse: value,\r\n        score: parseInt(value) || 0,\r\n      };\r\n      setReponses([...reponses, newReponse]);\r\n    }\r\n  };\r\n\r\n  // Mettre à jour un commentaire\r\n  const updateCommentaire = (questionId: string, commentaire: string) => {\r\n    const existingReponseIndex = reponses.findIndex((r) => r.id_question === questionId);\r\n    if (existingReponseIndex >= 0) {\r\n      const updatedReponses = [...reponses];\r\n      updatedReponses[existingReponseIndex] = {\r\n        ...updatedReponses[existingReponseIndex],\r\n        commentaire: commentaire || undefined,\r\n      };\r\n      setReponses(updatedReponses);\r\n    }\r\n  };\r\n\r\n  // Gestion des actions de confirmation\r\n  const handleConfirmAction = (action: 'Soumis' | 'Validé') => {\r\n    setOpenConfirmDialog({ open: true, action });\r\n  };\r\n\r\n  const handleCloseConfirmDialog = () => {\r\n    setOpenConfirmDialog({ open: false, action: null });\r\n  };\r\n\r\n  // Sauvegarder le formulaire\r\n  const saveFormulaire = async (newStatus?: 'Brouillon' | 'Soumis' | 'Validé') => {\r\n  if (!formulaire || !id) return;\r\n\r\n  setSaving(true);\r\n  setError(null);\r\n\r\n  try {\r\n    // ✅ ÉTAPE 1 : Mettre à jour le statut (IDENTIQUE à l'existant)\r\n    if (newStatus && newStatus !== formulaire.statut) {\r\n      await api.put(`formulaires/${id}`, { statut: newStatus, progression: Math.round(progression) });\r\n      setFormulaire({ ...formulaire, statut: newStatus, progression: Math.round(progression) });\r\n    }\r\n\r\n    // ✅ ÉTAPE 2 : Sauvegarder les réponses (IDENTIQUE à l'existant)\r\n    const savePromises = reponses.map(async (reponse, index) => {\r\n      try {\r\n        // Validation préalable\r\n        if (!reponse.id_question || !reponse.id_formulaire) {\r\n          console.warn(`Réponse ${index + 1} incomplète, ignorée:`, reponse);\r\n          return { skipped: true, index };\r\n        }\r\n\r\n        let response;\r\n        let result;\r\n\r\n        if (reponse.id_reponse.startsWith('temp_')) {\r\n          // POST pour nouvelles réponses\r\n          response = await api.post('reponses', {\r\n            id_formulaire: reponse.id_formulaire,\r\n            id_question: reponse.id_question,\r\n            valeur_reponse: reponse.valeur_reponse,\r\n            score: reponse.score,\r\n            commentaire: reponse.commentaire || '',\r\n          });\r\n\r\n          // ✅ Gestion robuste de la structure de réponse pour POST\r\n          if (response && response.data && response.data.id_reponse) {\r\n            result = response.data;\r\n          } else if (response && response.id_reponse) {\r\n            result = response;\r\n          } else if (response) {\r\n            console.warn(`Format de réponse inattendu pour POST réponse ${index + 1}:`, response);\r\n            result = { id_reponse: 'created', success: true, originalResponse: response };\r\n          } else {\r\n            throw new Error('Aucune réponse reçue de l\\'API');\r\n          }\r\n        } else {\r\n          // PUT pour réponses existantes\r\n          response = await api.put(`reponses/${reponse.id_reponse}`, {\r\n            valeur_reponse: reponse.valeur_reponse,\r\n            score: reponse.score,\r\n            commentaire: reponse.commentaire || '',\r\n          });\r\n\r\n          // ✅ Gestion robuste de la structure de réponse pour PUT\r\n          if (response && response.data) {\r\n            result = response.data;\r\n          } else if (response) {\r\n            result = response;\r\n          } else {\r\n            result = { id_reponse: reponse.id_reponse, success: true };\r\n          }\r\n        }\r\n\r\n        return { success: true, index, result };\r\n\r\n      } catch (err: any) {\r\n        console.error(`❌ Erreur sauvegarde réponse ${index + 1}:`, {\r\n          error: err,\r\n          reponse: reponse,\r\n          message: err?.message,\r\n          status: err?.response?.status\r\n        });\r\n        \r\n        return { \r\n          success: false, \r\n          index, \r\n          error: err?.message || 'Erreur inconnue',\r\n          reponse \r\n        };\r\n      }\r\n    });\r\n\r\n    const results = await Promise.all(savePromises);\r\n\r\n    // ✅ ÉTAPE 3 : Analyser les résultats (IDENTIQUE à l'existant)\r\n    const successfulSaves = results.filter(r => r.success === true);\r\n    const failedSaves = results.filter(r => r.success === false);\r\n    const skippedSaves = results.filter(r => r.skipped === true);\r\n\r\n    console.log(`📊 Résultats sauvegarde: ${successfulSaves.length} réussies, ${failedSaves.length} échouées, ${skippedSaves.length} ignorées`);\r\n\r\n    // ✅ ÉTAPE 4 : Gestion des messages d'erreur/succès (IDENTIQUE à l'existant)\r\n    if (failedSaves.length > 0) {\r\n      console.error('❌ Détails des échecs:', failedSaves);\r\n      \r\n      const errorDetails = failedSaves.map(f => `Réponse ${f.index + 1}: ${f.error}`).join('; ');\r\n      setError(`${failedSaves.length} réponses n'ont pas pu être sauvegardées. Détails: ${errorDetails}`);\r\n      \r\n    } else if (skippedSaves.length > 0) {\r\n      setError(`${skippedSaves.length} réponses incomplètes ont été ignorées.`);\r\n      \r\n    } else {\r\n      // 🆕 ÉTAPE 5 : NOUVEAU - Calcul du score après sauvegarde réussie\r\n      try {\r\n        console.log('🔢 Déclenchement du calcul de score...');\r\n        \r\n        // Déclencher le calcul de score via une mise à jour du formulaire\r\n        const updatedFormulaire = await api.put(`formulaires/${id}`, { \r\n          statut: formulaire.statut,\r\n          progression: Math.round(progression),\r\n          trigger_score_calculation: true // Flag pour indiquer qu'on veut recalculer\r\n        });\r\n\r\n        // Mettre à jour le formulaire avec les nouveaux scores\r\n        if (updatedFormulaire.score_actuel !== undefined && updatedFormulaire.score_maximum !== undefined) {\r\n          setFormulaire(prev => ({\r\n            ...prev,\r\n            ...updatedFormulaire,\r\n            // Conserver les données locales importantes\r\n            thematiques: prev.thematiques,\r\n            fonctions: prev.fonctions\r\n          }));\r\n          \r\n          console.log(`✅ Score calculé: ${updatedFormulaire.score_actuel}/${updatedFormulaire.score_maximum}`);\r\n        }\r\n        \r\n      } catch (scoreError: any) {\r\n        console.warn('⚠️ Erreur lors du calcul de score (réponses sauvegardées avec succès):', scoreError);\r\n        // On n'interrompt pas le processus si le calcul de score échoue\r\n      }\r\n\r\n      // 🆕 Messages de succès améliorés\r\n      const successMessage = newStatus === 'Soumis'\r\n        ? 'Formulaire soumis avec succès ! Score calculé.'\r\n        : newStatus === 'Validé'\r\n        ? 'Formulaire validé avec succès ! Score calculé.'\r\n        : 'Formulaire enregistré avec succès ! Score calculé.';\r\n        \r\n      setSuccess(successMessage);\r\n    }\r\n\r\n  } catch (err: any) {\r\n    console.error('❌ Erreur générale lors de la sauvegarde:', err);\r\n    setError(err.message || 'Erreur lors de la sauvegarde du formulaire.');\r\n  } finally {\r\n    setSaving(false);\r\n  }\r\n};\r\n\r\n  // Statut du formulaire\r\n  const getStatusInfo = (status: string) => {\r\n    switch (status) {\r\n      case 'Validé':\r\n        return { label: 'Validé', color: 'success' as const };\r\n      case 'Soumis':\r\n        return { label: 'Soumis', color: 'primary' as const };\r\n      default:\r\n        return { label: 'Brouillon', color: 'warning' as const };\r\n    }\r\n  };\r\n\r\n  // Formatage des dates\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        day: 'numeric',\r\n        month: 'long',\r\n        year: 'numeric',\r\n      });\r\n    } catch {\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (!formulaire) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Alert severity=\"error\">{error || 'Formulaire non trouvé.'}</Alert>\r\n        <Button startIcon={<ArrowBackIcon />} onClick={() => navigate('/formulaires')} sx={{ mt: 2 }}>\r\n          Retour à la liste\r\n        </Button>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  const statusInfo = getStatusInfo(formulaire.statut);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Breadcrumbs aria-label=\"breadcrumb\" sx={{ mb: 2 }}>\r\n        <Link underline=\"hover\" color=\"inherit\" sx={{ display: 'flex', alignItems: 'center' }} href=\"/\">\r\n          <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\r\n          Accueil\r\n        </Link>\r\n        <Link underline=\"hover\" color=\"inherit\" sx={{ display: 'flex', alignItems: 'center' }} href=\"/formulaires\">\r\n          Formulaires\r\n        </Link>\r\n        <Typography color=\"text.primary\" sx={{ display: 'flex', alignItems: 'center' }}>\r\n          {formulaire.questionnaire_nom}\r\n        </Typography>\r\n      </Breadcrumbs>\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <IconButton color=\"primary\" onClick={() => navigate('/formulaires')} sx={{ mr: 1 }}>\r\n                  <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                  {formulaire.questionnaire_nom}\r\n                </Typography>\r\n              </Box>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                {criticalQuestions > 0 && (\r\n                  <Tooltip title={`${criticalQuestions} question(s) critique(s)`}>\r\n                    <Badge badgeContent={criticalQuestions} color=\"error\" sx={{ mr: 2 }}>\r\n                      <WarningIcon color=\"error\" />\r\n                    </Badge>\r\n                  </Tooltip>\r\n                )}\r\n                {commentCount > 0 && (\r\n                  <Tooltip title={`${commentCount} commentaire(s)`}>\r\n                    <Badge badgeContent={commentCount} color=\"info\" sx={{ mr: 2 }}>\r\n                      <CommentIcon color=\"info\" />\r\n                    </Badge>\r\n                  </Tooltip>\r\n                )}\r\n                <Chip label={statusInfo.label} color={statusInfo.color} variant=\"outlined\" />\r\n              </Box>\r\n            </Box>\r\n\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={4}>\r\n                <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                  <BusinessIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                  <Typography variant=\"subtitle1\">\r\n                    <strong>Entreprise:</strong> {formulaire.nom_entreprise}\r\n                  </Typography>\r\n                </Box>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <FunctionIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                  <Typography variant=\"subtitle1\">\r\n                    <strong>Fonctions:</strong> {formulaire.fonctions.join(', ') || 'Aucune'}\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                  <InfoIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                  <Typography variant=\"subtitle1\">\r\n                    <strong>Thématiques:</strong>\r\n                  </Typography>\r\n                </Box>\r\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                  {formulaire.thematiques.map((thematique, index) => (\r\n                    <Chip key={index} label={thematique.nom} size=\"small\" color=\"secondary\" variant=\"outlined\" />\r\n                  ))}\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                  <PersonIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                  <Typography variant=\"subtitle1\">\r\n                    <strong>Acteur:</strong> {formulaire.acteur_nom}\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant=\"subtitle1\">\r\n                  <strong>Date de création:</strong> {formatDate(formulaire.date_creation)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box sx={{ width: '100%' }}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\">\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  Progression: {Math.round(progression)}% \r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    {reponses.length} / {questions.length} questions répondues\r\n                </Typography>\r\n              </Box>\r\n              <Box sx={{ width: '100%', backgroundColor: '#e0e0e0', borderRadius: 1, height: 8 }}>\r\n                <Box\r\n                  sx={{\r\n                    width: `${progression}%`,\r\n                    backgroundColor: progression < 30 ? '#f44336' : progression < 70 ? '#ff9800' : '#4caf50',\r\n                    borderRadius: 1,\r\n                    height: '100%',\r\n                    transition: 'width 0.5s ease-in-out',\r\n                  }}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {error && (\r\n          <Grid item xs={12}>\r\n            <Alert severity=\"error\" onClose={() => setError(null)}>\r\n              {error}\r\n            </Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        {success && (\r\n          <Grid item xs={12}>\r\n            <Alert severity=\"success\" onClose={() => setSuccess(null)}>\r\n              {success}\r\n            </Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Questions par thématique\r\n            </Typography>\r\n            <Divider sx={{ mb: 3 }} />\r\n\r\n            {formulaire.thematiques.length > 0 ? (\r\n              formulaire.thematiques.map((thematique) => (\r\n                <Accordion key={thematique.id} defaultExpanded>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography variant=\"subtitle1\">{thematique.nom}</Typography>\r\n                    <Box sx={{ ml: 2 }}>\r\n                      <Chip\r\n                        label={`${questionsByThematique[thematique.id]?.length || 0} questions`}\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    {questionsByThematique[thematique.id]?.length > 0 ? (\r\n                      questionsByThematique[thematique.id].map((question) => {\r\n                        const reponse = findReponse(question.id_question);\r\n                        const isHighPriority = question.ponderation >= 3;\r\n                        const isCritical = reponse && (parseInt(reponse.valeur_reponse) || 0) <= 2 && isHighPriority;\r\n\r\n                        return (\r\n                          <Card\r\n                            key={question.id_question}\r\n                            sx={{\r\n                              mb: 3,\r\n                              position: 'relative',\r\n                              border: isCritical ? '1px solid #f44336' : isHighPriority ? '1px solid #ff9800' : 'none',\r\n                            }}\r\n                          >\r\n                            <CardContent>\r\n                              <Box\r\n                                sx={{\r\n                                  position: 'absolute',\r\n                                  top: -10,\r\n                                  left: -10,\r\n                                  width: 30,\r\n                                  height: 30,\r\n                                  borderRadius: '50%',\r\n                                  backgroundColor: isHighPriority ? 'warning.main' : 'primary.main',\r\n                                  color: 'white',\r\n                                  display: 'flex',\r\n                                  alignItems: 'center',\r\n                                  justifyContent: 'center',\r\n                                  fontWeight: 'bold',\r\n                                }}\r\n                              >\r\n                                {question.ordre}\r\n                              </Box>\r\n                              <Box sx={{ ml: 3 }}>\r\n                                <Typography variant=\"subtitle1\" gutterBottom fontWeight={isHighPriority ? 'bold' : 'normal'}>\r\n                                  {question.texte}\r\n                                  {isHighPriority && (\r\n                                    <Tooltip title=\"Question à forte pondération\">\r\n                                      <InfoIcon color=\"warning\" fontSize=\"small\" sx={{ ml: 1 }} />\r\n                                    </Tooltip>\r\n                                  )}\r\n                                </Typography>\r\n                                {question.aide_reponse && (\r\n                                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2}}>\r\n                                    <strong>Aide:</strong> {question.aide_reponse}\r\n                                  </Typography>\r\n                                )}\r\n                                <Typography\r\n                                  variant=\"caption\"\r\n                                  color={isHighPriority ? 'warning.main' : 'text.secondary'}\r\n                                  sx={{ display: 'block', mb: 2 }}\r\n                                >\r\n                                  Pondération: {question.ponderation} {isHighPriority ? '(Question importante)' : ''}\r\n                                </Typography>\r\n                                <FormControl component=\"fieldset\" sx={{ width: \"100%\" }}>\r\n                                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                                    Évaluation (1 = Niveau initial, 5 = Niveau optimisé)\r\n                                  </Typography>\r\n                                  <RadioGroup\r\n                                    row\r\n                                    name={`question-${question.id_question}`}\r\n                                    value={reponse?.valeur_reponse || ''}\r\n                                    onChange={(e) => updateReponse(question.id_question, e.target.value)}\r\n                                  >\r\n                                    {[1, 2, 3, 4, 5].map((value) => (\r\n                                      <FormControlLabel\r\n                                        key={value}\r\n                                        value={value.toString()}\r\n                                        control={\r\n                                          <Radio\r\n                                            sx={{\r\n                                              color: value <= 2 && isHighPriority ? 'error.main' : undefined,\r\n                                              '&.Mui-checked': {\r\n                                                color: value <= 2 && isHighPriority ? 'error.main' : undefined,\r\n                                              },\r\n                                            }}\r\n                                          />\r\n                                        }\r\n                                        label={value.toString()}\r\n                                        disabled={formulaire.statut === 'Validé'}\r\n                                      />\r\n                                    ))}\r\n                                  </RadioGroup>\r\n                                </FormControl>\r\n                                <TextField\r\n                                  fullWidth\r\n                                  label=\"Commentaire (optionnel)\"\r\n                                  multiline\r\n                                  rows={2}\r\n                                  margin=\"normal\"\r\n                                  value={reponse?.commentaire || ''}\r\n                                  onChange={(e) => updateCommentaire(question.id_question, e.target.value)}\r\n                                  disabled={formulaire.statut === 'Validé'}\r\n                                  helperText={isCritical ? 'Un commentaire est recommandé pour cette question critique' : ''}\r\n                                  error={isCritical && (!reponse?.commentaire || reponse.commentaire.trim() === '')}\r\n                                />\r\n                                {isCritical && (!reponse?.commentaire || reponse.commentaire.trim() === '') && (\r\n                                  <Alert severity=\"warning\" sx={{ mt: 1 }}>\r\n                                    Veuillez ajouter un commentaire pour justifier cette évaluation critique.\r\n                                  </Alert>\r\n                                )}\r\n                              </Box>\r\n                            </CardContent>\r\n                          </Card>\r\n                        );\r\n                      })\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Aucune question pour cette thématique.\r\n                      </Typography>\r\n                    )}\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              ))\r\n            ) : (\r\n              <Typography variant=\"body1\" align=\"center\" sx={{ py: 2 }}>\r\n                Aucune thématique associée à ce formulaire.\r\n              </Typography>\r\n            )}\r\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => saveFormulaire('Brouillon')}\r\n                disabled={saving || formulaire.statut === 'Validé'}\r\n                startIcon={<SaveIcon />}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                Enregistrer\r\n              </Button>\r\n              {formulaire.statut === 'Brouillon' && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => handleConfirmAction('Soumis')}\r\n                  disabled={saving || !isFormComplete}\r\n                  startIcon={<SendIcon />}\r\n                  sx={{ mr: 1 }}\r\n                >\r\n                  Soumettre\r\n                </Button>\r\n              )}\r\n              {formulaire.statut === 'Soumis' && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  onClick={() => handleConfirmAction('Validé')}\r\n                  disabled={saving || !isFormComplete}\r\n                  startIcon={<CheckIcon />}\r\n                >\r\n                  Valider\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Accordion>\r\n            <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"reponses-content\" id=\"reponses-header\">\r\n              <Typography>Aperçu des réponses</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Box sx={{ width: '100%' }}>\r\n                {formulaire.thematiques.map((thematique) => (\r\n                  <Box key={thematique.id} sx={{ mb: 3 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      {thematique.nom}\r\n                    </Typography>\r\n                    {questionsByThematique[thematique.id]?.length > 0 ? (\r\n                      questionsByThematique[thematique.id].map((question) => {\r\n                        const reponse = findReponse(question.id_question);\r\n                        const isHighPriority = question.ponderation >= 3;\r\n                        const isCritical = reponse && (parseInt(reponse.valeur_reponse) || 0) <= 2 && isHighPriority;\r\n\r\n                        return (\r\n                          <Box\r\n                            key={question.id_question}\r\n                            sx={{\r\n                              mb: 2,\r\n                              p: 2,\r\n                              border: isCritical ? '1px solid #f44336' : isHighPriority ? '1px solid #ff9800' : '1px solid #eee',\r\n                              borderRadius: 1,\r\n                              bgcolor: isCritical ? 'rgba(244, 67, 54, 0.05)' : isHighPriority ? 'rgba(255, 152, 0, 0.05)' : 'transparent',\r\n                            }}\r\n                          >\r\n                            <Typography variant=\"subtitle2\" fontWeight={isHighPriority ? 'bold' : 'normal'}>\r\n                              {question.ordre}. {question.texte}\r\n                              {isHighPriority && (\r\n                                <Tooltip title=\"Question à forte pondération\">\r\n                                  <InfoIcon color=\"warning\" fontSize=\"small\" sx={{ ml: 1 }} />\r\n                                </Tooltip>\r\n                              )}\r\n                            </Typography>\r\n                            {reponse ? (\r\n                              <>\r\n                                <Typography variant=\"body2\" sx={{ mt: 1, color: isCritical ? 'error.main' : 'inherit' }}>\r\n                                  <strong>Réponse:</strong> {reponse.valeur_reponse} / 5\r\n                                </Typography>\r\n                                {reponse.commentaire ? (\r\n                                  <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                                    <strong>Commentaire:</strong> {reponse.commentaire}\r\n                                  </Typography>\r\n                                ) : (\r\n                                  isCritical && (\r\n                                    <Typography variant=\"body2\" color=\"error\" sx={{ mt: 1 }}>\r\n                                      <strong>Commentaire manquant</strong> pour une question critique\r\n                                    </Typography>\r\n                                  )\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <Typography variant=\"body2\" sx={{ mt: 1, color: 'error.main' }}>\r\n                                Pas de réponse\r\n                              </Typography>\r\n                            )}\r\n                          </Box>\r\n                        );\r\n                      })\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Aucune question pour cette thématique.\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                ))}\r\n              </Box>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Dialog\r\n        open={openConfirmDialog.open}\r\n        onClose={handleCloseConfirmDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {openConfirmDialog.action === 'Soumis' ? 'Soumettre le formulaire ?' : 'Valider le formulaire ?'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {openConfirmDialog.action === 'Soumis'\r\n              ? 'Êtes-vous sûr de vouloir soumettre ce formulaire ? Après soumission, il sera en attente de validation.'\r\n              : 'Êtes-vous sûr de vouloir valider ce formulaire ? Cette action est définitive.'}\r\n          </DialogContentText>\r\n          {criticalQuestions > 0 && (\r\n            <Alert severity=\"warning\" sx={{ mt: 2 }}>\r\n              Attention : {criticalQuestions} question(s) critique(s) ont une note faible. Assurez-vous que tous les commentaires sont bien renseignés.\r\n            </Alert>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseConfirmDialog} color=\"inherit\">\r\n            Annuler\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              if (openConfirmDialog.action) {\r\n                saveFormulaire(openConfirmDialog.action);\r\n                handleCloseConfirmDialog();\r\n              }\r\n            }}\r\n            color={openConfirmDialog.action === 'Validé' ? 'success' : 'primary'}\r\n            variant=\"contained\"\r\n            autoFocus\r\n          >\r\n            Confirmer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormDetail;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  FormHelperText,\r\n  IconButton,\r\n  Divider,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Card,\r\n  CardContent,\r\n  Checkbox,\r\n  ListItemText,\r\n  Chip,\r\n  FormGroup,\r\n  FormControlLabel\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Save as SaveIcon,\r\n  Business as BusinessIcon,\r\n  Person as PersonIcon,\r\n  Assignment as AssignmentIcon,\r\n  CheckCircle as CheckCircleIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../../services/api';\r\n\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  id_entreprise: string;\r\n  entreprise_nom?: string;\r\n}\r\n\r\n// Mis à jour pour la nouvelle structure\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  nom: string;\r\n  description?: string;\r\n  thematiques?: string[];\r\n  fonctions?: string[];\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n}\r\n\r\nconst FormNew: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [submitting, setSubmitting] = useState<boolean>(false);\r\n  const [acteurs, setActeurs] = useState<Acteur[]>([]);\r\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  \r\n  // Valeurs du formulaire\r\n  const [formValues, setFormValues] = useState<{\r\n    id_entreprise: string;\r\n    id_acteur: string;\r\n    questionnaires: string[]; // Array de questionnaires sélectionnés\r\n  }>({\r\n    id_entreprise: '',\r\n    id_acteur: '',\r\n    questionnaires: []\r\n  });\r\n  \r\n  // États de validation\r\n  const [validation, setValidation] = useState({\r\n    id_entreprise: true,\r\n    id_acteur: true,\r\n    questionnaires: true\r\n  });\r\n  \r\n  // Étapes du stepper\r\n  const steps = [\r\n    { label: 'Entreprise', icon: <BusinessIcon /> },\r\n    { label: 'Acteur', icon: <PersonIcon /> },\r\n    { label: 'Questionnaires', icon: <AssignmentIcon /> }\r\n  ];\r\n  \r\n  // Filtres pour limiter les options basés sur les sélections précédentes\r\n  const [filteredActeurs, setFilteredActeurs] = useState<Acteur[]>([]);\r\n  \r\n  // Charger les données nécessaires\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // Récupérer les entreprises\r\n        const entreprisesResponse = await api.get('entreprises');\r\n        let entreprisesData: Entreprise[] = [];\r\n        if (Array.isArray(entreprisesResponse)) {\r\n          entreprisesData = entreprisesResponse;\r\n        } else if (entreprisesResponse && entreprisesResponse.data && Array.isArray(entreprisesResponse.data)) {\r\n          entreprisesData = entreprisesResponse.data;\r\n        }\r\n        setEntreprises(entreprisesData);\r\n        \r\n        // Récupérer les acteurs\r\n        const acteursResponse = await api.get('acteurs');\r\n        let acteursData: Acteur[] = [];\r\n        if (Array.isArray(acteursResponse)) {\r\n          acteursData = acteursResponse;\r\n        } else if (acteursResponse && acteursResponse.data && Array.isArray(acteursResponse.data)) {\r\n          acteursData = acteursResponse.data;\r\n        }\r\n        setActeurs(acteursData);\r\n        \r\n        // Récupérer les questionnaires avec la nouvelle structure\r\n        const questionnairesResponse = await api.get('questionnaires');\r\n        let questionnairesData: any[] = [];\r\n        if (Array.isArray(questionnairesResponse)) {\r\n          questionnairesData = questionnairesResponse;\r\n        } else if (questionnairesResponse && questionnairesResponse.data && Array.isArray(questionnairesResponse.data)) {\r\n          questionnairesData = questionnairesResponse.data;\r\n        }\r\n        \r\n        // Normaliser les questionnaires pour la nouvelle structure\r\n        const normalizedQuestionnaires = questionnairesData.map(q => ({\r\n          id_questionnaire: q.id_questionnaire,\r\n          nom: q.nom || q.questionnaire_nom || 'Questionnaire sans nom',\r\n          description: q.description || '',\r\n          // Adapter selon la réponse de l'API - ces champs peuvent venir sous forme d'arrays ou de strings\r\n          thematiques: Array.isArray(q.thematiques) ? q.thematiques : (q.thematiques ? q.thematiques.split(',').map(t => t.trim()) : []),\r\n          fonctions: Array.isArray(q.fonctions) ? q.fonctions : (q.fonctions ? q.fonctions.split(',').map(f => f.trim()) : [])\r\n        }));\r\n        \r\n        setQuestionnaires(normalizedQuestionnaires);\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n        setError('Erreur lors du chargement des données. Veuillez réessayer plus tard.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n  \r\n  // Mettre à jour les acteurs filtrés lorsque l'entreprise change\r\n  useEffect(() => {\r\n    if (formValues.id_entreprise) {\r\n      const filtered = acteurs.filter(acteur => acteur.id_entreprise === formValues.id_entreprise);\r\n      setFilteredActeurs(filtered);\r\n      \r\n      // Si l'acteur sélectionné ne fait pas partie de l'entreprise sélectionnée, réinitialiser\r\n      if (formValues.id_acteur && !filtered.some(acteur => acteur.id_acteur === formValues.id_acteur)) {\r\n        setFormValues(prev => ({ ...prev, id_acteur: '' }));\r\n      }\r\n    } else {\r\n      setFilteredActeurs(acteurs);\r\n    }\r\n  }, [formValues.id_entreprise, acteurs]);\r\n  \r\n  // Gérer les changements dans le formulaire\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const name = event.target.name as keyof typeof formValues;\r\n    const value = event.target.value;\r\n    \r\n    if (name) {\r\n      setFormValues({\r\n        ...formValues,\r\n        [name]: value\r\n      });\r\n      \r\n      // Réinitialiser l'état de validation pour ce champ\r\n      if (name in validation) {\r\n        setValidation({\r\n          ...validation,\r\n          [name]: true\r\n        });\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Gérer la sélection multiple de questionnaires\r\n  const handleQuestionnaireChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = event.target.value as string[];\r\n    setFormValues({\r\n      ...formValues,\r\n      questionnaires: value\r\n    });\r\n    setValidation({\r\n      ...validation,\r\n      questionnaires: true\r\n    });\r\n  };\r\n  \r\n  // Valider l'étape actuelle\r\n  const validateCurrentStep = () => {\r\n    let isValid = true;\r\n    const newValidation = { ...validation };\r\n    \r\n    switch(activeStep) {\r\n      case 0: // Entreprise\r\n        newValidation.id_entreprise = Boolean(formValues.id_entreprise);\r\n        isValid = newValidation.id_entreprise;\r\n        break;\r\n      case 1: // Acteur\r\n        newValidation.id_acteur = Boolean(formValues.id_acteur);\r\n        isValid = newValidation.id_acteur;\r\n        break;\r\n      case 2: // Questionnaires\r\n        newValidation.questionnaires = formValues.questionnaires.length > 0;\r\n        isValid = newValidation.questionnaires;\r\n        break;\r\n    }\r\n    \r\n    setValidation(newValidation);\r\n    return isValid;\r\n  };\r\n  \r\n  // Valider tout le formulaire\r\n  const validateForm = () => {\r\n    const newValidation = {\r\n      id_entreprise: Boolean(formValues.id_entreprise),\r\n      id_acteur: Boolean(formValues.id_acteur),\r\n      questionnaires: formValues.questionnaires.length > 0\r\n    };\r\n    \r\n    setValidation(newValidation);\r\n    \r\n    return Object.values(newValidation).every(Boolean);\r\n  };\r\n  \r\n  // Gérer le changement d'étape\r\n  const handleNext = () => {\r\n    if (validateCurrentStep()) {\r\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    } else {\r\n      setError('Veuillez remplir tous les champs obligatoires avant de continuer.');\r\n    }\r\n  };\r\n  \r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    setError(null);\r\n  };\r\n  \r\n  // Soumettre le formulaire\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      setError('Veuillez remplir tous les champs obligatoires.');\r\n      return;\r\n    }\r\n    \r\n    setSubmitting(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      const DEFAULT_APPLICATION_ID = \"892daedf-3423-11f0-9f03-04bf1ba7bd1e\";\r\n      \r\n      // Créer un formulaire pour chaque questionnaire sélectionné\r\n      const creationPromises = formValues.questionnaires.map(async (id_questionnaire) => {\r\n        const dataToSubmit = {\r\n          id_questionnaire,\r\n          id_acteur: formValues.id_acteur,\r\n          id_application: DEFAULT_APPLICATION_ID, // Valeur par défaut pour l'API\r\n          statut: 'Brouillon' as const\r\n        };\r\n        \r\n        try {\r\n          const response = await api.post('formulaires', dataToSubmit);\r\n          return { success: true, response, id_questionnaire };\r\n        } catch (error) {\r\n          return { success: false, error, id_questionnaire };\r\n        }\r\n      });\r\n      \r\n      const results = await Promise.all(creationPromises);\r\n      \r\n      // Compter les succès et les échecs\r\n      const successes = results.filter(r => r.success);\r\n      const failures = results.filter(r => !r.success);\r\n      \r\n      if (successes.length === 0) {\r\n        setError('Erreur lors de la création des formulaires. Aucun formulaire n\\'a pu être créé.');\r\n      } else if (failures.length > 0) {\r\n        setSuccess(`${successes.length} formulaire(s) créé(s) avec succès. ${failures.length} échec(s).`);\r\n        \r\n        // Attendre 2 secondes avant de rediriger\r\n        setTimeout(() => {\r\n          navigate('/formulaires');\r\n        }, 2000);\r\n      } else {\r\n        setSuccess(`${successes.length} formulaire(s) créé(s) avec succès !`);\r\n        \r\n        // Si un seul formulaire créé, rediriger vers son détail\r\n        if (successes.length === 1) {\r\n          const response = successes[0].response;\r\n          let formId = '';\r\n          if (response && response.data && response.data.id_formulaire) {\r\n            formId = response.data.id_formulaire;\r\n          } else if (response && response.id_formulaire) {\r\n            formId = response.id_formulaire;\r\n          }\r\n          \r\n          if (formId) {\r\n            navigate(`/formulaires/${formId}`);\r\n            return;\r\n          }\r\n        }\r\n        \r\n        // Sinon, rediriger vers la liste après 2 secondes\r\n        setTimeout(() => {\r\n          navigate('/formulaires');\r\n        }, 2000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création des formulaires:', error);\r\n      setError('Erreur lors de la création des formulaires. Veuillez réessayer plus tard.');\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n  \r\n  // Obtenir le contenu de l'étape actuelle\r\n  const getStepContent = (step: number) => {\r\n    switch (step) {\r\n      case 0: // Entreprise\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid size={12}>\r\n              <FormControl fullWidth error={!validation.id_entreprise}>\r\n                <InputLabel id=\"entreprise-label\">Entreprise *</InputLabel>\r\n                <Select\r\n                  labelId=\"entreprise-label\"\r\n                  id=\"id_entreprise\"\r\n                  name=\"id_entreprise\"\r\n                  value={formValues.id_entreprise}\r\n                  onChange={handleChange}\r\n                  label=\"Entreprise *\"\r\n                  required\r\n                >\r\n                  {entreprises.map((ent) => (\r\n                    <MenuItem key={ent.id_entreprise} value={ent.id_entreprise}>\r\n                      {ent.nom_entreprise}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {!validation.id_entreprise && (\r\n                  <FormHelperText>L'entreprise est requise</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n        \r\n      case 1: // Acteur\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid size={12}>\r\n              <FormControl fullWidth error={!validation.id_acteur}>\r\n                <InputLabel id=\"acteur-label\">Acteur *</InputLabel>\r\n                <Select\r\n                  labelId=\"acteur-label\"\r\n                  id=\"id_acteur\"\r\n                  name=\"id_acteur\"\r\n                  value={formValues.id_acteur}\r\n                  onChange={handleChange}\r\n                  label=\"Acteur *\"\r\n                  required\r\n                >\r\n                  {filteredActeurs.map((acteur) => (\r\n                    <MenuItem key={acteur.id_acteur} value={acteur.id_acteur}>\r\n                      {acteur.nom_prenom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {!validation.id_acteur && (\r\n                  <FormHelperText>L'acteur est requis</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n              {filteredActeurs.length === 0 && formValues.id_entreprise && (\r\n                <Alert severity=\"warning\" sx={{ mt: 2 }}>\r\n                  Aucun acteur n'est associé à cette entreprise. Veuillez en ajouter ou sélectionner une autre entreprise.\r\n                </Alert>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n        \r\n      case 2: // Questionnaires\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid size={12}>\r\n              <FormControl fullWidth error={!validation.questionnaires}>\r\n                <InputLabel id=\"questionnaires-label\">Questionnaires *</InputLabel>\r\n                <Select\r\n                  labelId=\"questionnaires-label\"\r\n                  id=\"questionnaires\"\r\n                  name=\"questionnaires\"\r\n                  multiple\r\n                  value={formValues.questionnaires}\r\n                  onChange={handleQuestionnaireChange}\r\n                  label=\"Questionnaires *\"\r\n                  renderValue={(selected) => (\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                      {(selected as string[]).map((value) => {\r\n                        const q = questionnaires.find(quest => quest.id_questionnaire === value);\r\n                        return (\r\n                          <Chip \r\n                            key={value} \r\n                            label={q?.nom || 'Questionnaire inconnu'} \r\n                            size=\"small\" \r\n                          />\r\n                        );\r\n                      })}\r\n                    </Box>\r\n                  )}\r\n                >\r\n                  {questionnaires.map((q) => (\r\n                    <MenuItem key={q.id_questionnaire} value={q.id_questionnaire}>\r\n                      <Checkbox checked={formValues.questionnaires.indexOf(q.id_questionnaire) > -1} />\r\n                      <ListItemText \r\n                        primary={q.nom}\r\n                        secondary={\r\n                          <Box>\r\n                            {q.description && (\r\n                              <Typography variant=\"caption\" display=\"block\">\r\n                                {q.description}\r\n                              </Typography>\r\n                            )}\r\n                            {q.fonctions && q.fonctions.length > 0 && (\r\n                              <Box sx={{ mt: 0.5 }}>\r\n                                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                  Fonctions: {q.fonctions.join(', ')}\r\n                                </Typography>\r\n                              </Box>\r\n                            )}\r\n                            {q.thematiques && q.thematiques.length > 0 && (\r\n                              <Box sx={{ mt: 0.5 }}>\r\n                                {q.thematiques.slice(0, 3).map((thematique, index) => (\r\n                                  <Chip\r\n                                    key={index}\r\n                                    label={thematique}\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"secondary\"\r\n                                    sx={{ mr: 0.5, mb: 0.5 }}\r\n                                  />\r\n                                ))}\r\n                                {q.thematiques.length > 3 && (\r\n                                  <Chip\r\n                                    label={`+${q.thematiques.length - 3}`}\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"default\"\r\n                                  />\r\n                                )}\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        }\r\n                      />\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {!validation.questionnaires && (\r\n                  <FormHelperText>Sélectionnez au moins un questionnaire</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\r\n                {formValues.questionnaires.length} questionnaire(s) sélectionné(s). \r\n                Un formulaire sera créé pour chaque questionnaire.\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n        \r\n      default:\r\n        return 'Étape inconnue';\r\n    }\r\n  };\r\n  \r\n  // Résumé avant soumission\r\n  const renderSummary = () => {\r\n    const entreprise = entreprises.find(e => e.id_entreprise === formValues.id_entreprise);\r\n    const acteur = acteurs.find(a => a.id_acteur === formValues.id_acteur);\r\n    const selectedQuestionnaires = questionnaires.filter(q => \r\n      formValues.questionnaires.includes(q.id_questionnaire)\r\n    );\r\n    \r\n    return (\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Résumé de la création\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid size={12}>\r\n              <Typography variant=\"subtitle2\">Entreprise:</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                {entreprise?.nom_entreprise || 'Non sélectionnée'}\r\n              </Typography>\r\n              \r\n              <Typography variant=\"subtitle2\">Acteur:</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                {acteur?.nom_prenom || 'Non sélectionné'}\r\n              </Typography>\r\n              \r\n              <Typography variant=\"subtitle2\" sx={{ mt: 2 }}>\r\n                Questionnaires sélectionnés ({selectedQuestionnaires.length}):\r\n              </Typography>\r\n              <Box sx={{ ml: 2 }}>\r\n                {selectedQuestionnaires.map((q) => (\r\n                  <Box key={q.id_questionnaire} sx={{ mb: 2 }}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <CheckCircleIcon color=\"success\" fontSize=\"small\" sx={{ mr: 1 }} />\r\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                        {q.nom}\r\n                      </Typography>\r\n                    </Box>\r\n                    \r\n                    {q.fonctions && q.fonctions.length > 0 && (\r\n                      <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: 3, display: 'block' }}>\r\n                        Fonctions: {q.fonctions.join(', ')}\r\n                      </Typography>\r\n                    )}\r\n                    \r\n                    {q.thematiques && q.thematiques.length > 0 && (\r\n                      <Box sx={{ ml: 3, mt: 0.5 }}>\r\n                        {q.thematiques.map((thematique, index) => (\r\n                          <Chip\r\n                            key={index}\r\n                            label={thematique}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            sx={{ mr: 0.5, mb: 0.5 }}\r\n                          />\r\n                        ))}\r\n                      </Box>\r\n                    )}\r\n                  </Box>\r\n                ))}\r\n              </Box>\r\n              \r\n              <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                {selectedQuestionnaires.length} formulaire(s) seront créés à partir de cette sélection.\r\n              </Alert>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n              <IconButton color=\"primary\" onClick={() => navigate('/formulaires')} sx={{ mr: 1 }}>\r\n                <ArrowBackIcon />\r\n              </IconButton>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Créer des Formulaires d'Évaluation\r\n              </Typography>\r\n            </Box>\r\n            \r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Sélectionnez une entreprise, un acteur et un ou plusieurs questionnaires pour créer les formulaires correspondants.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Stepper */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Stepper activeStep={activeStep} alternativeLabel>\r\n              {steps.map((step, index) => (\r\n                <Step key={index}>\r\n                  <StepLabel>{step.label}</StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Formulaire */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box component=\"form\" noValidate onSubmit={handleSubmit}>\r\n              {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError(null)}>\r\n                  {error}\r\n                </Alert>\r\n              )}\r\n              \r\n              {success && (\r\n                <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n                  {success}\r\n                </Alert>\r\n              )}\r\n              \r\n              {activeStep === steps.length ? (\r\n                <Box>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Toutes les étapes sont complétées\r\n                  </Typography>\r\n                  \r\n                  {renderSummary()}\r\n                  \r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={() => setActiveStep(activeStep - 1)}\r\n                      startIcon={<ArrowBackIcon />}\r\n                    >\r\n                      Retour\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      disabled={submitting}\r\n                      startIcon={<SaveIcon />}\r\n                    >\r\n                      {submitting ? 'Création en cours...' : 'Créer les formulaires'}\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              ) : (\r\n                <Box>\r\n                  <Box sx={{ mb: 3 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      {steps[activeStep].label}\r\n                    </Typography>\r\n                    <Divider />\r\n                  </Box>\r\n                  \r\n                  {getStepContent(activeStep)}\r\n                  \r\n                  <Box display=\"flex\" justifyContent=\"space-between\" mt={3}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={activeStep === 0 ? () => navigate('/formulaires') : handleBack}\r\n                      startIcon={<ArrowBackIcon />}\r\n                    >\r\n                      {activeStep === 0 ? 'Annuler' : 'Précédent'}\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={activeStep === steps.length - 1 ? () => handleNext() : handleNext}\r\n                    >\r\n                      {activeStep === steps.length - 1 ? 'Finaliser' : 'Suivant'}\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormNew;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Card,\r\n  CardContent,\r\n  Tabs,\r\n  Tab,\r\n  Checkbox,\r\n  Alert,\r\n  Badge,\r\n  Tooltip,\r\n  Switch,\r\n  FormControlLabel,\r\n  Snackbar\r\n} from '@mui/material';\r\nimport {\r\n  PlusIcon,\r\n  PencilIcon,\r\n  TrashIcon,\r\n  LockClosedIcon,\r\n  ShieldCheckIcon,\r\n  UserIcon,\r\n  ArrowLeftIcon,\r\n  UsersIcon,\r\n  UserGroupIcon,\r\n  Cog6ToothIcon,\r\n  EyeIcon,\r\n  EyeSlashIcon,\r\n  CheckIcon,\r\n  XMarkIcon,\r\n  BuildingOfficeIcon\r\n} from '@heroicons/react/24/outline';\r\nimport {\r\n  ShieldExclamationIcon\r\n} from '@heroicons/react/24/solid';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport api from '../../services/api';\r\n\r\n// Types existants + nouveaux pour les entreprises\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  email: string;\r\n  organisation: string;\r\n  id_entreprise: string;\r\n  nom_entreprise?: string;\r\n  role: string;\r\n  nom_role?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n  est_admin?: boolean;\r\n  compte_actif?: boolean;\r\n  derniere_connexion?: string;\r\n  id_role?: string;\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  secteur?: string;\r\n  description?: string;\r\n  adresse?: string;\r\n  telephone?: string;\r\n  email?: string;\r\n  site_web?: string;\r\n  date_creation?: string;\r\n  date_modification?: string;\r\n  nombre_utilisateurs?: number;\r\n  nombre_applications?: number;\r\n}\r\n\r\ninterface Role {\r\n  id_role: string;\r\n  nom_role: string;\r\n  description: string;\r\n  niveau_acces: 'GLOBAL' | 'ENTREPRISE';\r\n  nombre_utilisateurs?: number;\r\n}\r\n\r\ninterface Module {\r\n  id_module: string;\r\n  nom_module: string;\r\n  description: string;\r\n  route_base: string;\r\n  icone?: string;\r\n  ordre_affichage: number;\r\n  actif: boolean;\r\n}\r\n\r\ninterface Permission {\r\n  id_permission: string;\r\n  id_acteur: string;\r\n  acteur_nom?: string;\r\n  type_ressource: 'APPLICATION' | 'QUESTIONNAIRE' | 'FORMULAIRE' | 'RAPPORT';\r\n  id_ressource: string | null;\r\n  peut_voir: boolean;\r\n  peut_editer: boolean;\r\n  peut_supprimer: boolean;\r\n  peut_administrer: boolean;\r\n}\r\n\r\ninterface RolePermission {\r\n  id_role_permission: string;\r\n  id_role: string;\r\n  id_module: string;\r\n  nom_module: string;\r\n  module_description?: string;\r\n  peut_voir: boolean;\r\n  peut_editer: boolean;\r\n  peut_supprimer: boolean;\r\n  peut_administrer: boolean;\r\n}\r\n\r\ninterface ActeurFormValues {\r\n  nom_prenom: string;\r\n  email: string;\r\n  fonction: string;\r\n  organisation: string;\r\n  id_entreprise: string;\r\n  mot_de_passe?: string;\r\n  id_role: string;\r\n}\r\n\r\ninterface RoleFormValues {\r\n  nom_role: string;\r\n  description: string;\r\n  niveau_acces: 'GLOBAL' | 'ENTREPRISE';\r\n}\r\n\r\ninterface EntrepriseFormValues {\r\n  nom_entreprise: string;\r\n  secteur: string;\r\n  description: string;\r\n  adresse: string;\r\n  telephone: string;\r\n  email: string;\r\n  site_web: string;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\n// Interface pour les droits utilisateur\r\ninterface UserRights {\r\n  canViewAll: boolean;\r\n  canManageUsers: boolean;\r\n  canManageRoles: boolean;\r\n  canManagePermissions: boolean;\r\n  canManageModules: boolean;\r\n  canEditAll: boolean;\r\n  canDeleteAll: boolean;\r\n  scope: 'GLOBAL' | 'ENTREPRISE';\r\n}\r\n\r\n// Composant pour les icônes Heroicons\r\ninterface HeroIconProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst HeroIcon: React.FC<HeroIconProps> = ({ children, className = \"h-5 w-5\" }) => (\r\n  <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center', '& svg': { width: 20, height: 20 } }}>\r\n    {React.cloneElement(children as React.ReactElement, { className })}\r\n  </Box>\r\n);\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`admin-tabpanel-${index}`}\r\n      aria-labelledby={`admin-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Administration: React.FC = () => {\r\n  const { \r\n    hasPermission, \r\n    canAccessAdminModule, \r\n    isAdmin, \r\n    isSuperAdmin, \r\n    currentUser,\r\n    hasGlobalAccess\r\n  } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Fonction pour déterminer si l'utilisateur est consultant\r\n  const isConsultant = (): boolean => {\r\n    return currentUser?.nom_role?.toUpperCase() === 'CONSULTANT';\r\n  };\r\n\r\n  // Fonction pour obtenir le scope de l'utilisateur\r\n  const getScope = (): 'GLOBAL' | 'ENTREPRISE' => {\r\n    if (isSuperAdmin() || hasGlobalAccess) return 'GLOBAL';\r\n    return currentUser?.niveau_acces || 'ENTREPRISE';\r\n  };\r\n\r\n  // Fonction pour déterminer si on doit filtrer par entreprise\r\n  const shouldFilterByEntreprise = (): boolean => {\r\n    return getScope() === 'ENTREPRISE';\r\n  };\r\n  \r\n  // Fonction pour obtenir les droits utilisateur\r\n  const getUserRights = (): UserRights => {\r\n    const scope = getScope();\r\n    \r\n    if (isSuperAdmin()) {\r\n      return {\r\n        canViewAll: true,\r\n        canManageUsers: true,\r\n        canManageRoles: true,\r\n        canManagePermissions: true,\r\n        canManageModules: true,\r\n        canEditAll: true,\r\n        canDeleteAll: true,\r\n        scope: 'GLOBAL'\r\n      };\r\n    }\r\n    \r\n    if (isAdmin()) {\r\n      return {\r\n        canViewAll: true,\r\n        canManageUsers: true,\r\n        canManageRoles: scope === 'GLOBAL',\r\n        canManagePermissions: scope === 'GLOBAL',\r\n        canManageModules: scope === 'GLOBAL',\r\n        canEditAll: true,\r\n        canDeleteAll: false, // Les admin ne peuvent pas supprimer\r\n        scope: scope\r\n      };\r\n    }\r\n    \r\n    if (isConsultant()) {\r\n      return {\r\n        canViewAll: true,\r\n        canManageUsers: false,\r\n        canManageRoles: false,\r\n        canManagePermissions: false,\r\n        canManageModules: false,\r\n        canEditAll: false,\r\n        canDeleteAll: false,\r\n        scope: scope\r\n      };\r\n    }\r\n    \r\n    // Utilisateur normal - pas d'accès admin\r\n    return {\r\n      canViewAll: false,\r\n      canManageUsers: false,\r\n      canManageRoles: false,\r\n      canManagePermissions: false,\r\n      canManageModules: false,\r\n      canEditAll: false,\r\n      canDeleteAll: false,\r\n      scope: 'ENTREPRISE'\r\n    };\r\n  };\r\n  \r\n  // Obtenir les droits utilisateur\r\n  const userRights = getUserRights();\r\n  \r\n  // Déterminer l'onglet initial basé sur l'URL ou localStorage\r\n  const getInitialTab = () => {\r\n    // Essayer de récupérer l'onglet depuis localStorage\r\n    const savedTab = localStorage.getItem('admin-active-tab');\r\n    if (savedTab && parseInt(savedTab) >= 0 && parseInt(savedTab) <= 4) {\r\n      return parseInt(savedTab);\r\n    }\r\n    return 0; // Par défaut, onglet Utilisateurs\r\n  };\r\n\r\n  // États principaux\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [tabValue, setTabValue] = useState<number>(getInitialTab());\r\n  const [snackbar, setSnackbar] = useState<{open: boolean, message: string, severity: 'success' | 'error' | 'warning' | 'info'}>({\r\n    open: false, message: '', severity: 'info'\r\n  });\r\n  \r\n  // États pour les données\r\n  const [acteurs, setActeurs] = useState<Acteur[]>([]);\r\n  const [roles, setRoles] = useState<Role[]>([]);\r\n  const [modules, setModules] = useState<Module[]>([]);\r\n  const [permissions, setPermissions] = useState<Permission[]>([]);\r\n  const [rolePermissions, setRolePermissions] = useState<RolePermission[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  \r\n  // États pour les dialogues\r\n  const [openActeurDialog, setOpenActeurDialog] = useState<boolean>(false);\r\n  const [openRoleDialog, setOpenRoleDialog] = useState<boolean>(false);\r\n  const [openEntrepriseDialog, setOpenEntrepriseDialog] = useState<boolean>(false);\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState<boolean>(false);\r\n  \r\n  // États pour l'édition des permissions\r\n  const [editingPermissions, setEditingPermissions] = useState<boolean>(false);\r\n  const [tempRolePermissions, setTempRolePermissions] = useState<RolePermission[]>([]);\r\n  \r\n  // États pour les formulaires\r\n  const [acteurFormValues, setActeurFormValues] = useState<ActeurFormValues>({\r\n    nom_prenom: '',\r\n    email: '',\r\n    fonction: '',\r\n    organisation: 'DSIN',\r\n    id_entreprise: '',  \r\n    mot_de_passe: '',\r\n    id_role: ''\r\n  });\r\n  \r\n  const [roleFormValues, setRoleFormValues] = useState<RoleFormValues>({\r\n    nom_role: '',\r\n    description: '',\r\n    niveau_acces: 'ENTREPRISE'\r\n  });\r\n\r\n  const [entrepriseFormValues, setEntrepriseFormValues] = useState<EntrepriseFormValues>({\r\n    nom_entreprise: '',\r\n    secteur: '',\r\n    description: '',\r\n    adresse: '',\r\n    telephone: '',\r\n    email: '',\r\n    site_web: ''\r\n  });\r\n  \r\n  // États pour les modes d'édition\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [selectedItem, setSelectedItem] = useState<any>(null);\r\n  const [selectedRole, setSelectedRole] = useState<string>('');\r\n\r\n  // Fonction pour afficher les notifications\r\n  const showSnackbar = (message: string, severity: 'success' | 'error' | 'warning' | 'info' = 'info') => {\r\n    setSnackbar({ open: true, message, severity });\r\n  };\r\n\r\n  // Vérifier les permissions d'accès\r\n  useEffect(() => {\r\n    if (!userRights.canViewAll && !isConsultant()) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n    \r\n    loadInitialData();\r\n  }, []);\r\n\r\n  // Sauvegarder l'onglet actif dans localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('admin-active-tab', tabValue.toString());\r\n  }, [tabValue]);\r\n\r\n  const loadInitialData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await Promise.all([\r\n        loadActeurs(),\r\n        loadRoles(),\r\n        loadModules(),\r\n        loadEntreprises()\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des données:', error);\r\n      showSnackbar('Erreur lors du chargement des données', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadActeurs = async () => {\r\n    try {\r\n      let response;\r\n      try {\r\n        response = await api.get('admin/users');\r\n        setActeurs(response.users || response || []);\r\n      } catch (adminError) {\r\n        console.warn('Endpoint admin/users non disponible, utilisation de permissions-management/users');\r\n        response = await api.get('permissions-management/users');\r\n        setActeurs(response || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des utilisateurs:', error);\r\n      showSnackbar('Erreur lors du chargement des utilisateurs', 'error');\r\n    }\r\n  };\r\n\r\n  const loadRoles = async () => {\r\n    try {\r\n      let response;\r\n      try {\r\n        response = await api.get('admin/roles');\r\n        setRoles(response || []);\r\n      } catch (adminError) {\r\n        console.warn('Endpoint admin/roles non disponible, utilisation de permissions-management/roles');\r\n        response = await api.get('permissions-management/roles');\r\n        setRoles(response || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des rôles:', error);\r\n      showSnackbar('Erreur lors du chargement des rôles', 'error');\r\n    }\r\n  };\r\n\r\n  const loadModules = async () => {\r\n    try {\r\n      let response;\r\n      try {\r\n        response = await api.get('admin/modules');\r\n        setModules(response || []);\r\n      } catch (adminError) {\r\n        console.warn('Endpoint admin/modules non disponible, utilisation de permissions-management/modules');\r\n        response = await api.get('permissions-management/modules');\r\n        setModules(response || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des modules:', error);\r\n      showSnackbar('Erreur lors du chargement des modules', 'error');\r\n    }\r\n  };\r\n\r\n  const loadEntreprises = async () => {\r\n    try {\r\n      console.log('🔍 Chargement des entreprises...');\r\n      const response = await api.get('entreprises');\r\n      console.log('✅ Entreprises reçues:', response);\r\n      \r\n      // Gestion du format de réponse (response.entreprises ou response direct)\r\n      const entreprisesData = (response.entreprises || response || []).map((ent: any) => ({\r\n        id_entreprise: ent.id_entreprise,\r\n        nom_entreprise: ent.nom_entreprise,\r\n        secteur: ent.secteur,\r\n        description: ent.description,\r\n        adresse: ent.adresse,\r\n        telephone: ent.telephone,\r\n        email: ent.email,\r\n        site_web: ent.site_web,\r\n        date_creation: ent.date_creation,\r\n        date_modification: ent.date_modification,\r\n        nombre_utilisateurs: ent.nombre_utilisateurs || 0,\r\n        nombre_applications: ent.nombre_applications || 0\r\n      }));\r\n      \r\n      console.log('🏢 Entreprises finales:', entreprisesData);\r\n      setEntreprises(entreprisesData);\r\n    } catch (error) {\r\n      console.error('❌ Erreur chargement entreprises:', error);\r\n      showSnackbar('Erreur lors du chargement des entreprises', 'error');\r\n      setEntreprises([\r\n        { \r\n          id_entreprise: 'DSIN', \r\n          nom_entreprise: 'DSIN', \r\n          secteur: 'Public',\r\n          description: 'Direction du Système d\\'Information et du Numérique',\r\n          adresse: '',\r\n          telephone: '',\r\n          email: '',\r\n          site_web: '',\r\n          nombre_utilisateurs: 0,\r\n          nombre_applications: 0\r\n        }\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const loadRolePermissions = async (roleId: string) => {\r\n    try {\r\n      let response;\r\n      try {\r\n        response = await api.get(`admin/roles/${roleId}/permissions`);\r\n        setRolePermissions(response || []);\r\n        setTempRolePermissions(response || []);\r\n      } catch (adminError) {\r\n        response = await api.get(`permissions-management/roles/${roleId}/permissions`);\r\n        setRolePermissions(response || []);\r\n        setTempRolePermissions(response || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des permissions du rôle:', error);\r\n      showSnackbar('Erreur lors du chargement des permissions', 'error');\r\n    }\r\n  };\r\n\r\n  // Gestionnaires d'événements pour les onglets\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    // Vérifier si l'utilisateur a le droit d'accéder à cet onglet\r\n    const hasAccess = [\r\n      userRights.canViewAll, // Utilisateurs\r\n      userRights.canManageRoles, // Rôles\r\n      userRights.canManagePermissions, // Permissions\r\n      userRights.canEditAll || userRights.canViewAll, // Entreprises - lecture pour consultants\r\n      userRights.canManageModules // Modules\r\n    ];\r\n    \r\n    if (hasAccess[newValue]) {\r\n      setTabValue(newValue);\r\n    } else {\r\n      showSnackbar('Vous n\\'avez pas les droits pour accéder à cet onglet', 'warning');\r\n    }\r\n  };\r\n\r\n  // Gestionnaires pour les utilisateurs\r\n  const handleCreateActeur = () => {\r\n    if (!userRights.canManageUsers) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour créer des utilisateurs', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('create');\r\n    setActeurFormValues({\r\n      nom_prenom: '',\r\n      email: '',\r\n      fonction: '',\r\n      organisation: '',\r\n      id_entreprise: userRights.scope === 'ENTREPRISE' ? (currentUser?.id_entreprise || 'DSIN') : 'DSIN',\r\n      mot_de_passe: '',\r\n      id_role: ''\r\n    });\r\n    setOpenActeurDialog(true);\r\n  };\r\n\r\n  const handleEditActeur = (acteur: Acteur) => {\r\n    if (!userRights.canEditAll) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour modifier des utilisateurs', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('edit');\r\n    setSelectedItem(acteur);\r\n    setActeurFormValues({\r\n      nom_prenom: acteur.nom_prenom,\r\n      email: acteur.email,\r\n      fonction: acteur.role || '',\r\n      organisation: acteur.organisation,\r\n      id_entreprise: acteur.id_entreprise || 'DSIN',\r\n      id_role: acteur.id_role || ''\r\n    });\r\n    setOpenActeurDialog(true);\r\n  };\r\n\r\n  // Gestionnaires pour les rôles\r\n  const handleCreateRole = () => {\r\n    if (!userRights.canManageRoles) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour créer des rôles', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('create');\r\n    setRoleFormValues({\r\n      nom_role: '',\r\n      description: '',\r\n      niveau_acces: 'ENTREPRISE'\r\n    });\r\n    setOpenRoleDialog(true);\r\n  };\r\n\r\n  const handleEditRole = (role: Role) => {\r\n    if (!userRights.canManageRoles) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour modifier des rôles', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('edit');\r\n    setSelectedItem(role);\r\n    setRoleFormValues({\r\n      nom_role: role.nom_role,\r\n      description: role.description,\r\n      niveau_acces: role.niveau_acces\r\n    });\r\n    setOpenRoleDialog(true);\r\n  };\r\n\r\n  // Gestionnaires pour les entreprises\r\n  const handleCreateEntreprise = () => {\r\n    if (!userRights.canEditAll) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour créer des entreprises', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('create');\r\n    setEntrepriseFormValues({\r\n      nom_entreprise: '',\r\n      secteur: '',\r\n      description: '',\r\n      adresse: '',\r\n      telephone: '',\r\n      email: '',\r\n      site_web: ''\r\n    });\r\n    setOpenEntrepriseDialog(true);\r\n  };\r\n\r\n  const handleEditEntreprise = (entreprise: Entreprise) => {\r\n    if (!userRights.canEditAll) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour modifier des entreprises', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('edit');\r\n    setSelectedItem(entreprise);\r\n    setEntrepriseFormValues({\r\n      nom_entreprise: entreprise.nom_entreprise,\r\n      secteur: entreprise.secteur || '',\r\n      description: entreprise.description || '',\r\n      adresse: entreprise.adresse || '',\r\n      telephone: entreprise.telephone || '',\r\n      email: entreprise.email || '',\r\n      site_web: entreprise.site_web || ''\r\n    });\r\n    setOpenEntrepriseDialog(true);\r\n  };\r\n\r\n  // Gestionnaires pour les permissions\r\n  const handleEditPermissions = () => {\r\n    if (!userRights.canManagePermissions) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour modifier les permissions', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setEditingPermissions(true);\r\n    setTempRolePermissions([...rolePermissions]);\r\n  };\r\n\r\n  const handleSavePermissions = async () => {\r\n    try {\r\n      const permissionsData = tempRolePermissions.map(perm => ({\r\n        id_module: perm.id_module,\r\n        peut_voir: perm.peut_voir,\r\n        peut_editer: perm.peut_editer,\r\n        peut_supprimer: perm.peut_supprimer,\r\n        peut_administrer: perm.peut_administrer\r\n      }));\r\n\r\n      try {\r\n        await api.put(`admin/roles/${selectedRole}/permissions`, { permissions: permissionsData });\r\n      } catch (adminError) {\r\n        await api.put(`permissions-management/roles/${selectedRole}/permissions`, { permissions: permissionsData });\r\n      }\r\n\r\n      setRolePermissions([...tempRolePermissions]);\r\n      setEditingPermissions(false);\r\n      showSnackbar('Permissions mises à jour avec succès', 'success');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde des permissions:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde des permissions', 'error');\r\n    }\r\n  };\r\n\r\n  const handleCancelPermissions = () => {\r\n    setTempRolePermissions([...rolePermissions]);\r\n    setEditingPermissions(false);\r\n  };\r\n\r\n  const updatePermission = (moduleId: string, field: keyof RolePermission, value: boolean) => {\r\n    setTempRolePermissions(prev => \r\n      prev.map(perm => \r\n        perm.id_module === moduleId \r\n          ? { ...perm, [field]: value }\r\n          : perm\r\n      )\r\n    );\r\n  };\r\n\r\n  // Gestionnaires de soumission\r\n  const handleSubmitActeur = async () => {\r\n    try {\r\n      const apiData = {\r\n        nom_prenom: acteurFormValues.nom_prenom,\r\n        email: acteurFormValues.email,\r\n        organisation: acteurFormValues.organisation,\r\n        id_entreprise: acteurFormValues.id_entreprise,\r\n        id_role: acteurFormValues.id_role,\r\n        ...(dialogMode === 'create' && { mot_de_passe: acteurFormValues.mot_de_passe })\r\n      };\r\n      \r\n      console.log('📤 Envoi données utilisateur:', apiData);\r\n      \r\n      if (dialogMode === 'create') {\r\n        try {\r\n          await api.post('admin/users', apiData);\r\n        } catch (adminError) {\r\n          console.warn('Endpoint admin/users non disponible, utilisation de permissions-management/users');\r\n          await api.post('permissions-management/users', apiData);\r\n        }\r\n        showSnackbar('Utilisateur créé avec succès', 'success');\r\n      } else if (selectedItem) {\r\n        try {\r\n          await api.put(`admin/users/${selectedItem.id_acteur}`, apiData);\r\n        } catch (adminError) {\r\n          await api.put(`acteurs/${selectedItem.id_acteur}`, apiData);\r\n        }\r\n        showSnackbar('Utilisateur mis à jour avec succès', 'success');\r\n      }\r\n      \r\n      await loadActeurs();\r\n      setOpenActeurDialog(false);\r\n      console.log('✅ Utilisateur sauvegardé avec succès');\r\n    } catch (error) {\r\n      console.error('❌ Erreur lors de la sauvegarde de l\\'utilisateur:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde de l\\'utilisateur', 'error');\r\n    }\r\n  };\r\n\r\n  const handleSubmitRole = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        try {\r\n          await api.post('admin/roles', roleFormValues);\r\n        } catch (adminError) {\r\n          await api.post('permissions-management/roles', roleFormValues);\r\n        }\r\n        showSnackbar('Rôle créé avec succès', 'success');\r\n      } else if (selectedItem) {\r\n        try {\r\n          await api.put(`admin/roles/${selectedItem.id_role}`, roleFormValues);\r\n        } catch (adminError) {\r\n          await api.put(`permissions-management/roles/${selectedItem.id_role}`, roleFormValues);\r\n        }\r\n        showSnackbar('Rôle mis à jour avec succès', 'success');\r\n      }\r\n      \r\n      await loadRoles();\r\n      setOpenRoleDialog(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde du rôle:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde du rôle', 'error');\r\n    }\r\n  };\r\n\r\n  const handleSubmitEntreprise = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        await api.post('entreprises', entrepriseFormValues);\r\n        showSnackbar('Entreprise créée avec succès', 'success');\r\n      } else if (selectedItem) {\r\n        await api.put(`entreprises/${selectedItem.id_entreprise}`, entrepriseFormValues);\r\n        showSnackbar('Entreprise mise à jour avec succès', 'success');\r\n      }\r\n      \r\n      await loadEntreprises();\r\n      setOpenEntrepriseDialog(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde de l\\'entreprise:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde de l\\'entreprise', 'error');\r\n    }\r\n  };\r\n\r\n  const handleDeleteItem = async () => {\r\n    try {\r\n      if (!selectedItem) return;\r\n      \r\n      if (tabValue === 0) { // Utilisateurs\r\n        try {\r\n          await api.delete(`admin/users/${selectedItem.id_acteur}`);\r\n        } catch (adminError) {\r\n          await api.delete(`acteurs/${selectedItem.id_acteur}`);\r\n        }\r\n        await loadActeurs();\r\n        showSnackbar('Utilisateur supprimé avec succès', 'success');\r\n      } else if (tabValue === 1) { // Rôles\r\n        try {\r\n          await api.delete(`admin/roles/${selectedItem.id_role}`);\r\n        } catch (adminError) {\r\n          await api.delete(`permissions-management/roles/${selectedItem.id_role}`);\r\n        }\r\n        await loadRoles();\r\n        showSnackbar('Rôle supprimé avec succès', 'success');\r\n      } else if (tabValue === 3) { // Entreprises\r\n        await api.delete(`entreprises/${selectedItem.id_entreprise}`);\r\n        await loadEntreprises();\r\n        showSnackbar('Entreprise supprimée avec succès', 'success');\r\n      }\r\n      \r\n      setOpenDeleteDialog(false);\r\n      setSelectedItem(null);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression:', error);\r\n      showSnackbar('Erreur lors de la suppression', 'error');\r\n    }\r\n  };\r\n\r\n  const getRoleLabel = (role: string, nom_role?: string) => {\r\n    const displayRole = nom_role || role;\r\n    \r\n    switch (displayRole) {\r\n      case 'SUPER_ADMINISTRATEUR':\r\n      case 'SuperAdmin':\r\n        return { \r\n          label: 'Super Admin', \r\n          color: 'error' as const, \r\n          icon: <HeroIcon><ShieldExclamationIcon /></HeroIcon> \r\n        };\r\n      case 'ADMINISTRATEUR':\r\n      case 'Admin':\r\n        return { \r\n          label: 'Admin', \r\n          color: 'primary' as const, \r\n          icon: <HeroIcon><ShieldCheckIcon /></HeroIcon> \r\n        };\r\n      case 'CONSULTANT':\r\n        return { \r\n          label: 'Consultant', \r\n          color: 'secondary' as const, \r\n          icon: <HeroIcon><UserGroupIcon /></HeroIcon> \r\n        };\r\n      case 'MANAGER':\r\n        return { \r\n          label: 'Manager', \r\n          color: 'info' as const, \r\n          icon: <HeroIcon><UsersIcon /></HeroIcon> \r\n        };\r\n      case 'INTERVENANT':\r\n      default:\r\n        return { \r\n          label: 'Intervenant', \r\n          color: 'default' as const, \r\n          icon: <HeroIcon><UserIcon /></HeroIcon> \r\n        };\r\n    }\r\n  };\r\n\r\n  const canManageUser = (acteur: Acteur): boolean => {\r\n    if (isSuperAdmin()) return true;\r\n    \r\n    if (isAdmin()) {\r\n      const userRole = getRoleLabel(acteur.role, acteur.nom_role);\r\n      // Admin ne peut pas gérer les super admin\r\n      return userRole.label !== 'Super Admin';\r\n    }\r\n    \r\n    return false;\r\n  };\r\n\r\n  const getEntrepriseName = (id: string) => {\r\n    if (!id) return 'Non spécifiée';\r\n    const entreprise = entreprises.find(ent => ent.id_entreprise === id);\r\n    return entreprise ? entreprise.nom_entreprise : id;\r\n  };\r\n\r\n  const getAvailableTabs = () => {\r\n    const tabs = [\r\n      { label: 'Utilisateurs', icon: <UsersIcon />, enabled: userRights.canViewAll },\r\n      { label: 'Rôles', icon: <UserGroupIcon />, enabled: userRights.canManageRoles },\r\n      { label: 'Permissions', icon: <ShieldCheckIcon />, enabled: userRights.canManagePermissions },\r\n      { label: 'Entreprises', icon: <BuildingOfficeIcon />, enabled: userRights.canEditAll || userRights.canViewAll },\r\n      { label: 'Modules', icon: <Cog6ToothIcon />, enabled: userRights.canManageModules }\r\n    ];\r\n    \r\n    return tabs;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (!userRights.canViewAll && !isConsultant()) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Alert severity=\"error\">\r\n          Accès non autorisé. Vous devez avoir les permissions appropriées pour accéder à cette page.\r\n        </Alert>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                <HeroIcon><ShieldCheckIcon /></HeroIcon>\r\n                <Box>\r\n                  <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                    Administration Système\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {userRights.scope === 'GLOBAL' ? 'Vue globale' : `Vue limitée - ${getEntrepriseName(currentUser?.id_entreprise || '')}`}\r\n                    {isConsultant() && ' (Consultation seule)'}\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Box display=\"flex\" gap={1}>\r\n                <Chip \r\n                  icon={<HeroIcon><ShieldExclamationIcon /></HeroIcon>}\r\n                  label={isSuperAdmin() ? \"Super Administrateur\" : isAdmin() ? \"Administrateur\" : isConsultant() ? \"Consultant\" : \"Utilisateur\"}\r\n                  color={isSuperAdmin() ? \"error\" : isAdmin() ? \"primary\" : isConsultant() ? \"secondary\" : \"default\"}\r\n                  variant=\"filled\"\r\n                />\r\n                {!userRights.canEditAll && (\r\n                  <Chip \r\n                    icon={<HeroIcon><EyeIcon /></HeroIcon>}\r\n                    label=\"Lecture seule\"\r\n                    color=\"warning\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* Statistiques rapides */}\r\n            <Grid container spacing={2} sx={{ mt: 1 }}>\r\n              <Grid size={{ xs: 12, sm: 3 }}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"primary\">\r\n                      {acteurs.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Utilisateurs{userRights.scope === 'ENTREPRISE' ? ' (Entreprise)' : ''}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 3 }}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"secondary\">\r\n                      {roles.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Rôles\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 3 }}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"info\">\r\n                      {entreprises.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Entreprises\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 3 }}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"success\">\r\n                      {acteurs.filter(a => getRoleLabel(a.role, a.nom_role).label === 'Admin').length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Administrateurs\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Onglets principaux */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ width: '100%' }}>\r\n            <Tabs\r\n              value={tabValue}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n              sx={{ borderBottom: 1, borderColor: 'divider' }}\r\n            >\r\n              {getAvailableTabs().map((tab, index) => (\r\n                <Tab \r\n                  key={index}\r\n                  label={tab.label} \r\n                  icon={<HeroIcon>{tab.icon}</HeroIcon>}\r\n                  iconPosition=\"start\"\r\n                  disabled={!tab.enabled}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n\r\n            {/* Onglet Utilisateurs */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Utilisateurs</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<HeroIcon><PlusIcon /></HeroIcon>}\r\n                  onClick={handleCreateActeur}\r\n                  disabled={!userRights.canManageUsers}\r\n                >\r\n                  Nouvel Utilisateur\r\n                </Button>\r\n              </Box>\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Nom</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell>Fonction</TableCell>\r\n                      <TableCell>Organisation</TableCell>\r\n                      <TableCell>Entreprise</TableCell>\r\n                      <TableCell>Rôle</TableCell>\r\n                      {userRights.canEditAll && <TableCell>Actions</TableCell>}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {acteurs.map((acteur) => {\r\n                      const roleInfo = getRoleLabel(acteur.role, acteur.nom_role);\r\n                      const canManage = canManageUser(acteur);\r\n                      \r\n                      return (\r\n                        <TableRow key={acteur.id_acteur} hover>\r\n                          <TableCell>{acteur.nom_prenom}</TableCell>\r\n                          <TableCell>{acteur.email}</TableCell>\r\n                          <TableCell>{acteur.role}</TableCell>\r\n                          <TableCell>{acteur.organisation}</TableCell>\r\n                          <TableCell>{getEntrepriseName(acteur.id_entreprise)}</TableCell>\r\n                          <TableCell>\r\n                            <Chip \r\n                              label={roleInfo.label} \r\n                              color={roleInfo.color} \r\n                              icon={roleInfo.icon}\r\n                              size=\"small\"\r\n                            />\r\n                          </TableCell>\r\n                          {userRights.canEditAll && (\r\n                            <TableCell>\r\n                              <Tooltip title={canManage ? \"Modifier l'utilisateur\" : \"Droits insuffisants\"}>\r\n                                <span>\r\n                                  <IconButton \r\n                                    color=\"primary\" \r\n                                    onClick={() => handleEditActeur(acteur)}\r\n                                    disabled={!canManage}\r\n                                  >\r\n                                    <HeroIcon><PencilIcon /></HeroIcon>\r\n                                  </IconButton>\r\n                                </span>\r\n                              </Tooltip>\r\n                              <Tooltip title={canManage && userRights.canDeleteAll ? \"Supprimer l'utilisateur\" : \"Droits insuffisants\"}>\r\n                                <span>\r\n                                  <IconButton \r\n                                    color=\"error\" \r\n                                    onClick={() => {\r\n                                      setSelectedItem(acteur);\r\n                                      setOpenDeleteDialog(true);\r\n                                    }}\r\n                                    disabled={!canManage || !userRights.canDeleteAll}\r\n                                  >\r\n                                    <HeroIcon><TrashIcon /></HeroIcon>\r\n                                  </IconButton>\r\n                                </span>\r\n                              </Tooltip>\r\n                            </TableCell>\r\n                          )}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Rôles */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Rôles</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<HeroIcon><PlusIcon /></HeroIcon>}\r\n                  onClick={handleCreateRole}\r\n                  disabled={!userRights.canManageRoles}\r\n                >\r\n                  Nouveau Rôle\r\n                </Button>\r\n              </Box>\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Nom du Rôle</TableCell>\r\n                      <TableCell>Description</TableCell>\r\n                      <TableCell>Niveau d'Accès</TableCell>\r\n                      <TableCell>Utilisateurs</TableCell>\r\n                      {userRights.canManageRoles && <TableCell>Actions</TableCell>}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {roles.map((role) => (\r\n                      <TableRow key={role.id_role} hover>\r\n                        <TableCell>\r\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                            {role.nom_role === 'SUPER_ADMINISTRATEUR' && <HeroIcon><ShieldExclamationIcon /></HeroIcon>}\r\n                            {role.nom_role === 'ADMINISTRATEUR' && <HeroIcon><ShieldCheckIcon /></HeroIcon>}\r\n                            {role.nom_role === 'CONSULTANT' && <HeroIcon><UserGroupIcon /></HeroIcon>}\r\n                            {role.nom_role === 'MANAGER' && <HeroIcon><UsersIcon /></HeroIcon>}\r\n                            {role.nom_role === 'INTERVENANT' && <HeroIcon><UserIcon /></HeroIcon>}\r\n                            <Typography variant=\"body2\">{role.nom_role}</Typography>\r\n                          </Box>\r\n                        </TableCell>\r\n                        <TableCell>{role.description}</TableCell>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={role.niveau_acces} \r\n                            color={role.niveau_acces === 'GLOBAL' ? 'primary' : 'default'} \r\n                            size=\"small\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge badgeContent={role.nombre_utilisateurs || 0} color=\"primary\">\r\n                            <HeroIcon><UserGroupIcon /></HeroIcon>\r\n                          </Badge>\r\n                        </TableCell>\r\n                        {userRights.canManageRoles && (\r\n                          <TableCell>\r\n                            <IconButton \r\n                              color=\"primary\" \r\n                              onClick={() => handleEditRole(role)}\r\n                            >\r\n                              <HeroIcon><PencilIcon /></HeroIcon>\r\n                            </IconButton>\r\n                            <IconButton \r\n                              color=\"error\" \r\n                              onClick={() => {\r\n                                setSelectedItem(role);\r\n                                setOpenDeleteDialog(true);\r\n                              }}\r\n                              disabled={!userRights.canDeleteAll || (role.nombre_utilisateurs || 0) > 0}\r\n                            >\r\n                              <HeroIcon><TrashIcon /></HeroIcon>\r\n                            </IconButton>\r\n                          </TableCell>\r\n                        )}\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Permissions */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Permissions par Rôle</Typography>\r\n                {selectedRole && rolePermissions.length > 0 && (\r\n                  <Box>\r\n                    {editingPermissions ? (\r\n                      <>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          startIcon={<HeroIcon><CheckIcon /></HeroIcon>}\r\n                          onClick={handleSavePermissions}\r\n                          sx={{ mr: 1 }}\r\n                        >\r\n                          Sauvegarder\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          color=\"secondary\"\r\n                          startIcon={<HeroIcon><XMarkIcon /></HeroIcon>}\r\n                          onClick={handleCancelPermissions}\r\n                        >\r\n                          Annuler\r\n                        </Button>\r\n                      </>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<HeroIcon><PencilIcon /></HeroIcon>}\r\n                        onClick={handleEditPermissions}\r\n                        disabled={!userRights.canManagePermissions}\r\n                      >\r\n                        Modifier les Permissions\r\n                      </Button>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n              \r\n              <FormControl fullWidth sx={{ mb: 3 }}>\r\n                <InputLabel>Sélectionner un rôle</InputLabel>\r\n                <Select\r\n                  value={selectedRole}\r\n                  onChange={(e) => {\r\n                    setSelectedRole(e.target.value);\r\n                    setEditingPermissions(false);\r\n                    if (e.target.value) {\r\n                      loadRolePermissions(e.target.value);\r\n                    }\r\n                  }}\r\n                >\r\n                  {roles.map((role) => (\r\n                    <MenuItem key={role.id_role} value={role.id_role}>\r\n                      {role.nom_role} - {role.description}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {selectedRole && (editingPermissions ? tempRolePermissions : rolePermissions).length > 0 && (\r\n                <TableContainer>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Module</TableCell>\r\n                        <TableCell>Description</TableCell>\r\n                        <TableCell align=\"center\">Voir</TableCell>\r\n                        <TableCell align=\"center\">Éditer</TableCell>\r\n                        <TableCell align=\"center\">Supprimer</TableCell>\r\n                        <TableCell align=\"center\">Administrer</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {(editingPermissions ? tempRolePermissions : rolePermissions).map((perm) => (\r\n                        <TableRow key={perm.id_role_permission || perm.id_module}>\r\n                          <TableCell>\r\n                            <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                              {perm.nom_module}\r\n                            </Typography>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Typography variant=\"caption\" color=\"text.secondary\">\r\n                              {perm.module_description}\r\n                            </Typography>\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {editingPermissions ? (\r\n                              <Switch\r\n                                checked={perm.peut_voir}\r\n                                onChange={(e) => updatePermission(perm.id_module, 'peut_voir', e.target.checked)}\r\n                                color=\"primary\"\r\n                              />\r\n                            ) : (\r\n                              <Checkbox checked={perm.peut_voir} disabled />\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {editingPermissions ? (\r\n                              <Switch\r\n                                checked={perm.peut_editer}\r\n                                onChange={(e) => updatePermission(perm.id_module, 'peut_editer', e.target.checked)}\r\n                                color=\"primary\"\r\n                                disabled={!perm.peut_voir}\r\n                              />\r\n                            ) : (\r\n                              <Checkbox checked={perm.peut_editer} disabled />\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {editingPermissions ? (\r\n                              <Switch\r\n                                checked={perm.peut_supprimer}\r\n                                onChange={(e) => updatePermission(perm.id_module, 'peut_supprimer', e.target.checked)}\r\n                                color=\"primary\"\r\n                                disabled={!perm.peut_editer}\r\n                              />\r\n                            ) : (\r\n                              <Checkbox checked={perm.peut_supprimer} disabled />\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {editingPermissions ? (\r\n                              <Switch\r\n                                checked={perm.peut_administrer}\r\n                                onChange={(e) => updatePermission(perm.id_module, 'peut_administrer', e.target.checked)}\r\n                                color=\"primary\"\r\n                                disabled={!perm.peut_editer}\r\n                              />\r\n                            ) : (\r\n                              <Checkbox checked={perm.peut_administrer} disabled />\r\n                            )}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              )}\r\n\r\n              {selectedRole && rolePermissions.length === 0 && (\r\n                <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                  Aucune permission définie pour ce rôle.\r\n                </Alert>\r\n              )}\r\n            </TabPanel>\r\n\r\n            {/* Onglet Entreprises */}\r\n            <TabPanel value={tabValue} index={3}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Entreprises</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<HeroIcon><PlusIcon /></HeroIcon>}\r\n                  onClick={handleCreateEntreprise}\r\n                  disabled={!userRights.canEditAll}\r\n                >\r\n                  Nouvelle Entreprise\r\n                </Button>\r\n              </Box>\r\n              \r\n              {!userRights.canEditAll && userRights.canViewAll && (\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                  Vous consultez les entreprises en mode lecture seule.\r\n                </Alert>\r\n              )}\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Nom</TableCell>\r\n                      <TableCell>Secteur</TableCell>\r\n                      <TableCell>Utilisateurs</TableCell>\r\n                      <TableCell>Applications</TableCell>\r\n                      <TableCell>Date Création</TableCell>\r\n                      {userRights.canEditAll && <TableCell>Actions</TableCell>}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {entreprises.map((entreprise) => (\r\n                      <TableRow key={entreprise.id_entreprise} hover>\r\n                        <TableCell>\r\n                          <Box>\r\n                            <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                              {entreprise.nom_entreprise}\r\n                            </Typography>\r\n                            {entreprise.description && (\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                {entreprise.description}\r\n                              </Typography>\r\n                            )}\r\n                          </Box>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={entreprise.secteur || 'Non défini'} \r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge badgeContent={entreprise.nombre_utilisateurs || 0} color=\"primary\">\r\n                            <HeroIcon><UsersIcon /></HeroIcon>\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge badgeContent={entreprise.nombre_applications || 0} color=\"secondary\">\r\n                            <HeroIcon><Cog6ToothIcon /></HeroIcon>\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {entreprise.date_creation ? \r\n                            new Date(entreprise.date_creation).toLocaleDateString() : \r\n                            'Non définie'\r\n                          }\r\n                        </TableCell>\r\n                        {userRights.canEditAll && (\r\n                          <TableCell>\r\n                            <IconButton \r\n                              color=\"primary\" \r\n                              onClick={() => handleEditEntreprise(entreprise)}\r\n                            >\r\n                              <HeroIcon><PencilIcon /></HeroIcon>\r\n                            </IconButton>\r\n                            <IconButton \r\n                              color=\"error\" \r\n                              onClick={() => {\r\n                                setSelectedItem(entreprise);\r\n                                setOpenDeleteDialog(true);\r\n                              }}\r\n                              disabled={!userRights.canDeleteAll || (entreprise.nombre_utilisateurs || 0) > 0}\r\n                            >\r\n                              <HeroIcon><TrashIcon /></HeroIcon>\r\n                            </IconButton>\r\n                          </TableCell>\r\n                        )}\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Modules */}\r\n            <TabPanel value={tabValue} index={4}>\r\n              <Typography variant=\"h6\" gutterBottom>Configuration des Modules</Typography>\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Module</TableCell>\r\n                      <TableCell>Description</TableCell>\r\n                      <TableCell>Route</TableCell>\r\n                      <TableCell>Ordre</TableCell>\r\n                      <TableCell>Statut</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {modules.map((module) => (\r\n                      <TableRow key={module.id_module}>\r\n                        <TableCell>{module.nom_module}</TableCell>\r\n                        <TableCell>{module.description}</TableCell>\r\n                        <TableCell>\r\n                          <code>{module.route_base}</code>\r\n                        </TableCell>\r\n                        <TableCell>{module.ordre_affichage}</TableCell>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={module.actif ? 'Actif' : 'Inactif'} \r\n                            color={module.actif ? 'success' : 'default'} \r\n                            size=\"small\"\r\n                          />\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialogues */}\r\n      {/* Dialog pour créer/modifier un utilisateur */}\r\n      <Dialog open={openActeurDialog} onClose={() => setOpenActeurDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer un nouvel utilisateur' : 'Modifier l\\'utilisateur'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Nom et prénom\"\r\n                  value={acteurFormValues.nom_prenom}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, nom_prenom: e.target.value})}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  type=\"email\"\r\n                  label=\"Email\"\r\n                  value={acteurFormValues.email}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, email: e.target.value})}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Fonction\"\r\n                  value={acteurFormValues.fonction}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, fonction: e.target.value})}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Organisation/Département\"\r\n                  placeholder=\"ex: IT, RH, Finance...\"\r\n                  value={acteurFormValues.organisation}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, organisation: e.target.value})}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Rôle</InputLabel>\r\n                  <Select\r\n                    value={acteurFormValues.id_role}\r\n                    onChange={(e) => setActeurFormValues({...acteurFormValues, id_role: e.target.value})}\r\n                  >\r\n                    {roles.filter(role => {\r\n                      // Filtrer les rôles selon les droits utilisateur\r\n                      if (userRights.scope === 'ENTREPRISE') {\r\n                        return role.niveau_acces === 'ENTREPRISE' || role.nom_role === 'INTERVENANT';\r\n                      }\r\n                      return true;\r\n                    }).map((role) => (\r\n                      <MenuItem key={role.id_role} value={role.id_role}>\r\n                        {role.nom_role}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              <Grid size={12}>\r\n                <FormControl fullWidth required>\r\n                  <InputLabel id=\"entreprise-label\">Entreprise</InputLabel>\r\n                  <Select\r\n                    labelId=\"entreprise-label\"\r\n                    value={acteurFormValues.id_entreprise}\r\n                    label=\"Entreprise\"\r\n                    onChange={(e) => setActeurFormValues({...acteurFormValues, id_entreprise: e.target.value})}\r\n                    disabled={userRights.scope === 'ENTREPRISE'}\r\n                  >\r\n                    {entreprises.map((entreprise) => (\r\n                      <MenuItem key={entreprise.id_entreprise} value={entreprise.id_entreprise}>\r\n                        {entreprise.nom_entreprise}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              {dialogMode === 'create' && (\r\n                <Grid size={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"password\"\r\n                    label=\"Mot de passe\"\r\n                    value={acteurFormValues.mot_de_passe}\r\n                    onChange={(e) => setActeurFormValues({...acteurFormValues, mot_de_passe: e.target.value})}\r\n                  />\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenActeurDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleSubmitActeur} variant=\"contained\" color=\"primary\">\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog pour créer/modifier un rôle */}\r\n      <Dialog open={openRoleDialog} onClose={() => setOpenRoleDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer un nouveau rôle' : 'Modifier le rôle'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Nom du rôle\"\r\n                  value={roleFormValues.nom_role}\r\n                  onChange={(e) => setRoleFormValues({...roleFormValues, nom_role: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  rows={3}\r\n                  label=\"Description\"\r\n                  value={roleFormValues.description}\r\n                  onChange={(e) => setRoleFormValues({...roleFormValues, description: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Niveau d'accès</InputLabel>\r\n                  <Select\r\n                    value={roleFormValues.niveau_acces}\r\n                    onChange={(e) => setRoleFormValues({...roleFormValues, niveau_acces: e.target.value as 'GLOBAL' | 'ENTREPRISE'})}\r\n                  >\r\n                    <MenuItem value=\"ENTREPRISE\">Entreprise</MenuItem>\r\n                    <MenuItem value=\"GLOBAL\">Global</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenRoleDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleSubmitRole} variant=\"contained\" color=\"primary\">\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog pour créer/modifier une entreprise */}\r\n      <Dialog open={openEntrepriseDialog} onClose={() => setOpenEntrepriseDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer une nouvelle entreprise' : 'Modifier l\\'entreprise'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Nom de l'entreprise\"\r\n                  value={entrepriseFormValues.nom_entreprise}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, nom_entreprise: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Secteur\"\r\n                  value={entrepriseFormValues.secteur}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, secteur: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  rows={3}\r\n                  label=\"Description\"\r\n                  value={entrepriseFormValues.description}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, description: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Adresse\"\r\n                  value={entrepriseFormValues.adresse}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, adresse: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Téléphone\"\r\n                  value={entrepriseFormValues.telephone}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, telephone: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  type=\"email\"\r\n                  label=\"Email\"\r\n                  value={entrepriseFormValues.email}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, email: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Site web\"\r\n                  placeholder=\"https://\"\r\n                  value={entrepriseFormValues.site_web}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, site_web: e.target.value})}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenEntrepriseDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleSubmitEntreprise} variant=\"contained\" color=\"primary\">\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression */}\r\n      <Dialog open={openDeleteDialog} onClose={() => setOpenDeleteDialog(false)}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer cet élément ? Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDeleteDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleDeleteItem} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar pour les notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n      >\r\n        <Alert \r\n          onClose={() => setSnackbar({ ...snackbar, open: false })} \r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Administration;","// src/pages/MaturityModelAdmin/index.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Tabs,\r\n  Tab,\r\n  Card,\r\n  CardContent,\r\n  Chip,\r\n  Alert,\r\n  Snackbar,\r\n  CircularProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Fab,\r\n  Divider,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  List,\r\n  ListItem\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Download as DownloadIcon,\r\n  Upload as UploadIcon,\r\n  School as SchoolIcon,\r\n  Category as CategoryIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../services/api';\r\n\r\n// Types\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n  description: string;\r\n  ordre: number;\r\n  actif: boolean;\r\n  nb_thematiques?: number;\r\n  nb_niveaux_globaux?: number;\r\n  thematiques?: Thematique[];\r\n  niveauxGlobaux?: NiveauGlobal[];\r\n}\r\n\r\ninterface Thematique {\r\n  id_thematique: string;\r\n  nom: string;\r\n  description: string;\r\n  id_fonction: string;\r\n  nombre_questions: number;\r\n  ordre: number;\r\n  actif: boolean;\r\n  nb_niveaux?: number;\r\n  niveauxThematiques?: NiveauThematique[];\r\n}\r\n\r\ninterface NiveauGlobal {\r\n  id_niveau: string;\r\n  id_fonction: string;\r\n  score_min: number;\r\n  score_max: number;\r\n  niveau: string;\r\n  description: string;\r\n  recommandations: string;\r\n  ordre: number;\r\n}\r\n\r\ninterface NiveauThematique {\r\n  id_niveau: string;\r\n  id_fonction: string;\r\n  id_thematique: string;\r\n  score_min: number;\r\n  score_max: number;\r\n  niveau: string;\r\n  description: string;\r\n  recommandations: string;\r\n}\r\n\r\ninterface FormData {\r\n  [key: string]: any;\r\n}\r\n\r\ntype DialogType = 'fonction' | 'thematique' | 'niveau-global' | 'niveau-thematique' | '';\r\n\r\nconst MaturityModelAdmin: React.FC = () => {\r\n  // États\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [selectedFonction, setSelectedFonction] = useState<Fonction | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success' as 'success' | 'error' | 'warning' | 'info'\r\n  });\r\n  \r\n  const [questions, setQuestions] = useState<{ [id_thematique: string]: any[] }>({});\r\n\r\n  const loadQuestionsForThematique = async (id_thematique: string) => {\r\n      try {\r\n        const data = await api.get(`/questions/thematique/${id_thematique}`);\r\n        setQuestions((prev) => ({ ...prev, [id_thematique]: data }));\r\n      } catch (e) {\r\n        showSnackbar('Erreur chargement des questions', 'error');\r\n      }\r\n    };\r\n\r\n  // États pour les dialogues\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [dialogType, setDialogType] = useState<DialogType>('');\r\n  const [editingItem, setEditingItem] = useState<any>(null);\r\n  const [formData, setFormData] = useState<FormData>({});\r\n  \r\n  // États pour les confirmations\r\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\r\n  const [itemToDelete, setItemToDelete] = useState<{ type: string; id: string; name: string } | null>(null);\r\n\r\n  // Charger les fonctions au montage\r\n  useEffect(() => {\r\n    loadFonctions();\r\n  }, []);\r\n\r\n  // Charger les questions quand une fonction est chargée\r\n  useEffect(() => {\r\n      selectedFonction?.thematiques?.forEach((t) => loadQuestionsForThematique(t.id_thematique));\r\n    }, [selectedFonction]);\r\n\r\n  // Fonctions de chargement\r\n  const loadFonctions = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await api.get('/maturity-model/fonctions');\r\n      setFonctions(response.data || response);\r\n      if ((response.data || response).length > 0 && !selectedFonction) {\r\n        loadFonctionDetails((response.data || response)[0].id_fonction);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des fonctions:', error);\r\n      showSnackbar('Erreur lors du chargement des fonctions', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadFonctionDetails = async (fonctionId: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await api.get(`/maturity-model/fonctions/${fonctionId}`);\r\n      setSelectedFonction(response.data || response);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des détails:', error);\r\n      showSnackbar('Erreur lors du chargement des détails', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fonctions utilitaires\r\n  const showSnackbar = (message: string, severity: 'success' | 'error' | 'warning' | 'info' = 'success') => {\r\n    setSnackbar({ open: true, message, severity });\r\n  };\r\n\r\n  const openDialog = (type: DialogType, item: any = null) => {\r\n    setDialogType(type);\r\n    setEditingItem(item);\r\n    setFormData(item || {});\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setDialogOpen(false);\r\n    setEditingItem(null);\r\n    setFormData({});\r\n    setDialogType('');\r\n  };\r\n\r\n  const confirmDelete = (type: string, id: string, name: string) => {\r\n    setItemToDelete({ type, id, name });\r\n    setDeleteConfirmOpen(true);\r\n  };\r\n\r\n  const handleAddQuestion = (thematique: Thematique) => {\r\n    setFormData({\r\n      id_thematique: thematique.id_thematique,\r\n      texte: '',\r\n      ponderation: 1,\r\n      aide_reponse: ''\r\n    });\r\n    setDialogType('question');\r\n    setEditingItem(null);\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  // Fonction de sauvegarde\r\n  const handleSave = async () => {\r\n    try {\r\n      let response;\r\n      \r\n      switch (dialogType) {\r\n        case 'fonction':\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/fonctions/${editingItem.id_fonction}`, formData);\r\n            showSnackbar('Fonction mise à jour avec succès');\r\n          } else {\r\n            response = await api.post('/maturity-model/fonctions', formData);\r\n            showSnackbar('Fonction créée avec succès');\r\n          }\r\n          await loadFonctions();\r\n          break;\r\n        \r\n        case 'thematique':\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/thematiques/${editingItem.id_thematique}`, formData);\r\n            showSnackbar('Thématique mise à jour avec succès');\r\n          } else {\r\n            response = await api.post(`/maturity-model/fonctions/${selectedFonction?.id_fonction}/thematiques`, formData);\r\n            showSnackbar('Thématique créée avec succès');\r\n          }\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-global':\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/niveaux-globaux/${editingItem.id_niveau}`, formData);\r\n            showSnackbar('Niveau global mis à jour avec succès');\r\n          } else {\r\n            response = await api.post(`/maturity-model/fonctions/${selectedFonction?.id_fonction}/niveaux-globaux`, formData);\r\n            showSnackbar('Niveau global créé avec succès');\r\n          }\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-thematique':\r\n          const { id_thematique } = formData;\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/niveaux-thematiques/${editingItem.id_niveau}`, formData);\r\n            showSnackbar('Niveau thématique mis à jour avec succès');\r\n          } else {\r\n            response = await api.post(`/maturity-model/thematiques/${id_thematique}/niveaux`, {\r\n              ...formData,\r\n              id_fonction: selectedFonction?.id_fonction\r\n            });\r\n            showSnackbar('Niveau thématique créé avec succès');\r\n          }\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n\r\n        case 'question': {\r\n          if (!formData.texte || formData.texte.trim() === '') {\r\n            showSnackbar('Le texte est obligatoire', 'warning');\r\n            return;\r\n          }\r\n\r\n          if (editingItem) {\r\n            await api.put(`/questions/${editingItem.id_question}`, formData);\r\n            showSnackbar('Question modifiée');\r\n          } else {\r\n            await api.post(`/questions`, formData);\r\n            showSnackbar('Question ajoutée');\r\n          }\r\n\r\n          await loadQuestionsForThematique(formData.id_thematique);\r\n          closeDialog();\r\n          break;\r\n        }\r\n      }\r\n      \r\n      closeDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde', 'error');\r\n    }\r\n  };\r\n\r\n  // Fonction de suppression\r\n  const handleDelete = async () => {\r\n    if (!itemToDelete) return;\r\n    \r\n    try {\r\n      switch (itemToDelete.type) {\r\n        case 'fonction':\r\n          await api.delete(`/maturity-model/fonctions/${itemToDelete.id}`);\r\n          showSnackbar('Fonction supprimée avec succès');\r\n          await loadFonctions();\r\n          if (selectedFonction?.id_fonction === itemToDelete.id) {\r\n            setSelectedFonction(null);\r\n          }\r\n          break;\r\n        \r\n        case 'thematique':\r\n          await api.delete(`/maturity-model/thematiques/${itemToDelete.id}`);\r\n          showSnackbar('Thématique supprimée avec succès');\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-global':\r\n          await api.delete(`/maturity-model/niveaux-globaux/${itemToDelete.id}`);\r\n          showSnackbar('Niveau global supprimé avec succès');\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-thematique':\r\n          await api.delete(`/maturity-model/niveaux-thematiques/${itemToDelete.id}`);\r\n          showSnackbar('Niveau thématique supprimé avec succès');\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n      }\r\n      \r\n      setDeleteConfirmOpen(false);\r\n      setItemToDelete(null);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression:', error);\r\n      showSnackbar('Erreur lors de la suppression', 'error');\r\n    }\r\n  };\r\n\r\n  // Fonction d'export\r\n  const exportModel = async () => {\r\n    try {\r\n      const response = await api.get('/maturity-model/export');\r\n      const dataStr = JSON.stringify(response.data || response, null, 2);\r\n      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n      \r\n      const exportFileDefaultName = `maturity-model-${new Date().toISOString().split('T')[0]}.json`;\r\n      \r\n      const linkElement = document.createElement('a');\r\n      linkElement.setAttribute('href', dataUri);\r\n      linkElement.setAttribute('download', exportFileDefaultName);\r\n      linkElement.click();\r\n      \r\n      showSnackbar('Modèle exporté avec succès');\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'export:', error);\r\n      showSnackbar('Erreur lors de l\\'export', 'error');\r\n    }\r\n  };\r\n\r\n  // Fonction utilitaire pour la couleur des scores\r\n  const getScoreColor = (score: number): string => {\r\n    if (score >= 4) return '#4CAF50';\r\n    if (score >= 3) return '#FF9800';\r\n    if (score >= 2) return '#F44336';\r\n    return '#9E9E9E';\r\n  };\r\n\r\n  // Composant de dialogue\r\n  const renderDialog = () => {\r\n    const getDialogTitle = () => {\r\n      const action = editingItem ? 'Modifier' : 'Créer';\r\n      switch (dialogType) {\r\n        case 'fonction': return `${action} une fonction`;\r\n        case 'thematique': return `${action} une thématique`;\r\n        case 'niveau-global': return `${action} un niveau global`;\r\n        case 'niveau-thematique': return `${action} un niveau thématique`;\r\n        default: return '';\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Dialog open={dialogOpen} onClose={closeDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>{getDialogTitle()}</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            {(dialogType === 'fonction' || dialogType === 'thematique') && (\r\n              <>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Nom\"\r\n                  value={formData.nom || ''}\r\n                  onChange={(e) => setFormData({ ...formData, nom: e.target.value })}\r\n                  required\r\n                />\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Description\"\r\n                  multiline\r\n                  rows={3}\r\n                  value={formData.description || ''}\r\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                  required\r\n                />\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Ordre\"\r\n                  type=\"number\"\r\n                  value={formData.ordre || 999}\r\n                  onChange={(e) => setFormData({ ...formData, ordre: parseInt(e.target.value) || 999 })}\r\n                />\r\n              </>\r\n            )}\r\n            \r\n            {dialogType === 'thematique' && (\r\n              <TextField\r\n                fullWidth\r\n                label=\"Nombre de questions\"\r\n                type=\"number\"\r\n                value={formData.nombre_questions || 0}\r\n                onChange={(e) => setFormData({ ...formData, nombre_questions: parseInt(e.target.value) || 0 })}\r\n              />\r\n            )}\r\n            \r\n            {(dialogType === 'niveau-global' || dialogType === 'niveau-thematique') && (\r\n              <>\r\n                <Box>\r\n                  <Typography gutterBottom>Plage de scores</Typography>\r\n                  <Box sx={{ display: 'flex', gap: 2 }}>\r\n                    <TextField\r\n                      label=\"Score min\"\r\n                      type=\"number\"\r\n                      inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                      value={formData.score_min ?? ''}\r\n                      onChange={(e) => setFormData({ ...formData, score_min: parseFloat(e.target.value) || 0 })}\r\n                      required\r\n                    />\r\n                    <TextField\r\n                      label=\"Score max\"\r\n                      type=\"number\"\r\n                      inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                      value={formData.score_max ?? ''}\r\n                      onChange={(e) => setFormData({ ...formData, score_max: parseFloat(e.target.value) || 0 })}\r\n                      required\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Niveau\"\r\n                  value={formData.niveau || ''}\r\n                  onChange={(e) => setFormData({ ...formData, niveau: e.target.value })}\r\n                  required\r\n                />\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Description\"\r\n                  multiline\r\n                  rows={3}\r\n                  value={formData.description || ''}\r\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                  required\r\n                />\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Recommandations\"\r\n                  multiline\r\n                  rows={3}\r\n                  value={formData.recommandations || ''}\r\n                  onChange={(e) => setFormData({ ...formData, recommandations: e.target.value })}\r\n                />\r\n                \r\n                {dialogType === 'niveau-global' && (\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Ordre\"\r\n                    type=\"number\"\r\n                    value={formData.ordre || 999}\r\n                    onChange={(e) => setFormData({ ...formData, ordre: parseInt(e.target.value) || 999 })}\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n            \r\n            {dialogType === 'niveau-thematique' && !editingItem && (\r\n              <FormControl fullWidth required>\r\n                <InputLabel>Thématique</InputLabel>\r\n                <Select\r\n                  value={formData.id_thematique || ''}\r\n                  onChange={(e) => setFormData({ ...formData, id_thematique: e.target.value })}\r\n                  label=\"Thématique\"\r\n                >\r\n                  {selectedFonction?.thematiques?.map(them => (\r\n                    <MenuItem key={them.id_thematique} value={them.id_thematique}>\r\n                      {them.nom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n\r\n            {dialogType === 'question' && (\r\n              <>\r\n                <TextField\r\n                  label=\"Texte de la question\"\r\n                  fullWidth\r\n                  multiline\r\n                  rows={3}\r\n                  required\r\n                  value={formData.texte || ''}\r\n                  onChange={(e) => setFormData({ ...formData, texte: e.target.value })}\r\n                />\r\n                <TextField\r\n                  label=\"Pondération\"\r\n                  type=\"number\"\r\n                  fullWidth\r\n                  value={formData.ponderation || 1}\r\n                  onChange={(e) => setFormData({ ...formData, ponderation: parseInt(e.target.value) || 1 })}\r\n                />\r\n                <TextField\r\n                  label=\"Aide à la réponse\"\r\n                  fullWidth\r\n                  multiline\r\n                  rows={2}\r\n                  value={formData.aide_reponse || ''}\r\n                  onChange={(e) => setFormData({ ...formData, aide_reponse: e.target.value })}\r\n                />\r\n              </>\r\n            )}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeDialog}>Annuler</Button>\r\n          <Button\r\n            onClick={handleSave}\r\n            variant=\"contained\"\r\n            startIcon={<SaveIcon />}\r\n            disabled={\r\n              !formData.nom && (dialogType === 'fonction' || dialogType === 'thematique') ||\r\n              !formData.niveau && (dialogType === 'niveau-global' || dialogType === 'niveau-thematique')\r\n            }\r\n          >\r\n            Enregistrer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  };\r\n\r\n  // Rendu principal\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* Header */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 3 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                <SettingsIcon color=\"primary\" fontSize=\"large\" />\r\n                <Typography component=\"h1\" variant=\"h4\" color=\"primary\">\r\n                  Administration du Modèle de Maturité\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<DownloadIcon />}\r\n                  onClick={exportModel}\r\n                  sx={{ mr: 2 }}\r\n                >\r\n                  Exporter\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => openDialog('fonction')}\r\n                >\r\n                  Nouvelle Fonction\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des fonctions */}\r\n        <Grid xs={12} md={4}>\r\n          <Paper sx={{ p: 2, height: 'calc(100vh - 200px)', overflow: 'auto' }}>\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mb: 3 }}>\r\n              Fonctions d'évaluation\r\n            </Typography>\r\n            \r\n            {loading && <CircularProgress />}\r\n            \r\n            <List>\r\n              {fonctions.map((fonction) => (\r\n                <Card\r\n                  key={fonction.id_fonction}\r\n                  sx={{\r\n                    mb: 2,\r\n                    cursor: 'pointer',\r\n                    border: selectedFonction?.id_fonction === fonction.id_fonction ? '2px solid #0B4E87' : '1px solid #e0e0e0',\r\n                    transition: 'all 0.3s',\r\n                    '&:hover': { \r\n                      boxShadow: 3,\r\n                      transform: 'translateY(-2px)'\r\n                    }\r\n                  }}\r\n                  onClick={() => loadFonctionDetails(fonction.id_fonction)}\r\n                >\r\n                  <CardContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                      <Typography variant=\"h6\" color=\"primary\">\r\n                        {fonction.nom}\r\n                      </Typography>\r\n                      <Box>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            openDialog('fonction', fonction);\r\n                          }}\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          color=\"error\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            confirmDelete('fonction', fonction.id_fonction, fonction.nom);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </Box>\r\n                    \r\n                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1, mb: 2 }}>\r\n                      {fonction.description}\r\n                    </Typography>\r\n                    \r\n                    <Box display=\"flex\" gap={1}>\r\n                      <Chip\r\n                        size=\"small\"\r\n                        icon={<CategoryIcon />}\r\n                        label={`${fonction.nb_thematiques || 0} thématiques`}\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                      <Chip\r\n                        size=\"small\"\r\n                        icon={<TrendingUpIcon />}\r\n                        label={`${fonction.nb_niveaux_globaux || 0} niveaux`}\r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </List>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Détails de la fonction sélectionnée */}\r\n        <Grid xs={12} md={8}>\r\n          {selectedFonction ? (\r\n            <Paper sx={{ p: 2, height: 'calc(100vh - 200px)', overflow: 'auto' }}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                <Box>\r\n                  <Typography variant=\"h5\" gutterBottom>\r\n                    {selectedFonction.nom}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {selectedFonction.description}\r\n                  </Typography>\r\n                </Box>\r\n                <Box>\r\n                  <Chip\r\n                    label={selectedFonction.actif ? 'Actif' : 'Inactif'}\r\n                    color={selectedFonction.actif ? 'success' : 'default'}\r\n                    sx={{ mr: 2 }}\r\n                  />\r\n                  <Tooltip title=\"Modifier\">\r\n                    <IconButton\r\n                      onClick={() => openDialog('fonction', selectedFonction)}\r\n                    >\r\n                      <EditIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Tabs value={tabValue} onChange={(e, v) => setTabValue(v)} sx={{ mb: 3 }}>\r\n                <Tab label=\"Thématiques\" />\r\n                <Tab label=\"Niveaux Globaux\" />\r\n                <Tab label=\"Niveaux Thématiques\" />\r\n              </Tabs>\r\n\r\n              {/* Tab Thématiques */}\r\n              {tabValue === 0 && (\r\n                <Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h6\">Thématiques ({selectedFonction.thematiques?.length || 0})</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => openDialog('thematique')}\r\n                    >\r\n                      Ajouter une thématique\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  {selectedFonction.thematiques?.map((them) => (\r\n                    <Accordion key={them.id_thematique} sx={{ mb: 1 }}>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\r\n                          <Box>\r\n                            <Typography variant=\"subtitle1\" sx={{ fontWeight: 500 }}>\r\n                              {them.nom}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                              {them.nombre_questions} questions • {them.niveauxThematiques?.length || 0} niveaux définis\r\n                            </Typography>\r\n                          </Box>\r\n                          <Box onClick={(e) => e.stopPropagation()}>\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => openDialog('thematique', them)}\r\n                            >\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              color=\"error\"\r\n                              onClick={() => confirmDelete('thematique', them.id_thematique, them.nom)}\r\n                            >\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </Box>\r\n                        </Box>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\r\n                          {them.description}\r\n                        </Typography>\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          size=\"small\"\r\n                          startIcon={<AddIcon />}\r\n                          onClick={() => handleAddQuestion(them)}\r\n                          disabled={(questions[them.id_thematique]?.length || 0) >= them.nombre_questions}\r\n                        >\r\n                          Ajouter une question\r\n                        </Button>\r\n                       <Box sx={{ mt: 2 }}>\r\n                        <Typography variant=\"subtitle2\">Questions :</Typography>\r\n\r\n                        {/* ✅ Correction : afficher temporairement en debug */}\r\n                        {(console.log('Questions affichées :', questions[them.id_thematique]), null)}\r\n\r\n                        {questions[them.id_thematique]?.map((q, i) => (\r\n                          <Paper key={q.id_question} sx={{ p: 1, mb: 1 }}>\r\n                            <Box display=\"flex\" justifyContent=\"space-between\">\r\n                              <Typography>{i + 1}. {q.texte}</Typography>\r\n                              <Box>\r\n                                <IconButton size=\"small\" onClick={() => openDialog('question', q)}>\r\n                                  <EditIcon />\r\n                                </IconButton>\r\n                              </Box>\r\n                            </Box>\r\n                          </Paper>\r\n                        ))}\r\n                      </Box>\r\n                                                \r\n                        {them.niveauxThematiques && them.niveauxThematiques.length > 0 && (\r\n                          <Box>\r\n                            <Typography variant=\"subtitle2\" gutterBottom>\r\n                              Niveaux définis:\r\n                            </Typography>\r\n                            <Box display=\"flex\" flexWrap=\"wrap\" gap={1}>\r\n                              {them.niveauxThematiques.map(niveau => (\r\n                                <Chip\r\n                                  key={niveau.id_niveau}\r\n                                  label={`${niveau.score_min}-${niveau.score_max}: ${niveau.niveau}`}\r\n                                  size=\"small\"\r\n                                  sx={{\r\n                                    bgcolor: getScoreColor((niveau.score_min + niveau.score_max) / 2),\r\n                                    color: 'white'\r\n                                  }}\r\n                                />\r\n                              ))}\r\n                            </Box>\r\n                          </Box>\r\n                        )}\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  ))}\r\n                  \r\n                  {(!selectedFonction.thematiques || selectedFonction.thematiques.length === 0) && (\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucune thématique définie pour cette fonction\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n\r\n              {/* Tab Niveaux Globaux */}\r\n              {tabValue === 1 && (\r\n                <Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h6\">Niveaux Globaux ({selectedFonction.niveauxGlobaux?.length || 0})</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => openDialog('niveau-global')}\r\n                    >\r\n                      Ajouter un niveau\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  <TableContainer>\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell width=\"120\">Score</TableCell>\r\n                          <TableCell width=\"200\">Niveau</TableCell>\r\n                          <TableCell>Description</TableCell>\r\n                          <TableCell width=\"100\">Actions</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {selectedFonction.niveauxGlobaux?.map((niveau) => (\r\n                          <TableRow key={niveau.id_niveau}>\r\n                            <TableCell>\r\n                              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                                <Box\r\n                                  sx={{\r\n                                    width: 16,\r\n                                    height: 16,\r\n                                    borderRadius: '50%',\r\n                                    bgcolor: getScoreColor((niveau.score_min + niveau.score_max) / 2)\r\n                                  }}\r\n                                />\r\n                                {niveau.score_min} - {niveau.score_max}\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Typography variant=\"subtitle2\">\r\n                                {niveau.niveau}\r\n                              </Typography>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Box>\r\n                                <Typography variant=\"body2\">\r\n                                  {niveau.description}\r\n                                </Typography>\r\n                                {niveau.recommandations && (\r\n                                  <Typography variant=\"caption\" color=\"textSecondary\" sx={{ mt: 1, display: 'block' }}>\r\n                                    <strong>Recommandations:</strong> {niveau.recommandations}\r\n                                  </Typography>\r\n                                )}\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Box>\r\n                                <IconButton\r\n                                  size=\"small\"\r\n                                  onClick={() => openDialog('niveau-global', niveau)}\r\n                                >\r\n                                  <EditIcon />\r\n                                </IconButton>\r\n                                <IconButton\r\n                                  size=\"small\"\r\n                                  color=\"error\"\r\n                                  onClick={() => confirmDelete('niveau-global', niveau.id_niveau, niveau.niveau)}\r\n                                >\r\n                                  <DeleteIcon />\r\n                                </IconButton>\r\n                              </Box>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  \r\n                  {(!selectedFonction.niveauxGlobaux || selectedFonction.niveauxGlobaux.length === 0) && (\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucun niveau global défini pour cette fonction\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n\r\n              {/* Tab Niveaux Thématiques */}\r\n              {tabValue === 2 && (\r\n                <Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h6\">Niveaux Thématiques</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => openDialog('niveau-thematique')}\r\n                      disabled={!selectedFonction.thematiques || selectedFonction.thematiques.length === 0}\r\n                    >\r\n                      Ajouter un niveau\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  {selectedFonction.thematiques?.map((them) => (\r\n                    <Box key={them.id_thematique} mb={3}>\r\n                      <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 500, color: '#0B4E87' }}>\r\n                        {them.nom}\r\n                      </Typography>\r\n                      \r\n                      {them.niveauxThematiques && them.niveauxThematiques.length > 0 ? (\r\n                        <TableContainer sx={{ mb: 2 }}>\r\n                          <Table size=\"small\">\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell width=\"100\">Score</TableCell>\r\n                                <TableCell width=\"200\">Niveau</TableCell>\r\n                                <TableCell>Description</TableCell>\r\n                                <TableCell width=\"80\">Actions</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {them.niveauxThematiques.map((niveau) => (\r\n                                <TableRow key={niveau.id_niveau}>\r\n                                  <TableCell>\r\n                                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                                      <Box\r\n                                        sx={{\r\n                                          width: 12,\r\n                                          height: 12,\r\n                                          borderRadius: '50%',\r\n                                          bgcolor: getScoreColor((niveau.score_min + niveau.score_max) / 2)\r\n                                        }}\r\n                                      />\r\n                                      {niveau.score_min} - {niveau.score_max}\r\n                                    </Box>\r\n                                  </TableCell>\r\n                                  <TableCell>{niveau.niveau}</TableCell>\r\n                                  <TableCell>\r\n                                    <Typography variant=\"body2\" sx={{ fontSize: '0.875rem' }}>\r\n                                      {niveau.description}\r\n                                    </Typography>\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    <Box>\r\n                                      <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => openDialog('niveau-thematique', niveau)}\r\n                                      >\r\n                                        <EditIcon fontSize=\"small\" />\r\n                                      </IconButton>\r\n                                      <IconButton\r\n                                        size=\"small\"\r\n                                        color=\"error\"\r\n                                        onClick={() => confirmDelete('niveau-thematique', niveau.id_niveau, niveau.niveau)}\r\n                                      >\r\n                                        <DeleteIcon fontSize=\"small\" />\r\n                                      </IconButton>\r\n                                    </Box>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ ml: 2, mb: 2 }}>\r\n                          Aucun niveau défini pour cette thématique\r\n                        </Typography>\r\n                      )}\r\n                      \r\n                      <Divider />\r\n                    </Box>\r\n                  ))}\r\n                  \r\n                  {(!selectedFonction.thematiques || selectedFonction.thematiques.length === 0) && (\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucune thématique définie. Créez d'abord des thématiques pour définir leurs niveaux.\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n            </Paper>\r\n          ) : (\r\n            <Paper sx={{ p: 6, textAlign: 'center', height: 'calc(100vh - 200px)', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              <Box>\r\n                <AssessmentIcon sx={{ fontSize: 80, color: '#e0e0e0', mb: 2 }} />\r\n                <Typography variant=\"h6\" color=\"textSecondary\">\r\n                  Sélectionnez une fonction pour voir les détails\r\n                </Typography>\r\n              </Box>\r\n            </Paper>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialogues */}\r\n      {renderDialog()}\r\n\r\n      {/* Dialogue de confirmation de suppression */}\r\n      <Dialog\r\n        open={deleteConfirmOpen}\r\n        onClose={() => setDeleteConfirmOpen(false)}\r\n      >\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer \"{itemToDelete?.name}\" ?\r\n          </Typography>\r\n          <Typography variant=\"caption\" color=\"error\" sx={{ mt: 1, display: 'block' }}>\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteConfirmOpen(false)}>\r\n            Annuler\r\n          </Button>\r\n          <Button\r\n            onClick={handleDelete}\r\n            color=\"error\"\r\n            variant=\"contained\"\r\n            startIcon={<DeleteIcon />}\r\n          >\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert\r\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MaturityModelAdmin;","// src/components/ProtectedRoute.tsx - Version corrigée\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { \r\n  Box, \r\n  CircularProgress, \r\n  Alert, \r\n  AlertTitle, \r\n  Button, \r\n  Typography,\r\n  Paper,\r\n  Container\r\n} from '@mui/material';\r\nimport { \r\n  Lock as LockIcon, \r\n  AdminPanelSettings as AdminIcon,\r\n  Warning as WarningIcon \r\n} from '@mui/icons-material';\r\n\r\ninterface ProtectedRouteProps {\r\n  children: React.ReactNode;\r\n  module?: string;\r\n  action?: string;\r\n  adminOnly?: boolean;\r\n  fallbackUrl?: string;\r\n  showDetailedError?: boolean;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \r\n  children,\r\n  module,\r\n  action = 'voir',\r\n  adminOnly = false,\r\n  fallbackUrl = '/auth/login',\r\n  showDetailedError = true\r\n}) => {\r\n  const { \r\n    isAuthenticated, \r\n    isLoading, \r\n    currentUser, \r\n    hasPermission, \r\n    canAccessRoute,\r\n    isAdmin, \r\n    isSuperAdmin\r\n  } = useAuth();\r\n  \r\n  const location = useLocation();\r\n  const [permissionLoading, setPermissionLoading] = useState(true);\r\n  const [hasAccess, setHasAccess] = useState(false);\r\n  const [errorDetails, setErrorDetails] = useState<{\r\n    type: 'auth' | 'permission' | 'admin';\r\n    message: string;\r\n    suggestion?: string;\r\n  } | null>(null);\r\n\r\n  // Mémoriser les valeurs pour éviter les re-renders\r\n  const isUserAdmin = useCallback(() => isAdmin(), [isAdmin]);\r\n  const isUserSuperAdmin = useCallback(() => isSuperAdmin(), [isSuperAdmin]);\r\n\r\n  // Vérification des permissions - UNIQUEMENT basée sur les valeurs primitives\r\n  useEffect(() => {\r\n    let isMounted = true; // Pour éviter les setState sur composants démontés\r\n\r\n    const checkPermissions = async () => {\r\n      console.log('🔍 ProtectedRoute - Vérification permissions pour:', location.pathname);\r\n      \r\n      try {\r\n        if (!isMounted) return;\r\n        \r\n        setPermissionLoading(true);\r\n        setErrorDetails(null);\r\n\r\n        // 1. Vérifier l'authentification\r\n        if (!isAuthenticated) {\r\n          console.log('❌ Utilisateur non authentifié');\r\n          if (isMounted) {\r\n            setErrorDetails({\r\n              type: 'auth',\r\n              message: 'Vous devez être connecté pour accéder à cette page.',\r\n              suggestion: 'Veuillez vous connecter avec vos identifiants.'\r\n            });\r\n            setHasAccess(false);\r\n            setPermissionLoading(false);\r\n          }\r\n          return;\r\n        }\r\n\r\n        // 2. Vérifier si admin requis\r\n        if (adminOnly && !isUserAdmin() && !isUserSuperAdmin()) {\r\n          console.log('❌ Accès administrateur requis mais utilisateur non admin');\r\n          if (isMounted) {\r\n            setErrorDetails({\r\n              type: 'admin',\r\n              message: 'Accès réservé aux administrateurs.',\r\n              suggestion: 'Contactez votre administrateur système pour obtenir les droits nécessaires.'\r\n            });\r\n            setHasAccess(false);\r\n            setPermissionLoading(false);\r\n          }\r\n          return;\r\n        }\r\n\r\n        // 3. Vérifier les permissions spécifiques\r\n        if (module && hasPermission) {\r\n          const hasModulePermission = hasPermission(module, action);\r\n          console.log(`🔍 Permission ${module}:${action} = ${hasModulePermission ? '✅' : '❌'}`);\r\n\r\n          if (!hasModulePermission) {\r\n            if (isMounted) {\r\n              setErrorDetails({\r\n                type: 'permission',\r\n                message: `Vous n'avez pas les permissions nécessaires pour ${action === 'voir' ? 'consulter' : action} ce module.`,\r\n                suggestion: `Module requis: ${module} (${action}). Contactez votre administrateur pour obtenir ces permissions.`\r\n              });\r\n              setHasAccess(false);\r\n              setPermissionLoading(false);\r\n            }\r\n            return;\r\n          }\r\n        }\r\n\r\n        // 4. Vérifier l'accès par route\r\n        if (canAccessRoute) {\r\n          const routeAccess = canAccessRoute(location.pathname);\r\n          console.log(`🚦 Accès route ${location.pathname} = ${routeAccess ? '✅' : '❌'}`);\r\n\r\n          if (!routeAccess) {\r\n            if (isMounted) {\r\n              setErrorDetails({\r\n                type: 'permission',\r\n                message: 'Vous n\\'avez pas accès à cette page.',\r\n                suggestion: 'Vérifiez que vous avez les permissions nécessaires ou contactez votre administrateur.'\r\n              });\r\n              setHasAccess(false);\r\n              setPermissionLoading(false);\r\n            }\r\n            return;\r\n          }\r\n        }\r\n\r\n        // 5. Accès autorisé\r\n        console.log('✅ Accès autorisé');\r\n        if (isMounted) {\r\n          setHasAccess(true);\r\n          setPermissionLoading(false);\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('❌ Erreur lors de la vérification des permissions:', error);\r\n        if (isMounted) {\r\n          setErrorDetails({\r\n            type: 'permission',\r\n            message: 'Erreur lors de la vérification des permissions.',\r\n            suggestion: 'Veuillez rafraîchir la page ou contacter le support technique.'\r\n          });\r\n          setHasAccess(false);\r\n          setPermissionLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Attendre que isLoading soit false avant de vérifier\r\n    if (!isLoading) {\r\n      checkPermissions();\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [\r\n    // UNIQUEMENT les valeurs primitives pour éviter les boucles\r\n    isAuthenticated, \r\n    isLoading, \r\n    module, \r\n    action, \r\n    adminOnly, \r\n    location.pathname,\r\n    currentUser?.id_acteur, // Uniquement l'ID au lieu de l'objet entier\r\n    currentUser?.nom_role\r\n  ]); // NE PAS inclure les fonctions ici\r\n\r\n  // Affichage du chargement\r\n  if (isLoading || (permissionLoading && isAuthenticated)) {\r\n    return (\r\n      <Box \r\n        display=\"flex\" \r\n        flexDirection=\"column\"\r\n        justifyContent=\"center\" \r\n        alignItems=\"center\" \r\n        minHeight=\"80vh\"\r\n        gap={2}\r\n      >\r\n        <CircularProgress size={48} />\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          Vérification des permissions...\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Redirection si non authentifié\r\n  if (!isAuthenticated) {\r\n    console.log('🔄 Redirection vers page de connexion');\r\n    return <Navigate to={fallbackUrl} state={{ from: location }} replace />;\r\n  }\r\n\r\n  // Affichage des erreurs de permission\r\n  if (!hasAccess && errorDetails) {\r\n    if (!showDetailedError) {\r\n      return <Navigate to=\"/\" replace />;\r\n    }\r\n\r\n    return (\r\n      <Container maxWidth=\"md\" sx={{ mt: 8, mb: 4 }}>\r\n        <Paper elevation={3} sx={{ p: 4, textAlign: 'center' }}>\r\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" gap={3}>\r\n            {/* Icône selon le type d'erreur */}\r\n            {errorDetails.type === 'auth' && (\r\n              <LockIcon color=\"error\" sx={{ fontSize: 64 }} />\r\n            )}\r\n            {errorDetails.type === 'admin' && (\r\n              <AdminIcon color=\"warning\" sx={{ fontSize: 64 }} />\r\n            )}\r\n            {errorDetails.type === 'permission' && (\r\n              <WarningIcon color=\"error\" sx={{ fontSize: 64 }} />\r\n            )}\r\n\r\n            {/* Message d'erreur */}\r\n            <Alert \r\n              severity={errorDetails.type === 'admin' ? 'warning' : 'error'} \r\n              sx={{ width: '100%', textAlign: 'left' }}\r\n            >\r\n              <AlertTitle>\r\n                {errorDetails.type === 'auth' && 'Authentification requise'}\r\n                {errorDetails.type === 'admin' && 'Accès administrateur requis'}\r\n                {errorDetails.type === 'permission' && 'Permissions insuffisantes'}\r\n              </AlertTitle>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                {errorDetails.message}\r\n              </Typography>\r\n              {errorDetails.suggestion && (\r\n                <Typography variant=\"body2\" sx={{ mt: 1, opacity: 0.8 }}>\r\n                  💡 {errorDetails.suggestion}\r\n                </Typography>\r\n              )}\r\n            </Alert>\r\n\r\n            {/* Actions */}\r\n            <Box display=\"flex\" gap={2} mt={2}>\r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={() => window.history.back()}\r\n                color=\"primary\"\r\n              >\r\n                Retour\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                onClick={() => window.location.href = '/'}\r\n                color=\"primary\"\r\n              >\r\n                Accueil\r\n              </Button>\r\n              {errorDetails.type === 'auth' && (\r\n                <Button \r\n                  variant=\"contained\" \r\n                  onClick={() => window.location.href = fallbackUrl}\r\n                  color=\"secondary\"\r\n                >\r\n                  Se connecter\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  // Affichage du contenu protégé\r\n  console.log('✅ Affichage du contenu protégé');\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default ProtectedRoute;","// src/App.tsx - Version corrigée sans ToastProvider redondant\r\nimport React, { useEffect } from 'react';\r\nimport { Routes, Route, Navigate } from 'react-router-dom';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport { frFR } from '@mui/material/locale';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { fr } from 'date-fns/locale';\r\n\r\n// Contexts\r\nimport { AuthProvider } from './contexts/AuthContext';\r\n// ToastProvider déjà fourni dans main.tsx\r\n\r\n// Layouts\r\nimport MainLayout from './layouts/MainLayout';\r\nimport AuthLayout from './layouts/AuthLayout';\r\n\r\n// Pages d'authentification\r\nimport Login from './pages/auth/Login';\r\n\r\n// Pages principales\r\nimport Dashboard from './pages/dashboard';\r\nimport QuestionnaireIndex from './pages/dashboard/questionnaires';\r\nimport QuestionnaireDetail from './pages/dashboard/questionnaires/[id]';\r\nimport QuestionnaireAdmin from './pages/dashboard/questionnaires/admin';\r\nimport Applications from './pages/dashboard/applications';\r\nimport Organisations from './pages/dashboard/organisations';\r\nimport AnalysesInterpretations from './pages/dashboard/AnalysesInterpretations';\r\nimport AnalysesFonctions from './pages/dashboard/AnalysesInterpretationfunctions';\r\nimport CalculateScore from './pages/dashboard/CalculateScore';\r\nimport Forms from './pages/dashboard/forms';\r\nimport FormDetail from './pages/dashboard/forms/FormDetail';\r\nimport FormNew from './pages/dashboard/forms/FormNew';\r\n\r\n// Pages d'administration unifiées\r\nimport Administration from './pages/Administration';\r\nimport MaturityModelAdmin from './pages/MaturityModelAdmin';\r\n\r\n// Composant de protection des routes avec permissions\r\nimport ProtectedRoute from './components/ProtectedRoute';\r\n\r\n// Utils\r\nimport logger from './utils/logger';\r\n\r\n// Configuration du logger global\r\nif (typeof window !== 'undefined') {\r\n  window.onerror = (message, source, lineno, colno, error) => {\r\n    logger.error('Erreur globale non gérée', {\r\n      message,\r\n      source,\r\n      lineno,\r\n      colno,\r\n      stack: error?.stack\r\n    });\r\n    return false;\r\n  };\r\n\r\n  window.addEventListener('unhandledrejection', (event) => {\r\n    logger.error('Promesse rejetée non gérée', {\r\n      reason: event.reason?.message || String(event.reason),\r\n      stack: event.reason?.stack\r\n    });\r\n  });\r\n\r\n  (window as any).initialLoadTime = performance.now();\r\n}\r\n\r\n// Création du thème\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#0B4E87',\r\n    },\r\n    secondary: {\r\n      main: '#09C4B8',\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: '\"Ubuntu\", sans-serif',\r\n  },\r\n  components: {\r\n    MuiButton: {\r\n      styleOverrides: {\r\n        root: {\r\n          textTransform: 'none',\r\n        },\r\n      },\r\n    },\r\n  },\r\n}, frFR);\r\n\r\n// Composant de route protégée avec vérification de permissions spécifiques\r\ninterface PermissionRouteProps {\r\n  children: React.ReactNode;\r\n  module: string;\r\n  action?: string;\r\n  adminOnly?: boolean;\r\n}\r\n\r\nconst PermissionRoute: React.FC<PermissionRouteProps> = ({ \r\n  children, \r\n  module, \r\n  action = 'voir',\r\n  adminOnly = false \r\n}) => {\r\n  return (\r\n    <ProtectedRoute \r\n      module={module} \r\n      action={action} \r\n      adminOnly={adminOnly}\r\n      showDetailedError={true}\r\n    >\r\n      {children}\r\n    </ProtectedRoute>\r\n  );\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  useEffect(() => {\r\n    logger.info('Application initialisée avec administration unifiée', {\r\n      version: import.meta.env.VITE_APP_VERSION || 'développement',\r\n      environment: import.meta.env.MODE,\r\n      features: ['unified_administration', 'enhanced_permissions']\r\n    });\r\n\r\n    const loadTime = performance.now() - ((window as any).initialLoadTime || 0);\r\n    if (loadTime > 0) {\r\n      logger.logPerformance('app-initial-load', loadTime);\r\n    }\r\n\r\n    return () => {\r\n      logger.flush().catch(console.error);\r\n    };\r\n  }, []);\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={fr}>\r\n        <AuthProvider>\r\n          <Routes>\r\n            {/* === ROUTES PUBLIQUES / AUTHENTIFICATION === */}\r\n            <Route path=\"/auth\" element={<AuthLayout />}>\r\n              <Route path=\"login\" element={<Login />} />\r\n              {/* Ajoutez d'autres routes d'auth ici si nécessaire */}\r\n            </Route>\r\n\r\n            {/* === ROUTES PROTÉGÉES AVEC LAYOUT PRINCIPAL === */}\r\n            <Route \r\n              path=\"/\" \r\n              element={\r\n                <ProtectedRoute fallbackUrl=\"/auth/login\">\r\n                  <MainLayout />\r\n                </ProtectedRoute>\r\n              }\r\n            >\r\n              {/* Dashboard */}\r\n              <Route \r\n                index \r\n                element={\r\n                  <PermissionRoute module=\"DASHBOARD\">\r\n                    <Dashboard />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* Analyses et recommandations */}\r\n              <Route \r\n                path=\"analyses-interpretations\" \r\n                element={\r\n                  <PermissionRoute module=\"ANALYSES\">\r\n                    <AnalysesInterpretations />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              <Route \r\n                path=\"analyses-fonctions\" \r\n                element={\r\n                  <PermissionRoute module=\"ANALYSES\">\r\n                    <AnalysesFonctions />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              <Route \r\n                path=\"analyses-fonctions/:id\" \r\n                element={\r\n                  <PermissionRoute module=\"ANALYSES\">\r\n                    <AnalysesFonctions />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              <Route \r\n                path=\"analyses-interpretations/:id\" \r\n                element={\r\n                  <PermissionRoute module=\"ANALYSES\">\r\n                    <AnalysesInterpretations />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              <Route \r\n                path=\"analyses/calculer/:id\" \r\n                element={\r\n                  <PermissionRoute module=\"ANALYSES\" action=\"editer\">\r\n                    <CalculateScore />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* Applications */}\r\n              <Route \r\n                path=\"applications\" \r\n                element={\r\n                  <PermissionRoute module=\"APPLICATIONS\">\r\n                    <Applications />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* Formulaires */}\r\n              <Route \r\n                path=\"formulaires\" \r\n                element={\r\n                  <PermissionRoute module=\"FORMULAIRES\">\r\n                    <Forms />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              <Route \r\n                path=\"formulaires/new\" \r\n                element={\r\n                  <PermissionRoute module=\"FORMULAIRES\" action=\"editer\">\r\n                    <FormNew />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              <Route \r\n                path=\"formulaires/:id\" \r\n                element={\r\n                  <PermissionRoute module=\"FORMULAIRES\">\r\n                    <FormDetail />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* Questionnaires */}\r\n              <Route \r\n                path=\"questionnaires\" \r\n                element={\r\n                  <PermissionRoute module=\"QUESTIONNAIRES\">\r\n                    <QuestionnaireIndex />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              <Route \r\n                path=\"questionnaires/:id\" \r\n                element={\r\n                  <PermissionRoute module=\"QUESTIONNAIRES\">\r\n                    <QuestionnaireDetail />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              <Route \r\n                path=\"questionnaires/admin\" \r\n                element={\r\n                  <PermissionRoute module=\"QUESTIONNAIRES\" action=\"administrer\">\r\n                    <QuestionnaireAdmin />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* Organisations/Entreprises */}\r\n              <Route \r\n                path=\"organisations\" \r\n                element={\r\n                  <PermissionRoute module=\"ENTREPRISES\">\r\n                    <Organisations />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              <Route \r\n                path=\"organisations/:name\" \r\n                element={\r\n                  <PermissionRoute module=\"ENTREPRISES\">\r\n                    <Organisations />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* === ROUTES D'ADMINISTRATION UNIFIÉES === */}\r\n              \r\n              <Route \r\n                path=\"admin\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMINISTRATION\" adminOnly={true}>\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"admin/users\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMIN_USERS\" adminOnly={true}>\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n              \r\n              <Route \r\n                path=\"admin/users/:id\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMIN_USERS\" adminOnly={true}>\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"admin/permissions\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMIN_PERMISSIONS\" adminOnly={true}>\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"admin/roles\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMIN_ROLES\" adminOnly={true}>\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"admin/maturity-model\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMIN_MATURITY\" adminOnly={true}>\r\n                    <MaturityModelAdmin />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"admin/system\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMIN_SYSTEM\" adminOnly={true}>\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* === REDIRECTIONS POUR RÉTROCOMPATIBILITÉ === */}\r\n              <Route \r\n                path=\"users\" \r\n                element={<Navigate to=\"/admin/users\" replace />} \r\n              />\r\n              <Route \r\n                path=\"users/:id\" \r\n                element={<Navigate to=\"/admin/users\" replace />} \r\n              />\r\n              <Route \r\n                path=\"permissions\" \r\n                element={<Navigate to=\"/admin/permissions\" replace />} \r\n              />\r\n            </Route>\r\n            \r\n            {/* === REDIRECTIONS VERS LOGIN === */}\r\n            <Route path=\"/login\" element={<Navigate to=\"/auth/login\" replace />} />\r\n            <Route path=\"*\" element={<Navigate to=\"/auth/login\" replace />} />\r\n          </Routes>\r\n        </AuthProvider>\r\n      </LocalizationProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;","// src/components/common/Toast.tsx\r\nimport React, { useState, useEffect } from 'react';\r\n\r\ninterface ToastProps {\r\n  message: string;\r\n  type: 'success' | 'error' | 'info' | 'warning';\r\n  duration?: number;\r\n  onClose?: () => void;\r\n}\r\n\r\nconst Toast: React.FC<ToastProps> = ({ \r\n  message, \r\n  type, \r\n  duration = 3000, \r\n  onClose \r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setIsVisible(false);\r\n      if (onClose) onClose();\r\n    }, duration);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [duration, onClose]);\r\n\r\n  if (!isVisible) return null;\r\n\r\n  const bgColorClass = {\r\n    success: 'bg-success-500',\r\n    error: 'bg-danger-500',\r\n    info: 'bg-primary-500',\r\n    warning: 'bg-warning-500'\r\n  }[type];\r\n\r\n  const iconMap = {\r\n    success: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n      </svg>\r\n    ),\r\n    error: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n      </svg>\r\n    ),\r\n    info: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n      </svg>\r\n    ),\r\n    warning: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"></path>\r\n      </svg>\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 right-4 z-50 flex items-center p-4 mb-4 rounded-lg shadow-lg text-white animate-slideIn-right min-w-64 max-w-md\">\r\n      <div className={`flex items-center justify-center rounded-full p-2 ${bgColorClass}`}>\r\n        {iconMap[type]}\r\n      </div>\r\n      <div className=\"ml-3 text-sm font-medium\">\r\n        {message}\r\n      </div>\r\n      <button \r\n        onClick={() => {\r\n          setIsVisible(false);\r\n          if (onClose) onClose();\r\n        }}\r\n        className=\"ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 inline-flex h-8 w-8 text-white hover:bg-white hover:bg-opacity-20\"\r\n      >\r\n        <span className=\"sr-only\">Close</span>\r\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toast;","// src/contexts/ToastContext.tsx\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react';\r\nimport Toast from '../components/common/Toast';\r\n\r\ntype ToastType = 'success' | 'error' | 'info' | 'warning';\r\n\r\ninterface ToastMessage {\r\n  id: string;\r\n  message: string;\r\n  type: ToastType;\r\n}\r\n\r\ninterface ToastContextProps {\r\n  toasts: ToastMessage[];\r\n  addToast: (message: string, type: ToastType) => void;\r\n  removeToast: (id: string) => void;\r\n}\r\n\r\nconst ToastContext = createContext<ToastContextProps | undefined>(undefined);\r\n\r\nexport const useToast = () => {\r\n  const context = useContext(ToastContext);\r\n  if (!context) {\r\n    throw new Error('useToast must be used within a ToastProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ToastProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {\r\n  const [toasts, setToasts] = useState<ToastMessage[]>([]);\r\n\r\n  const addToast = (message: string, type: ToastType) => {\r\n    const id = Math.random().toString(36).substring(2, 9);\r\n    setToasts((prevToasts) => [...prevToasts, { id, message, type }]);\r\n  };\r\n\r\n  const removeToast = (id: string) => {\r\n    setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));\r\n  };\r\n\r\n  return (\r\n    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>\r\n      {children}\r\n      <div className=\"toast-container\">\r\n        {toasts.map((toast) => (\r\n          <Toast\r\n            key={toast.id}\r\n            message={toast.message}\r\n            type={toast.type}\r\n            onClose={() => removeToast(toast.id)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </ToastContext.Provider>\r\n  );\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport { ToastProvider } from './contexts/ToastContext';\r\nimport './index.css';\r\n\r\n\r\n// Fonction pour masquer le splash screen\r\nconst hideSplashScreen = () => {\r\n  const splashScreen = document.getElementById('splash-screen');\r\n  if (splashScreen) {\r\n    // D'abord on réduit l'opacité\r\n    splashScreen.style.opacity = '0';\r\n    \r\n    // Puis on le retire complètement après la transition\r\n    setTimeout(() => {\r\n      splashScreen.style.display = 'none';\r\n    }, 500); // Correspond à la durée de transition dans le CSS\r\n  }\r\n};\r\n\r\n// Composant wrapper avec Router et futures flags\r\nconst AppWithRouter = () => (\r\n  <BrowserRouter\r\n    future={{\r\n      v7_startTransition: true,\r\n      v7_relativeSplatPath: true,\r\n    }}\r\n  >\r\n    <ToastProvider>\r\n      <App />\r\n    </ToastProvider>\r\n  </BrowserRouter>\r\n);\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n      <ToastProvider>\r\n      <AppWithRouter />\r\n      </ToastProvider>\r\n    </React.StrictMode>\r\n);\r\n\r\nsetTimeout(hideSplashScreen, 1000);"],"names":["defaultConfig","LOG_LEVEL_ORDER","Logger","customConfig","__publicField","sessionId","event","_a","_b","force","logsToSend","metadata","response","error","level","message","details","logEntry","newConfig","action","path","operation","durationMs","endpoint","method","status","logger","getAPIBaseURL","API_URL","API_PREFIX","apiClient","axios","config","token","logData","dataString","errorMessage","errorStack","duration","calculateRequestDuration","url","_c","errorData","_d","_e","_f","_g","_h","_i","_j","normalizePath","normalizedUrl","withPerformanceLogging","extraDetails","startTime","result","testConnection","api","data","formData","ALL_APP_MODULES","AuthContext","createContext","useAuth","useContext","AuthProvider","children","currentUser","setCurrentUser","useState","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","setError","permissions","setPermissions","hasGlobalAccess","setHasGlobalAccess","isUserAdmin","useCallback","user","role","isUserSuperAdmin","generateFullAdminPermissions","module","mainPermission","sousModule","getDefaultPermissionsForRole","nomRole","niveauAcces","basePermissions","roleUpper","p","checkAuthStatus","permissionsResponse","err","login","email","password","logout","register","userData","forgotPassword","updateProfile","isAdmin","isSuperAdmin","hasPermission","permission","sp","canAccessRoute","route","cleanRoute","routeToModuleMap","moduleForRoute","routePath","moduleName","canAccessAdminModule","subModule","getAccessibleModules","getAdminSubModules","adminModule","adminPermission","refreshPermissions","getAllAppModules","useEffect","value","jsxDEV","this","drawerWidth","MainLayout","theme","useTheme","isMobile","useMediaQuery","open","setOpen","adminMenuOpen","setAdminMenuOpen","navigate","useNavigate","location","useLocation","menuItems","DashboardIcon","AssessmentIcon","AssignmentIcon","QuestionIcon","Fragment","AdminIcon","PeopleIcon","SecurityIcon","BusinessIcon","MaturityIcon","SettingsIcon","handleDrawerToggle","handleNavigate","handleAdminMenuToggle","handleLogout","isMenuItemAccessible","item","isMenuItemActive","isAdminMenuActive","renderMenuItem","isSubItem","Divider","isActive","hasSubItems","ListItem","ListItemButton","ListItemIcon","ListItemText","Box","Typography","Chip","ExpandLess","ExpandMore","renderAdminSubItems","adminItem","Collapse","List","subItem","React","CssBaseline","AppBar","Toolbar","IconButton","MenuIcon","Badge","LogoutIcon","Drawer","ChevronLeftIcon","Outlet","AuthLayout","Link","Login","setFormData","localError","setLocalError","isSubmitting","setIsSubmitting","from","handleChange","name","checked","prev","handleSubmit","Container","CircularProgress","Paper","Alert","TextField","FormControlLabel","Checkbox","Button","COLORS","Dashboard","loading","setLoading","refreshing","setRefreshing","successMessage","setSuccessMessage","entreprises","setEntreprises","secteurs","setSecteurs","fonctions","setFonctions","applications","setApplications","formulaires","setFormulaires","searchTerm","setSearchTerm","hebergementFilter","setHebergementFilter","technologieFilter","setTechnologieFilter","tabValue","setTabValue","hebergementOptions","setHebergementOptions","technologieOptions","setTechnologieOptions","fetchDashboardData","isRefresh","entreprisesResponse","fonctionsResponse","applicationsResponse","formulairesResponse","entreprisesData","normalizeApiResponse","fonctionsData","applicationsData","formulairesData","secteursData","calculerStatistiquesSecteur","applicationsAvecScore","app","hebergements","technologies","normalizedFormulaires","form","dataType","getScoreWithFallback","score","defaultValue","secteursMap","acc","entreprise","secteur","nom","scoreTotal","count","a","b","formatScore","scoreActuel","scoreMaximum","actuel","maximum","calculateScorePercentage","countFormulairesByFunction","countByFunction","fonctionsArray","fonction","handleRefresh","CustomTooltip","active","payload","label","getScoreColor","formatDate","dateString","e","Grid","RefreshIcon","Card","CardContent","Avatar","DomainIcon","DescriptionIcon","ResponsiveContainer","BarChart","CartesianGrid","XAxis","YAxis","Tooltip","Legend","Bar","entry","index","Cell","PieChart","Pie","InputAdornment","SearchIcon","f","scorePercent","QuestionnairesIndex","questionnaires","setQuestionnaires","questionnaireStats","setQuestionnaireStats","fetchQuestionnaires","questionnaireData","normalizedQuestionnaires","q","statsResponse","statsData","statsObj","stat","handleViewQuestionnaire","questionnaire","handleGoToAdmin","getStats","questionnaireId","statType","AddIcon","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","ExpandMoreIcon","QuestionnaireDetail","id","useParams","setQuestionnaire","questions","setQuestions","stats","setStats","fetchQuestionnaireData","questionnaireResponse","questionsResponse","questionsData","questionsError","statsError","handleBackToList","sortedQuestions","ArrowBackIcon","EditIcon","question","Accordion","AccordionSummary","AccordionDetails","TabPanel","props","other","initialQuestionnaireFormValues","initialQuestionFormValues","QuestionnaireAdmin","searchParams","useSearchParams","selectedQuestionnaire","setSelectedQuestionnaire","thematiques","setThematiques","selectedThematiques","setSelectedThematiques","loadingFonctions","setLoadingFonctions","loadingThematiques","setLoadingThematiques","questionnaireFormValues","setQuestionnaireFormValues","questionFormValues","setQuestionFormValues","openQuestionnaireDialog","setOpenQuestionnaireDialog","openQuestionDialog","setOpenQuestionDialog","openDeleteDialog","setOpenDeleteDialog","openDeleteQuestionDialog","setOpenDeleteQuestionDialog","currentQuestion","setCurrentQuestion","snackbar","setSnackbar","dialogMode","setDialogMode","questionDialogMode","setQuestionDialogMode","fetchFonctions","fetchThematiques","fetchQuestionnaireById","showSnackbar","handleOpenCreateQuestionnaireDialog","handleOpenEditQuestionnaireDialog","themesResponse","themeIds","t","handleCloseQuestionnaireDialog","handleSubmitQuestionnaire","newId","handleOpenDeleteDialog","handleCloseDeleteDialog","handleDeleteQuestionnaire","handleSelectQuestionnaire","handleTabChange","newValue","severity","handleCloseSnackbar","Tabs","Tab","ListItemSecondaryAction","DeleteIcon","CardHeader","thematique","themeQuestions","Dialog","DialogTitle","DialogContent","FormControl","InputLabel","Select","selected","MenuItem","themes","ListSubheader","FormHelperText","DialogActions","Snackbar","DatePickerWrapper","onChange","minDate","maxDate","disabled","fullWidth","required","helperText","textFieldProps","LocalizationProvider","AdapterDateFns","fr","DatePicker","initialFormValues","Applications","openDialog","setOpenDialog","currentApplication","setCurrentApplication","formValues","setFormValues","deleteConfirmOpen","setDeleteConfirmOpen","selectedDate","setSelectedDate","fetchApplications","handleOpenCreateDialog","handleOpenEditDialog","application","handleCloseDialog","handleFormChange","handleDateChange","date","formattedDate","handleOpenDeleteConfirm","handleCloseDeleteConfirm","handleDelete","handleCalculateScore","Organisations","organisations","setOrganisations","analyses","setAnalyses","scoresMoyens","setScoresMoyens","selectedOrganisation","setSelectedOrganisation","fetchOrganisations","fetchAnalysesOrganisation","orgs","acteur","organisationsData","org","appCount","sum","analyse","scoreMoyen","orgName","analysesResponse","scoresMoyensResponse","handleOrganisationChange","formatForRadarChart","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","Radar","niveau","percentage","normalizeAnalyse","score_global","getNiveauColor","StatCard","title","variant","size","subtitle","trend","getVariantClasses","getSizeClasses","variantClasses","sizeClasses","getNiveauLabel","EntrepriseScoresPanel","entrepriseId","setEntreprise","historique","setHistorique","updatingScore","setUpdatingScore","fetchEntrepriseData","entrepriseData","historiqueResponse","recalculateScore","prepareChartData","scoreGlobal","niveauLabel","niveauColor","chartData","LineChart","RechartsTooltip","Line","AnalysesInterpretationsUI","selectedApplication","selectedEntreprise","selectedAnalyse","interpretation","filteredHistorique","selectedThematique","newAnalyseData","interpretationsSummary","page","rowsPerPage","order","orderBy","filters","showFilters","uniqueThematiques","handleApplicationChange","handleEntrepriseChange","handleAnalyseChange","handleThematiqueChange","handleOpenNewAnalyseDialog","addThematique","updateThematique","removeThematique","createNewAnalyse","calculateNewAnalyse","getScoreGlobal","prepareHistoriqueData","handleChangePage","handleChangeRowsPerPage","handleRequestSort","getFilteredData","getUniqueValues","setFilters","setShowFilters","fetchAllInterpretations","fetchAnalysesByApplication","fetchAnalysesByEntreprise","fetchHistoriqueByEntreprise","viewMode","setViewMode","toggleViewMode","appsOfEntreprise","CustomRadarTooltip","ToggleButtonGroup","newMode","ToggleButton","AppsTwoToneIcon","CalculateIcon","Autocomplete","option","params","FilterListIcon","TableSortLabel","entrepriseName","TablePagination","to","AnalysesInterpretations","setSelectedApplication","setSelectedAnalyse","setInterpretation","setSelectedEntreprise","setSelectedThematique","setNewAnalyseData","setInterpretationsSummary","setPage","setRowsPerPage","setOrder","setOrderBy","interpretationsResponse","appEntrepriseMapResponse","interpretationsData","appToEntrepriseMap","mapping","appId","appsResponse","entrepriseResponse","uniqueThemes","normalizedAnalyses","latestAnalyse","fetchInterpretation","fetchHistorique","analyseId","formattedInterpretation","filteredInterpretations","normalizedAnalyse","field","updatedThematiques","_","i","newPage","property","filteredData","row","searchLower","appNameMatch","niveauMatch","orgMatch","valueA","valueB","strA","strB","benchmarkCache","numScore","ensureValidScore","parsed","fetchBenchmarkData","cacheKey","requestBody","benchmarkData","generateMockBenchmarkData","deriveGlobalLevelAndRecommendations","AnalysesFonctions","selectedFonction","setSelectedFonction","entrepriseDetails","setEntrepriseDetails","fonctionDetails","setFonctionDetails","benchmarkDataLLM","setBenchmarkDataLLM","loadingBenchmark","setLoadingBenchmark","radarData","setRadarData","loadEntreprises","loadEntrepriseDetails","convertToRadarData","getBenchmarkData","thematiqueNames","getBenchmarkScore","themeName","benchmarkThematiques","benchmark","fonctionName","newRadarData","benchmarkScore","fallbackData","formattedEntreprises","ent","derivedData","handleFonctionChange","fonctionId","rec","recIndex","CalculateScore","calculating","setCalculating","success","setSuccess","setApplication","activeStep","setActiveStep","steps","appResponse","formResponse","formsData","resolve","canCalculateScore","Stepper","Step","StepLabel","Forms","statusFilter","setStatusFilter","fonctionFilter","setFonctionFilter","entrepriseFilter","setEntrepriseFilter","useOptimizedMode","setUseOptimizedMode","performanceMetrics","setPerformanceMetrics","fetchData","useOptimized","loadTime","toggleOptimizedMode","runPerformanceTest","metrics","filteredFormulaires","matchesSearch","matchesStatus","matchesFonction","matchesEntreprise","paginatedFormulaires","comparison","aFonctions","bFonctions","aThematiques","bThematiques","getStatusColor","getProgressColor","progress","uniqueFonctions","handleView","formulaire","handleEdit","handleCreateNew","SpeedIcon","TrendingUpIcon","LinearProgress","ViewIcon","SendIcon","FormDetail","saving","setSaving","setFormulaire","reponses","setReponses","openConfirmDialog","setOpenConfirmDialog","formulaireResponse","formulaireData","normalizedFormulaire","questionsPromises","normalizedQuestions","reponsesResponse","normalizedReponses","r","isFormComplete","useMemo","progression","commentCount","criticalQuestions","questionsByThematique","grouped","findReponse","questionId","updateReponse","existingReponseIndex","updatedReponses","newReponse","updateCommentaire","commentaire","handleConfirmAction","handleCloseConfirmDialog","saveFormulaire","newStatus","savePromises","reponse","results","successfulSaves","failedSaves","skippedSaves","errorDetails","updatedFormulaire","scoreError","getStatusInfo","statusInfo","Breadcrumbs","HomeIcon","WarningIcon","CommentIcon","FunctionIcon","InfoIcon","PersonIcon","isHighPriority","isCritical","RadioGroup","Radio","SaveIcon","CheckIcon","DialogContentText","FormNew","submitting","setSubmitting","acteurs","setActeurs","validation","setValidation","filteredActeurs","setFilteredActeurs","acteursResponse","acteursData","questionnairesResponse","questionnairesData","filtered","handleQuestionnaireChange","validateCurrentStep","isValid","newValidation","validateForm","handleNext","prevActiveStep","handleBack","DEFAULT_APPLICATION_ID","creationPromises","id_questionnaire","dataToSubmit","successes","failures","formId","getStepContent","step","quest","renderSummary","selectedQuestionnaires","CheckCircleIcon","HeroIcon","className","Administration","isConsultant","getScope","userRights","scope","getInitialTab","savedTab","roles","setRoles","modules","setModules","rolePermissions","setRolePermissions","openActeurDialog","setOpenActeurDialog","openRoleDialog","setOpenRoleDialog","openEntrepriseDialog","setOpenEntrepriseDialog","editingPermissions","setEditingPermissions","tempRolePermissions","setTempRolePermissions","acteurFormValues","setActeurFormValues","roleFormValues","setRoleFormValues","entrepriseFormValues","setEntrepriseFormValues","selectedItem","setSelectedItem","selectedRole","setSelectedRole","loadInitialData","loadActeurs","loadRoles","loadModules","loadRolePermissions","roleId","handleCreateActeur","handleEditActeur","handleCreateRole","handleEditRole","handleCreateEntreprise","handleEditEntreprise","handleEditPermissions","handleSavePermissions","permissionsData","perm","handleCancelPermissions","updatePermission","moduleId","handleSubmitActeur","apiData","handleSubmitRole","handleSubmitEntreprise","handleDeleteItem","getRoleLabel","nom_role","ShieldExclamationIcon","ShieldCheckIcon","UserGroupIcon","UsersIcon","UserIcon","canManageUser","getEntrepriseName","getAvailableTabs","BuildingOfficeIcon","Cog6ToothIcon","EyeIcon","tab","PlusIcon","roleInfo","canManage","PencilIcon","TrashIcon","XMarkIcon","Switch","MaturityModelAdmin","loadQuestionsForThematique","id_thematique","dialogOpen","setDialogOpen","dialogType","setDialogType","editingItem","setEditingItem","itemToDelete","setItemToDelete","loadFonctions","loadFonctionDetails","type","closeDialog","confirmDelete","handleAddQuestion","handleSave","exportModel","dataStr","dataUri","exportFileDefaultName","linkElement","renderDialog","getDialogTitle","them","DownloadIcon","CategoryIcon","v","ProtectedRoute","adminOnly","fallbackUrl","showDetailedError","permissionLoading","setPermissionLoading","hasAccess","setHasAccess","setErrorDetails","isMounted","hasModulePermission","routeAccess","LockIcon","AlertTitle","Navigate","source","lineno","colno","createTheme","frFR","PermissionRoute","App","ThemeProvider","Routes","Route","QuestionnaireIndex","Toast","onClose","isVisible","setIsVisible","timer","bgColorClass","iconMap","ToastContext","ToastProvider","toasts","setToasts","addToast","prevToasts","removeToast","toast","hideSplashScreen","splashScreen","AppWithRouter","BrowserRouter","ReactDOM"],"mappings":"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"}