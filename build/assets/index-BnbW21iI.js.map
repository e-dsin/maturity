{"version":3,"file":"index-BnbW21iI.js","sources":["../../src/utils/logger.ts","../../src/services/api.ts","../../src/contexts/AuthContext.tsx","../../src/layouts/MainLayout.tsx","../../src/layouts/AuthLayout.tsx","../../src/pages/auth/Login.tsx","../../src/pages/auth/EnterpriseRegistration.tsx","../../src/pages/auth/EvaluationInvite.tsx","../../src/pages/dashboard/index.tsx","../../src/pages/dashboard/questionnaires/index.tsx","../../src/pages/dashboard/questionnaires/[id].tsx","../../src/pages/dashboard/questionnaires/admin.tsx","../../src/components/common/DataPickerWrapper.tsx","../../src/pages/dashboard/applications/index.tsx","../../src/pages/dashboard/organisations/index.tsx","../../src/pages/dashboard/CalculateScore.tsx","../../src/pages/dashboard/forms/index.tsx","../../src/pages/dashboard/forms/FormDetail.tsx","../../src/pages/dashboard/forms/FormNew.tsx","../../src/utils/AnalyseUtils.ts","../../src/components/dashboard/StatsCard.tsx","../../src/components/dashboard/EntrepriseScoresPanel.jsx","../../src/components/dashboard/AnalysesInterpretationsUI.tsx","../../src/pages/dashboard/AnalysesInterpretations.tsx","../../src/pages/dashboard/AnalysesInterpretationfunctions.tsx","../../src/pages/dashboard/AnalysesInterpretationsEntreprises.tsx","../../src/pages/MaturityEvaluation.tsx","../../src/pages/Administration/index.tsx","../../src/pages/MaturityModelAdmin/index.tsx","../../src/components/ProtectedRoute.tsx","../../src/App.tsx","../../src/components/common/Toast.tsx","../../src/contexts/ToastContext.tsx","../../src/main.tsx"],"sourcesContent":["// src/utils/logger.ts\r\n\r\n/**\r\n * Module de logging pour le frontend\r\n * Permet d'envoyer les logs au backend et de les stocker localement\r\n */\r\n\r\n// Types pour le logger\r\nexport type LogLevel = 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';\r\n\r\nexport interface LogEntry {\r\n  level: LogLevel;\r\n  message: string;\r\n  timestamp: string;\r\n  details?: Record<string, any>;\r\n}\r\n\r\nexport interface LogMetadata {\r\n  userId?: string;\r\n  sessionId: string;\r\n  userAgent: string;\r\n  language: string;\r\n  screenSize: string;\r\n  batchId: string;\r\n  [key: string]: any;\r\n}\r\n\r\n// Configuration du logger\r\ninterface LoggerConfig {\r\n  minLevel: LogLevel;\r\n  sendToServer: boolean;\r\n  serverUrl: string;\r\n  batchSize: number;\r\n  sendInterval: number;\r\n  includeUserInfo: boolean;\r\n}\r\n\r\n// Configuration par défaut\r\nconst defaultConfig: LoggerConfig = {\r\n  minLevel: import.meta.env.PROD ? 'INFO' : 'DEBUG',\r\n  sendToServer: import.meta.env.PROD,\r\n  serverUrl: '/api/logs',\r\n  batchSize: 10,\r\n  sendInterval: 30000, // 30s\r\n  includeUserInfo: true,\r\n};\r\n\r\n// Ordre des niveaux de logs pour faciliter les comparaisons\r\nconst LOG_LEVEL_ORDER: Record<LogLevel, number> = {\r\n  'DEBUG': 0,\r\n  'INFO': 1,\r\n  'WARN': 2,\r\n  'ERROR': 3,\r\n};\r\n\r\n// Classe principale du logger\r\nclass Logger {\r\n  private config: LoggerConfig;\r\n  private logBuffer: LogEntry[] = [];\r\n  private sendTimer: number | null = null;\r\n  private sessionId: string;\r\n  \r\n  constructor(customConfig: Partial<LoggerConfig> = {}) {\r\n    // Fusionner la configuration personnalisée avec la configuration par défaut\r\n    this.config = { ...defaultConfig, ...customConfig };\r\n    \r\n    // Initialiser ou récupérer l'ID de session\r\n    this.sessionId = this.getOrCreateSessionId();\r\n    \r\n    // Démarrer le timer d'envoi si nécessaire\r\n    if (this.config.sendToServer) {\r\n      this.startSendTimer();\r\n      this.setupUnloadHandler();\r\n    }\r\n    \r\n    // Capturer les erreurs non gérées\r\n    this.setupErrorCapture();\r\n  }\r\n  \r\n  /**\r\n   * Obtient ou crée un ID de session\r\n   */\r\n  private getOrCreateSessionId(): string {\r\n    let sessionId = sessionStorage.getItem('logSessionId');\r\n    if (!sessionId) {\r\n      sessionId = Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n      sessionStorage.setItem('logSessionId', sessionId);\r\n    }\r\n    return sessionId;\r\n  }\r\n  \r\n  /**\r\n   * Configure le timer d'envoi des logs\r\n   */\r\n  private startSendTimer(): void {\r\n    if (this.sendTimer) {\r\n      window.clearInterval(this.sendTimer);\r\n    }\r\n    \r\n    this.sendTimer = window.setInterval(() => {\r\n      this.sendLogs();\r\n    }, this.config.sendInterval);\r\n  }\r\n  \r\n  /**\r\n   * Capture les erreurs non gérées\r\n   */\r\n  private setupErrorCapture(): void {\r\n    window.addEventListener('error', (event) => {\r\n      this.error('Erreur non gérée', {\r\n        message: event.message,\r\n        filename: event.filename,\r\n        lineno: event.lineno,\r\n        colno: event.colno,\r\n        stack: event.error?.stack,\r\n      });\r\n      return false;\r\n    });\r\n    \r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.error('Promesse rejetée non gérée', {\r\n        reason: event.reason?.message || String(event.reason),\r\n        stack: event.reason?.stack,\r\n      });\r\n      return false;\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Envoie les logs au serveur\r\n   */\r\n  private async sendLogs(force: boolean = false): Promise<void> {\r\n    if (!this.config.sendToServer || (this.logBuffer.length < this.config.batchSize && !force)) {\r\n      return;\r\n    }\r\n    \r\n    if (this.logBuffer.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    const logsToSend = [...this.logBuffer];\r\n    this.logBuffer = [];\r\n    \r\n    try {\r\n      const metadata: LogMetadata = {\r\n        sessionId: this.sessionId,\r\n        batchId: Date.now().toString(36),\r\n        userAgent: navigator.userAgent,\r\n        language: navigator.language,\r\n        screenSize: `${window.innerWidth}x${window.innerHeight}`,\r\n        userId: localStorage.getItem('userId') || undefined,\r\n        url: window.location.href,\r\n        referrer: document.referrer,\r\n      };\r\n      \r\n      const response = await fetch(this.config.serverUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          logs: logsToSend,\r\n          metadata,\r\n        }),\r\n        // Timeout\r\n        signal: AbortSignal.timeout ? AbortSignal.timeout(5000) : undefined,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        console.error(`Échec d'envoi des logs: ${response.status}`);\r\n        // Remettre les logs dans le buffer\r\n        this.logBuffer = [...logsToSend, ...this.logBuffer];\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'envoi des logs:', error);\r\n      // Remettre les logs dans le buffer\r\n      this.logBuffer = [...logsToSend, ...this.logBuffer];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Configure le gestionnaire d'événement unload\r\n   */\r\n  private setupUnloadHandler(): void {\r\n    window.addEventListener('beforeunload', () => {\r\n      this.sendLogs(true);\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Ajoute une entrée de log\r\n   */\r\n  private addLog(level: LogLevel, message: string, details: Record<string, any> = {}): void {\r\n    // Vérifier le niveau de log\r\n    if (LOG_LEVEL_ORDER[level] < LOG_LEVEL_ORDER[this.config.minLevel]) {\r\n      return;\r\n    }\r\n    \r\n    // Créer l'entrée de log\r\n    const logEntry: LogEntry = {\r\n      level,\r\n      message,\r\n      timestamp: new Date().toISOString(),\r\n      details: { ...details },\r\n    };\r\n    \r\n    // Ajouter l'entrée au buffer\r\n    this.logBuffer.push(logEntry);\r\n    \r\n    // Afficher dans la console\r\n    switch (level) {\r\n      case 'DEBUG':\r\n        console.debug(`[${level}] ${message}`, details);\r\n        break;\r\n      case 'INFO':\r\n        console.info(`[${level}] ${message}`, details);\r\n        break;\r\n      case 'WARN':\r\n        console.warn(`[${level}] ${message}`, details);\r\n        break;\r\n      case 'ERROR':\r\n        console.error(`[${level}] ${message}`, details);\r\n        // Envoyer immédiatement les erreurs\r\n        this.sendLogs(true);\r\n        break;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * API publique pour les différents niveaux de logs\r\n   */\r\n  public debug(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('DEBUG', message, details);\r\n  }\r\n  \r\n  public info(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('INFO', message, details);\r\n  }\r\n  \r\n  public warn(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('WARN', message, details);\r\n  }\r\n  \r\n  public error(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('ERROR', message, details);\r\n  }\r\n  \r\n  /**\r\n   * Force l'envoi des logs au serveur\r\n   */\r\n  public flush(): Promise<void> {\r\n    return this.sendLogs(true);\r\n  }\r\n  \r\n  /**\r\n   * Met à jour la configuration\r\n   */\r\n  public setConfig(newConfig: Partial<LoggerConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    \r\n    // Mettre à jour le timer si nécessaire\r\n    if (this.config.sendToServer) {\r\n      this.startSendTimer();\r\n    } else if (this.sendTimer) {\r\n      window.clearInterval(this.sendTimer);\r\n      this.sendTimer = null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Log d'un événement utilisateur\r\n   */\r\n  public logUserAction(action: string, details: Record<string, any> = {}): void {\r\n    this.info(`Action utilisateur: ${action}`, {\r\n      type: 'user_action',\r\n      action,\r\n      ...details\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Log d'une navigation\r\n   */\r\n  public logNavigation(path: string, details: Record<string, any> = {}): void {\r\n    this.info(`Navigation: ${path}`, {\r\n      type: 'navigation',\r\n      path,\r\n      ...details\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Log de performance\r\n   */\r\n  public logPerformance(operation: string, durationMs: number, details: Record<string, any> = {}): void {\r\n    this.info(`Performance: ${operation} (${durationMs}ms)`, {\r\n      type: 'performance',\r\n      operation,\r\n      durationMs,\r\n      ...details\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Log d'appel API\r\n   */\r\n  public logApiCall(endpoint: string, method: string, status: number, durationMs: number, details: Record<string, any> = {}): void {\r\n    const level = status >= 400 ? 'ERROR' : 'INFO';\r\n    \r\n    this.addLog(level, `API ${method} ${endpoint}: ${status} (${durationMs}ms)`, {\r\n      type: 'api_call',\r\n      endpoint,\r\n      method,\r\n      status,\r\n      durationMs,\r\n      ...details\r\n    });\r\n  }\r\n}\r\n\r\n// Créer et exporter une instance par défaut\r\nconst logger = new Logger();\r\n\r\nexport default logger;","// src/services/api.ts - Version mise à jour pour le backend déployé\r\nimport axios, { AxiosInstance, AxiosResponse, AxiosRequestConfig } from 'axios';\r\nimport logger from '../utils/logger';\r\n\r\n// Configuration des URLs selon l'environnement\r\nconst getAPIBaseURL = (): string => {\r\n  // En production ou quand VITE_API_URL est définie, utiliser la valeur configurée\r\n  if (import.meta.env.VITE_API_URL) {\r\n    return import.meta.env.VITE_API_URL;\r\n  }\r\n  \r\n  // Par défaut, utiliser le backend déployé\r\n  return 'https://api-dev.dev-maturity.e-dsin.fr';\r\n};\r\n\r\nconst API_URL = getAPIBaseURL();\r\nconst API_PREFIX = '/api';\r\n\r\nconsole.log('🌐 Configuration API:', {\r\n  baseURL: API_URL,\r\n  environment: import.meta.env.MODE,\r\n  isDev: import.meta.env.DEV,\r\n  customUrl: import.meta.env.VITE_API_URL\r\n});\r\n\r\n// Créer une instance d'axios avec la configuration de base\r\nconst apiClient: AxiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // Ajouter timeout et credentials\r\n  timeout: 30000,\r\n  withCredentials: true,\r\n});\r\n\r\n// Intercepteur pour les requêtes\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    // Ajouter un marqueur de temps pour mesurer la durée\r\n    (config as any).metadata = { startTime: Date.now() };\r\n    \r\n    // Récupérer le token d'authentification du localStorage\r\n    const token = localStorage.getItem('auth_token');\r\n    \r\n    // Ajouter le token aux en-têtes si disponible\r\n    if (token && config.headers) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    // Ajouter les headers CORS explicites\r\n    if (config.headers) {\r\n      config.headers['Accept'] = 'application/json';\r\n      config.headers['Cache-Control'] = 'no-cache';\r\n    }\r\n    \r\n    // Logger la requête en toute sécurité\r\n    const logData = {\r\n      method: config.method?.toUpperCase() || 'GET',\r\n      url: config.url || 'unknown',\r\n      baseURL: config.baseURL,\r\n      hasToken: !!token\r\n    };\r\n    \r\n    // Ajouter les données de manière sécurisée en mode dev uniquement\r\n    if (import.meta.env.DEV && config.data) {\r\n      try {\r\n        const dataString = typeof config.data === 'string' \r\n          ? config.data \r\n          : JSON.stringify(config.data);\r\n        \r\n        logData['data'] = dataString.substring(0, 500);\r\n      } catch (err) {\r\n        // Ignorer les erreurs de sérialisation\r\n      }\r\n    }\r\n    \r\n    logger.debug(`API Request: ${logData.method} ${logData.url}`, logData);\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Logger l'erreur de requête en toute sécurité\r\n    const errorMessage = error?.message || 'Erreur inconnue de requête API';\r\n    const errorStack = error?.stack || '';\r\n    \r\n    logger.error('Erreur de requête API', {\r\n      message: errorMessage,\r\n      stack: errorStack\r\n    });\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Intercepteur pour les réponses\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    // Calculer la durée de la requête de manière sécurisée\r\n    const duration = calculateRequestDuration(response.config);\r\n    const url = response.config?.url || 'unknown';\r\n    const method = response.config?.method?.toUpperCase() || 'GET';\r\n    \r\n    // Logger la réponse réussie\r\n    logger.info(`API Response: ${method} ${url} - ${response.status}`, {\r\n      status: response.status,\r\n      statusText: response.statusText || '',\r\n      duration,\r\n      size: response.data ? JSON.stringify(response.data).length : 0,\r\n      url\r\n    });\r\n    \r\n    // Traitement des réponses réussies\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Préparer les données de l'erreur de manière sécurisée\r\n    const errorData = {\r\n      url: error.config?.url || 'unknown',\r\n      method: error.config?.method?.toUpperCase() || 'UNKNOWN',\r\n      status: error.response?.status,\r\n      statusText: error.response?.statusText || '',\r\n      duration: error.config ? calculateRequestDuration(error.config) : null,\r\n      message: error?.message || 'Erreur inconnue',\r\n      baseURL: error.config?.baseURL\r\n    };\r\n    \r\n    // Gestion spécifique des erreurs\r\n    if (error.response?.status === 401) {\r\n      logger.warn('Session expirée ou non authentifiée', errorData);\r\n      // Nettoyer le token et rediriger vers login\r\n      localStorage.removeItem('auth_token');\r\n      \r\n      // Éviter les redirections infinies\r\n      if (!window.location.pathname.includes('/auth/login')) {\r\n        window.location.href = '/auth/login';\r\n      }\r\n    } else if (error.response?.status === 0 || error.code === 'NETWORK_ERROR') {\r\n      // Erreur de réseau\r\n      logger.error('Erreur de réseau - Backend inaccessible', {\r\n        ...errorData,\r\n        type: 'NETWORK_ERROR',\r\n        backendURL: API_URL\r\n      });\r\n    } else if (error.response?.status >= 500) {\r\n      // Erreur serveur\r\n      logger.error('Erreur serveur backend', {\r\n        ...errorData,\r\n        type: 'SERVER_ERROR'\r\n      });\r\n    } else {\r\n      // Autres erreurs (400, 403, 404, etc.)\r\n      logger.error('Erreur de réponse API', {\r\n        ...errorData,\r\n        // Inclure les données de réponse en développement uniquement\r\n        ...(import.meta.env.DEV && error.response?.data && { \r\n          response: JSON.stringify(error.response.data).substring(0, 500),\r\n          stack: error?.stack || ''\r\n        })\r\n      });\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Fonction utilitaire pour normaliser les chemins d'API\r\nconst normalizePath = (url: string): string => {\r\n  // Si l'URL commence déjà par API_PREFIX, ne pas l'ajouter à nouveau\r\n  if (url.startsWith(API_PREFIX)) {\r\n    return url;\r\n  }\r\n  \r\n  // Endpoints spéciaux qui ne nécessitent pas /api/ (health checks, etc.)\r\n  const specialEndpoints = ['/health', '/health-simple'];\r\n  if (specialEndpoints.some(endpoint => url.startsWith(endpoint))) {\r\n    return url;\r\n  }\r\n  \r\n  // Pour tous les autres endpoints, ajouter /api/\r\n  const normalizedUrl = `${API_PREFIX}${url.startsWith('/') ? url : `/${url}`}`;\r\n  \r\n  // Debug en développement\r\n  if (import.meta.env.DEV) {\r\n    console.log(`🔄 URL Normalization: \"${url}\" → \"${normalizedUrl}\"`);\r\n  }\r\n  \r\n  return normalizedUrl;\r\n};\r\n\r\n// Fonction pour calculer la durée d'une requête de manière sécurisée\r\nconst calculateRequestDuration = (config: any): number => {\r\n  try {\r\n    if (config?.metadata?.startTime) {\r\n      return Date.now() - config.metadata.startTime;\r\n    }\r\n  } catch (err) {\r\n    // Ignorer les erreurs\r\n  }\r\n  return 0;\r\n};\r\n\r\n// Fonctions de wrapper pour mesurer les performances et gérer les exceptions\r\nconst withPerformanceLogging = async <T>(\r\n  method: string,\r\n  url: string,\r\n  operation: () => Promise<T>,\r\n  extraDetails: Record<string, any> = {}\r\n): Promise<T> => {\r\n  const normalizedUrl = normalizePath(url);\r\n  const startTime = performance.now();\r\n  \r\n  try {\r\n    const result = await operation();\r\n    const duration = performance.now() - startTime;\r\n    \r\n    // Logger le succès uniquement si la durée est anormalement longue\r\n    if (duration > 2000) { // Plus de 2 secondes\r\n      logger.warn(`API Performance: ${method} ${normalizedUrl} - ${Math.round(duration)}ms (SLOW)`, {\r\n        ...extraDetails,\r\n        duration,\r\n        baseURL: API_URL\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    // L'erreur est déjà loggée dans l'intercepteur de réponse\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Test de connectivité\r\nexport const testConnection = async (): Promise<boolean> => {\r\n  try {\r\n    await apiClient.get('/health', { timeout: 5000 });\r\n    logger.info('✅ Test de connectivité réussi', { backendURL: API_URL });\r\n    return true;\r\n  } catch (error) {\r\n    logger.error('❌ Test de connectivité échoué', { \r\n      backendURL: API_URL,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n    return false;\r\n  }\r\n};\r\n\r\n// Service API avec gestion des erreurs améliorée\r\nconst api = {\r\n  /**\r\n   * Test de connectivité au backend\r\n   */\r\n  testConnection,\r\n\r\n  /**\r\n   * Récupère l'URL de base configurée\r\n   */\r\n  getBaseURL: () => API_URL,\r\n\r\n  /**\r\n   * Effectue une requête GET\r\n   * @param url - URL de la requête\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  get: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'GET',\r\n      normalizedUrl,\r\n      () => apiClient.get<T>(normalizedUrl, config).then((response: AxiosResponse<T>) => response.data),\r\n      { params: config?.params }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête POST\r\n   * @param url - URL de la requête\r\n   * @param data - Données à envoyer\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'POST',\r\n      normalizedUrl,\r\n      () => apiClient.post<T>(normalizedUrl, data, config).then((response: AxiosResponse<T>) => response.data),\r\n      { dataSize: data ? JSON.stringify(data).length : 0 }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête PUT\r\n   * @param url - URL de la requête\r\n   * @param data - Données à envoyer\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'PUT',\r\n      normalizedUrl,\r\n      () => apiClient.put<T>(normalizedUrl, data, config).then((response: AxiosResponse<T>) => response.data),\r\n      { dataSize: data ? JSON.stringify(data).length : 0 }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête PATCH\r\n   * @param url - URL de la requête\r\n   * @param data - Données à envoyer\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'PATCH',\r\n      normalizedUrl,\r\n      () => apiClient.patch<T>(normalizedUrl, data, config).then((response: AxiosResponse<T>) => response.data),\r\n      { dataSize: data ? JSON.stringify(data).length : 0 }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête DELETE\r\n   * @param url - URL de la requête\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  delete: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'DELETE',\r\n      normalizedUrl,\r\n      () => apiClient.delete<T>(normalizedUrl, config).then((response: AxiosResponse<T>) => response.data),\r\n      {}\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête de téléchargement de fichier (en blob)\r\n   * @param url - URL de la requête\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données blob de la réponse\r\n   */\r\n  downloadFile: (url: string, config?: AxiosRequestConfig): Promise<Blob> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<Blob>(\r\n      'GET',\r\n      normalizedUrl,\r\n      () => apiClient.get(normalizedUrl, { \r\n        ...config,\r\n        responseType: 'blob' \r\n      }).then(response => response.data),\r\n      { responseType: 'blob' }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue un téléversement de fichier\r\n   * @param url - URL de la requête\r\n   * @param formData - FormData contenant le fichier\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  uploadFile: <T = any>(url: string, formData: FormData, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'POST',\r\n      normalizedUrl,\r\n      () => apiClient.post<T>(normalizedUrl, formData, {\r\n        ...config,\r\n        headers: {\r\n          ...config?.headers,\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      }).then(response => response.data),\r\n      { formDataEntries: Array.from(formData.keys()).join(',') }\r\n    );\r\n  }\r\n};\r\n\r\nexport default api;","// src/contexts/AuthContext.tsx - Version corrigée pour le rôle\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport api from '../services/api';\r\n\r\n// === CONFIGURATION DES MODULES (conservée) ===\r\nconst ALL_APP_MODULES = {\r\n  DASHBOARD: {\r\n    nom_module: 'DASHBOARD',\r\n    route_base: '/',\r\n    description: 'Tableau de bord principal',\r\n    icone: 'dashboard',\r\n    ordre: 1\r\n  },\r\n  QUESTIONNAIRES: {\r\n    nom_module: 'QUESTIONNAIRES',\r\n    route_base: '/questionnaires',\r\n    description: 'Gestion des questionnaires',\r\n    icone: 'quiz',\r\n    ordre: 2\r\n  },\r\n  FORMULAIRES: {\r\n    nom_module: 'FORMULAIRES',\r\n    route_base: '/formulaires',\r\n    description: 'Gestion des formulaires',\r\n    icone: 'assignment',\r\n    ordre: 3\r\n  },\r\n  ANALYSES: {\r\n    nom_module: 'ANALYSES',\r\n    route_base: '/analyses-fonctions',\r\n    description: 'Analyses et recommandations',\r\n    icone: 'analytics',\r\n    ordre: 4\r\n  },\r\n  APPLICATIONS: {\r\n    nom_module: 'APPLICATIONS',\r\n    route_base: '/applications',\r\n    description: 'Portfolio applications',\r\n    icone: 'apps',\r\n    ordre: 5\r\n  },\r\n  ENTREPRISES: {\r\n    nom_module: 'ENTREPRISES',\r\n    route_base: '/organisations',\r\n    description: 'Gestion des organisations',\r\n    icone: 'business',\r\n    ordre: 6\r\n  },\r\n  ADMINISTRATION: {\r\n    nom_module: 'ADMINISTRATION',\r\n    route_base: '/admin',\r\n    description: 'Administration système',\r\n    icone: 'admin_panel_settings',\r\n    ordre: 10,\r\n    sous_modules: {\r\n      USERS: {\r\n        nom_module: 'ADMIN_USERS',\r\n        route_base: '/admin/users',\r\n        description: 'Gestion des utilisateurs',\r\n        icone: 'people'\r\n      },\r\n      PERMISSIONS: {\r\n        nom_module: 'ADMIN_PERMISSIONS',\r\n        route_base: '/admin/permissions',\r\n        description: 'Gestion des permissions',\r\n        icone: 'security'\r\n      },\r\n      ROLES: {\r\n        nom_module: 'ADMIN_ROLES',\r\n        route_base: '/admin/roles',\r\n        description: 'Gestion des rôles',\r\n        icone: 'account_circle'\r\n      },\r\n      MATURITY: {\r\n        nom_module: 'ADMIN_MATURITY',\r\n        route_base: '/admin/maturity-model',\r\n        description: 'Modèle de maturité',\r\n        icone: 'model_training'\r\n      },\r\n      SYSTEM: {\r\n        nom_module: 'ADMIN_SYSTEM',\r\n        route_base: '/admin/system',\r\n        description: 'Configuration système',\r\n        icone: 'settings'\r\n      }\r\n    }\r\n  }\r\n} as const;\r\n\r\n// === INTERFACES ADAPTÉES ===\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  email: string;\r\n  organisation: string;\r\n  nom_role: string;\r\n  niveau_acces: 'ENTREPRISE' | 'GLOBAL';\r\n  id_entreprise?: string;\r\n  nom_entreprise?: string;\r\n  anciennete_role?: number;\r\n}\r\n\r\ninterface Permission {\r\n  nom_module: string;\r\n  route_base: string;\r\n  peut_voir: boolean;\r\n  peut_editer: boolean;\r\n  peut_supprimer: boolean;\r\n  peut_administrer: boolean;\r\n  sous_permissions?: Permission[];\r\n}\r\n\r\ninterface AuthContextType {\r\n  currentUser: Acteur | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  register: (userData: RegisterData) => Promise<void>;\r\n  forgotPassword: (email: string) => Promise<void>;\r\n  updateProfile: (userData: Partial<Acteur>) => Promise<void>;\r\n  error: string | null;\r\n  permissions: Permission[];\r\n  hasGlobalAccess: boolean;\r\n  hasPermission: (module: string, action: string) => boolean;\r\n  canAccessRoute: (route: string) => boolean;\r\n  canAccessAdminModule: (subModule: string) => boolean;\r\n  getAccessibleModules: () => Permission[];\r\n  getAdminSubModules: () => Permission[];\r\n  refreshPermissions: () => Promise<void>;\r\n  isAdmin: () => boolean;\r\n  isSuperAdmin: () => boolean;\r\n  getAllAppModules: () => typeof ALL_APP_MODULES;\r\n}\r\n\r\ninterface RegisterData {\r\n  nom_prenom: string;\r\n  email: string;\r\n  password: string;\r\n  organisation: string;\r\n  id_entreprise?: string;\r\n  id_role: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType>({\r\n  currentUser: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n  login: async () => {},\r\n  logout: async () => {},\r\n  register: async () => {},\r\n  forgotPassword: async () => {},\r\n  updateProfile: async () => {},\r\n  error: null,\r\n  permissions: [],\r\n  hasGlobalAccess: false,\r\n  hasPermission: () => false,\r\n  canAccessRoute: () => false,\r\n  canAccessAdminModule: () => false,\r\n  getAccessibleModules: () => [],\r\n  getAdminSubModules: () => [],\r\n  refreshPermissions: async () => {},\r\n  isAdmin: () => false,\r\n  isSuperAdmin: () => false,\r\n  getAllAppModules: () => ALL_APP_MODULES,\r\n});\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\ninterface AuthProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  // États\r\n  const [currentUser, setCurrentUser] = useState<Acteur | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [permissions, setPermissions] = useState<Permission[]>([]);\r\n  const [hasGlobalAccess, setHasGlobalAccess] = useState<boolean>(false);\r\n\r\n  // === FONCTIONS HELPER OPTIMISÉES ===\r\n  const isUserAdmin = useCallback((user: Acteur | null): boolean => {\r\n    if (!user) return false;\r\n    \r\n    const role = user.nom_role?.toUpperCase();\r\n    return role === 'ADMINISTRATEUR' || \r\n           role === 'SUPER_ADMINISTRATEUR' ||\r\n           user.niveau_acces === 'GLOBAL';\r\n  }, []);\r\n\r\n  const isUserSuperAdmin = useCallback((user: Acteur | null): boolean => {\r\n    if (!user) return false;\r\n    \r\n    const role = user.nom_role?.toUpperCase();\r\n    return role === 'SUPER_ADMINISTRATEUR';\r\n  }, []);\r\n\r\n  // === GÉNÉRATION AUTOMATIQUE DES PERMISSIONS ADMIN ===\r\n  const generateFullAdminPermissions = useCallback((): Permission[] => {\r\n    const permissions: Permission[] = [];\r\n    \r\n    Object.values(ALL_APP_MODULES).forEach(module => {\r\n      const mainPermission: Permission = {\r\n        nom_module: module.nom_module,\r\n        route_base: module.route_base,\r\n        peut_voir: true,\r\n        peut_editer: true,\r\n        peut_supprimer: true,\r\n        peut_administrer: true\r\n      };\r\n\r\n      if ('sous_modules' in module && module.sous_modules) {\r\n        mainPermission.sous_permissions = Object.values(module.sous_modules).map(sousModule => ({\r\n          nom_module: sousModule.nom_module,\r\n          route_base: sousModule.route_base,\r\n          peut_voir: true,\r\n          peut_editer: true,\r\n          peut_supprimer: true,\r\n          peut_administrer: true\r\n        }));\r\n      }\r\n\r\n      permissions.push(mainPermission);\r\n    });\r\n\r\n    return permissions;\r\n  }, []);\r\n\r\n  // === PERMISSIONS PAR DÉFAUT BASÉES SUR LES RÔLES ===\r\n  const getDefaultPermissionsForRole = useCallback((nomRole: string, niveauAcces: string): Permission[] => {\r\n    const basePermissions: Permission[] = [\r\n      { \r\n        nom_module: 'DASHBOARD', \r\n        route_base: '/', \r\n        peut_voir: true, \r\n        peut_editer: false, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      },\r\n      { \r\n        nom_module: 'QUESTIONNAIRES', \r\n        route_base: '/questionnaires', \r\n        peut_voir: true, \r\n        peut_editer: true, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      },\r\n      { \r\n        nom_module: 'FORMULAIRES', \r\n        route_base: '/formulaires', \r\n        peut_voir: true, \r\n        peut_editer: true, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      },\r\n      { \r\n        nom_module: 'ANALYSES', \r\n        route_base: '/analyses-fonctions', \r\n        peut_voir: true, \r\n        peut_editer: false, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      }\r\n    ];\r\n\r\n    // Normaliser le nom du rôle pour la comparaison\r\n    const roleUpper = nomRole?.toUpperCase();\r\n    \r\n    console.log('🔑 Analyse du rôle:', {\r\n      nomRole: nomRole,\r\n      roleUpper: roleUpper,\r\n      niveauAcces: niveauAcces\r\n    });\r\n\r\n    // === SUPER ADMINISTRATEUR ET ADMINISTRATEUR : TOUTES LES PERMISSIONS ===\r\n    if (roleUpper === 'SUPER_ADMINISTRATEUR' || roleUpper === 'ADMINISTRATEUR' || niveauAcces === 'GLOBAL') {\r\n      console.log('🔑 Génération permissions Administrateur (TOUTES PERMISSIONS)');\r\n      return generateFullAdminPermissions();\r\n    }\r\n    \r\n    // === CONSULTANT : PERMISSIONS ÉTENDUES ===\r\n    if (roleUpper === 'CONSULTANT') {\r\n      console.log('🔑 Génération permissions Consultant (ÉTENDUES)');\r\n      return basePermissions.map(p => ({\r\n        ...p,\r\n        peut_voir: true,\r\n        peut_editer: true,\r\n        peut_supprimer: true,\r\n        peut_administrer: false\r\n      })).concat([\r\n        { \r\n          nom_module: 'APPLICATIONS', \r\n          route_base: '/applications', \r\n          peut_voir: true, \r\n          peut_editer: true, \r\n          peut_supprimer: false, \r\n          peut_administrer: false \r\n        },\r\n        { \r\n          nom_module: 'ENTREPRISES', \r\n          route_base: '/organisations', \r\n          peut_voir: true, \r\n          peut_editer: true, \r\n          peut_supprimer: false, \r\n          peut_administrer: false \r\n        }\r\n      ]);\r\n    }\r\n\r\n    // === MANAGER : PERMISSIONS MOYENNES ===\r\n    if (roleUpper === 'MANAGER') {\r\n      console.log('🔑 Génération permissions Manager (MOYENNES)');\r\n      return basePermissions.map(p => ({\r\n        ...p,\r\n        peut_voir: true,\r\n        peut_editer: p.nom_module !== 'DASHBOARD',\r\n        peut_supprimer: false,\r\n        peut_administrer: false\r\n      })).concat([\r\n        { \r\n          nom_module: 'APPLICATIONS', \r\n          route_base: '/applications', \r\n          peut_voir: true, \r\n          peut_editer: false, \r\n          peut_supprimer: false, \r\n          peut_administrer: false \r\n        }\r\n      ]);\r\n    }\r\n\r\n    // === INTERVENANT : PERMISSIONS DE BASE ===\r\n    console.log('🔑 Génération permissions Intervenant (BASE)');\r\n    return basePermissions;\r\n  }, [generateFullAdminPermissions]);\r\n\r\n  // === VÉRIFICATION AUTH ===\r\n  const checkAuthStatus = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem('auth_token');\r\n      \r\n      if (token) {\r\n        console.log('🔑 Token trouvé, vérification...');\r\n        \r\n        try {\r\n          // Essayer le nouveau endpoint avec permissions si disponible\r\n          const permissionsResponse = await api.get('user/permissions');\r\n          \r\n          setCurrentUser(permissionsResponse.user);\r\n          setPermissions(permissionsResponse.permissions || []);\r\n          setHasGlobalAccess(permissionsResponse.hasGlobalAccess || isUserAdmin(permissionsResponse.user));\r\n          setIsAuthenticated(true);\r\n          setError(null);\r\n          \r\n          console.log('✅ Utilisateur authentifié avec système de permissions');\r\n          \r\n        } catch (permErr) {\r\n          console.log('⚠️ Endpoint permissions non disponible, utilisation /auth/me...');\r\n          \r\n          // Fallback sur /auth/me\r\n          const response = await api.get('auth/me');\r\n          const user = response.user || response.data?.user;\r\n          \r\n          if (user) {\r\n            console.log('🔍 Utilisateur depuis /auth/me:', user);\r\n            \r\n            setCurrentUser(user);\r\n            setPermissions(getDefaultPermissionsForRole(user.nom_role, user.niveau_acces));\r\n            setHasGlobalAccess(isUserAdmin(user));\r\n            setIsAuthenticated(true);\r\n            setError(null);\r\n            \r\n            console.log('✅ Utilisateur authentifié (fallback /auth/me)');\r\n          }\r\n        }\r\n      } else {\r\n        console.log('ℹ️ Aucun token trouvé');\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('⚠️ Erreur d\\'authentification:', err.message);\r\n      localStorage.removeItem('auth_token');\r\n      setCurrentUser(null);\r\n      setPermissions([]);\r\n      setHasGlobalAccess(false);\r\n      setIsAuthenticated(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [isUserAdmin, getDefaultPermissionsForRole]);\r\n\r\n  // === FONCTION LOGIN ===\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      setIsLoading(true);\r\n      \r\n      console.log('🔄 === DÉBUT LOGIN ===');\r\n      console.log('📧 Email:', email);\r\n      \r\n      const response = await api.post('auth/login', { email, password });\r\n      \r\n      if (response.token && response.user) {\r\n        console.log('🔍 Réponse login complète:', response);\r\n        console.log('🔍 Utilisateur reçu:', response.user);\r\n        \r\n        localStorage.setItem('auth_token', response.token);\r\n        \r\n        setCurrentUser(response.user);\r\n        setPermissions(getDefaultPermissionsForRole(response.user.nom_role, response.user.niveau_acces));\r\n        setHasGlobalAccess(isUserAdmin(response.user));\r\n        setIsAuthenticated(true);\r\n        \r\n        console.log('✅ === LOGIN RÉUSSI ===');\r\n        console.log('👤 Utilisateur:', {\r\n          email: response.user.email,\r\n          nom_role: response.user.nom_role,\r\n          niveau_acces: response.user.niveau_acces,\r\n          isAdmin: isUserAdmin(response.user),\r\n          isSuperAdmin: isUserSuperAdmin(response.user)\r\n        });\r\n      } else {\r\n        throw new Error('Réponse de connexion invalide');\r\n      }\r\n      \r\n    } catch (err: any) {\r\n      console.error('❌ === ERREUR LOGIN ===');\r\n      console.error('Message:', err.response?.data?.message || err.message);\r\n      \r\n      const errorMessage = err.response?.data?.message || err.message || 'Erreur de connexion';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      console.log('🏁 === FIN LOGIN ===');\r\n    }\r\n  };\r\n\r\n  // === AUTRES FONCTIONS (adaptées) ===\r\n  const logout = async () => {\r\n    try {\r\n      await api.post('auth/logout');\r\n    } catch (err) {\r\n      console.warn('Erreur lors de la déconnexion:', err);\r\n    } finally {\r\n      localStorage.removeItem('auth_token');\r\n      setCurrentUser(null);\r\n      setPermissions([]);\r\n      setHasGlobalAccess(false);\r\n      setIsAuthenticated(false);\r\n      console.log('✅ Déconnexion réussie');\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterData) => {\r\n    try {\r\n      setError(null);\r\n      setIsLoading(true);\r\n      \r\n      const response = await api.post('auth/register', userData);\r\n      \r\n      if (response.token && response.user) {\r\n        localStorage.setItem('auth_token', response.token);\r\n        \r\n        setCurrentUser(response.user);\r\n        setPermissions(getDefaultPermissionsForRole(response.user.nom_role, response.user.niveau_acces));\r\n        setHasGlobalAccess(isUserAdmin(response.user));\r\n        setIsAuthenticated(true);\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || 'Erreur lors de l\\'inscription';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email: string) => {\r\n    try {\r\n      setError(null);\r\n      await api.post('auth/forgot-password', { email });\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || 'Erreur lors de la récupération';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (userData: Partial<Acteur>) => {\r\n    try {\r\n      setError(null);\r\n      const response = await api.put('auth/profile', userData);\r\n      \r\n      if (response.user) {\r\n        setCurrentUser(response.user);\r\n        setHasGlobalAccess(isUserAdmin(response.user));\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || 'Erreur lors de la mise à jour';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // === FONCTIONS PERMISSIONS ===\r\n  const isAdmin = useCallback((): boolean => {\r\n    return isUserAdmin(currentUser);\r\n  }, [currentUser, isUserAdmin]);\r\n\r\n  const isSuperAdmin = useCallback((): boolean => {\r\n    return isUserSuperAdmin(currentUser);\r\n  }, [currentUser, isUserSuperAdmin]);\r\n\r\n  const hasPermission = useCallback((module: string, action: string): boolean => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return true;\r\n    }\r\n\r\n    let permission = permissions.find(p => \r\n      p.nom_module.toUpperCase() === module.toUpperCase()\r\n    );\r\n\r\n    if (!permission) {\r\n      for (const p of permissions) {\r\n        if (p.sous_permissions) {\r\n          permission = p.sous_permissions.find(sp => \r\n            sp.nom_module.toUpperCase() === module.toUpperCase()\r\n          );\r\n          if (permission) break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!permission) return false;\r\n\r\n    switch (action.toLowerCase()) {\r\n      case 'voir':\r\n      case 'view':\r\n        return permission.peut_voir;\r\n      case 'editer':\r\n      case 'edit':\r\n        return permission.peut_editer;\r\n      case 'supprimer':\r\n      case 'delete':\r\n        return permission.peut_supprimer;\r\n      case 'administrer':\r\n      case 'admin':\r\n        return permission.peut_administrer;\r\n      default:\r\n        return false;\r\n    }\r\n  }, [currentUser, permissions, hasGlobalAccess, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const canAccessRoute = useCallback((route: string): boolean => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return true;\r\n    }\r\n\r\n    const cleanRoute = route.startsWith('/') ? route.substring(1) : route;\r\n    \r\n    const routeToModuleMap: { [key: string]: string } = {\r\n      '': 'DASHBOARD',\r\n      'dashboard': 'DASHBOARD',\r\n      'questionnaires': 'QUESTIONNAIRES',\r\n      'formulaires': 'FORMULAIRES',\r\n      'analyses-fonctions': 'ANALYSES',\r\n      'analyses-interpretations': 'ANALYSES',\r\n      'applications': 'APPLICATIONS',\r\n      'organisations': 'ENTREPRISES',\r\n      'admin': 'ADMINISTRATION',\r\n      'admin/users': 'ADMIN_USERS',\r\n      'admin/permissions': 'ADMIN_PERMISSIONS',\r\n      'admin/roles': 'ADMIN_ROLES',\r\n      'admin/maturity-model': 'ADMIN_MATURITY',\r\n      'admin/system': 'ADMIN_SYSTEM',\r\n      'users': 'ADMIN_USERS',\r\n    };\r\n\r\n    let moduleForRoute = null;\r\n    for (const [routePath, moduleName] of Object.entries(routeToModuleMap)) {\r\n      if (cleanRoute.startsWith(routePath)) {\r\n        moduleForRoute = moduleName;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!moduleForRoute) return false;\r\n    \r\n    return hasPermission(moduleForRoute, 'voir');\r\n  }, [currentUser, hasGlobalAccess, hasPermission, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const canAccessAdminModule = useCallback((subModule: string): boolean => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return true;\r\n    }\r\n\r\n    return hasPermission(`ADMIN_${subModule.toUpperCase()}`, 'voir');\r\n  }, [currentUser, hasGlobalAccess, hasPermission, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const getAccessibleModules = useCallback((): Permission[] => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return generateFullAdminPermissions();\r\n    }\r\n    return permissions.filter(permission => permission.peut_voir);\r\n  }, [currentUser, hasGlobalAccess, permissions, generateFullAdminPermissions, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const getAdminSubModules = useCallback((): Permission[] => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      const adminModule = ALL_APP_MODULES.ADMINISTRATION;\r\n      if (adminModule.sous_modules) {\r\n        return Object.values(adminModule.sous_modules).map(sousModule => ({\r\n          nom_module: sousModule.nom_module,\r\n          route_base: sousModule.route_base,\r\n          peut_voir: true,\r\n          peut_editer: true,\r\n          peut_supprimer: true,\r\n          peut_administrer: true\r\n        }));\r\n      }\r\n    }\r\n\r\n    const adminPermission = permissions.find(p => p.nom_module === 'ADMINISTRATION');\r\n    return adminPermission?.sous_permissions?.filter(sp => sp.peut_voir) || [];\r\n  }, [currentUser, hasGlobalAccess, permissions, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const refreshPermissions = useCallback(async (): Promise<void> => {\r\n    if (isAuthenticated) {\r\n      await checkAuthStatus();\r\n    }\r\n  }, [isAuthenticated, checkAuthStatus]);\r\n\r\n  const getAllAppModules = useCallback(() => ALL_APP_MODULES, []);\r\n\r\n  // === EFFET D'INITIALISATION ===\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, [checkAuthStatus]);\r\n\r\n  // === VALEUR DU CONTEXTE ===\r\n  const value = {\r\n    currentUser,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    register,\r\n    forgotPassword,\r\n    updateProfile,\r\n    error,\r\n    permissions,\r\n    hasGlobalAccess,\r\n    hasPermission,\r\n    canAccessRoute,\r\n    canAccessAdminModule,\r\n    getAccessibleModules,\r\n    getAdminSubModules,\r\n    refreshPermissions,\r\n    isAdmin,\r\n    isSuperAdmin,\r\n    getAllAppModules,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;","import React, { useState } from 'react';\r\nimport { \r\n  Box, \r\n  Drawer, \r\n  AppBar, \r\n  Toolbar, \r\n  Typography, \r\n  Divider, \r\n  IconButton, \r\n  List, \r\n  ListItem, \r\n  ListItemButton, \r\n  ListItemIcon, \r\n  ListItemText,\r\n  CssBaseline,\r\n  useTheme,\r\n  useMediaQuery,\r\n  Collapse,\r\n  Badge,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  Menu as MenuIcon,\r\n  Dashboard as DashboardIcon,\r\n  Computer as ComputerIcon,\r\n  Assessment as AssessmentIcon,\r\n  People as PeopleIcon,\r\n  BusinessCenter as BusinessIcon,\r\n  QuestionAnswer as QuestionIcon,\r\n  ChevronLeft as ChevronLeftIcon,\r\n  Assignment as AssignmentIcon,\r\n  AdminPanelSettings as AdminIcon,\r\n  ExpandLess,\r\n  ExpandMore,\r\n  Security as SecurityIcon,\r\n  AccountCircle as RoleIcon,\r\n  Settings as SettingsIcon,\r\n  ModelTraining as MaturityIcon,\r\n  Logout as LogoutIcon,\r\n  Business as OrganizationIcon,\r\n  Timeline as TimelineIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  BarChart as BarChartIcon,\r\n  Apps as AppsIcon,\r\n  Storage as StorageIcon,\r\n  Code as CodeIcon,\r\n  Lightbulb as LightbulbIcon,\r\n  Analytics as AnalyticsIcon\r\n} from '@mui/icons-material';\r\nimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst drawerWidth = 300; // Largeur augmentée pour les nouveaux sous-menus\r\n\r\n// Configuration des éléments de menu avec permissions V2\r\ninterface MenuItem {\r\n  text: string;\r\n  icon: React.ReactElement;\r\n  path?: string;\r\n  module?: string;\r\n  action?: string;\r\n  subItems?: MenuItem[];\r\n  adminOnly?: boolean;\r\n  divider?: boolean;\r\n  badge?: string;\r\n  newFeature?: boolean;\r\n}\r\n\r\nconst MainLayout: React.FC = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\r\n  const [open, setOpen] = useState(!isMobile);\r\n  const [adminMenuOpen, setAdminMenuOpen] = useState(false);\r\n  const [analysesMenuOpen, setAnalysesMenuOpen] = useState(false);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { \r\n    currentUser, \r\n    hasPermission, \r\n    canAccessRoute, \r\n    canAccessAdminModule,\r\n    isAdmin,\r\n    isSuperAdmin,\r\n    logout,\r\n    getAdminSubModules\r\n  } = useAuth();\r\n\r\n  // Configuration des éléments de menu avec la nouvelle structure V2\r\n  const menuItems: MenuItem[] = [\r\n    {\r\n      text: 'Dashboard',\r\n      icon: <DashboardIcon />,\r\n      path: '/',\r\n      module: 'DASHBOARD',\r\n      action: 'voir'\r\n    },\r\n    \r\n    // === ANALYSES & RECOMMANDATIONS (V2 étendu) ===\r\n    {\r\n      text: 'Analyses & Recommandations',\r\n      icon: <AnalyticsIcon />,\r\n      module: 'ANALYSES',\r\n      action: 'voir',\r\n      subItems: [\r\n        {\r\n          text: 'Vue Entreprise',\r\n          icon: <BusinessIcon />,\r\n          path: '/analyses-interpretations-entreprises',\r\n          module: 'ANALYSES',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Vue par Fonctions',\r\n          icon: <TimelineIcon />,\r\n          path: '/analyses-interpretations-functions',\r\n          module: 'ANALYSES',\r\n          action: 'voir'\r\n        }\r\n      ]\r\n    },\r\n\r\n    // === GESTION DES CONTENUS ===\r\n    {\r\n      text: 'Formulaires',\r\n      icon: <AssignmentIcon />,\r\n      path: '/forms',\r\n      module: 'FORMULAIRES',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Questionnaires',\r\n      icon: <QuestionIcon />,\r\n      path: '/questionnaires',\r\n      module: 'QUESTIONNAIRES',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Applications',\r\n      icon: <ComputerIcon />,\r\n      path: '/applications',\r\n      module: 'APPLICATIONS',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Organisations',\r\n      icon: <OrganizationIcon />,\r\n      path: '/organisations',\r\n      module: 'ENTREPRISES',\r\n      action: 'voir'\r\n    },\r\n      \r\n    // Divider avant administration\r\n    {\r\n      text: '',\r\n      icon: <></>,\r\n      divider: true\r\n    },\r\n    \r\n    // === MODULE D'ADMINISTRATION UNIFIÉ V2 ===\r\n    {\r\n      text: 'Administration',\r\n      icon: <AdminIcon />,\r\n      module: 'ADMINISTRATION',\r\n      action: 'voir',\r\n      adminOnly: true,\r\n      subItems: [\r\n        {\r\n          text: 'Gestion des Utilisateurs',\r\n          icon: <PeopleIcon />,\r\n          path: '/administration',\r\n          module: 'ADMIN_USERS',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Gestion des Entreprises',\r\n          icon: <BusinessIcon />,\r\n          path: '/administration',\r\n          module: 'ADMINISTRATION',\r\n          action: 'voir',\r\n          newFeature: true\r\n        },\r\n        {\r\n          text: 'Permissions & Rôles',\r\n          icon: <SecurityIcon />,\r\n          path: '/administration',\r\n          module: 'ADMIN_PERMISSIONS',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Modèle de Maturité',\r\n          icon: <MaturityIcon />,\r\n          path: '/maturity-model-admin',\r\n          module: 'ADMIN_MATURITY',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Configuration Système',\r\n          icon: <SettingsIcon />,\r\n          path: '/administration',\r\n          module: 'ADMIN_SYSTEM',\r\n          action: 'voir'\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const handleDrawerToggle = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const handleNavigate = (path: string) => {\r\n    navigate(path);\r\n    if (isMobile) {\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleAnalysesMenuToggle = () => {\r\n    setAnalysesMenuOpen(!analysesMenuOpen);\r\n  };\r\n\r\n  const handleAdminMenuToggle = () => {\r\n    setAdminMenuOpen(!adminMenuOpen);\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      await logout();\r\n      navigate('/auth/login');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la déconnexion:', error);\r\n    }\r\n  };\r\n\r\n  // Fonction pour vérifier si un élément de menu est accessible\r\n  const isMenuItemAccessible = (item: MenuItem): boolean => {\r\n    // Si l'item est marqué admin seulement et l'utilisateur n'est pas admin\r\n    if (item.adminOnly && !isAdmin() && !isSuperAdmin()) {\r\n      return false;\r\n    }\r\n\r\n    // Si l'item a un module et une action spécifiés\r\n    if (item.module && item.action) {\r\n      return hasPermission(item.module, item.action);\r\n    }\r\n\r\n    // Si l'item a un path, vérifier l'accès via la route\r\n    if (item.path) {\r\n      return canAccessRoute(item.path);\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  // Fonction pour vérifier si un élément de menu est actif\r\n  const isMenuItemActive = (item: MenuItem): boolean => {\r\n    if (item.path) {\r\n      // Pour les items d'administration, considérer comme actif si on est sur /admin\r\n      if (item.path === '/administration' && location.pathname.startsWith('/administration')) {\r\n        return true;\r\n      }\r\n      return location.pathname === item.path || location.pathname.startsWith(item.path + '/');\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Fonction pour vérifier si le menu analyses contient des éléments actifs\r\n  const isAnalysesMenuActive = (): boolean => {\r\n    return location.pathname.includes('analyses') || location.pathname.includes('calculate-score');\r\n  };\r\n\r\n  // Fonction pour vérifier si le menu admin contient des éléments actifs\r\n  const isAdminMenuActive = (): boolean => {\r\n    return location.pathname.startsWith('/administration') || location.pathname.startsWith('/maturity-model-admin');\r\n  };\r\n\r\n  // Fonction pour rendre un élément de menu\r\n  const renderMenuItem = (item: MenuItem, isSubItem = false) => {\r\n    if (item.divider) {\r\n      return <Divider key=\"divider\" sx={{ my: 1 }} />;\r\n    }\r\n\r\n    if (!isMenuItemAccessible(item)) {\r\n      return null;\r\n    }\r\n\r\n    const isActive = isMenuItemActive(item);\r\n    const hasSubItems = item.subItems && item.subItems.length > 0;\r\n\r\n    return (\r\n      <ListItem key={item.text} disablePadding sx={{ pl: isSubItem ? 2 : 0 }}>\r\n        <ListItemButton \r\n          selected={isActive && !hasSubItems}\r\n          onClick={() => {\r\n            if (hasSubItems) {\r\n              if (item.text === 'Administration') {\r\n                handleAdminMenuToggle();\r\n              } else if (item.text === 'Analyses & Recommandations') {\r\n                handleAnalysesMenuToggle();\r\n              }\r\n            } else if (item.path) {\r\n              handleNavigate(item.path);\r\n            }\r\n          }}\r\n          sx={{\r\n            borderRadius: 1,\r\n            mx: 1,\r\n            mb: 0.5,\r\n            minHeight: 48,\r\n            ...(isActive && !hasSubItems && {\r\n              backgroundColor: 'primary.main',\r\n              color: 'primary.contrastText',\r\n              '&:hover': {\r\n                backgroundColor: 'primary.dark',\r\n              },\r\n              '& .MuiListItemIcon-root': {\r\n                color: 'primary.contrastText',\r\n              }\r\n            })\r\n          }}\r\n        >\r\n          <ListItemIcon sx={{ minWidth: 40 }}>\r\n            {item.icon}\r\n          </ListItemIcon>\r\n          <ListItemText \r\n            primary={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Typography variant=\"body2\" sx={{ fontWeight: isActive && !hasSubItems ? 600 : 400 }}>\r\n                  {item.text}\r\n                </Typography>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                  {item.newFeature && (\r\n                    <Chip \r\n                      label=\"Nouveau\" \r\n                      size=\"small\" \r\n                      color=\"success\" \r\n                      sx={{ \r\n                        height: 18, \r\n                        fontSize: '0.65rem',\r\n                        fontWeight: 600\r\n                      }} \r\n                    />\r\n                  )}\r\n                  {item.badge && (\r\n                    <Chip \r\n                      label={item.badge} \r\n                      size=\"small\" \r\n                      color=\"primary\" \r\n                      sx={{ \r\n                        height: 18, \r\n                        fontSize: '0.65rem',\r\n                        fontWeight: 600,\r\n                        ...(isActive && !hasSubItems && {\r\n                          backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n                          color: 'inherit'\r\n                        })\r\n                      }} \r\n                    />\r\n                  )}\r\n                  {item.adminOnly && (\r\n                    <Chip \r\n                      label=\"Admin\" \r\n                      size=\"small\" \r\n                      color=\"secondary\" \r\n                      sx={{ \r\n                        height: 18, \r\n                        fontSize: '0.65rem',\r\n                        ...(isActive && !hasSubItems && {\r\n                          backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n                          color: 'inherit'\r\n                        })\r\n                      }} \r\n                    />\r\n                  )}\r\n                  {hasSubItems && (\r\n                    (item.text === 'Administration' && adminMenuOpen) || \r\n                    (item.text === 'Analyses & Recommandations' && analysesMenuOpen) ? \r\n                    <ExpandLess /> : <ExpandMore />\r\n                  )}\r\n                </Box>\r\n              </Box>\r\n            }\r\n          />\r\n        </ListItemButton>\r\n      </ListItem>\r\n    );\r\n  };\r\n\r\n  // Fonction pour rendre les sous-éléments d'analyses\r\n  const renderAnalysesSubItems = () => {\r\n    const analysesItem = menuItems.find(item => item.text === 'Analyses & Recommandations');\r\n    if (!analysesItem || !analysesItem.subItems) return null;\r\n\r\n    return (\r\n      <Collapse in={analysesMenuOpen} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          {analysesItem.subItems.map(subItem => {\r\n            if (!isMenuItemAccessible(subItem)) return null;\r\n            \r\n            const isActive = isMenuItemActive(subItem);\r\n            \r\n            return (\r\n              <ListItem key={subItem.text} disablePadding sx={{ pl: 2 }}>\r\n                <ListItemButton \r\n                  selected={isActive}\r\n                  onClick={() => subItem.path && handleNavigate(subItem.path)}\r\n                  sx={{\r\n                    borderRadius: 1,\r\n                    mx: 1,\r\n                    mb: 0.5,\r\n                    minHeight: 40,\r\n                    backgroundColor: isActive ? 'primary.main' : 'transparent',\r\n                    color: isActive ? 'primary.contrastText' : 'inherit',\r\n                    '&:hover': {\r\n                      backgroundColor: isActive ? 'primary.dark' : 'rgba(0, 0, 0, 0.04)',\r\n                    },\r\n                    ...(isActive && {\r\n                      '& .MuiListItemIcon-root': {\r\n                        color: 'primary.contrastText',\r\n                      }\r\n                    })\r\n                  }}\r\n                >\r\n                  <ListItemIcon sx={{ minWidth: 40, ml: 1 }}>\r\n                    {subItem.icon}\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary={\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                        <Typography variant=\"body2\" sx={{ fontWeight: isActive ? 600 : 400, fontSize: '0.875rem' }}>\r\n                          {subItem.text}\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                          {subItem.newFeature && (\r\n                            <Chip \r\n                              label=\"Nouveau\" \r\n                              size=\"small\" \r\n                              color=\"success\" \r\n                              sx={{ \r\n                                height: 16, \r\n                                fontSize: '0.6rem',\r\n                                fontWeight: 600,\r\n                                ...(isActive && {\r\n                                  backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n                                  color: 'inherit'\r\n                                })\r\n                              }} \r\n                            />\r\n                          )}\r\n                          {subItem.badge && (\r\n                            <Chip \r\n                              label={subItem.badge} \r\n                              size=\"small\" \r\n                              color=\"primary\" \r\n                              sx={{ \r\n                                height: 16, \r\n                                fontSize: '0.6rem',\r\n                                fontWeight: 600,\r\n                                ...(isActive && {\r\n                                  backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n                                  color: 'inherit'\r\n                                })\r\n                              }} \r\n                            />\r\n                          )}\r\n                        </Box>\r\n                      </Box>\r\n                    }\r\n                  />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      </Collapse>\r\n    );\r\n  };\r\n\r\n  // Fonction pour rendre les sous-éléments d'administration\r\n  const renderAdminSubItems = () => {\r\n    const adminItem = menuItems.find(item => item.text === 'Administration');\r\n    if (!adminItem || !adminItem.subItems) return null;\r\n\r\n    return (\r\n      <Collapse in={adminMenuOpen} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          {adminItem.subItems.map(subItem => {\r\n            if (!isMenuItemAccessible(subItem)) return null;\r\n            \r\n            const isActive = isMenuItemActive(subItem);\r\n            \r\n            return (\r\n              <ListItem key={subItem.text} disablePadding sx={{ pl: 2 }}>\r\n                <ListItemButton \r\n                  selected={isActive}\r\n                  onClick={() => subItem.path && handleNavigate(subItem.path)}\r\n                  sx={{\r\n                    borderRadius: 1,\r\n                    mx: 1,\r\n                    mb: 0.5,\r\n                    minHeight: 40,\r\n                    backgroundColor: isActive ? 'primary.main' : 'transparent',\r\n                    color: isActive ? 'primary.contrastText' : 'inherit',\r\n                    '&:hover': {\r\n                      backgroundColor: isActive ? 'primary.dark' : 'rgba(0, 0, 0, 0.04)',\r\n                    },\r\n                    ...(isActive && {\r\n                      '& .MuiListItemIcon-root': {\r\n                        color: 'primary.contrastText',\r\n                      }\r\n                    })\r\n                  }}\r\n                >\r\n                  <ListItemIcon sx={{ minWidth: 40, ml: 1 }}>\r\n                    {subItem.icon}\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary={\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                        <Typography variant=\"body2\" sx={{ fontWeight: isActive ? 600 : 400, fontSize: '0.875rem' }}>\r\n                          {subItem.text}\r\n                        </Typography>\r\n                        {subItem.newFeature && (\r\n                          <Chip \r\n                            label=\"Nouveau\" \r\n                            size=\"small\" \r\n                            color=\"success\" \r\n                            sx={{ \r\n                              height: 16, \r\n                              fontSize: '0.6rem',\r\n                              fontWeight: 600,\r\n                              ...(isActive && {\r\n                                backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n                                color: 'inherit'\r\n                              })\r\n                            }} \r\n                          />\r\n                        )}\r\n                      </Box>\r\n                    }\r\n                  />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      </Collapse>\r\n    );\r\n  };\r\n\r\n  // Auto-ouvrir les menus si on est sur les pages correspondantes\r\n  React.useEffect(() => {\r\n    if (isAnalysesMenuActive()) {\r\n      setAnalysesMenuOpen(true);\r\n    }\r\n    if (isAdminMenuActive()) {\r\n      setAdminMenuOpen(true);\r\n    }\r\n  }, [location.pathname]);\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex' }}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        sx={{\r\n          zIndex: theme.zIndex.drawer + 1,\r\n          width: { sm: open ? `calc(100% - ${drawerWidth}px)` : '100%' },\r\n          ml: { sm: open ? `${drawerWidth}px` : 0 },\r\n          transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n          }),\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            sx={{ mr: 2 }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Plateforme d'Évaluation de Maturité DSIN\r\n          </Typography>\r\n          \r\n          {/* Indicateur Version V2 */}\r\n          <Chip \r\n            label=\"V2\" \r\n            color=\"success\" \r\n            size=\"small\" \r\n            sx={{ \r\n              mr: 2, \r\n              fontWeight: 600,\r\n              display: { xs: 'none', sm: 'flex' }\r\n            }} \r\n          />\r\n          \r\n          {/* Informations utilisateur et déconnexion */}\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n            <Box sx={{ textAlign: 'right', display: { xs: 'none', sm: 'block' } }}>\r\n              <Typography variant=\"body2\" sx={{ opacity: 0.9 }}>\r\n                {currentUser?.nom_prenom}\r\n              </Typography>\r\n              <Typography variant=\"caption\" sx={{ opacity: 0.7 }}>\r\n                {currentUser?.nom_role || currentUser?.role} - {currentUser?.organisation}\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {(isAdmin() || isSuperAdmin()) && (\r\n              <Badge color=\"secondary\" variant=\"dot\">\r\n                <AdminIcon />\r\n              </Badge>\r\n            )}\r\n            \r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={handleLogout}\r\n              title=\"Déconnexion\"\r\n            >\r\n              <LogoutIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n      <Drawer\r\n        variant={isMobile ? \"temporary\" : \"permanent\"}\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        sx={{\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n          [`& .MuiDrawer-paper`]: { \r\n            width: drawerWidth, \r\n            boxSizing: 'border-box',\r\n            ...(isMobile && {\r\n              boxShadow: theme.shadows[8]\r\n            })\r\n          },\r\n        }}\r\n      >\r\n        <Toolbar \r\n          sx={{ \r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between',\r\n            px: 2,\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <img \r\n              src=\"/logo_stdigital.svg\" \r\n              alt=\"Logo\" \r\n              style={{ height: 32, width: 'auto' }}\r\n            />\r\n            \r\n           </Box>\r\n          <IconButton onClick={handleDrawerToggle}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n        <Divider />\r\n        \r\n        <Box sx={{ overflow: 'auto', flex: 1 }}>\r\n          <List component=\"nav\" sx={{ px: 1, py: 2 }}>\r\n            {menuItems.map((item) => {\r\n              if (item.text === 'Analyses & Recommandations') {\r\n                // Traitement spécial pour le menu analyses\r\n                return (\r\n                  <React.Fragment key=\"analyses\">\r\n                    {renderMenuItem(item)}\r\n                    {renderAnalysesSubItems()}\r\n                  </React.Fragment>\r\n                );\r\n              } else if (item.text === 'Administration') {\r\n                // Traitement spécial pour le menu administration\r\n                return (\r\n                  <React.Fragment key=\"administration\">\r\n                    {renderMenuItem(item)}\r\n                    {renderAdminSubItems()}\r\n                  </React.Fragment>\r\n                );\r\n              }\r\n              return renderMenuItem(item);\r\n            })}\r\n          </List>\r\n        </Box>\r\n\r\n        {/* Footer du drawer avec informations utilisateur */}\r\n        <Box sx={{ p: 2, borderTop: '1px solid', borderColor: 'divider' }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\r\n            <PeopleIcon sx={{ fontSize: 16, color: 'text.secondary' }} />\r\n            <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n              Connecté en tant que:\r\n            </Typography>\r\n          </Box>\r\n          <Typography variant=\"body2\" sx={{ fontWeight: 600, mb: 0.5 }}>\r\n            {currentUser?.nom_prenom}\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n              {currentUser?.nom_role || currentUser?.role}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 0.5 }}>\r\n              {(isAdmin() || isSuperAdmin()) && (\r\n                <Chip \r\n                  label=\"Admin\" \r\n                  size=\"small\" \r\n                  color=\"primary\" \r\n                  sx={{ height: 16, fontSize: '0.65rem' }} \r\n                />\r\n              )}\r\n              <Chip \r\n                label=\"V2\" \r\n                size=\"small\" \r\n                color=\"success\" \r\n                sx={{ height: 16, fontSize: '0.65rem' }} \r\n              />\r\n            </Box>\r\n          </Box>\r\n          \r\n          {/* Entreprise de l'utilisateur */}\r\n          {currentUser?.nom_entreprise && (\r\n            <Typography variant=\"caption\" sx={{ color: 'text.secondary', display: 'block', mt: 0.5 }}>\r\n              📍 {currentUser.nom_entreprise}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Drawer>\r\n      \r\n      <Box \r\n        component=\"main\" \r\n        sx={{ \r\n          flexGrow: 1, \r\n          p: 3,\r\n          width: { sm: `calc(100% - ${open ? drawerWidth : 0}px)` },\r\n          ml: { sm: open ? `${drawerWidth}px` : 0 },\r\n          transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n          }),\r\n        }}\r\n      >\r\n        <Toolbar /> {/* This creates space for the AppBar */}\r\n        <Outlet />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MainLayout;","// src/layouts/AuthLayout.tsx - Version V2 simplifiée\r\nimport React from 'react';\r\nimport { Link, Outlet, useLocation } from 'react-router-dom';\r\nimport { Box, Container, Paper, useTheme, useMediaQuery } from '@mui/material';\r\n\r\ninterface AuthLayoutProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst AuthLayout: React.FC<AuthLayoutProps> = ({ children }) => {\r\n  const location = useLocation();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\r\n  \r\n  // Déterminer le type de page pour ajuster la largeur\r\n  const isRegistrationPage = location.pathname.includes('/auth/enterprise-registration');\r\n  const isEvaluationPage = location.pathname.includes('/maturity-evaluation');\r\n  \r\n  // Configuration responsive selon le type de page\r\n  const getContainerWidth = () => {\r\n    if (isRegistrationPage) return 'md'; // Plus large pour le formulaire d'entreprise\r\n    if (isEvaluationPage) return 'lg';   // Très large pour l'évaluation\r\n    return 'sm';                         // Standard pour login\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minHeight: '100vh',\r\n        backgroundColor: 'grey.50',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        py: { xs: 2, sm: 4 },\r\n        px: { xs: 1, sm: 2 }\r\n      }}\r\n    >\r\n      {/* En-tête avec logo et titre */}\r\n      <Container maxWidth=\"sm\" sx={{ textAlign: 'center', mb: 4 }}>\r\n        <Link to=\"/\" style={{ textDecoration: 'none' }}>\r\n          <Box\r\n            component=\"img\"\r\n            src=\"/logo_stdigital.svg\"\r\n            alt=\"Plateforme Évaluation Maturité DSIN\"\r\n            sx={{\r\n              height: { xs: 40, sm: 48 },\r\n              width: 'auto',\r\n              mb: 2\r\n            }}\r\n          />\r\n        </Link>\r\n        \r\n        <Box>\r\n          <Box\r\n            component=\"h1\"\r\n            sx={{\r\n              fontSize: { xs: '1.5rem', sm: '1.875rem' },\r\n              fontWeight: 800,\r\n              color: 'grey.900',\r\n              mb: 1,\r\n              mt: 0\r\n            }}\r\n          >\r\n            Plateforme d'Évaluation Maturité DSIN\r\n          </Box>\r\n          \r\n          {/* Sous-titre dynamique selon la page */}\r\n          {isRegistrationPage && (\r\n            <Box\r\n              component=\"p\"\r\n              sx={{\r\n                fontSize: '0.875rem',\r\n                color: 'grey.600',\r\n                mt: 1,\r\n                mb: 0\r\n              }}\r\n            >\r\n              Créez votre compte entreprise et évaluez votre maturité DSIN\r\n            </Box>\r\n          )}\r\n          \r\n          {!isRegistrationPage && !isEvaluationPage && (\r\n            <Box\r\n              component=\"p\"\r\n              sx={{\r\n                fontSize: '0.875rem',\r\n                color: 'grey.600',\r\n                mt: 1,\r\n                mb: 0\r\n              }}\r\n            >\r\n              Accédez à votre plateforme de maturité numérique\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Container>\r\n\r\n      {/* Contenu principal avec largeur adaptative */}\r\n      <Container maxWidth={getContainerWidth()}>\r\n        <Paper\r\n          elevation={isMobile ? 1 : 3}\r\n          sx={{\r\n            py: { xs: 3, sm: 4 },\r\n            px: { xs: 2, sm: 4 },\r\n            borderRadius: 2,\r\n            backgroundColor: 'white',\r\n            boxShadow: isMobile \r\n              ? '0 1px 3px rgba(0, 0, 0, 0.1)' \r\n              : '0 10px 25px rgba(0, 0, 0, 0.1)'\r\n          }}\r\n        >\r\n          {/* Le contenu des pages (Login, EnterpriseRegistration, etc.) */}\r\n          <Outlet />\r\n        </Paper>\r\n      </Container>\r\n\r\n      {/* Footer simple */}\r\n      <Container maxWidth=\"sm\" sx={{ textAlign: 'center', mt: 4 }}>\r\n        <Box\r\n          component=\"p\"\r\n          sx={{\r\n            fontSize: '0.75rem',\r\n            color: 'grey.500',\r\n            mb: 0\r\n          }}\r\n        >\r\n          © ST Digital 2025 - All rights reserved\r\n        </Box>\r\n        \r\n        {/* Indicateur de version */}\r\n        <Box\r\n          component=\"p\"\r\n          sx={{\r\n            fontSize: '0.7rem',\r\n            color: 'grey.400',\r\n            mt: 1,\r\n            mb: 0,\r\n            fontStyle: 'italic'\r\n          }}\r\n        >\r\n          Platform V2.0 • Powered by Mundo Archi\r\n        </Box>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AuthLayout;","// src/pages/auth/Login.tsx - Version V2 avec navigation entreprise\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, useLocation, Link as RouterLink } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Alert,\r\n  CircularProgress,\r\n  Link,\r\n  Divider,\r\n  Card,\r\n  CardContent,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  Login as LoginIcon,\r\n  Business as BusinessIcon,\r\n  Assessment as AssessmentIcon\r\n} from '@mui/icons-material';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\ninterface LoginFormData {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst Login: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { login } = useAuth();\r\n  \r\n  const [formData, setFormData] = useState<LoginFormData>({\r\n    email: '',\r\n    password: ''\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // Récupérer l'URL de redirection depuis l'état de navigation\r\n  const from = location.state?.from?.pathname || '/';\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      await login(formData.email, formData.password);\r\n      \r\n      // Rediriger vers la page demandée ou le dashboard\r\n      navigate(from, { replace: true });\r\n    } catch (error: any) {\r\n      console.error('Erreur de connexion:', error);\r\n      setError(\r\n        error.response?.data?.message || \r\n        'Email ou mot de passe incorrect'\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const isFormValid = formData.email.trim() !== '' && formData.password.trim() !== '';\r\n\r\n  return (\r\n    <Box>\r\n      {/* Formulaire de connexion principal */}\r\n      <Box component=\"form\" onSubmit={handleSubmit} noValidate>\r\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\" color=\"primary\">\r\n          Connexion\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body2\" align=\"center\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          Accédez à votre plateforme d'évaluation de maturité DSIN\r\n        </Typography>\r\n\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        <TextField\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"email\"\r\n          label=\"Adresse e-mail\"\r\n          name=\"email\"\r\n          autoComplete=\"email\"\r\n          autoFocus\r\n          value={formData.email}\r\n          onChange={handleChange}\r\n          disabled={loading}\r\n          placeholder=\"votre.email@entreprise.com\"\r\n        />\r\n\r\n        <TextField\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          name=\"password\"\r\n          label=\"Mot de passe\"\r\n          type=\"password\"\r\n          id=\"password\"\r\n          autoComplete=\"current-password\"\r\n          value={formData.password}\r\n          onChange={handleChange}\r\n          disabled={loading}\r\n        />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          disabled={!isFormValid || loading}\r\n          startIcon={loading ? <CircularProgress size={20} /> : <LoginIcon />}\r\n          sx={{ mt: 3, mb: 2, py: 1.5 }}\r\n        >\r\n          {loading ? 'Connexion...' : 'Se connecter'}\r\n        </Button>\r\n\r\n        {/* Lien mot de passe oublié */}\r\n        <Box sx={{ textAlign: 'center', mb: 3 }}>\r\n          <Link \r\n            component={RouterLink} \r\n            to=\"/auth/forgot-password\" \r\n            variant=\"body2\"\r\n            sx={{ color: 'text.secondary', textDecoration: 'none', '&:hover': { textDecoration: 'underline' } }}\r\n          >\r\n            Mot de passe oublié ?\r\n          </Link>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Divider avec texte */}\r\n      <Divider sx={{ my: 3 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          ou\r\n        </Typography>\r\n      </Divider>\r\n\r\n      {/* Section d'enregistrement entreprise V2 */}\r\n      <Card variant=\"outlined\" sx={{ backgroundColor: 'rgba(25, 118, 210, 0.02)', border: '1px solid rgba(25, 118, 210, 0.1)' }}>\r\n        <CardContent sx={{ textAlign: 'center', py: 3 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>\r\n            <BusinessIcon color=\"primary\" sx={{ fontSize: 40 }} />\r\n          </Box>\r\n          \r\n          <Typography variant=\"h6\" gutterBottom color=\"primary\">\r\n            Nouvelle entreprise ?\r\n          </Typography>\r\n          \r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            Créez votre compte entreprise et bénéficiez d'une évaluation complète de votre maturité DSIN\r\n          </Typography>\r\n\r\n          {/* Avantages */}\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 1, mb: 3, flexWrap: 'wrap' }}>\r\n            <Chip \r\n              icon={<AssessmentIcon />}\r\n              label=\"Évaluation gratuite\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n            />\r\n            <Chip \r\n              label=\"30 questions expertes\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n            />\r\n            <Chip \r\n              label=\"Recommandations personnalisées\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n            />\r\n          </Box>\r\n\r\n          {/* Bouton d'action principal */}\r\n          <Button\r\n            component={RouterLink}\r\n            to=\"/auth/enterprise-registration\"\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            startIcon={<BusinessIcon />}\r\n            sx={{ \r\n              mb: 2,\r\n              minWidth: 240,\r\n              py: 1.2,\r\n              fontSize: '1rem',\r\n              fontWeight: 600\r\n            }}\r\n          >\r\n            Créer un compte entreprise\r\n          </Button>\r\n\r\n          {/* Sous-texte promotionnel */}\r\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ \r\n            display: 'block',\r\n            fontStyle: 'italic',\r\n            opacity: 0.8\r\n          }}>\r\n            ✨ Évaluation de maturité DSIN • 5 fonctions • Résultats immédiats ✨\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Navigation de retour */}\r\n      <Box sx={{ textAlign: 'center', mt: 3 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          Vous avez déjà un compte d'entreprise créé ?{' '}\r\n          <Link \r\n            component={RouterLink} \r\n            to=\"/auth/login\"\r\n            sx={{ \r\n              color: 'primary.main',\r\n              textDecoration: 'none',\r\n              fontWeight: 600,\r\n              '&:hover': { textDecoration: 'underline' }\r\n            }}\r\n          >\r\n            Utilisez le formulaire ci-dessus\r\n          </Link>\r\n        </Typography>\r\n      </Box>\r\n\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Login;","// src/pages/auth/EnterpriseRegistration.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container, Grid, Paper, Typography, Box, TextField, Button, Stepper, Step, StepLabel,\r\n  FormControl, InputLabel, Select, MenuItem, Alert, CircularProgress, Card, CardContent,\r\n  InputAdornment, IconButton, Divider, LinearProgress, Chip, FormHelperText, List,\r\n  ListItem, ListItemText, ListItemIcon, ListItemSecondaryAction, Radio, RadioGroup,\r\n  FormControlLabel, FormLabel, Tooltip, Dialog, DialogTitle, DialogContent, DialogActions\r\n} from '@mui/material';\r\nimport {\r\n  Visibility, VisibilityOff, Business, Person, PersonAdd, Analytics, ArrowBack,\r\n  ArrowForward, CheckCircle, LocationOn, Email, Phone, Language, People, TrendingUp,\r\n  Info, Add, Delete, Warning, Share, Launch, Assignment\r\n} from '@mui/icons-material';\r\nimport api from '../../services/api';\r\n\r\ninterface EnterpriseRegistrationData {\r\n  nom_entreprise: string;\r\n  secteur: string;\r\n  description: string;\r\n  adresse: string;\r\n  telephone: string;\r\n  email: string;\r\n  site_web: string;\r\n  taille_entreprise: 'TPE' | 'PME' | 'ETI' | 'GE' | '';\r\n  chiffre_affaires: number | '';\r\n  effectif_total: number | '';\r\n  ville_siege_social: string;\r\n  pays_siege_social: string;\r\n  manager_nom_prenom: string;\r\n  manager_email: string;\r\n  manager_mot_de_passe: string;\r\n}\r\n\r\ninterface TeamMember {\r\n  id: string;\r\n  nom_prenom: string;\r\n  email: string;\r\n  fonction: string;\r\n  role: 'Evaluateur' | 'Observateur';\r\n}\r\n\r\ninterface ValidationErrors {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface EvaluationLink {\r\n  acteurId: string;\r\n  nom_prenom: string;\r\n  email: string;\r\n  fonction: string;\r\n  role: string;\r\n  evaluationLink: string;\r\n  isManager?: boolean;\r\n  inviteId: string; \r\n}\r\n\r\ninterface FinalResults {\r\n  enterpriseId: string;\r\n  managerId: string;\r\n  teamMembers: TeamMember[];\r\n  evaluationLinks: EvaluationLink[];\r\n}\r\n\r\nconst steps = [\r\n  { label: 'Informations entreprise', icon: <Business />, color: '#0B4E87', description: 'Données complètes de l\\'entreprise' },\r\n  { label: 'Manager du compte', icon: <Person />, color: '#C55A57', description: 'Administrateur principal' },\r\n  { label: 'Équipe d\\'évaluation', icon: <PersonAdd />, color: '#7E64A8', description: 'Membres participants' },\r\n  { label: 'Résumé & Liens', icon: <Analytics />, color: '#09C4B8', description: 'Génération des évaluations' }\r\n];\r\n\r\nconst secteurs = [\r\n  'Banque/Finance', 'Assurance', 'Industrie', 'Commerce/Distribution',\r\n  'AgroPastoral', 'Santé', 'Éducation', 'Administration publique',\r\n  'Transport/Logistique', 'Énergie/Utilities', 'Télécommunications',\r\n  'Services et conseils', 'Autre'\r\n];\r\n\r\nconst taillesEntreprise = [\r\n  { value: 'TPE', label: 'TPE - Très Petite Entreprise', description: 'Moins de 10 salariés', minEffectif: 1, maxEffectif: 9, color: '#A9C255' },\r\n  { value: 'PME', label: 'PME - Petite et Moyenne Entreprise', description: '10 à 249 salariés', minEffectif: 10, maxEffectif: 249, color: '#4AACC5' },\r\n  { value: 'ETI', label: 'ETI - Entreprise de Taille Intermédiaire', description: '250 à 4 999 salariés', minEffectif: 250, maxEffectif: 4999, color: '#7E64A8' },\r\n  { value: 'GE', label: 'GE - Grande Entreprise', description: '5 000 salariés et plus', minEffectif: 5000, maxEffectif: Infinity, color: '#C55A57' }\r\n];\r\n\r\nconst EnterpriseRegistration: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState<ValidationErrors>({});\r\n  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);\r\n  const [newMember, setNewMember] = useState({ nom_prenom: '', email: '', fonction: '', role: 'Evaluateur' as const });\r\n  const [showAddMemberDialog, setShowAddMemberDialog] = useState(false);\r\n  const [finalResults, setFinalResults] = useState<FinalResults | null>(null);\r\n\r\n  const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const validateEffectifTaille = (effectif: number | string, taille: string) => {\r\n    if (!effectif || !taille || effectif === '') return;\r\n    const tailleConfig = taillesEntreprise.find(t => t.value === taille);\r\n    const effectifNum = Number(effectif);\r\n    if (tailleConfig && effectifNum > 0) {\r\n      if (effectifNum < tailleConfig.minEffectif || effectifNum > tailleConfig.maxEffectif) {\r\n        setValidationErrors(prev => ({\r\n          ...prev,\r\n          effectif_coherence: `L'effectif ${effectifNum} ne correspond pas à la taille \"${tailleConfig.label}\" (${tailleConfig.description})`\r\n        }));\r\n      } else {\r\n        setValidationErrors(prev => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors.effectif_coherence;\r\n          return newErrors;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const getTailleFromEffectif = (effectif: number): string => {\r\n    return taillesEntreprise.find(t => effectif >= t.minEffectif && effectif <= t.maxEffectif)?.value || '';\r\n  };\r\n\r\n    const [formData, setFormData] = useState<EnterpriseRegistrationData>({\r\n    nom_entreprise: '',\r\n    secteur: '',\r\n    description: '',\r\n    adresse: '',\r\n    telephone: '',\r\n    email: '',\r\n    site_web: '',\r\n    taille_entreprise: '',\r\n    chiffre_affaires: '',\r\n    effectif_total: '',\r\n    ville_siege_social: '',\r\n    pays_siege_social: 'France',\r\n    manager_nom_prenom: '',\r\n    manager_email: '',\r\n    manager_mot_de_passe: ''\r\n  });\r\n\r\n  const handleChange = (field: keyof EnterpriseRegistrationData) => (\r\n    event: React.ChangeEvent<HTMLInputElement | { value: unknown }>\r\n  ) => {\r\n    const value = event.target.value;\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    if (validationErrors[field]) {\r\n      setValidationErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[field];\r\n        return newErrors;\r\n      });\r\n    }\r\n    if (field === 'effectif_total' || field === 'taille_entreprise') {\r\n      validateEffectifTaille(\r\n        field === 'effectif_total' ? Number(value) : formData.effectif_total,\r\n        field === 'taille_entreprise' ? value as string : formData.taille_entreprise\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (formData.effectif_total && !formData.taille_entreprise) {\r\n      const suggestedTaille = getTailleFromEffectif(Number(formData.effectif_total));\r\n      if (suggestedTaille) {\r\n        setFormData(prev => ({ ...prev, taille_entreprise: suggestedTaille as any }));\r\n      }\r\n    }\r\n  }, [formData.effectif_total]);\r\n\r\n  const addTeamMember = () => {\r\n    if (!newMember.nom_prenom || !newMember.email || !newMember.fonction) {\r\n      setError('Veuillez remplir tous les champs pour le membre');\r\n      return;\r\n    }\r\n    if (teamMembers.some(member => member.email === newMember.email)) {\r\n      setError('Cette adresse email est déjà utilisée par un autre membre');\r\n      return;\r\n    }\r\n    if (!validateEmail(newMember.email)) {\r\n      setError('Veuillez saisir un email valide');\r\n      return;\r\n    }\r\n    const member: TeamMember = {\r\n      id: `member_${Date.now()}`,\r\n      ...newMember\r\n    };\r\n    setTeamMembers(prev => [...prev, member]);\r\n    setNewMember({ nom_prenom: '', email: '', fonction: '', role: 'Evaluateur' });\r\n    setShowAddMemberDialog(false);\r\n    setError('');\r\n  };\r\n\r\n  const removeTeamMember = (memberId: string) => {\r\n    setTeamMembers(prev => prev.filter(member => member.id !== memberId));\r\n  };\r\n\r\n  const validateCurrentStep = async (): Promise<boolean> => {\r\n    console.log(`🔍 Validation de l'étape ${activeStep}`);\r\n    const newErrors: ValidationErrors = {};\r\n    try {\r\n      switch (activeStep) {\r\n        case 0:\r\n          console.log('📋 Validation informations entreprise complètes...');\r\n          if (!formData.nom_entreprise.trim()) newErrors.nom_entreprise = 'Le nom de l\\'entreprise est obligatoire';\r\n          if (!formData.secteur) newErrors.secteur = 'Veuillez sélectionner un secteur d\\'activité';\r\n          if (!formData.email.trim()) newErrors.email = 'L\\'email est obligatoire';\r\n          else if (!validateEmail(formData.email)) newErrors.email = 'Veuillez saisir un email valide';\r\n          if (!formData.description.trim()) newErrors.description = 'Une description de l\\'entreprise est obligatoire';\r\n          else if (formData.description.length < 20) newErrors.description = 'La description doit contenir au moins 20 caractères';\r\n          if (!formData.taille_entreprise) newErrors.taille_entreprise = 'Veuillez sélectionner la taille de votre entreprise';\r\n          if (!formData.effectif_total || formData.effectif_total <= 0) newErrors.effectif_total = 'Veuillez saisir l\\'effectif total';\r\n          if (!formData.ville_siege_social.trim()) newErrors.ville_siege_social = 'Veuillez saisir la ville du siège social';\r\n          validateEffectifTaille(formData.effectif_total, formData.taille_entreprise);\r\n          if (validationErrors.effectif_coherence) newErrors.effectif_coherence = validationErrors.effectif_coherence;\r\n          break;\r\n        case 1:\r\n          console.log('👤 Validation manager...');\r\n          if (!formData.manager_nom_prenom.trim()) newErrors.manager_nom_prenom = 'Le nom du manager est obligatoire';\r\n          if (!formData.manager_email.trim()) newErrors.manager_email = 'L\\'email du manager est obligatoire';\r\n          else if (!validateEmail(formData.manager_email)) newErrors.manager_email = 'Veuillez saisir un email valide pour le manager';\r\n          if (!formData.manager_mot_de_passe) newErrors.manager_mot_de_passe = 'Le mot de passe est obligatoire';\r\n          else if (formData.manager_mot_de_passe.length < 8) newErrors.manager_mot_de_passe = 'Le mot de passe doit contenir au moins 8 caractères';\r\n          break;\r\n        case 2:\r\n          console.log('👥 Validation équipe...');\r\n          if (teamMembers.length < 2) newErrors.team = 'Vous devez ajouter au moins 2 membres à l\\'équipe d\\'évaluation';\r\n          break;\r\n        case 3:\r\n          console.log('📊 Validation résumé (automatique)...');\r\n          break;\r\n        default:\r\n          console.log('❓ Étape inconnue');\r\n          break;\r\n      }\r\n      setValidationErrors(newErrors);\r\n      const isValid = Object.keys(newErrors).length === 0;\r\n      console.log(`✅ Validation étape ${activeStep} terminée:`, isValid ? 'SUCCÈS' : 'ÉCHEC');\r\n      return isValid;\r\n    } catch (error) {\r\n      console.error(`❌ Erreur lors de la validation étape ${activeStep}:`, error);\r\n      setValidationErrors({});\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleNext = async () => {\r\n    try {\r\n      console.log(`🚀 Passage à l'étape suivante - Étape actuelle: ${activeStep}`);\r\n      const isValid = await validateCurrentStep();\r\n      if (!isValid) {\r\n        console.log('❌ Validation échouée:', validationErrors);\r\n        return;\r\n      }\r\n      if (activeStep === 1) {\r\n        console.log('🏢 Étape Manager terminée - Création entreprise...');\r\n        await createEnterprise();\r\n      } else if (activeStep === 2) {\r\n        console.log('👥 Étape Équipe terminée - Génération des liens...');\r\n        await generateEvaluationLinks();\r\n      }\r\n      console.log(`➡️ Passage à l'étape ${activeStep + 1}`);\r\n      setActiveStep(prev => prev + 1);\r\n      setError('');\r\n    } catch (error: any) {\r\n      console.error(`❌ Erreur lors du passage étape ${activeStep}:`, error);\r\n      setError(`Erreur à l'étape ${activeStep + 1}: ${error.message || 'Erreur inconnue'}`);\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(prev => prev - 1);\r\n    setError('');\r\n  };\r\n\r\n  const createEnterprise = async () => {\r\n    setLoading(true);\r\n    try {\r\n      console.log('🏢 Création de l\\'entreprise...', formData);\r\n      const enterpriseResponse = await api.post('entreprise-registration', formData);\r\n      console.log('✅ Entreprise créée:', enterpriseResponse);\r\n      setFinalResults({\r\n        enterpriseId: enterpriseResponse.entreprise.id_entreprise,\r\n        managerId: enterpriseResponse.manager.id_manager,\r\n        teamMembers: [],\r\n        evaluationLinks: []\r\n      });\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors de la création de l\\'entreprise:', error);\r\n      setError(error.response?.data?.message || 'Erreur lors de la création de l\\'entreprise');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateEvaluationLinks = async () => {\r\n    if (!finalResults) return;\r\n    try {\r\n      console.log('🔗 Génération des liens d\\'évaluation...');\r\n      const evaluationLinks: EvaluationLink[] = [];\r\n\r\n      // Create or fetch evaluation ID\r\n      let evaluationId: string;\r\n      try {\r\n        const existingEval = await api.get(`maturity-evaluation/current/${finalResults.enterpriseId}`);\r\n        evaluationId = existingEval.data.id_evaluation || `eval_${finalResults.enterpriseId}_${Date.now()}`;\r\n      } catch {\r\n        evaluationId = `eval_${finalResults.enterpriseId}_${Date.now()}`;\r\n        await api.post('maturity-evaluation/start', {\r\n          id_entreprise: finalResults.enterpriseId,\r\n          id_acteur: finalResults.managerId\r\n        });\r\n      }\r\n\r\n      // Create invitation for manager\r\n      const managerToken = `mgr_${finalResults.enterpriseId}_${finalResults.managerId}_${Date.now()}`;\r\n      const managerInviteResponse = await api.post('/evaluation-invite/create', {\r\n        enterpriseId: finalResults.enterpriseId,\r\n        actorId: finalResults.managerId,\r\n        nom_prenom: formData.manager_nom_prenom,\r\n        email: formData.manager_email,\r\n        fonction: 'Manager',\r\n        role: 'Manager',\r\n        token: managerToken,\r\n        id_evaluation: evaluationId\r\n      });\r\n      evaluationLinks.push({\r\n        acteurId: finalResults.managerId,\r\n        nom_prenom: formData.manager_nom_prenom,\r\n        email: formData.manager_email,\r\n        fonction: 'Manager',\r\n        role: 'Manager',\r\n        evaluationLink: `${window.location.origin}/evaluation-invite/${managerToken}`,\r\n        isManager: true,\r\n        inviteId: managerInviteResponse.data.id_invite\r\n      });\r\n\r\n      // Create invitations for team members\r\n      for (const member of teamMembers) {\r\n        const memberToken = `mbr_${finalResults.enterpriseId}_${member.id}_${Date.now()}`;\r\n        const memberInviteResponse = await api.post('/evaluation-invite/create', {\r\n          enterpriseId: finalResults.enterpriseId,\r\n          actorId: member.id,\r\n          nom_prenom: member.nom_prenom,\r\n          email: member.email,\r\n          fonction: member.fonction,\r\n          role: member.role,\r\n          token: memberToken,\r\n          id_evaluation: evaluationId\r\n        });\r\n        evaluationLinks.push({\r\n          acteurId: member.id,\r\n          nom_prenom: member.nom_prenom,\r\n          email: member.email,\r\n          fonction: member.fonction,\r\n          role: member.role,\r\n          evaluationLink: `${window.location.origin}/evaluation-invite/${memberToken}`,\r\n          isManager: false,\r\n          inviteId: memberInviteResponse.data.id_invite\r\n        });\r\n      }\r\n\r\n      setFinalResults(prev => ({\r\n        ...prev!,\r\n        teamMembers,\r\n        evaluationLinks\r\n      }));\r\n      console.log('✅ Liens d\\'invitation générés:', evaluationLinks);\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors de la génération des liens:', error);\r\n      setError('Erreur lors de la génération des liens d\\'évaluation');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n\r\n    // ================== RENDU DES ÉTAPES ==================\r\n  \r\n    const renderStepContent = () => {\r\n      switch (activeStep) {\r\n        case 0: // Informations entreprise complètes\r\n          return (\r\n            <Box sx={{ p: 4 }}>\r\n              <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n                <Business sx={{ fontSize: 48, color: steps[0].color, mb: 2 }} />\r\n                <Typography variant=\"h5\" gutterBottom sx={{ color: steps[0].color, fontWeight: 700 }}>\r\n                  Informations de votre entreprise\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Renseignez toutes les informations de votre organisation\r\n                </Typography>\r\n              </Box>\r\n  \r\n              <Grid container spacing={4}>\r\n                {/* Alerte de cohérence effectif/taille */}\r\n                {validationErrors.effectif_coherence && (\r\n                  <Grid size={12}>\r\n                    <Alert severity=\"warning\" icon={<Warning />}>\r\n                      {validationErrors.effectif_coherence}\r\n                    </Alert>\r\n                  </Grid>\r\n                )}\r\n  \r\n                {/* Section Informations de base */}\r\n                <Grid size={12}>\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ color: steps[0].color, mb: 3 }}>\r\n                    📋 Informations de base\r\n                  </Typography>\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    label=\"Nom de l'entreprise\"\r\n                    value={formData.nom_entreprise}\r\n                    onChange={handleChange('nom_entreprise')}\r\n                    error={!!validationErrors.nom_entreprise}\r\n                    helperText={validationErrors.nom_entreprise}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <Business sx={{ color: steps[0].color }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <FormControl \r\n                    required \r\n                    fullWidth\r\n                    error={!!validationErrors.secteur}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <InputLabel>Secteur d'activité</InputLabel>\r\n                    <Select\r\n                      value={formData.secteur}\r\n                      onChange={handleChange('secteur')}\r\n                      label=\"Secteur d'activité\"\r\n                    >\r\n                      {secteurs.map((secteur) => (\r\n                        <MenuItem key={secteur} value={secteur}>\r\n                          {secteur}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    {validationErrors.secteur && (\r\n                      <FormHelperText>{validationErrors.secteur}</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    type=\"email\"\r\n                    label=\"Email entreprise\"\r\n                    value={formData.email}\r\n                    onChange={handleChange('email')}\r\n                    error={!!validationErrors.email}\r\n                    helperText={validationErrors.email}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <Email sx={{ color: steps[0].color }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Téléphone\"\r\n                    value={formData.telephone}\r\n                    onChange={handleChange('telephone')}\r\n                    placeholder=\"+237 699 45 67 89\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <Phone sx={{ color: steps[0].color }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n  \r\n                <Grid size={12}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    multiline\r\n                    rows={4}\r\n                    label=\"Description de l'entreprise\"\r\n                    value={formData.description}\r\n                    onChange={handleChange('description')}\r\n                    placeholder=\"Décrivez votre entreprise, ses activités principales, sa mission et ses objectifs stratégiques...\"\r\n                    error={!!validationErrors.description}\r\n                    helperText={validationErrors.description || 'Minimum 20 caractères requis'}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                  <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">\r\n                      Caractères: {formData.description.length}\r\n                    </Typography>\r\n                    <Chip \r\n                      size=\"small\"\r\n                      label={formData.description.length >= 100 ? \"✓ Suffisant\" : \"Trop court\"}\r\n                      color={formData.description.length >= 100 ? \"success\" : \"warning\"}\r\n                    />\r\n                  </Box>\r\n                </Grid>\r\n  \r\n                {/* Section Détails complémentaires */}\r\n                <Grid size={12}>\r\n                  <Divider sx={{ my: 2 }} />\r\n                  <Typography variant=\"h6\" gutterBottom sx={{ color: steps[0].color, mb: 3 }}>\r\n                    🏢 Détails complémentaires\r\n                  </Typography>\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <FormControl \r\n                    required \r\n                    fullWidth\r\n                    error={!!validationErrors.taille_entreprise}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <InputLabel>Taille de l'entreprise</InputLabel>\r\n                    <Select\r\n                      value={formData.taille_entreprise}\r\n                      onChange={handleChange('taille_entreprise')}\r\n                      label=\"Taille de l'entreprise\"\r\n                    >\r\n                      {taillesEntreprise.map((taille) => (\r\n                        <MenuItem key={taille.value} value={taille.value}>\r\n                          <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>\r\n                            <Box \r\n                              sx={{ \r\n                                width: 12, \r\n                                height: 12, \r\n                                backgroundColor: taille.color, \r\n                                borderRadius: '50%', \r\n                                mr: 2 \r\n                              }} \r\n                            />\r\n                            <Box>\r\n                              <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                                {taille.label}\r\n                              </Typography>\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                {taille.description}\r\n                              </Typography>\r\n                            </Box>\r\n                          </Box>\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    {validationErrors.taille_entreprise && (\r\n                      <FormHelperText>{validationErrors.taille_entreprise}</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    type=\"number\"\r\n                    label=\"Effectif total\"\r\n                    value={formData.effectif_total}\r\n                    onChange={handleChange('effectif_total')}\r\n                    placeholder=\"150\"\r\n                    error={!!validationErrors.effectif_total}\r\n                    helperText={validationErrors.effectif_total || \"Nombre total d'employés dans l'entreprise\"}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <People sx={{ color: steps[0].color }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            employés\r\n                          </Typography>\r\n                        </InputAdornment>\r\n                      )\r\n                    }}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"number\"\r\n                    label=\"Chiffre d'affaires annuel (optionnel)\"\r\n                    value={formData.chiffre_affaires}\r\n                    onChange={handleChange('chiffre_affaires')}\r\n                    placeholder=\"5000000\"\r\n                    helperText=\"En euros - Information optionnelle\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <TrendingUp sx={{ color: steps[0].color }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            €\r\n                          </Typography>\r\n                        </InputAdornment>\r\n                      )\r\n                    }}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    label=\"Ville du siège social\"\r\n                    value={formData.ville_siege_social}\r\n                    onChange={handleChange('ville_siege_social')}\r\n                    placeholder=\"Paris\"\r\n                    error={!!validationErrors.ville_siege_social}\r\n                    helperText={validationErrors.ville_siege_social}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <LocationOn sx={{ color: steps[0].color }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Pays du siège social\"\r\n                    value={formData.pays_siege_social}\r\n                    onChange={handleChange('pays_siege_social')}\r\n                    placeholder=\"France\"\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Site web\"\r\n                    value={formData.site_web}\r\n                    onChange={handleChange('site_web')}\r\n                    placeholder=\"https://www.entreprise.com\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <Language sx={{ color: steps[0].color }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n  \r\n                <Grid size={{ xs: 12, sm: 6 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    multiline\r\n                    rows={2}\r\n                    label=\"Adresse complète\"\r\n                    value={formData.adresse}\r\n                    onChange={handleChange('adresse')}\r\n                    placeholder=\"123 Rue de l'Innovation, 75001 Paris, France\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <LocationOn sx={{ color: steps[0].color }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    sx={{\r\n                      '& .MuiOutlinedInput-root': {\r\n                        '&.Mui-focused fieldset': {\r\n                          borderColor: steps[0].color,\r\n                        },\r\n                      },\r\n                      '& .MuiInputLabel-root.Mui-focused': {\r\n                        color: steps[0].color,\r\n                      },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n  \r\n                {/* Récapitulatif visuel */}\r\n                {formData.taille_entreprise && formData.effectif_total && (\r\n                  <Grid size={12}>\r\n                    <Card variant=\"outlined\" sx={{ backgroundColor: 'rgba(11, 78, 135, 0.05)', border: `1px solid ${steps[0].color}` }}>\r\n                      <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom sx={{ color: steps[0].color }}>\r\n                          Récapitulatif de votre entreprise\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\r\n                          <Chip \r\n                            label={`Taille: ${formData.taille_entreprise}`}\r\n                            color=\"primary\"\r\n                          />\r\n                          <Chip \r\n                            label={`Effectif: ${formData.effectif_total} employés`}\r\n                            color=\"secondary\"\r\n                          />\r\n                          {formData.ville_siege_social && (\r\n                            <Chip \r\n                              label={`Siège: ${formData.ville_siege_social}`}\r\n                              variant=\"outlined\"\r\n                            />\r\n                          )}\r\n                        </Box>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </Box>\r\n          );\r\n  \r\n        case 1: // Manager du compte\r\n          return (\r\n            <Box sx={{ p: 4 }}>\r\n              <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n                <Person sx={{ fontSize: 48, color: steps[1].color, mb: 2 }} />\r\n                <Typography variant=\"h5\" gutterBottom sx={{ color: steps[1].color, fontWeight: 700 }}>\r\n                  Manager du compte\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                  Cette personne sera l'administrateur principal de votre entreprise sur la plateforme\r\n                </Typography>\r\n                <Alert severity=\"info\" sx={{ textAlign: 'left' }}>\r\n                  Le manager pourra inviter d'autres utilisateurs et participera également à l'évaluation de maturité\r\n                </Alert>\r\n              </Box>\r\n  \r\n              <Grid container spacing={4} justifyContent=\"center\">\r\n                <Grid size={{ xs: 12, md: 8 }}>\r\n                  <Grid container spacing={3}>\r\n                    <Grid size={12}>\r\n                      <TextField\r\n                        required\r\n                        fullWidth\r\n                        label=\"Nom et prénom du manager\"\r\n                        value={formData.manager_nom_prenom}\r\n                        onChange={handleChange('manager_nom_prenom')}\r\n                        placeholder=\"Jean Dupont\"\r\n                        error={!!validationErrors.manager_nom_prenom}\r\n                        helperText={validationErrors.manager_nom_prenom}\r\n                        InputProps={{\r\n                          startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                              <Person sx={{ color: steps[1].color }} />\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                        sx={{\r\n                          '& .MuiOutlinedInput-root': {\r\n                            '&.Mui-focused fieldset': {\r\n                              borderColor: steps[1].color,\r\n                            },\r\n                          },\r\n                          '& .MuiInputLabel-root.Mui-focused': {\r\n                            color: steps[1].color,\r\n                          },\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n  \r\n                    <Grid size={12}>\r\n                      <TextField\r\n                        required\r\n                        fullWidth\r\n                        type=\"email\"\r\n                        label=\"Email du manager\"\r\n                        value={formData.manager_email}\r\n                        onChange={handleChange('manager_email')}\r\n                        placeholder=\"jean.dupont@entreprise.com\"\r\n                        error={!!validationErrors.manager_email}\r\n                        helperText={validationErrors.manager_email || \"Cette adresse servira pour la connexion à la plateforme\"}\r\n                        InputProps={{\r\n                          startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                              <Email sx={{ color: steps[1].color }} />\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                        sx={{\r\n                          '& .MuiOutlinedInput-root': {\r\n                            '&.Mui-focused fieldset': {\r\n                              borderColor: steps[1].color,\r\n                            },\r\n                          },\r\n                          '& .MuiInputLabel-root.Mui-focused': {\r\n                            color: steps[1].color,\r\n                          },\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n  \r\n                    <Grid size={12}>\r\n                      <TextField\r\n                        required\r\n                        fullWidth\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        label=\"Mot de passe\"\r\n                        value={formData.manager_mot_de_passe}\r\n                        onChange={handleChange('manager_mot_de_passe')}\r\n                        placeholder=\"Minimum 8 caractères\"\r\n                        error={!!validationErrors.manager_mot_de_passe}\r\n                        helperText={validationErrors.manager_mot_de_passe || \"Le manager pourra modifier ce mot de passe après connexion\"}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton\r\n                                onClick={() => setShowPassword(!showPassword)}\r\n                                edge=\"end\"\r\n                              >\r\n                                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          )\r\n                        }}\r\n                        sx={{\r\n                          '& .MuiOutlinedInput-root': {\r\n                            '&.Mui-focused fieldset': {\r\n                              borderColor: steps[1].color,\r\n                            },\r\n                          },\r\n                          '& .MuiInputLabel-root.Mui-focused': {\r\n                            color: steps[1].color,\r\n                          },\r\n                        }}\r\n                      />\r\n                      <Box sx={{ mt: 1 }}>\r\n                        <LinearProgress \r\n                          variant=\"determinate\" \r\n                          value={Math.min((formData.manager_mot_de_passe.length / 8) * 100, 100)}\r\n                          color={formData.manager_mot_de_passe.length >= 8 ? \"success\" : \"warning\"}\r\n                        />\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          Force du mot de passe: {formData.manager_mot_de_passe.length >= 8 ? \"Suffisant\" : \"Trop court\"}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          );\r\n  \r\n        case 2: // Équipe d'évaluation\r\n          return (\r\n            <Box sx={{ p: 4 }}>\r\n              <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n                <PersonAdd sx={{ fontSize: 48, color: steps[2].color, mb: 2 }} />\r\n                <Typography variant=\"h5\" gutterBottom sx={{ color: steps[2].color, fontWeight: 700 }}>\r\n                  Équipe d'évaluation\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Ajoutez au moins 2 membres qui participeront à l'évaluation de maturité\r\n                </Typography>\r\n              </Box>\r\n  \r\n              <Grid container spacing={4}>\r\n                {validationErrors.team && (\r\n                  <Grid size={12}>\r\n                    <Alert severity=\"warning\">{validationErrors.team}</Alert>\r\n                  </Grid>\r\n                )}\r\n  \r\n                <Grid size={12}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n                    <Typography variant=\"h6\">\r\n                      Membres de l'équipe ({teamMembers.length})\r\n                    </Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      startIcon={<Add />}\r\n                      onClick={() => setShowAddMemberDialog(true)}\r\n                      sx={{ backgroundColor: steps[2].color }}\r\n                    >\r\n                      Ajouter un membre\r\n                    </Button>\r\n                  </Box>\r\n  \r\n                  {teamMembers.length === 0 ? (\r\n                    <Card sx={{ p: 4, textAlign: 'center', backgroundColor: 'grey.50' }}>\r\n                      <People sx={{ fontSize: 48, color: 'grey.400', mb: 2 }} />\r\n                      <Typography variant=\"h6\" color=\"text.secondary\">\r\n                        Aucun membre ajouté\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Ajoutez au moins 2 membres pour continuer\r\n                      </Typography>\r\n                    </Card>\r\n                  ) : (\r\n                    <List>\r\n                      {teamMembers.map((member, index) => (\r\n                        <ListItem key={member.id} divider>\r\n                          <ListItemIcon>\r\n                            <Person sx={{ color: steps[2].color }} />\r\n                          </ListItemIcon>\r\n                          <ListItemText\r\n                            primary={member.nom_prenom}\r\n                            secondary={\r\n                              <>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" component=\"span\">\r\n                                  {member.email} • {member.fonction}\r\n                                </Typography>\r\n                                <br />\r\n                                <Chip \r\n                                  size=\"small\" \r\n                                  label={member.role}\r\n                                  color={member.role === 'Evaluateur' ? 'primary' : 'default'}\r\n                                  sx={{ mt: 0.5 }}\r\n                                />\r\n                              </>\r\n                            }\r\n                          />\r\n                          <ListItemSecondaryAction>\r\n                            <IconButton \r\n                              onClick={() => removeTeamMember(member.id)}\r\n                              color=\"error\"\r\n                            >\r\n                              <Delete />\r\n                            </IconButton>\r\n                          </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                      ))}\r\n                    </List>\r\n                  )}\r\n  \r\n                  {teamMembers.length > 0 && teamMembers.length < 2 && (\r\n                    <Alert severity=\"warning\" sx={{ mt: 2 }}>\r\n                      Vous devez ajouter au moins {2 - teamMembers.length} membre(s) supplémentaire(s)\r\n                    </Alert>\r\n                  )}\r\n  \r\n                  {teamMembers.length >= 2 && (\r\n                    <Alert severity=\"success\" sx={{ mt: 2 }}>\r\n                      ✅ Équipe d'évaluation complète ! Des liens d'évaluation seront générés pour tous les membres.\r\n                    </Alert>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n  \r\n              {/* Dialog d'ajout de membre */}\r\n              <Dialog open={showAddMemberDialog} onClose={() => setShowAddMemberDialog(false)} maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle>Ajouter un membre à l'équipe</DialogTitle>\r\n                <DialogContent>\r\n                  <Grid container spacing={3} sx={{ mt: 1 }}>\r\n                    <Grid size={12}>\r\n                      <TextField\r\n                        required\r\n                        fullWidth\r\n                        label=\"Nom et prénom\"\r\n                        value={newMember.nom_prenom}\r\n                        onChange={(e) => setNewMember(prev => ({ ...prev, nom_prenom: e.target.value }))}\r\n                      />\r\n                    </Grid>\r\n                    <Grid size={12}>\r\n                      <TextField\r\n                        required\r\n                        fullWidth\r\n                        type=\"email\"\r\n                        label=\"Email\"\r\n                        value={newMember.email}\r\n                        onChange={(e) => setNewMember(prev => ({ ...prev, email: e.target.value }))}\r\n                      />\r\n                    </Grid>\r\n                    <Grid size={12}>\r\n                      <TextField\r\n                        required\r\n                        fullWidth\r\n                        label=\"Fonction/Poste\"\r\n                        value={newMember.fonction}\r\n                        onChange={(e) => setNewMember(prev => ({ ...prev, fonction: e.target.value }))}\r\n                        placeholder=\"Ex: Responsable IT, DPO, RSSI...\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid size={12}>\r\n                      <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Rôle dans l'évaluation</FormLabel>\r\n                        <RadioGroup\r\n                          value={newMember.role}\r\n                          onChange={(e) => setNewMember(prev => ({ ...prev, role: e.target.value as 'Evaluateur' | 'Observateur' }))}\r\n                        >\r\n                          <FormControlLabel \r\n                            value=\"Evaluateur\" \r\n                            control={<Radio />} \r\n                            label=\"Évaluateur - Participe activement à l'évaluation\" \r\n                          />\r\n                          <FormControlLabel \r\n                            value=\"Observateur\" \r\n                            control={<Radio />} \r\n                            label=\"Observateur - Consulte les résultats uniquement\" \r\n                          />\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button onClick={() => setShowAddMemberDialog(false)}>Annuler</Button>\r\n                  <Button onClick={addTeamMember} variant=\"contained\">Ajouter</Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            </Box>\r\n          );\r\n  \r\n        case 3: // Résumé & Liens d'évaluation\r\n          return (\r\n            <Box sx={{ p: 4 }}>\r\n              <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n                <Analytics sx={{ fontSize: 48, color: steps[3].color, mb: 2 }} />\r\n                <Typography variant=\"h5\" gutterBottom sx={{ color: steps[3].color, fontWeight: 700 }}>\r\n                  Résumé & Liens d'évaluation\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Votre entreprise est créée. Voici les liens d'évaluation pour tous les participants.\r\n                </Typography>\r\n              </Box>\r\n  \r\n              <Grid container spacing={4}>\r\n                {/* Informations entreprise */}\r\n                <Grid size={{ xs: 12, md: 6 }}>\r\n                  <Card sx={{ p: 3, height: '100%' }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      🏢 Entreprise créée\r\n                    </Typography>\r\n                    <Box sx={{ mb: 2 }}>\r\n                      <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                        {formData.nom_entreprise}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {formData.secteur} • {formData.taille_entreprise} • {formData.effectif_total} employés\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {formData.ville_siege_social}, {formData.pays_siege_social}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Divider sx={{ my: 2 }} />\r\n                    <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                      Manager: {formData.manager_nom_prenom}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {formData.manager_email}\r\n                    </Typography>\r\n                  </Card>\r\n                </Grid>\r\n  \r\n                {/* Statistiques équipe */}\r\n                <Grid size={{ xs: 12, md: 6 }}>\r\n                  <Card sx={{ p: 3, height: '100%' }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      👥 Équipe d'évaluation\r\n                    </Typography>\r\n                    <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', mb: 2 }}>\r\n                      <Chip \r\n                        label={`Manager: 1`}\r\n                        color=\"primary\"\r\n                        icon={<Person />}\r\n                      />\r\n                      <Chip \r\n                        label={`Équipe: ${teamMembers.length}`}\r\n                        color=\"secondary\"\r\n                        icon={<People />}\r\n                      />\r\n                      <Chip \r\n                        label={`Total: ${teamMembers.length + 1}`}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Chaque participant recevra un lien personnalisé pour effectuer son évaluation de maturité DSIN.\r\n                    </Typography>\r\n                  </Card>\r\n                </Grid>\r\n  \r\n                {/* Liens d'évaluation */}\r\n                <Grid size={12}>\r\n                  <Card sx={{ p: 3 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      🔗 Liens d'évaluation générés\r\n                    </Typography>\r\n  \r\n                    {finalResults?.evaluationLinks && finalResults.evaluationLinks.length > 0 ? (\r\n                      <List>\r\n                        {finalResults.evaluationLinks.map((link) => (\r\n                          <ListItem key={link.acteurId} divider>\r\n                            <ListItemIcon>\r\n                              <Assignment sx={{ color: steps[3].color }} />\r\n                            </ListItemIcon>\r\n                            <ListItemText\r\n                              primary={\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                                  <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                                    {link.nom_prenom}\r\n                                  </Typography>\r\n                                  {link.isManager && (\r\n                                    <Chip size=\"small\" label=\"Manager\" color=\"primary\" />\r\n                                  )}\r\n                                </Box>\r\n                              }\r\n                              secondary={\r\n                                <>\r\n                                  <Typography variant=\"body2\" color=\"text.secondary\" component=\"span\">\r\n                                    {link.email} • {link.fonction} • {link.role}\r\n                                  </Typography>\r\n                                  <br />\r\n                                  <Box sx={{ \r\n                                    mt: 1,\r\n                                    backgroundColor: 'grey.100', \r\n                                    p: 1, \r\n                                    borderRadius: 1, \r\n                                    fontFamily: 'monospace',\r\n                                    fontSize: '0.75rem',\r\n                                    wordBreak: 'break-all'\r\n                                  }}>\r\n                                    {link.evaluationLink}\r\n                                  </Box>\r\n                                </>\r\n                              }\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                              <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>\r\n                                <Tooltip title=\"Copier le lien\">\r\n                                  <IconButton \r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                      navigator.clipboard.writeText(link.evaluationLink);\r\n                                      // Optionnel: afficher un message de confirmation\r\n                                    }}\r\n                                  >\r\n                                    <Share />\r\n                                  </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Ouvrir l'évaluation\">\r\n                                  <IconButton \r\n                                    size=\"small\"\r\n                                    onClick={() => window.open(link.evaluationLink, '_blank')}\r\n                                  >\r\n                                    <Launch />\r\n                                  </IconButton>\r\n                                </Tooltip>\r\n                              </Box>\r\n                            </ListItemSecondaryAction>\r\n                          </ListItem>\r\n                        ))}\r\n                      </List>\r\n                    ) : (\r\n                      <Alert severity=\"info\">\r\n                        Les liens d'évaluation seront générés automatiquement.\r\n                      </Alert>\r\n                    )}\r\n                  </Card>\r\n                </Grid>\r\n  \r\n                {/* Instructions */}\r\n                <Grid size={12}>\r\n                  <Card sx={{ p: 4, textAlign: 'center', backgroundColor: `${steps[3].color}10` }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      🎉 Processus terminé avec succès !\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                      Votre entreprise a été créée et les liens d'évaluation sont prêts\r\n                    </Typography>\r\n                    \r\n                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        startIcon={<Assignment />}\r\n                        onClick={() => {\r\n                          if (finalResults?.evaluationLinks[0]) {\r\n                            window.open(finalResults.evaluationLinks[0].evaluationLink, '_blank');\r\n                          }\r\n                        }}\r\n                        sx={{ backgroundColor: steps[3].color }}\r\n                      >\r\n                        Commencer mon évaluation\r\n                      </Button>\r\n                      \r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        size=\"large\"\r\n                        startIcon={<Analytics />}\r\n                        onClick={() => navigate('/dashboard')}\r\n                      >\r\n                        Accéder au tableau de bord\r\n                      </Button>\r\n                    </Box>\r\n  \r\n                    <Alert severity=\"info\" sx={{ mt: 3, textAlign: 'left' }}>\r\n                      <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                        Étapes suivantes :\r\n                      </Typography>\r\n                      <Typography variant=\"body2\">\r\n                        • Partagez les liens d'évaluation avec votre équipe<br/>\r\n                        • Chaque membre effectue son évaluation individuellement (15-20 min)<br/>\r\n                        • Les résultats seront consolidés automatiquement<br/>\r\n                        • Vous recevrez une analyse complète de la maturité de votre entreprise\r\n                      </Typography>\r\n                    </Alert>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          );\r\n  \r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n\r\n\r\n\r\n  if (success) {\r\n    return (\r\n      <Container maxWidth=\"sm\">\r\n        <Card sx={{ textAlign: 'center', p: 4 }}>\r\n          <CheckCircle color=\"success\" sx={{ fontSize: 80, mb: 3 }} />\r\n          <Typography variant=\"h4\" gutterBottom color=\"success.main\" fontWeight=\"bold\">\r\n            Entreprise créée avec succès !\r\n          </Typography>\r\n          <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n            Redirection vers le tableau de bord...\r\n          </Typography>\r\n          <CircularProgress size={40} sx={{ color: steps[3].color }} />\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  const progressPercentage = ((activeStep + 1) / steps.length) * 100;\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\">\r\n      <Paper elevation={3} sx={{ overflow: 'hidden' }}>\r\n        <Box sx={{\r\n          background: `linear-gradient(135deg, #0B4E87 0%, #09C4B8 100%)`,\r\n          color: 'white',\r\n          p: 4,\r\n          textAlign: 'center'\r\n        }}>\r\n          <Typography variant=\"h3\" gutterBottom fontWeight=\"bold\">\r\n            Création d'entreprise et équipe d'évaluation\r\n          </Typography>\r\n          <Typography variant=\"h6\" sx={{ opacity: 0.9, mb: 3 }}>\r\n            Processus simplifié en 4 étapes pour démarrer votre évaluation DSIN\r\n          </Typography>\r\n          <Box sx={{ mb: 2 }}>\r\n            <LinearProgress\r\n              variant=\"determinate\"\r\n              value={progressPercentage}\r\n              sx={{\r\n                height: 8,\r\n                borderRadius: 4,\r\n                backgroundColor: 'rgba(255, 255, 255, 0.3)',\r\n                '& .MuiLinearProgress-bar': { backgroundColor: 'white' }\r\n              }}\r\n            />\r\n          </Box>\r\n          <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\r\n            Étape {activeStep + 1} sur {steps.length} • {progressPercentage.toFixed(0)}% complété\r\n          </Typography>\r\n        </Box>\r\n        <Box sx={{ p: 3, backgroundColor: 'grey.50' }}>\r\n          <Stepper activeStep={activeStep} alternativeLabel>\r\n            {steps.map((step, index) => (\r\n              <Step key={step.label}>\r\n                <StepLabel\r\n                  StepIconComponent={() => (\r\n                    <Tooltip title={step.description}>\r\n                      <Box\r\n                        sx={{\r\n                          width: 40,\r\n                          height: 40,\r\n                          borderRadius: '50%',\r\n                          backgroundColor: index <= activeStep ? step.color : 'grey.300',\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          justifyContent: 'center',\r\n                          color: 'white',\r\n                          transition: 'all 0.3s ease',\r\n                          cursor: 'pointer'\r\n                        }}\r\n                      >\r\n                        {step.icon}\r\n                      </Box>\r\n                    </Tooltip>\r\n                  )}\r\n                >\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    sx={{\r\n                      fontWeight: index === activeStep ? 'bold' : 'normal',\r\n                      color: index <= activeStep ? step.color : 'text.secondary'\r\n                    }}\r\n                  >\r\n                    {step.label}\r\n                  </Typography>\r\n                  <Typography variant=\"caption\" color=\"text.secondary\">\r\n                    {step.description}\r\n                  </Typography>\r\n                </StepLabel>\r\n              </Step>\r\n            ))}\r\n          </Stepper>\r\n        </Box>\r\n        {error && (\r\n          <Box sx={{ p: 3 }}>\r\n            <Alert\r\n              severity=\"error\"\r\n              onClose={() => setError('')}\r\n              action={\r\n                <Button\r\n                  color=\"inherit\"\r\n                  size=\"small\"\r\n                  onClick={() => {\r\n                    console.log('🐛 État actuel du composant:', {\r\n                      activeStep,\r\n                      formData,\r\n                      teamMembers,\r\n                      finalResults,\r\n                      validationErrors\r\n                    });\r\n                  }}\r\n                >\r\n                  Debug\r\n                </Button>\r\n              }\r\n            >\r\n              {error}\r\n            </Alert>\r\n          </Box>\r\n        )}\r\n        <Box sx={{ minHeight: 600, position: 'relative' }}>\r\n          {loading && (\r\n            <Box\r\n              sx={{\r\n                position: 'absolute',\r\n                top: 0,\r\n                left: 0,\r\n                right: 0,\r\n                bottom: 0,\r\n                backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                zIndex: 1000\r\n              }}\r\n            >\r\n              <CircularProgress size={60} sx={{ mb: 2 }} />\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                {activeStep === 1 ? 'Création de votre entreprise...' :\r\n                 activeStep === 2 ? 'Génération des liens d\\'évaluation...' :\r\n                 'Traitement en cours...'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Veuillez patienter, cette opération peut prendre quelques secondes\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          {renderStepContent()}\r\n        </Box>\r\n        <Box sx={{\r\n          p: 3,\r\n          backgroundColor: 'grey.50',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          borderTop: '1px solid',\r\n          borderColor: 'grey.200'\r\n        }}>\r\n          <Button\r\n            onClick={handleBack}\r\n            disabled={activeStep === 0 || loading}\r\n            startIcon={<ArrowBack />}\r\n            variant=\"outlined\"\r\n            size=\"large\"\r\n          >\r\n            Précédent\r\n          </Button>\r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => navigate('/auth/login')}\r\n              disabled={loading}\r\n              size=\"large\"\r\n            >\r\n              Annuler\r\n            </Button>\r\n            {activeStep === steps.length - 1 ? (\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  setSuccess(true);\r\n                  setTimeout(() => {\r\n                    navigate('/dashboard');\r\n                  }, 2000);\r\n                }}\r\n                size=\"large\"\r\n                sx={{\r\n                  minWidth: 160,\r\n                  background: `linear-gradient(135deg, ${steps[3].color} 0%, ${steps[3].color}CC 100%)`,\r\n                }}\r\n              >\r\n                Terminer\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleNext}\r\n                endIcon={<ArrowForward />}\r\n                disabled={loading}\r\n                size=\"large\"\r\n                sx={{\r\n                  backgroundColor: steps[activeStep].color,\r\n                  '&:hover': { backgroundColor: steps[activeStep].color, filter: 'brightness(0.9)' }\r\n                }}\r\n              >\r\n                {loading ? <CircularProgress size={24} color=\"inherit\" /> : 'Suivant'}\r\n              </Button>\r\n            )}\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EnterpriseRegistration;","// src/pages/auth/EvaluationInvite.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport {\r\n  Container, Paper, Typography, Box, TextField, Button, Alert, CircularProgress,\r\n  Card, CardContent, Chip, Stepper, Step, StepLabel, InputAdornment, IconButton,\r\n  Divider, List, ListItem, ListItemIcon, ListItemText\r\n} from '@mui/material';\r\nimport {\r\n  Visibility, VisibilityOff, Assignment, Person, Business, CheckCircle, Warning,\r\n  Lock, Email, Quiz, Error, AccountCircle, Work\r\n} from '@mui/icons-material';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport api from '../../services/api';\r\n\r\ninterface InviteDetails {\r\n  id_invite: string;\r\n  token: string;\r\n  id_entreprise: string;\r\n  id_evaluation?: string;\r\n  nom_entreprise: string;\r\n  email: string;\r\n  nom_prenom: string;\r\n  fonction: string;\r\n  role: string;\r\n  statut: 'ATTENTE' | 'ACCEPTE' | 'EXPIRE';\r\n  date_expiration: string;\r\n  user_exists: boolean;\r\n  actor_exists: boolean;\r\n}\r\n\r\ninterface ValidationErrors {\r\n  [key: string]: string;\r\n}\r\n\r\nconst EvaluationInvite: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { token } = useParams<{ token: string }>();\r\n  const { login, isAuthenticated } = useAuth();\r\n\r\n  const [step, setStep] = useState<'loading' | 'expired' | 'setPassword' | 'login' | 'redirect'>('loading');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [inviteDetails, setInviteDetails] = useState<InviteDetails | null>(null);\r\n  const [validationErrors, setValidationErrors] = useState<ValidationErrors>({});\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const [loginPassword, setLoginPassword] = useState('');\r\n  const [showLoginPassword, setShowLoginPassword] = useState(false);\r\n\r\n  const steps = [\r\n    { label: 'Validation du lien', icon: <Assignment />, color: '#0B4E87' },\r\n    { label: 'Authentification', icon: <Lock />, color: '#C55A57' },\r\n    { label: 'Accès à l\\'évaluation', icon: <Quiz />, color: '#09C4B8' }\r\n  ];\r\n\r\n  const validateInvitation = async () => {\r\n  if (!token) {\r\n    setError('Token d\\'invitation manquant');\r\n    setStep('expired');\r\n    return;\r\n  }\r\n  try {\r\n    setLoading(true);\r\n    setError('');\r\n    console.log('🔍 Validation invitation:', token);\r\n    const response = await api.get(`/evaluation-invite/validate/${token}`);\r\n    const inviteData: InviteDetails = response.data;\r\n    console.log('✅ Invitation validée:', inviteData);\r\n    setInviteDetails(inviteData);\r\n    if (inviteData.statut === 'EXPIRE' || new Date(inviteData.date_expiration) < new Date()) {\r\n      setStep('expired');\r\n      return;\r\n    }\r\n    if (inviteData.statut === 'ACCEPTE') {\r\n      setError('Cette invitation a déjà été utilisée');\r\n      setStep('expired');\r\n      return;\r\n    }\r\n    setStep(inviteData.user_exists ? 'login' : 'setPassword');\r\n  } catch (error: any) {\r\n    console.error('❌ Erreur validation invitation:', error);\r\n    if (error.response?.status === 404) {\r\n      setError('Invitation introuvable ou invalide');\r\n      setStep('expired');\r\n    } else {\r\n      setError(error.response?.data?.message || 'Erreur lors de la validation de l\\'invitation');\r\n      setStep('expired');\r\n    }\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n const handleCreatePassword = async () => {\r\n    if (!inviteDetails) return;\r\n    const newErrors: ValidationErrors = {};\r\n    if (!password) {\r\n      newErrors.password = 'Le mot de passe est obligatoire';\r\n    } else if (!validatePassword(password)) {\r\n      newErrors.password = 'Le mot de passe doit contenir au moins 8 caractères';\r\n    }\r\n    if (!confirmPassword) {\r\n      newErrors.confirmPassword = 'Veuillez confirmer le mot de passe';\r\n    } else if (password !== confirmPassword) {\r\n      newErrors.confirmPassword = 'Les mots de passe ne correspondent pas';\r\n    }\r\n    setValidationErrors(newErrors);\r\n    if (Object.keys(newErrors).length > 0) {\r\n      return;\r\n    }\r\n    try {\r\n      setLoading(true);\r\n      setError('');\r\n      await api.post(`/evaluation-invite/${inviteDetails.id_invite}/create-account`, {\r\n        password\r\n      });\r\n      console.log('✅ Compte créé avec succès');\r\n      await login(inviteDetails.email, password);\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur création compte:', error);\r\n      setError(error.response?.data?.message || 'Erreur lors de la création du compte');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    validateInvitation();\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && inviteDetails && step !== 'redirect') {\r\n      setStep('redirect');\r\n      api.post(`/evaluation-invite/${inviteDetails.id_invite}/accept`)\r\n        .then(() => {\r\n          console.log('✅ Invitation acceptée');\r\n        })\r\n        .catch(err => {\r\n          console.error('⚠️ Erreur acceptation invitation:', err);\r\n        });\r\n      setTimeout(() => {\r\n        navigate(`/maturity-evaluation/${inviteDetails.id_entreprise}`, {\r\n          state: {\r\n            fromInvite: true,\r\n            inviteId: inviteDetails.id_invite,\r\n            evaluationId: inviteDetails.id_evaluation\r\n          }\r\n        });\r\n      }, 2000);\r\n    }\r\n  }, [isAuthenticated, inviteDetails, step, navigate]);\r\n\r\n  const validatePassword = (pwd: string): boolean => {\r\n    return pwd.length >= 8;\r\n  };\r\n\r\n  const validatePasswordStrength = (pwd: string): {\r\n    score: number;\r\n    message: string;\r\n    color: 'error' | 'warning' | 'success';\r\n  } => {\r\n    if (pwd.length < 8) {\r\n      return { score: 0, message: 'Trop court', color: 'error' };\r\n    }\r\n    let score = 0;\r\n    if (pwd.length >= 8) score++;\r\n    if (pwd.length >= 12) score++;\r\n    if (/[A-Z]/.test(pwd)) score++;\r\n    if (/[a-z]/.test(pwd)) score++;\r\n    if (/[0-9]/.test(pwd)) score++;\r\n    if (/[^A-Za-z0-9]/.test(pwd)) score++;\r\n    if (score <= 2) {\r\n      return { score: 33, message: 'Faible', color: 'error' };\r\n    } else if (score <= 4) {\r\n      return { score: 66, message: 'Moyen', color: 'warning' };\r\n    } else {\r\n      return { score: 100, message: 'Fort', color: 'success' };\r\n    }\r\n  };\r\n\r\n \r\n\r\n  const handleLogin = async () => {\r\n    if (!inviteDetails) return;\r\n    if (!loginPassword) {\r\n      setValidationErrors({ password: 'Le mot de passe est requis' });\r\n      return;\r\n    }\r\n    try {\r\n      setLoading(true);\r\n      setError('');\r\n      setValidationErrors({});\r\n      await login(inviteDetails.email, loginPassword);\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur connexion:', error);\r\n      setError('Email ou mot de passe incorrect');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const renderStepContent = () => {\r\n    switch (step) {\r\n      case 'loading':\r\n        return (\r\n          <Box sx={{ textAlign: 'center', py: 8 }}>\r\n            <CircularProgress size={60} sx={{ mb: 3 }} />\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Validation de votre invitation...\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Vérification de votre lien d'évaluation\r\n            </Typography>\r\n          </Box>\r\n        );\r\n      case 'expired':\r\n        return (\r\n          <Box sx={{ textAlign: 'center', py: 8 }}>\r\n            <Error sx={{ fontSize: 64, color: 'error.main', mb: 3 }} />\r\n            <Typography variant=\"h5\" gutterBottom color=\"error\">\r\n              Invitation invalide ou expirée\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 4 }}>\r\n              {error || 'Cette invitation n\\'est plus valide ou a expiré.'}\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => navigate('/auth/login')}\r\n              size=\"large\"\r\n            >\r\n              Retour à la connexion\r\n            </Button>\r\n          </Box>\r\n        );\r\n      case 'setPassword':\r\n        return (\r\n          <Box sx={{ py: 2 }}>\r\n            <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n              <Lock sx={{ fontSize: 48, color: steps[1].color, mb: 2 }} />\r\n              <Typography variant=\"h5\" gutterBottom sx={{ color: steps[1].color, fontWeight: 700 }}>\r\n                Créez votre mot de passe\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Définissez un mot de passe sécurisé pour accéder à votre évaluation\r\n              </Typography>\r\n            </Box>\r\n            {inviteDetails && (\r\n              <>\r\n                <Card variant=\"outlined\" sx={{ mb: 3, backgroundColor: 'rgba(11, 78, 135, 0.05)' }}>\r\n                  <CardContent>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Informations de votre invitation\r\n                    </Typography>\r\n                    <List dense>\r\n                      <ListItem>\r\n                        <ListItemIcon><Business color=\"primary\" /></ListItemIcon>\r\n                        <ListItemText primary=\"Entreprise\" secondary={inviteDetails.nom_entreprise} />\r\n                      </ListItem>\r\n                      <ListItem>\r\n                        <ListItemIcon><AccountCircle color=\"primary\" /></ListItemIcon>\r\n                        <ListItemText primary=\"Nom\" secondary={inviteDetails.nom_prenom} />\r\n                      </ListItem>\r\n                      <ListItem>\r\n                        <ListItemIcon><Email color=\"primary\" /></ListItemIcon>\r\n                        <ListItemText primary=\"Email\" secondary={inviteDetails.email} />\r\n                      </ListItem>\r\n                      <ListItem>\r\n                        <ListItemIcon><Work color=\"primary\" /></ListItemIcon>\r\n                        <ListItemText primary=\"Fonction\" secondary={inviteDetails.fonction} />\r\n                      </ListItem>\r\n                    </List>\r\n                    <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\r\n                      <Chip size=\"small\" label={inviteDetails.role} color={inviteDetails.role === 'Manager' ? 'primary' : 'secondary'} />\r\n                      <Chip size=\"small\" label=\"Première connexion\" variant=\"outlined\" />\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n                <Divider sx={{ my: 3 }} />\r\n              </>\r\n            )}\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n              <TextField\r\n                required\r\n                fullWidth\r\n                type={showPassword ? 'text' : 'password'}\r\n                label=\"Nouveau mot de passe\"\r\n                value={password}\r\n                onChange={(e) => {\r\n                  setPassword(e.target.value);\r\n                  if (validationErrors.password) {\r\n                    setValidationErrors(prev => {\r\n                      const newErrors = { ...prev };\r\n                      delete newErrors.password;\r\n                      return newErrors;\r\n                    });\r\n                  }\r\n                }}\r\n                error={!!validationErrors.password}\r\n                helperText={validationErrors.password || `Sécurité: ${validatePasswordStrength(password).message}`}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n              />\r\n              <TextField\r\n                required\r\n                fullWidth\r\n                type={showConfirmPassword ? 'text' : 'password'}\r\n                label=\"Confirmer le mot de passe\"\r\n                value={confirmPassword}\r\n                onChange={(e) => {\r\n                  setConfirmPassword(e.target.value);\r\n                  if (validationErrors.confirmPassword) {\r\n                    setValidationErrors(prev => {\r\n                      const newErrors = { ...prev };\r\n                      delete newErrors.confirmPassword;\r\n                      return newErrors;\r\n                    });\r\n                  }\r\n                }}\r\n                error={!!validationErrors.confirmPassword}\r\n                helperText={validationErrors.confirmPassword}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton onClick={() => setShowConfirmPassword(!showConfirmPassword)} edge=\"end\">\r\n                        {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                onClick={handleCreatePassword}\r\n                disabled={loading || !password || !confirmPassword}\r\n                startIcon={loading ? <CircularProgress size={20} /> : <Lock />}\r\n                sx={{ py: 1.5, backgroundColor: steps[1].color }}\r\n              >\r\n                {loading ? 'Création...' : 'Créer mon compte et accéder'}\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        );\r\n      case 'login':\r\n        return (\r\n          <Box sx={{ py: 2 }}>\r\n            <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n              <Person sx={{ fontSize: 48, color: steps[1].color, mb: 2 }} />\r\n              <Typography variant=\"h5\" gutterBottom sx={{ color: steps[1].color, fontWeight: 700 }}>\r\n                Connexion à votre compte\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Vous avez déjà un compte, connectez-vous pour accéder à l'évaluation\r\n              </Typography>\r\n            </Box>\r\n            {inviteDetails && (\r\n              <>\r\n                <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n                  Un compte existe déjà pour l'adresse <strong>{inviteDetails.email}</strong>.\r\n                  Connectez-vous avec votre mot de passe pour accéder à cette nouvelle évaluation.\r\n                </Alert>\r\n                <Card variant=\"outlined\" sx={{ mb: 3, backgroundColor: 'rgba(11, 78, 135, 0.05)' }}>\r\n                  <CardContent>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                      Invitation pour:\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                      {inviteDetails.nom_entreprise}\r\n                    </Typography>\r\n                    <Box sx={{ mt: 1, display: 'flex', gap: 1 }}>\r\n                      <Chip size=\"small\" label={inviteDetails.fonction} variant=\"outlined\" />\r\n                      <Chip size=\"small\" label={inviteDetails.role} color={inviteDetails.role === 'Manager' ? 'primary' : 'secondary'} />\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              </>\r\n            )}\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Email\"\r\n                value={inviteDetails?.email || ''}\r\n                disabled\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Email />\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n              />\r\n              <TextField\r\n                required\r\n                fullWidth\r\n                type={showLoginPassword ? 'text' : 'password'}\r\n                label=\"Mot de passe\"\r\n                value={loginPassword}\r\n                onChange={(e) => {\r\n                  setLoginPassword(e.target.value);\r\n                  if (validationErrors.password) {\r\n                    setValidationErrors({});\r\n                  }\r\n                }}\r\n                error={!!validationErrors.password}\r\n                helperText={validationErrors.password}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    handleLogin();\r\n                  }\r\n                }}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Lock />\r\n                    </InputAdornment>\r\n                  ),\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton onClick={() => setShowLoginPassword(!showLoginPassword)} edge=\"end\">\r\n                        {showLoginPassword ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n              />\r\n              {error && (\r\n                <Alert severity=\"error\" onClose={() => setError('')}>\r\n                  {error}\r\n                </Alert>\r\n              )}\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                onClick={handleLogin}\r\n                disabled={loading || !loginPassword}\r\n                startIcon={loading ? <CircularProgress size={20} /> : <Person />}\r\n                sx={{ py: 1.5, backgroundColor: steps[1].color }}\r\n              >\r\n                {loading ? 'Connexion...' : 'Se connecter et accéder'}\r\n              </Button>\r\n              <Box sx={{ textAlign: 'center' }}>\r\n                <Button\r\n                  variant=\"text\"\r\n                  onClick={() => navigate('/auth/forgot-password', { state: { email: inviteDetails?.email } })}\r\n                  size=\"small\"\r\n                >\r\n                  Mot de passe oublié ?\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        );\r\n      case 'redirect':\r\n        return (\r\n          <Box sx={{ textAlign: 'center', py: 8 }}>\r\n            <CheckCircle color=\"success\" sx={{ fontSize: 64, mb: 3 }} />\r\n            <Typography variant=\"h5\" gutterBottom color=\"success.main\">\r\n              Connexion réussie !\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n              Redirection vers votre évaluation de maturité...\r\n            </Typography>\r\n            {inviteDetails && (\r\n              <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Entreprise: <strong>{inviteDetails.nom_entreprise}</strong>\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Rôle: <strong>{inviteDetails.role}</strong>\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n            <CircularProgress size={40} sx={{ color: steps[2].color }} />\r\n          </Box>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getCurrentStep = () => {\r\n    if (step === 'loading' || step === 'expired') return 0;\r\n    if (step === 'setPassword' || step === 'login') return 1;\r\n    if (step === 'redirect') return 2;\r\n    return 0;\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" sx={{ py: 4 }}>\r\n      <Paper elevation={3} sx={{ overflow: 'hidden' }}>\r\n        <Box sx={{\r\n          background: `linear-gradient(135deg, #0B4E87 0%, #09C4B8 100%)`,\r\n          color: 'white',\r\n          p: 3,\r\n          textAlign: 'center'\r\n        }}>\r\n          <Business sx={{ fontSize: 40, mb: 2 }} />\r\n          <Typography variant=\"h4\" gutterBottom fontWeight=\"bold\">\r\n            Invitation à l'évaluation DSIN\r\n          </Typography>\r\n          <Typography variant=\"h6\" sx={{ opacity: 0.9 }}>\r\n            Accédez à votre évaluation de maturité personnalisée\r\n          </Typography>\r\n        </Box>\r\n        {step !== 'loading' && step !== 'expired' && (\r\n          <Box sx={{ p: 3, backgroundColor: 'grey.50' }}>\r\n            <Stepper activeStep={getCurrentStep()} alternativeLabel>\r\n              {steps.map((stepInfo, index) => (\r\n                <Step key={stepInfo.label}>\r\n                  <StepLabel\r\n                    StepIconComponent={() => (\r\n                      <Box\r\n                        sx={{\r\n                          width: 40,\r\n                          height: 40,\r\n                          borderRadius: '50%',\r\n                          backgroundColor: index <= getCurrentStep() ? stepInfo.color : 'grey.300',\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          justifyContent: 'center',\r\n                          color: 'white'\r\n                        }}\r\n                      >\r\n                        {stepInfo.icon}\r\n                      </Box>\r\n                    )}\r\n                  >\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      sx={{\r\n                        color: index <= getCurrentStep() ? stepInfo.color : 'text.secondary',\r\n                        fontWeight: index === getCurrentStep() ? 'bold' : 'normal'\r\n                      }}\r\n                    >\r\n                      {stepInfo.label}\r\n                    </Typography>\r\n                  </StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n          </Box>\r\n        )}\r\n        <Box sx={{ p: 4, minHeight: 400 }}>\r\n          {renderStepContent()}\r\n        </Box>\r\n        {inviteDetails && step !== 'redirect' && step !== 'expired' && (\r\n          <Box sx={{\r\n            p: 3,\r\n            backgroundColor: 'grey.50',\r\n            borderTop: '1px solid',\r\n            borderColor: 'grey.200'\r\n          }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ textAlign: 'center' }}>\r\n              Cette invitation expire le {new Date(inviteDetails.date_expiration).toLocaleDateString('fr-FR')}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EvaluationInvite;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../services/api';\r\nimport logger from '../../utils/logger';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Alert,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Tabs,\r\n  Tab,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Avatar,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  Snackbar,\r\n} from '@mui/material';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n} from 'recharts';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport AssessmentIcon from '@mui/icons-material/Assessment';\r\nimport DomainIcon from '@mui/icons-material/Domain';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n\r\n\r\n// Types mis à jour selon la nouvelle structure API\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  secteur: string;\r\n  score_global: number;\r\n}\r\n\r\ninterface SecteurData {\r\n  nom: string;\r\n  nombre_entreprises: number;\r\n  score_moyen: number;\r\n}\r\n\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n  score_global: number;\r\n}\r\n\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n  score_global: number;\r\n  mode_hebergement: string;\r\n  technologie: string;\r\n}\r\n\r\n// Interface mise à jour pour correspondre à la nouvelle structure\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_acteur: string;\r\n  acteur_nom: string;\r\n  id_application: string;\r\n  nom_application: string;\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  id_questionnaire: string;\r\n  questionnaire_nom: string;\r\n  thematiques: string[]; // Array de strings selon la nouvelle structure\r\n  fonctions: string[]; // Array de strings selon la nouvelle structure\r\n  date_creation: string;\r\n  date_modification: string;\r\n  statut: 'Brouillon' | 'Soumis' | 'Validé';\r\n  progression: number;\r\n  total_questions?: number;\r\n  total_reponses?: number;\r\n  score_actuel?: number;\r\n  score_maximum?: number;\r\n}\r\n\r\n// Couleurs pour les graphiques\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658', '#8DD1E1', '#A4DE6C', '#D0ED57'];\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [refreshing, setRefreshing] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n  \r\n  // États pour les données\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [secteurs, setSecteurs] = useState<SecteurData[]>([]);\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [formulaires, setFormulaires] = useState<Formulaire[]>([]);\r\n  \r\n  // États pour les filtres\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [hebergementFilter, setHebergementFilter] = useState<string>('all');\r\n  const [technologieFilter, setTechnologieFilter] = useState<string>('all');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Options de filtrage\r\n  const [hebergementOptions, setHebergementOptions] = useState<string[]>([]);\r\n  const [technologieOptions, setTechnologieOptions] = useState<string[]>([]);\r\n\r\n  // Fonction de récupération des données avec la nouvelle structure API\r\n  const fetchDashboardData = async (isRefresh = false) => {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      if (isRefresh) {\r\n        setRefreshing(true);\r\n      } else {\r\n        setLoading(true);\r\n      }\r\n      setError(null);\r\n\r\n      logger.debug('Chargement des données du dashboard');\r\n\r\n      // Récupération parallèle de toutes les données nécessaires\r\n      const [\r\n        entreprisesResponse,\r\n        fonctionsResponse,\r\n        applicationsResponse,\r\n        formulairesResponse\r\n      ] = await Promise.all([\r\n        api.get('entreprises'),\r\n        api.get('fonctions'),\r\n        api.get('applications'),\r\n        api.get('formulaires') // Utilisation de l'endpoint unifié\r\n      ]);\r\n\r\n      // Normalisation des réponses avec la logique mise à jour\r\n      const entreprisesData = normalizeApiResponse<Entreprise>(entreprisesResponse, 'entreprises');\r\n      const fonctionsData = normalizeApiResponse<Fonction>(fonctionsResponse, 'fonctions');\r\n      const applicationsData = normalizeApiResponse<Application>(applicationsResponse, 'applications');\r\n      const formulairesData = normalizeApiResponse<Formulaire>(formulairesResponse, 'formulaires');\r\n\r\n      // Traitement des données\r\n      setEntreprises(entreprisesData);\r\n      \r\n      // Calculer les statistiques par secteur\r\n      const secteursData = calculerStatistiquesSecteur(entreprisesData);\r\n      setSecteurs(secteursData);\r\n      \r\n      setFonctions(fonctionsData);\r\n      \r\n      // Filtrer les applications avec score valide\r\n      const applicationsAvecScore = applicationsData.filter(app => \r\n        app.score_global !== undefined && app.score_global !== null\r\n      );\r\n      setApplications(applicationsAvecScore);\r\n      \r\n      // Extraire les options de filtrage\r\n      const hebergements = [...new Set(applicationsAvecScore\r\n        .map(app => app.mode_hebergement)\r\n        .filter(Boolean))];\r\n      \r\n      const technologies = [...new Set(applicationsAvecScore\r\n        .map(app => app.technologie)\r\n        .filter(Boolean))];\r\n      \r\n      setHebergementOptions(hebergements);\r\n      setTechnologieOptions(technologies);\r\n      \r\n      // Normaliser les formulaires avec la nouvelle structure\r\n      const normalizedFormulaires = formulairesData.map(form => ({\r\n        ...form,\r\n        // S'assurer que les thématiques et fonctions sont des arrays\r\n        thematiques: Array.isArray(form.thematiques) ? form.thematiques : [],\r\n        fonctions: Array.isArray(form.fonctions) ? form.fonctions : [],\r\n        // Garder la compatibilité avec les anciens champs\r\n        questionnaire_nom: form.questionnaire_nom || 'Questionnaire sans nom',\r\n        acteur_nom: form.acteur_nom || 'Utilisateur inconnu',\r\n        nom_application: form.nom_application || 'Application inconnue'\r\n      }));\r\n      \r\n      setFormulaires(normalizedFormulaires);\r\n\r\n      const duration = performance.now() - startTime;\r\n      logger.info(`Dashboard data loaded successfully in ${Math.round(duration)}ms`, {\r\n        entreprises: entreprisesData.length,\r\n        fonctions: fonctionsData.length,\r\n        applications: applicationsAvecScore.length,\r\n        formulaires: normalizedFormulaires.length\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des données:', error);\r\n      setError('Impossible de charger les données du tableau de bord.');\r\n      logger.error('Erreur chargement dashboard:', error);\r\n    } finally {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n\r\n  // Fonction utilitaire pour normaliser les réponses API\r\n  const normalizeApiResponse = <T,>(response: any, dataType: string): T[] => {\r\n    if (Array.isArray(response)) {\r\n      return response;\r\n    } else if (response && response.data && Array.isArray(response.data)) {\r\n      return response.data;\r\n    } else {\r\n      console.warn(`Format de réponse inattendu pour ${dataType}:`, response);\r\n      logger.warn(`Unexpected response format for ${dataType}`, { response });\r\n      return [];\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n  }, []);\r\n\r\n  // Fonction utilitaire pour gérer les scores null/undefined\r\n  const getScoreWithFallback = (score: any, defaultValue: number = 0): number => {\r\n    if (score === null || score === undefined || isNaN(score)) {\r\n      return defaultValue;\r\n    }\r\n    return parseFloat(score) || defaultValue;\r\n  };\r\n\r\n  const calculerStatistiquesSecteur = (entreprises: Entreprise[]): SecteurData[] => {\r\n    // Regrouper par secteur\r\n    const secteursMap = entreprises.reduce((acc, entreprise) => {\r\n      const secteur = entreprise.secteur || 'Non défini';\r\n      \r\n      if (!acc[secteur]) {\r\n        acc[secteur] = { \r\n          scoreTotal: 0, \r\n          count: 0 \r\n        };\r\n      }\r\n      \r\n      // Utiliser le score avec fallback\r\n      const score = getScoreWithFallback(entreprise.score_global, 0);\r\n      if (score > 0) {\r\n        acc[secteur].scoreTotal += score;\r\n        acc[secteur].count++;\r\n      }\r\n      \r\n      return acc;\r\n    }, {} as Record<string, { scoreTotal: number, count: number }>);\r\n    \r\n    // Convertir en tableau et calculer les moyennes\r\n    return Object.entries(secteursMap)\r\n      .map(([nom, { scoreTotal, count }]) => ({\r\n        nom,\r\n        nombre_entreprises: count,\r\n        score_moyen: count > 0 ? scoreTotal / count : 0\r\n      }))\r\n      .filter(secteur => secteur.nombre_entreprises > 0) // Filtrer les secteurs sans données\r\n      .sort((a, b) => b.score_moyen - a.score_moyen);\r\n  };\r\n\r\n  // Fonction pour formater les scores avec gestion des cas null\r\n  const formatScore = (scoreActuel: any, scoreMaximum: any): string => {\r\n    const actuel = getScoreWithFallback(scoreActuel, 0);\r\n    const maximum = getScoreWithFallback(scoreMaximum, 1);\r\n    \r\n    if (maximum === 0) {\r\n      return \"0 / 0\";\r\n    }\r\n    \r\n    return `${actuel.toFixed(1)} / ${maximum.toFixed(1)}`;\r\n  };\r\n\r\n  // Fonction pour calculer le pourcentage de score avec sécurité\r\n  const calculateScorePercentage = (scoreActuel: any, scoreMaximum: any): number => {\r\n    const actuel = getScoreWithFallback(scoreActuel, 0);\r\n    const maximum = getScoreWithFallback(scoreMaximum, 1);\r\n    \r\n    if (maximum === 0) return 0;\r\n    return (actuel / maximum) * 5; // Convertir en échelle 0-5\r\n  };\r\n\r\n  const countFormulairesByFunction = () => {\r\n    if (!formulaires || !formulaires.length) return [];\r\n    \r\n    logger.debug('Counting formulaires by function', { count: formulaires.length });\r\n    \r\n    // Compter les formulaires par fonction en utilisant la nouvelle structure\r\n    const countByFunction = formulaires.reduce((acc, form) => {\r\n      // Utiliser les fonctions array de la nouvelle structure\r\n      const fonctionsArray = form.fonctions || [];\r\n      \r\n      if (fonctionsArray.length === 0) {\r\n        // Si pas de fonctions, utiliser une catégorie par défaut\r\n        acc['Non défini'] = (acc['Non défini'] || 0) + 1;\r\n      } else {\r\n        // Compter pour chaque fonction\r\n        fonctionsArray.forEach(fonction => {\r\n          acc[fonction] = (acc[fonction] || 0) + 1;\r\n        });\r\n      }\r\n      \r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n    \r\n    // Convertir en format pour graphique et filtrer les entrées vides\r\n    return Object.entries(countByFunction)\r\n      .filter(([name, value]) => name && name.trim() !== '' && value > 0)\r\n      .map(([name, value]) => ({\r\n        name,\r\n        value\r\n      }));\r\n  };\r\n\r\n  const getFilteredApplications = () => {\r\n    if (!applications || !applications.length) return [];\r\n    \r\n    return applications\r\n      .filter(app => \r\n        (hebergementFilter === 'all' || app.mode_hebergement === hebergementFilter) &&\r\n        (technologieFilter === 'all' || app.technologie === technologieFilter)\r\n      )\r\n      .sort((a, b) => {\r\n        const scoreA = getScoreWithFallback(a.score_global, 0);\r\n        const scoreB = getScoreWithFallback(b.score_global, 0);\r\n        return scoreB - scoreA;\r\n      })\r\n      .slice(0, 10);\r\n  };\r\n\r\n  const calculateGlobalFunctionScore = () => {\r\n    if (!fonctions || !fonctions.length) return 'N/A';\r\n    \r\n    const validScores = fonctions\r\n      .map(f => getScoreWithFallback(f.score_global, 0))\r\n      .filter(score => score > 0);\r\n    \r\n    if (!validScores.length) return 'N/A';\r\n    \r\n    const total = validScores.reduce((sum, score) => sum + score, 0);\r\n    return (total / validScores.length).toFixed(2);\r\n  };\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    fetchDashboardData(true);\r\n  };\r\n\r\n  const CustomTooltip = ({ active, payload, label }: {\r\n    active?: boolean;\r\n    payload?: Array<{ value: number }>;\r\n    label?: string;\r\n  }) => {\r\n    if (active && payload?.length) {\r\n      return (\r\n        <Paper sx={{ p: 1 }}>\r\n          <Typography variant=\"body2\">{`${label}`}</Typography>\r\n          <Typography variant=\"body2\">{`Score: ${payload[0].value.toFixed(2)}`}</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Fonction pour déterminer la couleur basée sur le score\r\n  const getScoreColor = (score: number): \"success\" | \"warning\" | \"error\" => {\r\n    if (score >= 3.5) return \"success\";\r\n    if (score >= 2) return \"warning\";\r\n    return \"error\";\r\n  };\r\n\r\n  // Formater la date\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit'\r\n      });\r\n    } catch (e) {\r\n      logger.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n\r\n  if (loading && !refreshing) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n      {successMessage && (\r\n        <Alert \r\n          severity=\"success\" \r\n          sx={{ mb: 2 }} \r\n          onClose={() => setSuccessMessage(null)}\r\n        >\r\n          {successMessage}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* Titre du tableau de bord */}\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2, mb: 2 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Box>\r\n                <Typography component=\"h1\" variant=\"h4\" color=\"primary\" gutterBottom>\r\n                  Tableau de bord de maturité\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  Vue d'ensemble des scores de maturité par secteur, fonction et application.\r\n                </Typography>\r\n              </Box>\r\n              <Box display=\"flex\" gap={1}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<RefreshIcon />}\r\n                  onClick={handleRefresh}\r\n                  disabled={refreshing}\r\n                >\r\n                  {refreshing ? 'Actualisation...' : 'Actualiser'}\r\n                </Button>\r\n        \r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Statistiques globales en format carte */}\r\n        <Grid item xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#0B4E87', mr: 2 }}>\r\n                  <BusinessIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Entreprises</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {entreprises?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                évaluées dans la plateforme\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#4CAF50', mr: 2 }}>\r\n                  <AssessmentIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Fonctions</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {fonctions?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                analysées au total\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#FF9800', mr: 2 }}>\r\n                  <DomainIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Applications</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {applications?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                avec score de maturité\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#F44336', mr: 2 }}>\r\n                  <DescriptionIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Formulaires</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {formulaires?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                renseignés au total\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        {/* Synthèse des entreprises par secteur */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Maturité par Secteur d'Activité\r\n            </Typography>\r\n            {secteurs && secteurs.length > 0 ? (\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart data={secteurs}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"nom\" />\r\n                  <YAxis domain={[0, 5]} />\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Legend />\r\n                  <Bar \r\n                    dataKey=\"score_moyen\" \r\n                    fill=\"#0B4E87\" \r\n                    name=\"Score moyen\"\r\n                    barSize={40}\r\n                  >\r\n                    {secteurs.map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                    ))}\r\n                  </Bar>\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            ) : (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={300} flexDirection=\"column\">\r\n                <Typography variant=\"body1\" color=\"textSecondary\" align=\"center\">\r\n                  Aucune donnée de score disponible\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"textSecondary\" align=\"center\" sx={{ mt: 1 }}>\r\n                  Les scores apparaîtront une fois les analyses de maturité effectuées\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n            <Typography variant=\"caption\" sx={{ display: 'block', mt: 1 }}>\r\n              Nombre d'entreprises par secteur indiqué entre parenthèses\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Nombre de formulaires par fonction */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Formulaires par Fonction\r\n            </Typography>\r\n            {formulaires && formulaires.length > 0 && countFormulairesByFunction().length > 0 ? (\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <PieChart>\r\n                  <Pie\r\n                    data={countFormulairesByFunction()}\r\n                    dataKey=\"value\"\r\n                    nameKey=\"name\"\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    outerRadius={80}\r\n                    fill=\"#8884d8\"\r\n                    label\r\n                  >\r\n                    {countFormulairesByFunction().map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                    ))}\r\n                  </Pie>\r\n                  <Tooltip />\r\n                  <Legend />\r\n                </PieChart>\r\n              </ResponsiveContainer>\r\n            ) : (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={300} flexDirection=\"column\">\r\n                <Typography variant=\"body1\" color=\"textSecondary\" align=\"center\">\r\n                  Aucun formulaire avec fonctions valides\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"textSecondary\" align=\"center\" sx={{ mt: 1 }}>\r\n                  Créez des formulaires liés à des fonctions pour voir les statistiques\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des 10 derniers formulaires */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              10 Derniers Formulaires\r\n            </Typography>\r\n            <Box display=\"flex\" mb={2}>\r\n              <TextField\r\n                size=\"small\"\r\n                placeholder=\"Rechercher un formulaire...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                fullWidth\r\n                InputProps={{ \r\n                  startAdornment: <InputAdornment position=\"start\"><SearchIcon /></InputAdornment> \r\n                }}\r\n              />\r\n            </Box>\r\n            {formulaires\r\n              .filter(form => \r\n                (form.nom_application && form.nom_application.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n                (form.fonctions && form.fonctions.some(f => f.toLowerCase().includes(searchTerm.toLowerCase()))) ||\r\n                (form.acteur_nom && form.acteur_nom.toLowerCase().includes(searchTerm.toLowerCase()))\r\n              )\r\n              .slice(0, 10)\r\n              .map((form, index) => (\r\n                <React.Fragment key={form.id_formulaire || `form-${index}`}>\r\n                  <ListItem\r\n                    component=\"div\"\r\n                    onClick={() => navigate(`/formulaires/${form.id_formulaire}`)}\r\n                    sx={{ \r\n                      borderLeft: '4px solid', \r\n                      borderColor: (() => {\r\n                        const scorePercent = calculateScorePercentage(form.score_actuel, form.score_maximum);\r\n                        return scorePercent >= 3.5 ? '#4CAF50' : \r\n                               scorePercent >= 2 ? '#FF9800' : '#F44336';\r\n                      })(),\r\n                      mb: 1,\r\n                      bgcolor: '#f9f9f9',\r\n                      cursor: 'pointer',\r\n                      '&:hover': {\r\n                        bgcolor: '#f0f0f0',\r\n                      }\r\n                    }}\r\n                  >\r\n                    <ListItemText\r\n                      primary={\r\n                        <Box>\r\n                          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', color: '#0B4E87' }}>\r\n                            Questionnaire: {form.questionnaire_nom}\r\n                          </Typography>\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={0.5}>\r\n                            <Typography variant=\"body2\" component=\"span\">\r\n                              Application: {form.nom_application}\r\n                            </Typography>\r\n                            <Chip \r\n                              label={`Score: ${formatScore(form.score_actuel, form.score_maximum)}`} \r\n                              size=\"small\" \r\n                              color={getScoreColor(calculateScorePercentage(form.score_actuel, form.score_maximum))}\r\n                              sx={{ fontWeight: 'bold' }}\r\n                            />\r\n                          </Box>\r\n                          {form.fonctions && form.fonctions.length > 0 && (\r\n                            <Box mt={0.5}>\r\n                              <Typography variant=\"caption\" color=\"textSecondary\">\r\n                                Fonctions: {form.fonctions.join(', ')}\r\n                              </Typography>\r\n                            </Box>\r\n                          )}\r\n                        </Box>\r\n                      }\r\n                      secondary={\r\n                        <Box mt={1}>\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Typography variant=\"body2\" component=\"span\" sx={{ fontWeight: 'medium' }}>\r\n                              Acteur: {form.acteur_nom}\r\n                            </Typography>\r\n                            <Chip \r\n                              label={form.statut}\r\n                              size=\"small\"\r\n                              color={getScoreColor(form.statut === 'Validé' ? 5 : form.statut === 'Soumis' ? 3 : 1)}\r\n                            />\r\n                          </Box>\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={0.5}>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                              Créé le: {form.date_creation ? formatDate(form.date_creation) : 'Date inconnue'}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                              Modifié le: {form.date_modification ? formatDate(form.date_modification) : 'Date inconnue'}\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                  {index < Math.min(formulaires.length, 10) - 1 && <Divider />}\r\n                </React.Fragment>\r\n              ))}\r\n            {formulaires.filter(form => \r\n              (form.nom_application && form.nom_application.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n              (form.fonctions && form.fonctions.some(f => f.toLowerCase().includes(searchTerm.toLowerCase()))) ||\r\n              (form.acteur_nom && form.acteur_nom.toLowerCase().includes(searchTerm.toLowerCase()))\r\n            ).length === 0 && (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={150}>\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                  Aucun formulaire ne correspond à votre recherche\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Tooltip,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  FileCopy as CloneIcon,\r\n  QuestionAnswer as QuestionIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  nom: string;\r\n  description?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface QuestionnaireStat {\r\n  numQuestions: number;\r\n  numReponses: number;\r\n  numUtilisateurs: number;\r\n}\r\n\r\nconst QuestionnairesIndex: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\r\n  const [questionnaireStats, setQuestionnaireStats] = useState<{ [key: string]: QuestionnaireStat }>({});\r\n  \r\n  // Récupérer tous les questionnaires au chargement\r\n  useEffect(() => {\r\n    fetchQuestionnaires();\r\n  }, []);\r\n\r\n  // Récupérer tous les questionnaires\r\n  const fetchQuestionnaires = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Retirer le préfixe '/api' car il est ajouté par le service api\r\n      const response = await api.get('questionnaires');\r\n      \r\n      // Vérifier et adapter la réponse en fonction de sa structure\r\n      let questionnaireData: Questionnaire[] = [];\r\n      if (Array.isArray(response)) {\r\n        questionnaireData = response;\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        questionnaireData = response.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour questionnaires:', response);\r\n        setError('Format de données inattendu pour les questionnaires');\r\n      }\r\n      \r\n      // Normaliser les données des questionnaires\r\n      const normalizedQuestionnaires = questionnaireData.map((q: any) => ({\r\n        id_questionnaire: q.id_questionnaire,\r\n        nom: q.nom || q.titre || 'Sans nom',\r\n        description: q.description || '',\r\n        date_creation: q.date_creation || new Date().toISOString(),\r\n        date_modification: q.date_modification || q.date_creation || new Date().toISOString()\r\n      }));\r\n      \r\n      setQuestionnaires(normalizedQuestionnaires);\r\n      \r\n      // Récupérer les statistiques pour chaque questionnaire\r\n      // Adapter le chemin pour correspondre à la route backend\r\n      const statsResponse = await api.get('questionnaires/stats');\r\n      \r\n      let statsData = [];\r\n      if (Array.isArray(statsResponse)) {\r\n        statsData = statsResponse;\r\n      } else if (statsResponse && statsResponse.data && Array.isArray(statsResponse.data)) {\r\n        statsData = statsResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les statistiques:', statsResponse);\r\n        // Ne pas mettre d'erreur ici, car les statistiques ne sont pas critiques\r\n      }\r\n      \r\n      // Convertir le tableau en objet pour faciliter l'accès\r\n      // Gérer différents formats possibles dans la réponse\r\n      const statsObj = statsData.reduce((acc: { [key: string]: QuestionnaireStat }, stat: any) => {\r\n        acc[stat.id_questionnaire] = {\r\n          numQuestions: stat.numQuestions || 0,\r\n          numReponses: stat.numReponses || stat.num_evaluations || 0,\r\n          numUtilisateurs: stat.numUtilisateurs || 0\r\n        };\r\n        return acc;\r\n      }, {});\r\n      \r\n      setQuestionnaireStats(statsObj);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des questionnaires:', error);\r\n      setError('Impossible de charger les questionnaires. Veuillez réessayer.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Navigation vers la vue détaillée d'un questionnaire\r\n  const handleViewQuestionnaire = (questionnaire: Questionnaire) => {\r\n    navigate(`/questionnaires/${questionnaire.id_questionnaire}`);\r\n  };\r\n\r\n  // Navigation vers la page d'administration\r\n  const handleGoToAdmin = () => {\r\n    navigate('/questionnaires/admin');\r\n  };\r\n\r\n  // Formater la date en gérant les erreurs potentielles\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        day: '2-digit',\r\n        month: 'short',\r\n        year: 'numeric'\r\n      });\r\n    } catch (e) {\r\n      console.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n\r\n  // Récupérer les statistiques avec une gestion robuste des erreurs\r\n  const getStats = (questionnaireId: string, statType: keyof QuestionnaireStat) => {\r\n    try {\r\n      return questionnaireStats[questionnaireId]?.[statType] || 0;\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Questionnaires d'Évaluation\r\n              </Typography>\r\n              <Box>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  onClick={handleGoToAdmin}\r\n                  sx={{ mr: 1 }}\r\n                >\r\n                  Administration\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={handleGoToAdmin}\r\n                >\r\n                  Nouveau Questionnaire\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des questionnaires */}\r\n        <Grid xs={12}>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Nom</TableCell>\r\n                  <TableCell>Description</TableCell>\r\n                  <TableCell>Questions</TableCell>\r\n                  <TableCell>Réponses</TableCell>\r\n                  <TableCell>Utilisateurs</TableCell>\r\n                  <TableCell>Dernière modification</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {questionnaires.length > 0 ? (\r\n                  questionnaires.map((questionnaire) => (\r\n                    <TableRow key={questionnaire.id_questionnaire} hover>\r\n                      <TableCell>{questionnaire.nom}</TableCell>\r\n                      <TableCell>\r\n                        {questionnaire.description && questionnaire.description.length > 50\r\n                          ? `${questionnaire.description.substring(0, 50)}...`\r\n                          : questionnaire.description || 'Aucune description'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          icon={<QuestionIcon />}\r\n                          label={getStats(questionnaire.id_questionnaire, 'numQuestions')}\r\n                          color={\r\n                            getStats(questionnaire.id_questionnaire, 'numQuestions') > 0 \r\n                              ? 'success' \r\n                              : 'default'\r\n                          }\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {getStats(questionnaire.id_questionnaire, 'numReponses')}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {getStats(questionnaire.id_questionnaire, 'numUtilisateurs')}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {formatDate(questionnaire.date_modification)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Tooltip title=\"Voir les détails\">\r\n                          <IconButton \r\n                            color=\"info\" \r\n                            onClick={() => handleViewQuestionnaire(questionnaire)}\r\n                          >\r\n                            <ExpandMoreIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                ) : (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} align=\"center\">\r\n                      <Typography variant=\"body1\" sx={{ py: 2 }}>\r\n                        Aucun questionnaire disponible\r\n                      </Typography>\r\n                      <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\" \r\n                        startIcon={<AddIcon />}\r\n                        onClick={handleGoToAdmin}\r\n                      >\r\n                        Créer le premier questionnaire\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionnairesIndex;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\n\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Badge,\r\n  IconButton,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Divider,\r\n  Tooltip,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Edit as EditIcon,\r\n  Assessment as AssessmentIcon,\r\n  QuestionAnswer as QuestionIcon,\r\n  People as PeopleIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  nom: string;\r\n  description?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  id_questionnaire: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre: number;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface QuestionnaireStat {\r\n  numQuestions: number;\r\n  numReponses: number;\r\n  numUtilisateurs: number;\r\n}\r\n\r\nconst QuestionnaireDetail: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [questionnaire, setQuestionnaire] = useState<Questionnaire | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [stats, setStats] = useState<QuestionnaireStat | null>(null);\r\n  \r\n  // Charger les données du questionnaire au chargement\r\n  useEffect(() => {\r\n    if (id) {\r\n      fetchQuestionnaireData(id);\r\n    } else {\r\n      setError(\"Identifiant de questionnaire manquant\");\r\n      setLoading(false);\r\n    }\r\n  }, [id]);\r\n  \r\n  // Récupérer les données du questionnaire\r\n  const fetchQuestionnaireData = async (questionnaireId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Récupérer les informations du questionnaire\r\n      const questionnaireResponse = await api.get(`questionnaires/${questionnaireId}`);\r\n      \r\n      // Normaliser la réponse\r\n      let questionnaireData = null;\r\n      if (questionnaireResponse && typeof questionnaireResponse === 'object') {\r\n        if (Array.isArray(questionnaireResponse)) {\r\n          questionnaireData = questionnaireResponse[0]; // Prendre le premier si c'est un tableau\r\n        } else if (questionnaireResponse.data) {\r\n          questionnaireData = questionnaireResponse.data;\r\n        } else {\r\n          questionnaireData = questionnaireResponse;\r\n        }\r\n      }\r\n      \r\n      if (questionnaireData && questionnaireData.id_questionnaire) {\r\n        setQuestionnaire(questionnaireData);\r\n      } else {\r\n        setError(\"Format de réponse inattendu pour le questionnaire\");\r\n        console.warn(\"Format de réponse inattendu pour le questionnaire:\", questionnaireResponse);\r\n      }\r\n      \r\n      // Récupérer les questions\r\n      try {\r\n        const questionsResponse = await api.get(`questionnaires/${questionnaireId}/questions`);\r\n        \r\n        let questionsData = [];\r\n        if (Array.isArray(questionsResponse)) {\r\n          questionsData = questionsResponse;\r\n        } else if (questionsResponse && questionsResponse.data && Array.isArray(questionsResponse.data)) {\r\n          questionsData = questionsResponse.data;\r\n        } else {\r\n          console.warn(\"Format de réponse inattendu pour les questions:\", questionsResponse);\r\n        }\r\n        \r\n        setQuestions(questionsData);\r\n      } catch (questionsError) {\r\n        console.error('Erreur lors du chargement des questions:', questionsError);\r\n        setQuestions([]);\r\n      }\r\n      \r\n      // Récupérer les statistiques\r\n      try {\r\n        let statsResponse;\r\n        try {\r\n          // Essayer d'abord avec le singulier\r\n          statsResponse = await api.get(`questionnaire/stats/${questionnaireId}`);\r\n        } catch (statsSingularError) {\r\n          // Ensuite avec le pluriel\r\n          statsResponse = await api.get(`questionnaires/stats/${questionnaireId}`);\r\n        }\r\n        \r\n        let statsData = null;\r\n        if (statsResponse && typeof statsResponse === 'object') {\r\n          if (statsResponse.data) {\r\n            statsData = statsResponse.data;\r\n          } else {\r\n            statsData = statsResponse;\r\n          }\r\n        }\r\n        \r\n        if (statsData) {\r\n          setStats({\r\n            numQuestions: statsData.numQuestions || statsData.num_questions || 0,\r\n            numReponses: statsData.numReponses || statsData.num_evaluations || 0,\r\n            numUtilisateurs: statsData.numUtilisateurs || statsData.num_utilisateurs || 0\r\n          });\r\n        } else {\r\n          // Statistiques par défaut si aucune donnée n'est disponible\r\n          setStats({\r\n            numQuestions: questions.length,\r\n            numReponses: 0,\r\n            numUtilisateurs: 0\r\n          });\r\n        }\r\n      } catch (statsError) {\r\n        console.error('Erreur lors du chargement des statistiques:', statsError);\r\n        // Statistiques par défaut en cas d'erreur\r\n        setStats({\r\n          numQuestions: questions.length,\r\n          numReponses: 0,\r\n          numUtilisateurs: 0\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des données du questionnaire:', error);\r\n      setError(\"Impossible de charger les données du questionnaire\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Retour à la liste des questionnaires\r\n  const handleBackToList = () => {\r\n    navigate('/questionnaires');\r\n  };\r\n  \r\n  // Navigation vers la page d'administration\r\n  const handleGoToAdmin = () => {\r\n    navigate(`/questionnaires/admin?id=${id}`);\r\n  };\r\n  \r\n  // Formater la date de manière sécurisée\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        day: '2-digit',\r\n        month: 'short',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    } catch (e) {\r\n      console.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  if (error) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            onClick={handleBackToList}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Retour à la liste\r\n          </Button>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n  if (!questionnaire) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\r\n          <Typography variant=\"h5\" color=\"error\" gutterBottom>\r\n            Questionnaire non trouvé\r\n          </Typography>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            onClick={handleBackToList}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Retour à la liste\r\n          </Button>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n  // Trier les questions par ordre\r\n  const sortedQuestions = [...questions].sort((a, b) => \r\n    (a.ordre || 0) - (b.ordre || 0)\r\n  );\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <IconButton color=\"primary\" onClick={handleBackToList} sx={{ mr: 1 }}>\r\n                  <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                  {questionnaire.nom}\r\n                </Typography>\r\n              </Box>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<EditIcon />}\r\n                onClick={handleGoToAdmin}\r\n              >\r\n                Modifier\r\n              </Button>\r\n            </Box>\r\n            \r\n            <Typography variant=\"body1\" paragraph>\r\n              {questionnaire.description || 'Aucune description détaillée disponible.'}\r\n            </Typography>\r\n            \r\n            <Box sx={{ mt: 2, mb: 1 }}>\r\n              <Chip \r\n                label={`Créé le ${formatDate(questionnaire.date_creation || new Date().toISOString())}`} \r\n                variant=\"outlined\" \r\n                size=\"small\" \r\n                sx={{ mr: 1 }}\r\n              />\r\n              <Chip \r\n                label={`Dernière modification: ${formatDate(questionnaire.date_modification || questionnaire.date_creation || new Date().toISOString())}`} \r\n                variant=\"outlined\" \r\n                size=\"small\" \r\n                color=\"info\"\r\n              />\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Statistiques */}\r\n        <Grid xs={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid xs={12} md={4}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Badge \r\n                      badgeContent={stats?.numQuestions || 0} \r\n                      color=\"primary\"\r\n                      max={999}\r\n                      sx={{ mb: 1 }}\r\n                    >\r\n                      <QuestionIcon fontSize=\"large\" />\r\n                    </Badge>\r\n                    <Typography variant=\"body1\" align=\"center\" fontWeight=\"bold\">\r\n                      Questions\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid xs={12} md={4}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Badge \r\n                      badgeContent={stats?.numReponses || 0} \r\n                      color=\"success\"\r\n                      max={999}\r\n                      sx={{ mb: 1 }}\r\n                    >\r\n                      <AssessmentIcon fontSize=\"large\" />\r\n                    </Badge>\r\n                    <Typography variant=\"body1\" align=\"center\" fontWeight=\"bold\">\r\n                      Réponses\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid xs={12} md={4}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Badge \r\n                      badgeContent={stats?.numUtilisateurs || 0} \r\n                      color=\"info\"\r\n                      max={999}\r\n                      sx={{ mb: 1 }}\r\n                    >\r\n                      <PeopleIcon fontSize=\"large\" />\r\n                    </Badge>\r\n                    <Typography variant=\"body1\" align=\"center\" fontWeight=\"bold\">\r\n                      Utilisateurs\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        \r\n        {/* Liste des questions */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Questions ({sortedQuestions.length})\r\n            </Typography>\r\n            \r\n            <Divider sx={{ mb: 2 }} />\r\n            \r\n            {sortedQuestions.length > 0 ? (\r\n              sortedQuestions.map((question) => (\r\n                <Accordion key={question.id_question}>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Grid container spacing={1} alignItems=\"center\">\r\n                      <Grid xs={1}>\r\n                        <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                          {question.ordre || '?'}.\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid xs={10}>\r\n                        <Typography variant=\"body1\">\r\n                          {question.texte || 'Question sans texte'}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid xs={1}>\r\n                        <Tooltip title={`Pondération: ${question.ponderation || 0}`}>\r\n                          <Chip \r\n                            label={question.ponderation || 0} \r\n                            color={\r\n                              question.ponderation >= 4 ? 'error' :\r\n                              question.ponderation >= 3 ? 'warning' :\r\n                              question.ponderation >= 2 ? 'info' : 'default'\r\n                            }\r\n                            size=\"small\"\r\n                          />\r\n                        </Tooltip>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Grid container spacing={2}>\r\n                      <Grid xs={12}>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          <strong>Pondération:</strong> {question.ponderation || 0} \r\n                          {question.ponderation >= 4 ? ' (Critique)' : \r\n                           question.ponderation >= 3 ? ' (Important)' : \r\n                           question.ponderation >= 2 ? ' (Significatif)' : ' (Mineur)'}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          <strong>Ajouté le:</strong> {formatDate(question.date_creation || new Date().toISOString())}\r\n                        </Typography>\r\n                        {question.date_modification && question.date_creation && \r\n                         question.date_modification !== question.date_creation && (\r\n                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n                            <strong>Dernière modification:</strong> {formatDate(question.date_modification)}\r\n                          </Typography>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              ))\r\n            ) : (\r\n              <Box textAlign=\"center\" py={4}>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  Ce questionnaire ne contient aucune question.\r\n                </Typography>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  onClick={handleGoToAdmin}\r\n                  sx={{ mt: 2 }}\r\n                >\r\n                  Ajouter des questions\r\n                </Button>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionnaireDetail;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  TextField,\r\n  IconButton,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Tabs,\r\n  Tab,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Tooltip,\r\n  Alert,\r\n  Snackbar,\r\n  ListItemButton,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  FormHelperText,\r\n  Chip,\r\n  Checkbox,\r\n  ListSubheader\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Save as SaveIcon,\r\n  Close as CloseIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  FileCopy as CloneIcon,\r\n  DragIndicator as DragIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  nom?: string;\r\n  fonction?: string; // Pour la compatibilité\r\n  thematique?: string; // Pour la compatibilité\r\n  description?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  id_questionnaire?: string; // Maintenant optionnel\r\n  id_thematique: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre: number;\r\n  date_creation: string;\r\n  date_modification: string;\r\n  thematique_nom?: string;\r\n}\r\n\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n  description?: string;\r\n  nombre_thematiques?: number;\r\n}\r\n\r\ninterface Thematique {\r\n  id_thematique: string;\r\n  nom: string;\r\n  description?: string;\r\n  id_fonction: string;\r\n  fonction_nom?: string;\r\n}\r\n\r\ninterface QuestionnaireFormValues {\r\n  nom: string;\r\n  description?: string;\r\n  thematiques: string[];\r\n}\r\n\r\ninterface QuestionFormValues {\r\n  id_questionnaire?: string;\r\n  id_thematique: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre?: number | string;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`admin-tabpanel-${index}`}\r\n      aria-labelledby={`admin-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst initialQuestionnaireFormValues: QuestionnaireFormValues = {\r\n  nom: '',\r\n  description: '',\r\n  thematiques: []\r\n};\r\n\r\nconst initialQuestionFormValues: QuestionFormValues = {\r\n  id_thematique: '',\r\n  texte: '',\r\n  ponderation: 1,\r\n  ordre: 0\r\n};\r\n\r\nconst QuestionnaireAdmin: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const questionnaireId = searchParams.get('id');\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\r\n  const [selectedQuestionnaire, setSelectedQuestionnaire] = useState<Questionnaire | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [thematiques, setThematiques] = useState<Thematique[]>([]);\r\n  const [selectedThematiques, setSelectedThematiques] = useState<string[]>([]);\r\n  const [loadingFonctions, setLoadingFonctions] = useState<boolean>(false);\r\n  const [loadingThematiques, setLoadingThematiques] = useState<boolean>(false);\r\n  \r\n  // États pour les formulaires\r\n  const [questionnaireFormValues, setQuestionnaireFormValues] = useState<QuestionnaireFormValues>(initialQuestionnaireFormValues);\r\n  const [questionFormValues, setQuestionFormValues] = useState<QuestionFormValues>(initialQuestionFormValues);\r\n  \r\n  // États pour les dialogues\r\n  const [openQuestionnaireDialog, setOpenQuestionnaireDialog] = useState<boolean>(false);\r\n  const [openQuestionDialog, setOpenQuestionDialog] = useState<boolean>(false);\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState<boolean>(false);\r\n  const [openDeleteQuestionDialog, setOpenDeleteQuestionDialog] = useState<boolean>(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState<Question | null>(null);\r\n  \r\n  // État pour les notifications\r\n  const [snackbar, setSnackbar] = useState<{\r\n    open: boolean;\r\n    message: string;\r\n    severity: 'success' | 'info' | 'warning' | 'error';\r\n  }>({\r\n    open: false,\r\n    message: '',\r\n    severity: 'info'\r\n  });\r\n  \r\n  // États pour le mode d'édition\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [questionDialogMode, setQuestionDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Chargement initial\r\n  useEffect(() => {\r\n    console.log('🚀 Initialisation du composant QuestionnaireAdmin');\r\n    \r\n    const loadData = async () => {\r\n      try {\r\n        // Charger d'abord les fonctions et thématiques\r\n        await Promise.all([\r\n          fetchFonctions(),\r\n          fetchThematiques()\r\n        ]);\r\n        \r\n        // Puis charger les questionnaires\r\n        await fetchQuestionnaires();\r\n        \r\n        // Si un ID de questionnaire est spécifié, le charger\r\n        if (questionnaireId) {\r\n          console.log('🎯 Chargement du questionnaire spécifique:', questionnaireId);\r\n          await fetchQuestionnaireById(questionnaireId);\r\n          setTabValue(1); // Aller à l'onglet des questions\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Erreur lors du chargement initial:', error);\r\n      }\r\n    };\r\n    \r\n    loadData();\r\n  }, [questionnaireId]);\r\n\r\n  // Récupérer toutes les thématiques\r\n  const fetchThematiques = async () => {\r\n    setLoadingThematiques(true);\r\n    try {\r\n      console.log('🔍 Chargement des thématiques...');\r\n      const response = await api.get('thematiques');\r\n      const data = Array.isArray(response) ? response : response.data || [];\r\n      console.log('✅ Thématiques reçues:', data.length);\r\n      setThematiques(data);\r\n    } catch (error) {\r\n      console.error('❌ Erreur lors du chargement des thématiques:', error);\r\n      setThematiques([]);\r\n    } finally {\r\n      setLoadingThematiques(false);\r\n    }\r\n  };\r\n  \r\n  // Récupérer tous les questionnaires\r\n  const fetchQuestionnaires = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('🔍 Chargement des questionnaires...');\r\n      const response = await api.get('questionnaires');\r\n      console.log('✅ Questionnaires reçus:', response);\r\n      \r\n      let questionnaireData = [];\r\n      if (Array.isArray(response)) {\r\n        questionnaireData = response;\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        questionnaireData = response.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour questionnaires:', response);\r\n        setError('Format de données inattendu pour les questionnaires');\r\n        questionnaireData = [];\r\n      }\r\n      \r\n      setQuestionnaires(questionnaireData);\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors du chargement des questionnaires:', error);\r\n      showSnackbar('Erreur lors du chargement des questionnaires.', 'error');\r\n      setError('Impossible de charger les questionnaires');\r\n      setQuestionnaires([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Récupérer toutes les fonctions\r\n  const fetchFonctions = async () => {\r\n    setLoadingFonctions(true);\r\n    \r\n    try {\r\n      console.log('🔍 Chargement des fonctions depuis /fonctions...');\r\n      const response = await api.get('fonctions');\r\n      console.log('✅ Fonctions reçues:', response);\r\n      \r\n      let fonctionsData = [];\r\n      if (Array.isArray(response)) {\r\n        fonctionsData = response;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour fonctions:', response);\r\n        fonctionsData = [];\r\n      }\r\n      \r\n      setFonctions(fonctionsData);\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors du chargement des fonctions:', error);\r\n      showSnackbar('Erreur lors du chargement des fonctions.', 'warning');\r\n      setFonctions([]);\r\n    } finally {\r\n      setLoadingFonctions(false);\r\n    }\r\n  };\r\n  \r\n  // Récupérer un questionnaire par son ID\r\n  const fetchQuestionnaireById = async (id: string) => {\r\n    try {\r\n      console.log('🔍 Chargement du questionnaire:', id);\r\n      const questionnaireResponse = await api.get(`questionnaires/${id}`);\r\n      console.log('✅ Questionnaire reçu:', questionnaireResponse);\r\n      \r\n      let questionnaireData = null;\r\n      if (questionnaireResponse && typeof questionnaireResponse === 'object') {\r\n        if (Array.isArray(questionnaireResponse)) {\r\n          questionnaireData = questionnaireResponse[0];\r\n        } else if (questionnaireResponse.data) {\r\n          questionnaireData = questionnaireResponse.data;\r\n        } else {\r\n          questionnaireData = questionnaireResponse;\r\n        }\r\n      }\r\n      \r\n      if (questionnaireData && questionnaireData.id_questionnaire) {\r\n        setSelectedQuestionnaire(questionnaireData);\r\n      }\r\n      \r\n      // Récupérer les questions\r\n      try {\r\n        console.log('🔍 Chargement des questions pour:', id);\r\n        const questionsResponse = await api.get(`questionnaires/${id}/questions`);\r\n        console.log('✅ Questions reçues:', questionsResponse);\r\n        \r\n        let questionsData = [];\r\n        if (Array.isArray(questionsResponse)) {\r\n          questionsData = questionsResponse;\r\n        } else if (questionsResponse && questionsResponse.data && Array.isArray(questionsResponse.data)) {\r\n          questionsData = questionsResponse.data;\r\n        }\r\n        \r\n        setQuestions(questionsData.sort((a: Question, b: Question) => (a.ordre || 0) - (b.ordre || 0)));\r\n      } catch (questionsError: any) {\r\n        console.error('❌ Erreur lors du chargement des questions:', questionsError);\r\n        setQuestions([]);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors du chargement du questionnaire:', error);\r\n      showSnackbar('Erreur lors du chargement du questionnaire.', 'error');\r\n    }\r\n  };\r\n  \r\n  // Gérer l'ouverture du dialogue de création de questionnaire\r\n  const handleOpenCreateQuestionnaireDialog = () => {\r\n    console.log('🆕 Ouverture du dialogue de création');\r\n    setDialogMode('create');\r\n    setQuestionnaireFormValues(initialQuestionnaireFormValues);\r\n    setSelectedThematiques([]);\r\n    setOpenQuestionnaireDialog(true);\r\n    \r\n    // Charger les thématiques si pas encore fait\r\n    if (thematiques.length === 0) {\r\n      fetchThematiques();\r\n    }\r\n  };\r\n  \r\n  // Gérer l'ouverture du dialogue d'édition de questionnaire\r\n  const handleOpenEditQuestionnaireDialog = async (questionnaire: Questionnaire) => {\r\n    setDialogMode('edit');\r\n    \r\n    // Charger les thématiques du questionnaire\r\n    try {\r\n      const themesResponse = await api.get(`questionnaire-thematiques/${questionnaire.id_questionnaire}/thematiques`);\r\n      const linkedThemes = Array.isArray(themesResponse) ? themesResponse : themesResponse.data || [];\r\n      const themeIds = linkedThemes.map((t: any) => t.id_thematique);\r\n      \r\n      setQuestionnaireFormValues({\r\n        nom: questionnaire.nom || `${questionnaire.fonction || ''} - ${questionnaire.thematique || ''}`,\r\n        description: questionnaire.description || '',\r\n        thematiques: themeIds\r\n      });\r\n      setSelectedThematiques(themeIds);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des thématiques:', error);\r\n      setQuestionnaireFormValues({\r\n        nom: questionnaire.nom || `${questionnaire.fonction || ''} - ${questionnaire.thematique || ''}`,\r\n        description: questionnaire.description || '',\r\n        thematiques: []\r\n      });\r\n      setSelectedThematiques([]);\r\n    }\r\n    \r\n    setOpenQuestionnaireDialog(true);\r\n    \r\n    // Charger toutes les thématiques disponibles si pas encore fait\r\n    if (thematiques.length === 0) {\r\n      fetchThematiques();\r\n    }\r\n  };\r\n  \r\n  // Fermer le dialogue de questionnaire\r\n  const handleCloseQuestionnaireDialog = () => {\r\n    setOpenQuestionnaireDialog(false);\r\n  };\r\n  \r\n  // Soumettre le formulaire de questionnaire\r\n  const handleSubmitQuestionnaire = async () => {\r\n    try {\r\n      console.log('🚀 Soumission du questionnaire');\r\n      \r\n      if (!questionnaireFormValues.nom.trim()) {\r\n        showSnackbar('Le nom est obligatoire.', 'warning');\r\n        return;\r\n      }\r\n      \r\n      if (selectedThematiques.length === 0) {\r\n        showSnackbar('Sélectionnez au moins une thématique.', 'warning');\r\n        return;\r\n      }\r\n\r\n      const questionnaireData = {\r\n        nom: questionnaireFormValues.nom.trim(),\r\n        description: questionnaireFormValues.description,\r\n        thematiques: selectedThematiques\r\n      };\r\n\r\n      console.log('📤 Données à envoyer:', questionnaireData);\r\n\r\n      if (dialogMode === 'create') {\r\n        const response = await api.post('questionnaires', questionnaireData);\r\n        console.log('✅ Questionnaire créé:', response);\r\n        \r\n        await fetchQuestionnaires();\r\n        showSnackbar('Questionnaire créé avec succès.', 'success');\r\n        \r\n        const newId = response?.data?.id_questionnaire || response?.id_questionnaire;\r\n        if (newId) {\r\n          await fetchQuestionnaireById(newId);\r\n          setTabValue(1);\r\n        }\r\n      } else if (dialogMode === 'edit' && selectedQuestionnaire) {\r\n        const response = await api.put(\r\n          `questionnaires/${selectedQuestionnaire.id_questionnaire}`, \r\n          questionnaireData\r\n        );\r\n        console.log('✅ Questionnaire mis à jour:', response);\r\n        \r\n        await fetchQuestionnaires();\r\n        await fetchQuestionnaireById(selectedQuestionnaire.id_questionnaire);\r\n        showSnackbar('Questionnaire mis à jour avec succès.', 'success');\r\n      }\r\n      \r\n      handleCloseQuestionnaireDialog();\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde du questionnaire.', 'error');\r\n    }\r\n  };\r\n  \r\n  // Gérer l'ouverture du dialogue de confirmation de suppression\r\n  const handleOpenDeleteDialog = (questionnaire: Questionnaire) => {\r\n    setSelectedQuestionnaire(questionnaire);\r\n    setOpenDeleteDialog(true);\r\n  };\r\n  \r\n  // Fermer le dialogue de confirmation de suppression\r\n  const handleCloseDeleteDialog = () => {\r\n    setOpenDeleteDialog(false);\r\n  };\r\n  \r\n  // Supprimer un questionnaire\r\n  const handleDeleteQuestionnaire = async () => {\r\n    if (!selectedQuestionnaire) return;\r\n    \r\n    try {\r\n      console.log('🗑️ Suppression du questionnaire:', selectedQuestionnaire.id_questionnaire);\r\n      await api.delete(`questionnaires/${selectedQuestionnaire.id_questionnaire}`);\r\n      console.log('✅ Questionnaire supprimé');\r\n      \r\n      await fetchQuestionnaires();\r\n      setSelectedQuestionnaire(null);\r\n      setQuestions([]);\r\n      setTabValue(0);\r\n      handleCloseDeleteDialog();\r\n      showSnackbar('Questionnaire supprimé avec succès.', 'success');\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors de la suppression du questionnaire:', error);\r\n      showSnackbar('Erreur lors de la suppression du questionnaire.', 'error');\r\n    }\r\n  };\r\n\r\n  // Sélectionner un questionnaire pour l'édition\r\n  const handleSelectQuestionnaire = async (questionnaire: Questionnaire) => {\r\n    setSelectedQuestionnaire(questionnaire);\r\n    await fetchQuestionnaireById(questionnaire.id_questionnaire);\r\n    setTabValue(1);\r\n    navigate(`/questionnaires/admin?id=${questionnaire.id_questionnaire}`, { replace: true });\r\n  };\r\n\r\n  // Gérer le changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Autres fonctions restent identiques...\r\n  \r\n  // Afficher une notification\r\n  const showSnackbar = (message: string, severity: 'success' | 'info' | 'warning' | 'error') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n\r\n  // Fermer la notification\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({ ...snackbar, open: false });\r\n  };\r\n\r\n  // Navigation vers la liste des questionnaires\r\n  const handleBackToList = () => {\r\n    navigate('/questionnaires');\r\n  };\r\n\r\n  if (loading && questionnaires.length === 0) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <IconButton color=\"primary\" onClick={handleBackToList} sx={{ mr: 1 }}>\r\n                  <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                  Administration des Questionnaires\r\n                </Typography>\r\n              </Box>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleOpenCreateQuestionnaireDialog}\r\n              >\r\n                Nouveau Questionnaire\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Onglets */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ width: '100%' }}>\r\n            <Tabs\r\n              value={tabValue}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"Liste des Questionnaires\" />\r\n              \r\n            </Tabs>\r\n\r\n            {/* Onglet Liste des Questionnaires */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Questionnaires disponibles\r\n                </Typography>\r\n                <Divider />\r\n              </Box>\r\n              \r\n              {questionnaires.length > 0 ? (\r\n                <List>\r\n                  {questionnaires.map((questionnaire) => (\r\n                    <ListItemButton\r\n                      key={questionnaire.id_questionnaire}\r\n                      onClick={() => handleSelectQuestionnaire(questionnaire)}\r\n                      selected={selectedQuestionnaire?.id_questionnaire === questionnaire.id_questionnaire}\r\n                      sx={{ \r\n                        borderRadius: 1, \r\n                        mb: 1,\r\n                        border: '1px solid',\r\n                        borderColor: 'divider'\r\n                      }}\r\n                    >\r\n                      <ListItemText\r\n                        primary={\r\n                          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                            {questionnaire.nom }\r\n                          </Typography>\r\n                        }\r\n                        secondary={\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {questionnaire.description || 'Aucune description'}\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <Tooltip title=\"Éditer\">\r\n                          <IconButton \r\n                            edge=\"end\" \r\n                            color=\"primary\" \r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleOpenEditQuestionnaireDialog(questionnaire);\r\n                            }}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Supprimer\">\r\n                          <IconButton \r\n                            edge=\"end\" \r\n                            color=\"error\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleOpenDeleteDialog(questionnaire);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                  ))}\r\n                </List>\r\n              ) : (\r\n                <Box textAlign=\"center\" py={4}>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    Aucun questionnaire disponible.\r\n                  </Typography>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\" \r\n                    startIcon={<AddIcon />}\r\n                    onClick={handleOpenCreateQuestionnaireDialog}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Créer un questionnaire\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </TabPanel>\r\n\r\n            {/* Onglet Gestion des Questions */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              {selectedQuestionnaire ? (\r\n                <>\r\n                  <Card sx={{ mb: 3 }}>\r\n                    <CardHeader \r\n                      title={selectedQuestionnaire.nom || `${selectedQuestionnaire.fonction || 'Sans titre'}`}\r\n                      action={\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          startIcon={<EditIcon />}\r\n                          onClick={() => handleOpenEditQuestionnaireDialog(selectedQuestionnaire)}\r\n                        >\r\n                          Modifier\r\n                        </Button>\r\n                      }\r\n                    />\r\n                    <CardContent>\r\n                      <Typography variant=\"body1\" paragraph>\r\n                        {selectedQuestionnaire.description || 'Aucune description disponible.'}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Questions ({questions.length})\r\n                  </Typography>\r\n                  <Divider sx={{ mb: 2 }} />\r\n                  \r\n                  {questions.length > 0 ? (\r\n                    <Box>\r\n                      {/* Grouper les questions par thématique */}\r\n                      {Object.entries(\r\n                        questions.reduce((acc, question) => {\r\n                          const thematique = question.thematique_nom || 'Sans thématique';\r\n                          if (!acc[thematique]) acc[thematique] = [];\r\n                          acc[thematique].push(question);\r\n                          return acc;\r\n                        }, {} as Record<string, Question[]>)\r\n                      ).map(([thematique, themeQuestions]) => (\r\n                        <Box key={thematique} sx={{ mb: 3 }}>\r\n                          <Typography variant=\"subtitle1\" fontWeight=\"bold\" gutterBottom>\r\n                            {thematique}\r\n                          </Typography>\r\n                          {themeQuestions\r\n                            .sort((a, b) => (a.ordre || 0) - (b.ordre || 0))\r\n                            .map((question) => (\r\n                              <Accordion key={question.id_question}>\r\n                                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                  <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\r\n                                    <Typography sx={{ width: '5%', mr: 1 }}>\r\n                                      <strong>{question.ordre || '?'}.</strong>\r\n                                    </Typography>\r\n                                    <Typography sx={{ width: '80%' }}>\r\n                                      {question.texte || 'Question sans texte'}\r\n                                    </Typography>\r\n                                    <Typography sx={{ width: '15%', textAlign: 'right' }}>\r\n                                      Pond.: {question.ponderation || 0}\r\n                                    </Typography>\r\n                                  </Box>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                    <strong>Pondération:</strong> {question.ponderation || 0}\r\n                                  </Typography>\r\n                                </AccordionDetails>\r\n                              </Accordion>\r\n                            ))}\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                  ) : (\r\n                    <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                      Aucune question trouvée. Les questions sont automatiquement chargées depuis les thématiques sélectionnées.\r\n                    </Alert>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <Box textAlign=\"center\" py={4}>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    Veuillez sélectionner un questionnaire dans l'onglet précédent.\r\n                  </Typography>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => setTabValue(0)}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Retour à la liste\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialog pour créer/modifier un questionnaire */}\r\n      <Dialog open={openQuestionnaireDialog} onClose={handleCloseQuestionnaireDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer un nouveau questionnaire' : 'Modifier le questionnaire'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"nom\"\r\n                  name=\"nom\"\r\n                  label=\"Nom du questionnaire\"\r\n                  value={questionnaireFormValues.nom}\r\n                  onChange={(e) => setQuestionnaireFormValues({...questionnaireFormValues, nom: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  label=\"Description\"\r\n                  multiline\r\n                  rows={3}\r\n                  value={questionnaireFormValues.description || ''}\r\n                  onChange={(e) => setQuestionnaireFormValues({...questionnaireFormValues, description: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <FormControl fullWidth required>\r\n                  <InputLabel>Thématiques</InputLabel>\r\n                  <Select\r\n                    multiple\r\n                    value={selectedThematiques}\r\n                    onChange={(e) => setSelectedThematiques(e.target.value as string[])}\r\n                    renderValue={(selected) => (\r\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                        {selected.map((value) => {\r\n                          const theme = thematiques.find(t => t.id_thematique === value);\r\n                          return <Chip key={value} label={theme?.nom || value} size=\"small\" />;\r\n                        })}\r\n                      </Box>\r\n                    )}\r\n                  >\r\n                    {loadingThematiques ? (\r\n                      <MenuItem disabled>Chargement des thématiques...</MenuItem>\r\n                    ) : thematiques.length === 0 ? (\r\n                      <MenuItem disabled>Aucune thématique disponible</MenuItem>\r\n                    ) : (\r\n                      Object.entries(\r\n                        thematiques.reduce((acc, theme) => {\r\n                          const fonction = theme.fonction_nom || 'Sans fonction';\r\n                          if (!acc[fonction]) acc[fonction] = [];\r\n                          acc[fonction].push(theme);\r\n                          return acc;\r\n                        }, {} as Record<string, Thematique[]>)\r\n                      ).map(([fonction, themes]) => [\r\n                        <ListSubheader key={fonction}>{fonction}</ListSubheader>,\r\n                        ...themes.map((theme) => (\r\n                          <MenuItem key={theme.id_thematique} value={theme.id_thematique}>\r\n                            <Checkbox checked={selectedThematiques.includes(theme.id_thematique)} />\r\n                            <ListItemText \r\n                              primary={theme.nom} \r\n                              secondary={theme.description} \r\n                            />\r\n                          </MenuItem>\r\n                        ))\r\n                      ]).flat()\r\n                    )}\r\n                  </Select>\r\n                  <FormHelperText>Sélectionnez une ou plusieurs thématiques</FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseQuestionnaireDialog}>Annuler</Button>\r\n          <Button \r\n            onClick={handleSubmitQuestionnaire} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={!questionnaireFormValues.nom.trim() || selectedThematiques.length === 0}\r\n          >\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression */}\r\n      <Dialog open={openDeleteDialog} onClose={handleCloseDeleteDialog}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer le questionnaire \"{selectedQuestionnaire?.nom || 'Sans titre'}\" ?\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDeleteDialog}>Annuler</Button>\r\n          <Button onClick={handleDeleteQuestionnaire} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Notification */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionnaireAdmin;","import React from 'react';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { fr } from 'date-fns/locale';\r\nimport { TextField, TextFieldProps } from '@mui/material';\r\n\r\ninterface DatePickerWrapperProps {\r\n  label: string;\r\n  value: Date | null;\r\n  onChange: (date: Date | null) => void;\r\n  minDate?: Date;\r\n  maxDate?: Date;\r\n  disabled?: boolean;\r\n  fullWidth?: boolean;\r\n  required?: boolean;\r\n  helperText?: string;\r\n  textFieldProps?: Partial<TextFieldProps>;\r\n}\r\n\r\n/**\r\n * Composant wrapper pour le DatePicker de MUI qui gère la configuration de l'adaptateur\r\n * Ceci facilite l'utilisation cohérente des DatePickers dans l'application\r\n */\r\nconst DatePickerWrapper: React.FC<DatePickerWrapperProps> = ({\r\n  label,\r\n  value,\r\n  onChange,\r\n  minDate,\r\n  maxDate,\r\n  disabled = false,\r\n  fullWidth = true,\r\n  required = false,\r\n  helperText,\r\n  textFieldProps = {}\r\n}) => {\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={fr}>\r\n      <DatePicker\r\n        label={label}\r\n        value={value}\r\n        onChange={onChange}\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        disabled={disabled}\r\n        slotProps={{\r\n          textField: {\r\n            fullWidth,\r\n            required,\r\n            helperText,\r\n            ...textFieldProps\r\n          }\r\n        }}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default DatePickerWrapper;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\nimport { \r\n  Container, \r\n  Grid, \r\n  Paper, \r\n  Typography, \r\n  Box, \r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport { \r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Assessment as AssessmentIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DatePickerWrapper from '../../../components/common/DataPickerWrapper';\r\n\r\n// Types\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n  statut: string;\r\n  type: string;\r\n  hebergement: string;\r\n  architecture_logicielle: string;\r\n  date_mise_en_prod?: string;\r\n  editeur?: string;\r\n  language?: string;\r\n  description?: string;\r\n}\r\n\r\ninterface FormValues {\r\n  nom_application: string;\r\n  statut: string;\r\n  type: string;\r\n  hebergement: string;\r\n  architecture_logicielle: string;\r\n  date_mise_en_prod?: string;\r\n  editeur?: string;\r\n  language?: string;\r\n  description?: string;\r\n}\r\n\r\nconst initialFormValues: FormValues = {\r\n  nom_application: '',\r\n  statut: 'Projet',\r\n  type: 'Build',\r\n  hebergement: 'Cloud',\r\n  architecture_logicielle: 'MVC',\r\n  date_mise_en_prod: undefined,\r\n  editeur: '',\r\n  language: '',\r\n  description: ''\r\n};\r\n\r\nconst Applications: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n  const [currentApplication, setCurrentApplication] = useState<Application | null>(null);\r\n  const [formValues, setFormValues] = useState<FormValues>(initialFormValues);\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState<boolean>(false);\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchApplications();\r\n  }, []);\r\n\r\n  const fetchApplications = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n      const response = await api.get('applications');\r\n      \r\n      // Vérifier si la réponse est un tableau ou si elle a une propriété data qui est un tableau\r\n      if (Array.isArray(response)) {\r\n        setApplications(response);\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        setApplications(response.data);\r\n      } else {\r\n        console.warn('Format de réponse inattendu:', response);\r\n        setApplications([]);\r\n        setError('Format de données inattendu. Impossible de charger les applications.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des applications:', error);\r\n      setError('Impossible de charger les applications. Veuillez réessayer plus tard.');\r\n      setApplications([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleOpenCreateDialog = () => {\r\n    setDialogMode('create');\r\n    setFormValues(initialFormValues);\r\n    setSelectedDate(null);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleOpenEditDialog = (application: Application) => {\r\n    setDialogMode('edit');\r\n    setCurrentApplication(application);\r\n    setFormValues({\r\n      nom_application: application.nom_application,\r\n      statut: application.statut,\r\n      type: application.type,\r\n      hebergement: application.hebergement,\r\n      architecture_logicielle: application.architecture_logicielle,\r\n      date_mise_en_prod: application.date_mise_en_prod,\r\n      editeur: application.editeur || '',\r\n      language: application.language || '',\r\n      description: application.description || ''\r\n    });\r\n    \r\n    // Convertir la date si elle existe\r\n    if (application.date_mise_en_prod) {\r\n      setSelectedDate(new Date(application.date_mise_en_prod));\r\n    } else {\r\n      setSelectedDate(null);\r\n    }\r\n    \r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setCurrentApplication(null);\r\n  };\r\n\r\n  const handleFormChange = (event: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const name = event.target.name as keyof FormValues;\r\n    const value = event.target.value as string;\r\n    \r\n    setFormValues({\r\n      ...formValues,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    setSelectedDate(date);\r\n    if (date) {\r\n      const formattedDate = date.toISOString().split('T')[0];\r\n      setFormValues({\r\n        ...formValues,\r\n        date_mise_en_prod: formattedDate\r\n      });\r\n    } else {\r\n      setFormValues({\r\n        ...formValues,\r\n        date_mise_en_prod: undefined\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n        await api.post('applications', formValues);\r\n      } else if (dialogMode === 'edit' && currentApplication) {\r\n        // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n        await api.put(`applications/${currentApplication.id_application}`, formValues);\r\n      }\r\n      \r\n      fetchApplications();\r\n      handleCloseDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde de l\\'application:', error);\r\n      setError('Erreur lors de la sauvegarde de l\\'application. Veuillez réessayer.');\r\n    }\r\n  };\r\n\r\n  const handleOpenDeleteConfirm = (application: Application) => {\r\n    setCurrentApplication(application);\r\n    setDeleteConfirmOpen(true);\r\n  };\r\n\r\n  const handleCloseDeleteConfirm = () => {\r\n    setDeleteConfirmOpen(false);\r\n    setCurrentApplication(null);\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!currentApplication) return;\r\n    \r\n    try {\r\n      // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n      await api.delete(`applications/${currentApplication.id_application}`);\r\n      fetchApplications();\r\n      handleCloseDeleteConfirm();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de l\\'application:', error);\r\n      setError('Erreur lors de la suppression de l\\'application. Veuillez réessayer.');\r\n    }\r\n  };\r\n\r\n  const handleCalculateScore = (application: Application) => {\r\n    navigate(`/analyses/calculer/${application.id_application}`);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Gestion des applications\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleOpenCreateDialog}\r\n              >\r\n                Nouvelle Application\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des applications */}\r\n        <Grid xs={12}>\r\n          {applications.length === 0 ? (\r\n            <Alert severity=\"info\">\r\n              Aucune application trouvée. Créez votre première application en cliquant sur le bouton ci-dessus.\r\n            </Alert>\r\n          ) : (\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Nom</TableCell>\r\n                    <TableCell>Statut</TableCell>\r\n                    <TableCell>Type</TableCell>\r\n                    <TableCell>Hébergement</TableCell>\r\n                    <TableCell>Architecture</TableCell>\r\n                    <TableCell>Date mise en prod.</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {applications.map((app) => (\r\n                    <TableRow key={app.id_application} hover>\r\n                      <TableCell>{app.nom_application}</TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={app.statut} \r\n                          color={app.statut === 'Projet' ? 'info' : 'success'} \r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={app.type} \r\n                          color={app.type === 'Build' ? 'primary' : 'secondary'} \r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>{app.hebergement}</TableCell>\r\n                      <TableCell>{app.architecture_logicielle}</TableCell>\r\n                      <TableCell>\r\n                        {app.date_mise_en_prod \r\n                          ? new Date(app.date_mise_en_prod).toLocaleDateString('fr-FR') \r\n                          : 'Non définie'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <IconButton \r\n                          color=\"primary\" \r\n                          onClick={() => handleOpenEditDialog(app)}\r\n                          title=\"Modifier l'application\"\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton \r\n                          color=\"error\" \r\n                          onClick={() => handleOpenDeleteConfirm(app)}\r\n                          title=\"Supprimer l'application\"\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                        <IconButton \r\n                          color=\"info\" \r\n                          onClick={() => handleCalculateScore(app)}\r\n                          title=\"Calculer le score de maturité\"\r\n                        >\r\n                          <AssessmentIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialog pour créer/modifier */}\r\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer une nouvelle application' : 'Modifier l\\'application'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"nom_application\"\r\n                  name=\"nom_application\"\r\n                  label=\"Nom de l'application\"\r\n                  value={formValues.nom_application}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"statut-label\">Statut</InputLabel>\r\n                  <Select\r\n                    labelId=\"statut-label\"\r\n                    id=\"statut\"\r\n                    name=\"statut\"\r\n                    value={formValues.statut}\r\n                    label=\"Statut\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"Projet\">Projet</MenuItem>\r\n                    <MenuItem value=\"Run\">Run</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"type-label\">Type</InputLabel>\r\n                  <Select\r\n                    labelId=\"type-label\"\r\n                    id=\"type\"\r\n                    name=\"type\"\r\n                    value={formValues.type}\r\n                    label=\"Type\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"Build\">Build</MenuItem>\r\n                    <MenuItem value=\"Buy\">Buy</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"hebergement-label\">Hébergement</InputLabel>\r\n                  <Select\r\n                    labelId=\"hebergement-label\"\r\n                    id=\"hebergement\"\r\n                    name=\"hebergement\"\r\n                    value={formValues.hebergement}\r\n                    label=\"Hébergement\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"Cloud\">Cloud</MenuItem>\r\n                    <MenuItem value=\"Prem\">Prem</MenuItem>\r\n                    <MenuItem value=\"Hybrid\">Hybrid</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"architecture-label\">Architecture</InputLabel>\r\n                  <Select\r\n                    labelId=\"architecture-label\"\r\n                    id=\"architecture_logicielle\"\r\n                    name=\"architecture_logicielle\"\r\n                    value={formValues.architecture_logicielle}\r\n                    label=\"Architecture\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"ERP\">ERP</MenuItem>\r\n                    <MenuItem value=\"Multitenant SAAS\">Multitenant SAAS</MenuItem>\r\n                    <MenuItem value=\"MVC\">MVC</MenuItem>\r\n                    <MenuItem value=\"Monolithique\">Monolithique</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <DatePickerWrapper\r\n                  label=\"Date de mise en production\"\r\n                  value={selectedDate}\r\n                  onChange={handleDateChange}\r\n                  textFieldProps={{\r\n                    variant: 'outlined'\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"editeur\"\r\n                  name=\"editeur\"\r\n                  label=\"Éditeur\"\r\n                  value={formValues.editeur}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"language\"\r\n                  name=\"language\"\r\n                  label=\"Langage principal\"\r\n                  value={formValues.language}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  label=\"Description\"\r\n                  multiline\r\n                  rows={4}\r\n                  value={formValues.description}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Annuler</Button>\r\n          <Button \r\n            onClick={handleSubmit} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={!formValues.nom_application}\r\n          >\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression */}\r\n      <Dialog open={deleteConfirmOpen} onClose={handleCloseDeleteConfirm}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer l'application \"{currentApplication?.nom_application}\" ?\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDeleteConfirm}>Annuler</Button>\r\n          <Button onClick={handleDelete} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Applications;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\n\r\n  import {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Tabs,\r\n  Tab,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  Radar,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  BarChart,\r\n  Bar,\r\n  Cell\r\n} from 'recharts';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Organisation {\r\n  nom: string;\r\n  nombre_applications: number;\r\n  nombre_analyses: number;\r\n  score_moyen: number;\r\n}\r\n\r\ninterface Analyse {\r\n  idAnalyse: string;\r\n  idApplication: string;\r\n  nomApplication: string;\r\n  scoreGlobal: number;\r\n  interpretation: {\r\n    niveau: string;\r\n    description: string;\r\n    recommandations: string;\r\n  };\r\n  thematiques: {\r\n    thematique: string;\r\n    score: number;\r\n  }[];\r\n  dateAnalyse: string;\r\n}\r\n\r\ninterface ScoreMoyen {\r\n  thematique: string;\r\n  score: number;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`organization-tabpanel-${index}`}\r\n      aria-labelledby={`organization-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Générer des couleurs pour les graphiques\r\nconst COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042', '#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#a4de6c', '#d0ed57'];\r\n\r\n// Composant principal\r\nconst Organisations: React.FC = () => {\r\n  const { name } = useParams<{ name?: string }>();\r\n  const navigate = useNavigate();\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [organisations, setOrganisations] = useState<Organisation[]>([]);\r\n  const [analyses, setAnalyses] = useState<Analyse[]>([]);\r\n  const [scoresMoyens, setScoresMoyens] = useState<ScoreMoyen[]>([]);\r\n  const [selectedOrganisation, setSelectedOrganisation] = useState<string>('');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Charger les organisations et analyses\r\n  useEffect(() => {\r\n    fetchOrganisations().then(() => {\r\n      if (name) {\r\n        setSelectedOrganisation(name);\r\n        fetchAnalysesOrganisation(name);\r\n      }\r\n    });\r\n  }, [name]);\r\n\r\n  // Récupérer toutes les organisations uniques (extraites des acteurs)\r\n  const fetchOrganisations = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await api.get('acteurs');\r\n      \r\n      // Extraire les organisations uniques\r\n      const orgs = [...new Set(response.data.map((acteur: any) => acteur.organisation))].filter(Boolean);\r\n      \r\n      // Préparer les données statistiques des organisations\r\n      const organisationsData: Organisation[] = [];\r\n      \r\n      for (const org of orgs) {\r\n        // Pour chaque organisation, récupérer les statistiques\r\n        try {\r\n          const appCount = await api.get(`acteurs/organisation/${org}/applications/count`);\r\n          const analyses = await api.get(`interpretation/organisation/${org}`);\r\n          \r\n          const scoreTotal = analyses.data.reduce((sum: number, analyse: Analyse) => sum + analyse.scoreGlobal, 0);\r\n          const scoreMoyen = analyses.data.length > 0 ? scoreTotal / analyses.data.length : 0;\r\n          \r\n          organisationsData.push({\r\n            nom: org,\r\n            nombre_applications: appCount.data.count,\r\n            nombre_analyses: analyses.data.length,\r\n            score_moyen: scoreMoyen\r\n          });\r\n        } catch (error) {\r\n          console.error(`Erreur lors de la récupération des statistiques pour ${org}:`, error);\r\n        }\r\n      }\r\n      \r\n      setOrganisations(organisationsData);\r\n      \r\n      if (!name && organisationsData.length > 0) {\r\n        setSelectedOrganisation(organisationsData[0].nom);\r\n        fetchAnalysesOrganisation(organisationsData[0].nom);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des organisations:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Récupérer les analyses d'une organisation\r\n  const fetchAnalysesOrganisation = async (orgName: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const analysesResponse = await api.get(`interpretation/organisation/${orgName}`);\r\n      setAnalyses(analysesResponse.data);\r\n      \r\n      const scoresMoyensResponse = await api.get(`interpretation/organisation/${orgName}/scores-moyens`);\r\n      setScoresMoyens(scoresMoyensResponse.data);\r\n      \r\n      setTabValue(0);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des analyses:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Gérer le changement d'organisation\r\n  const handleOrganisationChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const orgName = event.target.value as string;\r\n    setSelectedOrganisation(orgName);\r\n    navigate(`/organisations/${orgName}`);\r\n  };\r\n\r\n  // Gérer le changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Formater les données pour le radar chart\r\n  const formatForRadarChart = (data: ScoreMoyen[]) => {\r\n    return data.map(item => ({\r\n      thematique: item.thematique,\r\n      score: item.score,\r\n      fullMark: 5\r\n    }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Analyse par Organisation\r\n              </Typography>\r\n              <FormControl sx={{ minWidth: 200 }}>\r\n                <InputLabel id=\"organisation-select-label\">Organisation</InputLabel>\r\n                <Select\r\n                  labelId=\"organisation-select-label\"\r\n                  id=\"organisation-select\"\r\n                  value={selectedOrganisation}\r\n                  onChange={handleOrganisationChange}\r\n                  label=\"Organisation\"\r\n                >\r\n                  {organisations.map((org) => (\r\n                    <MenuItem key={org.nom} value={org.nom}>\r\n                      {org.nom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Box>\r\n            \r\n            {/* Statistiques de l'organisation sélectionnée */}\r\n            {selectedOrganisation && (\r\n              <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                <Grid xs={12} md={4}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" align=\"center\">\r\n                        {organisations.find(org => org.nom === selectedOrganisation)?.nombre_applications || 0}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" align=\"center\">\r\n                        Applications\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid xs={12} md={4}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" align=\"center\">\r\n                        {organisations.find(org => org.nom === selectedOrganisation)?.nombre_analyses || 0}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" align=\"center\">\r\n                        Analyses\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid xs={12} md={4}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" align=\"center\">\r\n                        {(organisations.find(org => org.nom === selectedOrganisation)?.score_moyen || 0).toFixed(2)}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" align=\"center\">\r\n                        Score Moyen\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Onglets */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ width: '100%' }}>\r\n            <Tabs\r\n              value={tabValue}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"Vue d'ensemble\" />\r\n              <Tab label=\"Scores par Thématique\" />\r\n              <Tab label=\"Applications\" />\r\n            </Tabs>\r\n\r\n            {/* Onglet Vue d'ensemble */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Grid container spacing={3}>\r\n                {/* Radar Chart pour les scores par thématique */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Scores moyens par thématique\" />\r\n                    <CardContent>\r\n                      {scoresMoyens.length > 0 ? (\r\n                        <ResponsiveContainer width=\"100%\" height={400}>\r\n                          <RadarChart outerRadius={150} data={formatForRadarChart(scoresMoyens)}>\r\n                            <PolarGrid />\r\n                            <PolarAngleAxis dataKey=\"thematique\" />\r\n                            <PolarRadiusAxis domain={[0, 5]} />\r\n                            <Radar\r\n                              name=\"Score\"\r\n                              dataKey=\"score\"\r\n                              stroke=\"#8884d8\"\r\n                              fill=\"#8884d8\"\r\n                              fillOpacity={0.6}\r\n                            />\r\n                            <Legend />\r\n                          </RadarChart>\r\n                        </ResponsiveContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                {/* Bar Chart pour les scores globaux par application */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Scores globaux par application\" />\r\n                    <CardContent>\r\n                      {analyses.length > 0 ? (\r\n                        <ResponsiveContainer width=\"100%\" height={400}>\r\n                          <BarChart\r\n                            data={analyses.map(analyse => ({\r\n                              name: analyse.nomApplication,\r\n                              score: analyse.scoreGlobal\r\n                            }))}\r\n                            margin={{ top: 5, right: 30, left: 20, bottom: 100 }}\r\n                          >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis \r\n                              dataKey=\"name\" \r\n                              tick={{ angle: -45, textAnchor: 'end' }}\r\n                              height={100}\r\n                            />\r\n                            <YAxis domain={[0, 5]} />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"score\" name=\"Score Global\">\r\n                              {analyses.map((entry, index) => (\r\n                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                              ))}\r\n                            </Bar>\r\n                          </BarChart>\r\n                        </ResponsiveContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                {/* Statistiques par niveau de maturité */}\r\n                <Grid xs={12}>\r\n                  <Card>\r\n                    <CardHeader title=\"Répartition par niveau de maturité\" />\r\n                    <CardContent>\r\n                      {analyses.length > 0 ? (\r\n                        <>\r\n                          <Grid container spacing={2}>\r\n                            {Array.from(new Set(analyses.map(a => a.interpretation.niveau))).map((niveau, index) => {\r\n                              const count = analyses.filter(a => a.interpretation.niveau === niveau).length;\r\n                              const percentage = (count / analyses.length * 100).toFixed(1);\r\n                              \r\n                              return (\r\n                                <Grid xs={6} md={3} key={niveau}>\r\n                                  <Card variant=\"outlined\">\r\n                                    <CardContent sx={{ textAlign: 'center' }}>\r\n                                      <Typography variant=\"h6\" gutterBottom>\r\n                                        {niveau}\r\n                                      </Typography>\r\n                                      <Typography variant=\"h4\" color={COLORS[index % COLORS.length]}>\r\n                                        {count}\r\n                                      </Typography>\r\n                                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                        {percentage}% des applications\r\n                                      </Typography>\r\n                                    </CardContent>\r\n                                  </Card>\r\n                                </Grid>\r\n                              );\r\n                            })}\r\n                          </Grid>\r\n                        </>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Scores par Thématique */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Grid container spacing={3}>\r\n                {/* Tableau des scores moyens par thématique */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Scores moyens par thématique\" />\r\n                    <CardContent>\r\n                      {scoresMoyens.length > 0 ? (\r\n                        <TableContainer>\r\n                          <Table>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>Thématique</TableCell>\r\n                                <TableCell>Score Moyen</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {scoresMoyens.map((score) => (\r\n                                <TableRow key={score.thematique}>\r\n                                  <TableCell>{score.thematique}</TableCell>\r\n                                  <TableCell>\r\n                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                      <Box width=\"50px\" mr={1}>\r\n                                        {score.score.toFixed(2)}\r\n                                      </Box>\r\n                                      <Box flex={1} mr={1}>\r\n                                        <div style={{ \r\n                                          height: '10px', \r\n                                          width: `${score.score / 5 * 100}%`, \r\n                                          backgroundColor: '#8884d8',\r\n                                          borderRadius: '5px'\r\n                                        }} />\r\n                                      </Box>\r\n                                      <Box width=\"30px\">\r\n                                        <Chip \r\n                                          label={score.score >= 4 ? 'A' : \r\n                                                score.score >= 3 ? 'B' : \r\n                                                score.score >= 2 ? 'C' : \r\n                                                score.score >= 1 ? 'D' : 'E'}\r\n                                          size=\"small\"\r\n                                          color={score.score >= 4 ? 'success' : \r\n                                                 score.score >= 3 ? 'info' : \r\n                                                 score.score >= 2 ? 'warning' : \r\n                                                 'error'}\r\n                                        />\r\n                                      </Box>\r\n                                    </Box>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                {/* Détail des applications par thématique */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Détail par application et thématique\" />\r\n                    <CardContent>\r\n                      {scoresMoyens.length > 0 ? (\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                          <Table stickyHeader>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>Application</TableCell>\r\n                                <TableCell>Thématique</TableCell>\r\n                                <TableCell>Score</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {analyses.flatMap((analyse) => \r\n                                analyse.thematiques.map((theme) => (\r\n                                  <TableRow key={`${analyse.idAnalyse}-${theme.thematique}`}>\r\n                                    <TableCell>{analyse.nomApplication}</TableCell>\r\n                                    <TableCell>{theme.thematique}</TableCell>\r\n                                    <TableCell>\r\n                                      <Box display=\"flex\" alignItems=\"center\">\r\n                                        <Box width=\"30px\" mr={1}>\r\n                                          {theme.score.toFixed(1)}\r\n                                        </Box>\r\n                                        <Box flex={1}>\r\n                                          <div style={{ \r\n                                            height: '8px', \r\n                                            width: `${theme.score / 5 * 100}%`, \r\n                                            backgroundColor: '#82ca9d',\r\n                                            borderRadius: '4px'\r\n                                          }} />\r\n                                        </Box>\r\n                                      </Box>\r\n                                    </TableCell>\r\n                                  </TableRow>\r\n                                ))\r\n                              )}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Applications */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Grid container spacing={3}>\r\n                {/* Liste des applications */}\r\n                <Grid xs={12}>\r\n                  <TableContainer component={Paper}>\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Application</TableCell>\r\n                          <TableCell>Score Global</TableCell>\r\n                          <TableCell>Niveau de Maturité</TableCell>\r\n                          <TableCell>Date d'Analyse</TableCell>\r\n                          <TableCell>Actions</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {analyses.map((analyse) => (\r\n                          <TableRow key={analyse.idAnalyse} hover>\r\n                            <TableCell>{analyse.nomApplication}</TableCell>\r\n                            <TableCell>\r\n                              <Box display=\"flex\" alignItems=\"center\">\r\n                                <Box width=\"50px\" mr={1}>\r\n                                  {analyse.scoreGlobal.toFixed(2)}\r\n                                </Box>\r\n                                <Box flex={1}>\r\n                                  <div style={{ \r\n                                    height: '10px', \r\n                                    width: `${analyse.scoreGlobal / 5 * 100}%`,\r\n                                    backgroundColor: COLORS[analyses.indexOf(analyse) % COLORS.length],\r\n                                    borderRadius: '5px'\r\n                                  }} />\r\n                                </Box>\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Chip \r\n                                label={analyse.interpretation.niveau} \r\n                                color={\r\n                                  analyse.scoreGlobal >= 4 ? 'success' : \r\n                                  analyse.scoreGlobal >= 3 ? 'info' : \r\n                                  analyse.scoreGlobal >= 2 ? 'warning' : \r\n                                  'error'\r\n                                }\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              {new Date(analyse.dateAnalyse).toLocaleDateString('fr-FR')}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Button \r\n                                variant=\"outlined\" \r\n                                size=\"small\"\r\n                                onClick={() => navigate(`/analyses-interpretations/${analyse.idAnalyse}`)}\r\n                              >\r\n                                Détails\r\n                              </Button>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Organisations;","// src/pages/dashboard/CalculateScore.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Alert,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Calculate as CalculateIcon,\r\n} from '@mui/icons-material';\r\nimport api from '../../services/api';\r\n\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n  statut: string;\r\n  type: string;\r\n  hebergement: string;\r\n  architecture_logicielle: string;\r\n}\r\n\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_application: string;\r\n  id_questionnaire: string;\r\n  id_acteur: string;\r\n  statut: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n  titre?: string;\r\n  questionnaire_titre?: string;\r\n  acteur_nom?: string;\r\n}\r\n\r\nconst CalculateScore: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [calculating, setCalculating] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [application, setApplication] = useState<Application | null>(null);\r\n  const [formulaires, setFormulaires] = useState<Formulaire[]>([]);\r\n  const [activeStep, setActiveStep] = useState<number>(0);\r\n\r\n  // Étapes du processus\r\n  const steps = [\r\n    'Vérification des formulaires',\r\n    'Calcul des scores',\r\n    'Génération de l\\'analyse'\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchApplicationData = async () => {\r\n      if (!id) {\r\n        setError(\"Identifiant de l'application manquant\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // Récupérer les informations de l'application\r\n        const appResponse = await api.get(`applications/${id}`);\r\n        if (appResponse) {\r\n          setApplication(appResponse);\r\n        }\r\n\r\n        // Récupérer tous les formulaires puis filtrer par id_application\r\n        // Puisque la route formulaires/application/:id n'existe pas\r\n        const formResponse = await api.get(`formulaires`);\r\n        \r\n        let formsData: Formulaire[] = [];\r\n        if (Array.isArray(formResponse)) {\r\n          formsData = formResponse.filter(form => form.id_application === id);\r\n        } else if (formResponse && formResponse.data && Array.isArray(formResponse.data)) {\r\n          formsData = formResponse.data.filter(form => form.id_application === id);\r\n        }\r\n        \r\n        setFormulaires(formsData);\r\n        setActiveStep(0);\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n        setError('Erreur lors du chargement des données. Veuillez réessayer plus tard.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchApplicationData();\r\n  }, [id]);\r\n\r\n  const handleCalculateScore = async () => {\r\n    if (!id) return;\r\n\r\n    setCalculating(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n\r\n    try {\r\n      // Première étape - Vérification des formulaires\r\n      setActiveStep(0);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulation de traitement\r\n\r\n      // Deuxième étape - Calcul des scores\r\n      setActiveStep(1);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulation de traitement\r\n\r\n      // Appel à l'API pour calculer le score\r\n      // D'après le schéma SQL, on doit appeler un endpoint qui invoquera la procédure stockée\r\n      // calculer_scores_maturite avec le paramètre id_application\r\n      const response = await api.post('analyses', { id_application: id });\r\n\r\n      // Troisième étape - Génération de l'analyse\r\n      setActiveStep(2);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulation de traitement\r\n\r\n      setSuccess('Le score de maturité a été calculé avec succès!');\r\n      \r\n      // Rediriger vers la page d'analyse après 2 secondes\r\n      setTimeout(() => {\r\n        navigate(`/analyses-interpretations/${id}`);\r\n      }, 2000);\r\n    } catch (error) {\r\n      console.error('Erreur lors du calcul du score:', error);\r\n      setError('Une erreur est survenue lors du calcul du score. Veuillez réessayer plus tard.');\r\n    } finally {\r\n      setCalculating(false);\r\n    }\r\n  };\r\n\r\n  // Vérifier si l'application a des formulaires avec des réponses\r\n  const canCalculateScore = formulaires.length > 0;\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n              <Button\r\n                color=\"primary\"\r\n                startIcon={<ArrowBackIcon />}\r\n                onClick={() => navigate('/applications')}\r\n                sx={{ mr: 2 }}\r\n              >\r\n                Retour aux applications\r\n              </Button>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Calcul du Score de Maturité\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {application && (\r\n              <Typography variant=\"subtitle1\">\r\n                Application: <strong>{application.nom_application}</strong> | \r\n                Type: <strong>{application.type}</strong> | \r\n                Statut: <strong>{application.statut}</strong>\r\n              </Typography>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Messages d'erreur ou de succès */}\r\n        {error && (\r\n          <Grid xs={12}>\r\n            <Alert severity=\"error\">{error}</Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        {success && (\r\n          <Grid xs={12}>\r\n            <Alert severity=\"success\">{success}</Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Stepper */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Stepper activeStep={activeStep} alternativeLabel>\r\n              {steps.map((label) => (\r\n                <Step key={label}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Vérification des formulaires */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Formulaires disponibles pour l'analyse\r\n            </Typography>\r\n            <Divider sx={{ mb: 2 }} />\r\n\r\n            {formulaires.length > 0 ? (\r\n              <Box>\r\n                <Typography variant=\"body1\" mb={2}>\r\n                  {formulaires.length} formulaire(s) trouvé(s) pour cette application.\r\n                </Typography>\r\n                \r\n                <List>\r\n                  {formulaires.map((form, index) => (\r\n                    <ListItem key={form.id_formulaire || index} divider>\r\n                      <ListItemText\r\n                        primary={form.titre || form.questionnaire_titre || `Formulaire ${index + 1}`}\r\n                        secondary={`Statut: ${form.statut || 'Non défini'} | Dernière modification: ${\r\n                          form.date_modification ? \r\n                          new Date(form.date_modification).toLocaleDateString('fr-FR') : \r\n                          'Non disponible'\r\n                        }`}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Box>\r\n            ) : (\r\n              <Alert severity=\"warning\">\r\n                Aucun formulaire n'est disponible pour cette application. Le calcul du score de maturité nécessite au moins un formulaire complété.\r\n              </Alert>\r\n            )}\r\n            \r\n            <Box display=\"flex\" justifyContent=\"center\" mt={3}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<CalculateIcon />}\r\n                onClick={handleCalculateScore}\r\n                disabled={calculating || !canCalculateScore}\r\n                size=\"large\"\r\n              >\r\n                {calculating ? 'Calcul en cours...' : 'Calculer le Score de Maturité'}\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Explication */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Comment se déroule le calcul ?\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n              Le score de maturité est calculé à partir des réponses aux questionnaires liés à cette application. \r\n              Le processus évalue plusieurs thématiques et fournit un score global ainsi que des scores par domaine.\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              <strong>Note :</strong> Pour obtenir un score pertinent, assurez-vous que les formulaires ont été \r\n              complétés avec soin et reflètent fidèlement la maturité DevSecOps de l'application.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CalculateScore;","// pages/dashboard/forms/index.tsx - Version avec 2 onglets : Formulaires et Évaluations Maturité\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Alert,\r\n  CircularProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Button,\r\n  IconButton,\r\n  Chip,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Tooltip,\r\n  LinearProgress,\r\n  Card,\r\n  CardContent,\r\n  Snackbar,\r\n  Tabs,\r\n  Tab,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  StepContent,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  Refresh as RefreshIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  Assignment as AssignmentIcon,\r\n  Add as AddIcon,\r\n  FilterList as FilterIcon,\r\n  Speed as SpeedIcon,\r\n  Send as SendIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Assessment as AssessmentIcon,\r\n  Security as SecurityIcon,\r\n  Computer as ComputerIcon,\r\n  Storage as StorageIcon,\r\n  Code as CodeIcon,\r\n  Lightbulb as LightbulbIcon,\r\n  Link as LinkIcon,\r\n  Person as PersonIcon,\r\n  Business as BusinessIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../../services/api';\r\nimport logger from '../../../utils/logger';\r\n\r\n// Types pour les formulaires (conservés)\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_acteur: string;\r\n  acteur_nom: string;\r\n  id_application: string;\r\n  nom_application: string;\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  id_questionnaire: string;\r\n  questionnaire_nom: string;\r\n  thematiques: string[];\r\n  fonctions: string[];\r\n  date_creation: string;\r\n  date_modification: string;\r\n  statut: 'Brouillon' | 'Soumis' | 'Validé';\r\n  progression: number;\r\n  total_questions?: number;\r\n  total_reponses?: number;\r\n  commentaires?: string;\r\n}\r\n\r\n// Types pour les évaluations de maturité\r\ninterface EvaluationMaturite {\r\n  id_evaluation: string;\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  id_acteur: string;\r\n  nom_acteur: string;\r\n  email_acteur: string;\r\n  statut: 'EN_COURS' | 'TERMINE' | 'ENVOYE';\r\n  date_debut: string;\r\n  date_soumission?: string;\r\n  date_fin?: string;\r\n  duree_evaluation?: number;\r\n  score_global?: number;\r\n  score_cybersecurite?: number;\r\n  score_maturite_digitale?: number;\r\n  score_gouvernance_donnees?: number;\r\n  score_devsecops?: number;\r\n  score_innovation_numerique?: number;\r\n  niveau_global?: string;\r\n  lien_evaluation?: string;\r\n}\r\n\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  email: string;\r\n  id_entreprise: string;\r\n  poste?: string;\r\n  actif: boolean;\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  secteur_activite?: string;\r\n  taille_entreprise?: string;\r\n  actif: boolean;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`tabpanel-${index}`}\r\n      aria-labelledby={`tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Forms: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  // État pour les onglets\r\n  const [currentTab, setCurrentTab] = useState(0);\r\n  \r\n  // États pour les formulaires (conservés)\r\n  const [formulaires, setFormulaires] = useState<Formulaire[]>([]);\r\n  const [fonctions, setFonctions] = useState<any[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n\r\n  // Etats pour le chargement des acteurs\r\n  const [loadingActeurs, setLoadingActeurs] = useState(false);\r\n  const [acteursError, setActeursError] = useState<string | null>(null);\r\n  \r\n  // États pour les évaluations de maturité\r\n  const [evaluations, setEvaluations] = useState<EvaluationMaturite[]>([]);\r\n  const [acteurs, setActeurs] = useState<Acteur[]>([]);\r\n  \r\n  // États généraux\r\n  const [loading, setLoading] = useState(true);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n  \r\n  // États pour les filtres formulaires (conservés)\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [fonctionFilter, setFonctionFilter] = useState('');\r\n  const [entrepriseFilter, setEntrepriseFilter] = useState('');\r\n  const [order, setOrder] = useState<'asc' | 'desc'>('desc');\r\n  const [orderBy, setOrderBy] = useState('date_modification');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  \r\n  // États pour les filtres évaluations\r\n  const [evalSearchTerm, setEvalSearchTerm] = useState('');\r\n  const [evalStatusFilter, setEvalStatusFilter] = useState('');\r\n  const [evalEntrepriseFilter, setEvalEntrepriseFilter] = useState('');\r\n  const [evalPage, setEvalPage] = useState(0);\r\n  const [evalRowsPerPage, setEvalRowsPerPage] = useState(10);\r\n  \r\n  // États pour la création d'évaluation\r\n  const [createEvalDialog, setCreateEvalDialog] = useState(false);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [selectedEntreprise, setSelectedEntreprise] = useState<string>('');\r\n  const [selectedActeurs, setSelectedActeurs] = useState<string[]>([]);\r\n  const [creatingEvaluation, setCreatingEvaluation] = useState(false);\r\n\r\n  // Configuration des fonctions de maturité\r\n  const fonctionsMaturiteConfig = {\r\n    cybersecurite: { label: 'Cybersécurité', icon: SecurityIcon, color: '#d32f2f' },\r\n    maturite_digitale: { label: 'Maturité Digitale', icon: ComputerIcon, color: '#1976d2' },\r\n    gouvernance_donnees: { label: 'Gouvernance Données', icon: StorageIcon, color: '#388e3c' },\r\n    devsecops: { label: 'DevSecOps', icon: CodeIcon, color: '#f57c00' },\r\n    innovation_numerique: { label: 'Innovation Numérique', icon: LightbulbIcon, color: '#7b1fa2' }\r\n  };\r\n\r\n  // Chargement des données\r\n  const fetchFormulaires = useCallback(async () => {\r\n    try {\r\n      const response = await api.get('formulaires');\r\n      const formulairesData = Array.isArray(response) ? response : response.data || [];\r\n      \r\n      const normalizedFormulaires = formulairesData.map(form => ({\r\n        id_formulaire: form.id_formulaire,\r\n        id_acteur: form.id_acteur || '',\r\n        acteur_nom: form.acteur_nom || 'Utilisateur inconnu',\r\n        id_application: form.id_application || '',\r\n        nom_application: form.nom_application || 'Application inconnue',\r\n        id_entreprise: form.id_entreprise || '',\r\n        nom_entreprise: form.nom_entreprise || 'Entreprise inconnue',\r\n        id_questionnaire: form.id_questionnaire || '',\r\n        questionnaire_nom: form.questionnaire_nom || form.nom || 'Questionnaire sans nom',\r\n        thematiques: Array.isArray(form.thematiques) ? form.thematiques :\r\n                    (form.thematiques ? form.thematiques.split(',').map(t => t.trim()) : []),\r\n        fonctions: Array.isArray(form.fonctions) ? form.fonctions :\r\n                  (form.fonctions ? form.fonctions.split(',').map(f => f.trim()) : []),\r\n        date_creation: form.date_creation || new Date().toISOString(),\r\n        date_modification: form.date_modification || form.date_creation || new Date().toISOString(),\r\n        statut: form.statut || 'Brouillon',\r\n        progression: Number(form.progression) ?? 0,\r\n        total_questions: form.total_questions || 0,\r\n        total_reponses: form.total_reponses || 0,\r\n        commentaires: form.commentaires || ''\r\n      }));\r\n      \r\n      setFormulaires(normalizedFormulaires);\r\n    } catch (error) {\r\n      console.error('Erreur chargement formulaires:', error);\r\n      setError('Erreur lors du chargement des formulaires');\r\n    }\r\n  }, []);\r\n\r\n  const fetchEvaluations = useCallback(async () => {\r\n    try {\r\n      // Utiliser le bon endpoint pour les évaluations de maturité globale\r\n      const response = await api.get('maturity-global/evaluations');\r\n      \r\n      // L'API retourne { evaluations: [...], pagination: {...} }\r\n      const evaluationsData = response.evaluations || [];\r\n      \r\n      const normalizedEvaluations = evaluationsData.map(evaluation => ({\r\n        ...evaluation,\r\n        // Mapper les champs si nécessaire\r\n        id_evaluation: evaluation.id_evaluation,\r\n        nom_entreprise: evaluation.nom_entreprise,\r\n        nom_acteur: evaluation.evaluateur_nom, // Mapping du nom de champ\r\n        email_acteur: evaluation.evaluateur_email, // Mapping du nom de champ\r\n        statut: evaluation.statut,\r\n        score_global: evaluation.score_global,\r\n        score_cybersecurite: evaluation.score_cybersecurite,\r\n        score_maturite_digitale: evaluation.score_maturite_digitale,\r\n        score_gouvernance_donnees: evaluation.score_gouvernance_donnees,\r\n        score_devsecops: evaluation.score_devsecops,\r\n        score_innovation_numerique: evaluation.score_innovation_numerique,\r\n        date_debut: evaluation.date_debut,\r\n        date_soumission: evaluation.date_soumission,\r\n        duree_evaluation: evaluation.duree_evaluation,\r\n        niveau_global: getNiveauFromScore(evaluation.score_global || 0)\r\n      }));\r\n      \r\n      setEvaluations(normalizedEvaluations);\r\n    } catch (error) {\r\n      console.error('Erreur chargement évaluations:', error);\r\n      // Si l'endpoint n'existe pas encore, ne pas afficher d'erreur\r\n      if (error.response?.status === 404) {\r\n        setEvaluations([]); // Tableau vide pour l'instant\r\n        console.info('Endpoint évaluations de maturité pas encore disponible');\r\n      } else {\r\n        setError('Erreur lors du chargement des évaluations');\r\n      }\r\n    }\r\n  }, []);\r\n\r\nconst fetchEntreprises = useCallback(async () => {\r\n  try {\r\n    console.log('🏢 Chargement des entreprises via /api/entreprises...');\r\n    \r\n    // ✅ Appel explicite à la route entreprises\r\n    const response = await api.get('entreprises');\r\n    console.log('📋 Réponse brute:', response);\r\n    \r\n    // ✅ Gestion robuste de la réponse\r\n    let entreprisesData = [];\r\n    \r\n    if (Array.isArray(response)) {\r\n      entreprisesData = response;\r\n    } else if (response.data && Array.isArray(response.data)) {\r\n      entreprisesData = response.data;\r\n    } else if (response && typeof response === 'object') {\r\n      // Si c'est un objet avec des propriétés d'entreprise\r\n      entreprisesData = [response];\r\n    } else {\r\n      console.warn('⚠️ Format de réponse inattendu:', typeof response);\r\n      entreprisesData = [];\r\n    }\r\n    \r\n    console.log(`📊 ${entreprisesData.length} entreprise(s) trouvée(s)`);\r\n    \r\n    // ✅ Filtrage sécurisé des entreprises actives\r\n    const entreprisesActives = entreprisesData.filter(entreprise => {\r\n      // Vérifier que l'entreprise a les champs requis\r\n      const isValid = entreprise && \r\n                     entreprise.id_entreprise && \r\n                     entreprise.nom_entreprise;\r\n      \r\n      // Vérifier le statut actif (avec fallback si le champ n'existe pas)\r\n      const isActive = entreprise.actif !== false && \r\n                      entreprise.actif !== 0 && \r\n                      entreprise.statut !== 'INACTIF';\r\n      \r\n      return isValid && isActive;\r\n    });\r\n    \r\n    console.log(`✅ ${entreprisesActives.length} entreprise(s) active(s) filtrée(s)`);\r\n    console.log('📋 Entreprises disponibles:', entreprisesActives.map(e => ({\r\n      id: e.id_entreprise,\r\n      nom: e.nom_entreprise,\r\n      secteur: e.secteur,\r\n      actif: e.actif\r\n    })));\r\n    \r\n    setEntreprises(entreprisesActives);\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Erreur chargement entreprises:', error);\r\n    \r\n    // ✅ Diagnostic détaillé de l'erreur\r\n    if (error.response) {\r\n      console.error('📍 Détails erreur API:', {\r\n        status: error.response.status,\r\n        statusText: error.response.statusText,\r\n        url: error.config?.url,\r\n        data: error.response.data\r\n      });\r\n      \r\n      if (error.response.status === 404) {\r\n        setError('Route /api/entreprises non trouvée. Vérifiez que la route est montée dans server.js');\r\n      } else if (error.response.status === 500) {\r\n        setError('Erreur serveur lors du chargement des entreprises');\r\n      }\r\n    } else if (error.request) {\r\n      console.error('📍 Erreur réseau:', error.request);\r\n      setError('Impossible de contacter le serveur');\r\n    } else {\r\n      console.error('📍 Erreur configuration:', error.message);\r\n      setError('Erreur de configuration API');\r\n    }\r\n    \r\n    // ✅ Fallback avec données de démo pour le développement\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.warn('🔧 Mode développement : utilisation de données de démo');\r\n      setEntreprises([\r\n        {\r\n          id_entreprise: 'demo-entreprise-1',\r\n          nom_entreprise: 'Entreprise Démo 1',\r\n          secteur: 'Technologies',\r\n          taille_entreprise: 'PME',\r\n          actif: true,\r\n          score_global: 3.2\r\n        },\r\n        {\r\n          id_entreprise: 'demo-entreprise-2', \r\n          nom_entreprise: 'Entreprise Démo 2',\r\n          secteur: 'Services',\r\n          taille_entreprise: 'ETI',\r\n          actif: true,\r\n          score_global: 2.8\r\n        }\r\n      ]);\r\n    }\r\n  }\r\n}, []);\r\n\r\n  const fetchActeurs = useCallback(async (entrepriseId: string) => {\r\n    if (!entrepriseId) {\r\n      setActeurs([]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(`🔍 Chargement des acteurs pour l'entreprise ${entrepriseId}...`);\r\n      \r\n      // Utiliser l'endpoint principal que nous avons créé\r\n      const response = await api.get(`acteurs/entreprise/${entrepriseId}`);\r\n      \r\n      console.log('📋 Réponse acteurs:', response);\r\n      \r\n      // Gérer la structure de réponse de notre endpoint\r\n      let acteursData = [];\r\n      \r\n      if (response.success && response.data) {\r\n        // Structure de réponse de notre endpoint : { success: true, data: [...], metadata: {...} }\r\n        acteursData = response.data;\r\n        console.log(`✅ ${response.metadata?.count || acteursData.length} acteur(s) trouvé(s)`);\r\n      } else if (Array.isArray(response)) {\r\n        // Fallback si la réponse est directement un tableau\r\n        acteursData = response;\r\n      } else if (response.data && Array.isArray(response.data)) {\r\n        // Autre format possible\r\n        acteursData = response.data;\r\n      } else {\r\n        console.warn('⚠️ Format de réponse inattendu:', response);\r\n        acteursData = [];\r\n      }\r\n      \r\n      // Filtrer les acteurs actifs et valides\r\n      const acteursValides = acteursData.filter(acteur => {\r\n        const isValid = acteur && \r\n                       acteur.id_acteur && \r\n                       acteur.nom_prenom && \r\n                       acteur.email;\r\n        \r\n        const isActive = acteur.actif !== false;\r\n        \r\n        return isValid && isActive;\r\n      });\r\n      \r\n      console.log(`📊 ${acteursValides.length} acteur(s) actif(s) après filtrage`);\r\n      setActeurs(acteursValides);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Erreur lors du chargement des acteurs:', error);\r\n      \r\n      // Gestion détaillée des erreurs\r\n      if (error.response?.status === 404) {\r\n        console.warn('📍 Endpoint acteurs/entreprise non trouvé - essai d\\'un fallback');\r\n        \r\n        try {\r\n          // Fallback 1: Essayer l'endpoint entreprises/{id}/acteurs\r\n          const fallbackResponse = await api.get(`entreprises/${entrepriseId}/acteurs`);\r\n          const fallbackData = Array.isArray(fallbackResponse) ? fallbackResponse : fallbackResponse.data || [];\r\n          setActeurs(fallbackData.filter(acteur => acteur.actif !== false));\r\n          console.log('✅ Fallback réussi avec endpoint entreprises/{id}/acteurs');\r\n          return;\r\n        } catch (fallbackError) {\r\n          console.warn('📍 Fallback 1 échoué, tentative fallback 2');\r\n          \r\n          try {\r\n            // Fallback 2: Récupérer tous les acteurs et filtrer côté client\r\n            const allActeursResponse = await api.get('acteurs');\r\n            const allActeurs = Array.isArray(allActeursResponse) ? allActeursResponse : allActeursResponse.data || [];\r\n            const filteredActeurs = allActeurs.filter(acteur => \r\n              acteur.id_entreprise === entrepriseId && acteur.actif !== false\r\n            );\r\n            setActeurs(filteredActeurs);\r\n            console.log(`✅ Fallback 2 réussi: ${filteredActeurs.length} acteur(s) filtré(s)`);\r\n            return;\r\n          } catch (finalError) {\r\n            console.warn('📍 Tous les fallbacks ont échoué - mode démo');\r\n            // Mode démo uniquement si tous les endpoints échouent\r\n            setActeurs([\r\n              {\r\n                id_acteur: `demo-1-${entrepriseId}`,\r\n                nom_prenom: 'Utilisateur Démo 1',\r\n                email: 'demo1@entreprise.com',\r\n                id_entreprise: entrepriseId,\r\n                poste: 'Responsable IT',\r\n                actif: true\r\n              },\r\n              {\r\n                id_acteur: `demo-2-${entrepriseId}`,\r\n                nom_prenom: 'Utilisateur Démo 2', \r\n                email: 'demo2@entreprise.com',\r\n                id_entreprise: entrepriseId,\r\n                poste: 'DSI',\r\n                actif: true\r\n              }\r\n            ]);\r\n            console.warn('🔧 Mode démo activé avec des données fictives');\r\n          }\r\n        }\r\n      } else if (error.response?.status === 403) {\r\n        console.error('🚫 Accès non autorisé à cette entreprise');\r\n        setError('Vous n\\'avez pas accès aux acteurs de cette entreprise');\r\n        setActeurs([]);\r\n      } else if (error.response?.status === 500) {\r\n        console.error('🔥 Erreur serveur lors du chargement des acteurs');\r\n        setError('Erreur serveur lors du chargement des acteurs');\r\n        setActeurs([]);\r\n      } else {\r\n        console.error('🌐 Erreur réseau ou inconnue');\r\n        setError('Erreur lors du chargement des acteurs');\r\n        setActeurs([]);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Fonction pour rafraîchir les acteurs d'une entreprise\r\n  const refreshActeurs = useCallback((entrepriseId: string) => {\r\n    if (entrepriseId) {\r\n      console.log(`🔄 Actualisation des acteurs pour l'entreprise ${entrepriseId}`);\r\n      fetchActeurs(entrepriseId);\r\n    }\r\n  }, [fetchActeurs]);\r\n\r\n  // Fonction pour vérifier la disponibilité de l'endpoint\r\n  const checkActeursEndpoint = useCallback(async () => {\r\n    try {\r\n      // Test avec un ID fictif pour vérifier si l'endpoint existe\r\n      await api.get('acteurs/entreprise/test-endpoint-availability');\r\n    } catch (error) {\r\n      if (error.response?.status === 404 && error.response?.data?.message?.includes('Entreprise non trouvée')) {\r\n        console.log('✅ Endpoint acteurs/entreprise disponible');\r\n        return true;\r\n      } else if (error.response?.status === 404) {\r\n        console.warn('⚠️ Endpoint acteurs/entreprise non disponible');\r\n        return false;\r\n      }\r\n    }\r\n    return false;\r\n  }, []);\r\n\r\n  const fetchFonctions = useCallback(async () => {\r\n    try {\r\n      const response = await api.get('fonctions');\r\n      setFonctions(Array.isArray(response) ? response : response.data || []);\r\n    } catch (error) {\r\n      console.error('Erreur chargement fonctions:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Chargement initial\r\n  useEffect(() => {\r\n    const loadAllData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        await Promise.all([\r\n          fetchFormulaires(),\r\n          fetchEvaluations(),\r\n          fetchEntreprises(),\r\n          fetchFonctions()\r\n        ]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadAllData();\r\n  }, [fetchFormulaires, fetchEvaluations, fetchEntreprises, fetchFonctions]);\r\n\r\n  // Fonctions utilitaires\r\n  const getNiveauFromScore = (score: number): string => {\r\n    if (score >= 4.5) return 'Optimisé';\r\n    if (score >= 3.5) return 'Géré';\r\n    if (score >= 2.5) return 'Mesuré';\r\n    if (score >= 1.5) return 'Défini';\r\n    return 'Initial';\r\n  };\r\n\r\n  const getScoreColor = (score: number) => {\r\n    if (score >= 4) return 'success';\r\n    if (score >= 3) return 'warning';\r\n    if (score >= 2) return 'error';\r\n    return 'default';\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit'\r\n      });\r\n    } catch (e) {\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n\r\n  // Gestionnaire de changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setCurrentTab(newValue);\r\n  };\r\n\r\n  // Fonctions pour les formulaires (conservées)\r\n  const handleRefresh = () => {\r\n    setRefreshing(true);\r\n    if (currentTab === 0) {\r\n      fetchFormulaires().finally(() => setRefreshing(false));\r\n    } else {\r\n      fetchEvaluations().finally(() => setRefreshing(false));\r\n    }\r\n  };\r\n\r\n  const filteredFormulaires = formulaires.filter(form => {\r\n    const matchesSearch = searchTerm === '' || \r\n      (form.questionnaire_nom && form.questionnaire_nom.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (form.nom_entreprise && form.nom_entreprise.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (form.acteur_nom && form.acteur_nom.toLowerCase().includes(searchTerm.toLowerCase()));\r\n    \r\n    const matchesStatus = statusFilter === '' || form.statut === statusFilter;\r\n    const matchesFonction = fonctionFilter === '' || (form.fonctions && form.fonctions.includes(fonctionFilter));\r\n    const matchesEntreprise = entrepriseFilter === '' || form.id_entreprise === entrepriseFilter;\r\n    \r\n    return matchesSearch && matchesStatus && matchesFonction && matchesEntreprise;\r\n  });\r\n\r\n  // Fonctions pour les évaluations de maturité\r\n  const filteredEvaluations = evaluations.filter(evaluation => {\r\n    const matchesSearch = evalSearchTerm === '' ||\r\n      evaluation.nom_entreprise.toLowerCase().includes(evalSearchTerm.toLowerCase()) ||\r\n      evaluation.nom_acteur.toLowerCase().includes(evalSearchTerm.toLowerCase()) ||\r\n      evaluation.email_acteur.toLowerCase().includes(evalSearchTerm.toLowerCase());\r\n    \r\n    const matchesStatus = evalStatusFilter === '' || evaluation.statut === evalStatusFilter;\r\n    const matchesEntreprise = evalEntrepriseFilter === '' || evaluation.id_entreprise === evalEntrepriseFilter;\r\n    \r\n    return matchesSearch && matchesStatus && matchesEntreprise;\r\n  });\r\n\r\n  // Création d'évaluations\r\n  const handleCreateEvaluation = () => {\r\n    setCreateEvalDialog(true);\r\n    setCurrentStep(0);\r\n    setSelectedEntreprise('');\r\n    setSelectedActeurs([]);\r\n  };\r\n\r\n const handleEntrepriseSelection = async (entrepriseId: string) => {\r\n    console.log(`🏢 Sélection entreprise: ${entrepriseId}`);\r\n    \r\n    setSelectedEntreprise(entrepriseId);\r\n    setSelectedActeurs([]);\r\n    setActeursError(null);\r\n    \r\n    if (entrepriseId) {\r\n      setLoadingActeurs(true);\r\n      \r\n      try {\r\n        // Utiliser notre nouvelle fonction fetchActeurs\r\n        await fetchActeurs(entrepriseId);\r\n        \r\n        // Log pour le debugging\r\n        const entrepriseNom = entreprises.find(e => e.id_entreprise === entrepriseId)?.nom_entreprise;\r\n        console.log(`✅ Acteurs chargés pour l'entreprise: ${entrepriseNom}`);\r\n        \r\n      } catch (error) {\r\n        console.error('❌ Erreur lors du chargement des acteurs:', error);\r\n        setActeursError('Erreur lors du chargement des acteurs');\r\n      } finally {\r\n        setLoadingActeurs(false);\r\n      }\r\n    } else {\r\n      // Réinitialiser si aucune entreprise sélectionnée\r\n      setActeurs([]);\r\n    }\r\n  };\r\n\r\n   // Fonction pour valider la configuration de l'endpoint\r\n  const validateActeursEndpoint = useCallback(async () => {\r\n    try {\r\n      console.log('🔍 Validation de l\\'endpoint acteurs...');\r\n      \r\n      // Tester avec une entreprise existante si disponible\r\n      const testEntrepriseId = entreprises[0]?.id_entreprise;\r\n      if (testEntrepriseId) {\r\n        const response = await api.get(`acteurs/entreprise/${testEntrepriseId}`);\r\n        \r\n        if (response.success) {\r\n          console.log('✅ Endpoint /api/acteurs/entreprise/:id configuré correctement');\r\n          return { \r\n            available: true, \r\n            message: 'Endpoint configuré et fonctionnel',\r\n            responseStructure: response \r\n          };\r\n        }\r\n      }\r\n      \r\n      return { \r\n        available: false, \r\n        message: 'Endpoint disponible mais structure de réponse inattendue' \r\n      };\r\n      \r\n    } catch (error) {\r\n      console.warn('⚠️ Endpoint /api/acteurs/entreprise/:id non disponible:', error.message);\r\n      \r\n      if (error.response?.status === 404) {\r\n        return { \r\n          available: false, \r\n          message: 'Endpoint non configuré - fallbacks seront utilisés',\r\n          error: 'Route non trouvée'\r\n        };\r\n      } else if (error.response?.status === 403) {\r\n        return { \r\n          available: false, \r\n          message: 'Problème de permissions d\\'accès',\r\n          error: 'Accès refusé'\r\n        };\r\n      }\r\n      \r\n      return { \r\n        available: false, \r\n        message: 'Erreur lors de la validation de l\\'endpoint',\r\n        error: error.message \r\n      };\r\n    }\r\n  }, [entreprises]);\r\n\r\n  // Fonction pour diagnostiquer les problèmes d'acteurs\r\n  const diagnoseActeursIssues = useCallback(async (entrepriseId: string) => {\r\n    const diagnosis = {\r\n      endpointAvailable: false,\r\n      hasPermissions: false,\r\n      entrepriseExists: false,\r\n      hasActeurs: false,\r\n      recommendations: []\r\n    };\r\n\r\n    try {\r\n      // 1. Vérifier si l'entreprise existe\r\n      const entreprise = entreprises.find(e => e.id_entreprise === entrepriseId);\r\n      diagnosis.entrepriseExists = !!entreprise;\r\n      \r\n      if (!diagnosis.entrepriseExists) {\r\n        diagnosis.recommendations.push('Vérifiez que l\\'entreprise existe dans la base de données');\r\n      }\r\n\r\n      // 2. Tester l'endpoint principal\r\n      try {\r\n        const response = await api.get(`acteurs/entreprise/${entrepriseId}`);\r\n        diagnosis.endpointAvailable = true;\r\n        diagnosis.hasPermissions = true;\r\n        diagnosis.hasActeurs = response.data?.length > 0;\r\n        \r\n        if (!diagnosis.hasActeurs) {\r\n          diagnosis.recommendations.push('Ajoutez des acteurs à cette entreprise');\r\n          diagnosis.recommendations.push('Vérifiez que les acteurs sont marqués comme actifs');\r\n        }\r\n      } catch (error) {\r\n        if (error.response?.status === 404) {\r\n          diagnosis.recommendations.push('Configurez la route /api/acteurs/entreprise/:id dans server.js');\r\n          diagnosis.recommendations.push('Vérifiez que le middleware d\\'authentification est configuré');\r\n        } else if (error.response?.status === 403) {\r\n          diagnosis.hasPermissions = false;\r\n          diagnosis.recommendations.push('Vérifiez les permissions d\\'accès aux acteurs');\r\n          diagnosis.recommendations.push('Contrôlez le middleware filterByEntreprise');\r\n        }\r\n      }\r\n\r\n      // 3. Tester les fallbacks\r\n      if (!diagnosis.endpointAvailable) {\r\n        try {\r\n          await api.get(`entreprises/${entrepriseId}/acteurs`);\r\n          diagnosis.recommendations.push('Endpoint alternatif entreprises/{id}/acteurs disponible');\r\n        } catch (error) {\r\n          try {\r\n            await api.get('acteurs');\r\n            diagnosis.recommendations.push('Endpoint acteurs global disponible (filtrage côté client possible)');\r\n          } catch (finalError) {\r\n            diagnosis.recommendations.push('Aucun endpoint acteurs disponible - mode démo sera utilisé');\r\n          }\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      diagnosis.recommendations.push(`Erreur de diagnostic: ${error.message}`);\r\n    }\r\n\r\n    console.log('🔍 Diagnostic des acteurs:', diagnosis);\r\n    return diagnosis;\r\n  }, [entreprises]);\r\n\r\n  // Fonction pour afficher les informations de debug dans la console\r\n  const logActeursDebugInfo = useCallback(() => {\r\n    console.group('🔧 Informations de debug - Acteurs');\r\n    console.log('📊 État actuel:');\r\n    console.log('  - Entreprise sélectionnée:', selectedEntreprise);\r\n    console.log('  - Nombre d\\'acteurs:', acteurs.length);\r\n    console.log('  - Acteurs sélectionnés:', selectedActeurs.length);\r\n    console.log('  - Chargement en cours:', loadingActeurs);\r\n    console.log('  - Erreur:', acteursError);\r\n    \r\n    console.log('📋 Acteurs disponibles:');\r\n    acteurs.forEach((acteur, index) => {\r\n      console.log(`  ${index + 1}. ${acteur.nom_prenom} (${acteur.email}) - ${acteur.id_acteur}`);\r\n    });\r\n    \r\n    console.log('🌐 Endpoints testés:');\r\n    console.log('  - Principal: /api/acteurs/entreprise/:id');\r\n    console.log('  - Fallback 1: /api/entreprises/:id/acteurs');\r\n    console.log('  - Fallback 2: /api/acteurs (avec filtrage)');\r\n    \r\n    console.groupEnd();\r\n  }, [selectedEntreprise, acteurs, selectedActeurs, loadingActeurs, acteursError]);\r\n\r\n  // Hook pour valider l'endpoint au chargement de la page\r\n  useEffect(() => {\r\n    if (entreprises.length > 0) {\r\n      validateActeursEndpoint().then(result => {\r\n        console.log('🔍 Résultat validation endpoint:', result);\r\n      });\r\n    }\r\n  }, [entreprises, validateActeursEndpoint]);\r\n\r\n  const handleActeurToggle = (acteurId: string) => {\r\n    setSelectedActeurs(prev => \r\n      prev.includes(acteurId) \r\n        ? prev.filter(id => id !== acteurId)\r\n        : [...prev, acteurId]\r\n    );\r\n  };\r\n\r\n  const generateEvaluationLinks = async () => {\r\n    if (!selectedEntreprise || selectedActeurs.length === 0) return;\r\n    \r\n    setCreatingEvaluation(true);\r\n    try {\r\n      const results = [];\r\n      \r\n      for (const acteurId of selectedActeurs) {\r\n        try {\r\n          // Utiliser le bon endpoint pour démarrer une évaluation\r\n          const response = await api.post('maturity-evaluation/start', {\r\n            id_entreprise: selectedEntreprise,\r\n            id_acteur: acteurId\r\n          });\r\n          \r\n          results.push({\r\n            acteurId,\r\n            success: true,\r\n            evaluationId: response.id_evaluation,\r\n            link: `${window.location.origin}/maturity-evaluation/${response.id_evaluation}`\r\n          });\r\n        } catch (error) {\r\n          results.push({\r\n            acteurId,\r\n            success: false,\r\n            error: error.response?.data?.message || 'Erreur inconnue'\r\n          });\r\n        }\r\n      }\r\n      \r\n      setSuccessMessage(`${results.filter(r => r.success).length} évaluation(s) créée(s) avec succès`);\r\n      setCreateEvalDialog(false);\r\n      fetchEvaluations();\r\n      \r\n    } catch (error) {\r\n      setError('Erreur lors de la création des évaluations');\r\n    } finally {\r\n      setCreatingEvaluation(false);\r\n    }\r\n  };\r\n\r\n  const handleViewEvaluation = (evaluation: EvaluationMaturite) => {\r\n    if (evaluation.statut === 'TERMINE') {\r\n      navigate(`/maturity-analysis/${evaluation.id_evaluation}`);\r\n    } else {\r\n      navigate(`/maturity-evaluation/${evaluation.id_evaluation}`);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress size={60} />\r\n        <Typography variant=\"body2\" sx={{ ml: 2 }}>\r\n          Chargement des données...\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\r\n      {/* Messages d'erreur et de succès */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError(null)}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Snackbar\r\n        open={!!successMessage}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSuccessMessage(null)}\r\n        message={successMessage}\r\n      />\r\n\r\n      {/* En-tête principal */}\r\n      <Paper sx={{ p: 2, mb: 3 }}>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Typography component=\"h1\" variant=\"h4\" color=\"primary\">\r\n            Gestion des Formulaires et Évaluations\r\n          </Typography>\r\n          <Box display=\"flex\" gap={2}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={handleRefresh}\r\n              disabled={refreshing}\r\n            >\r\n              Actualiser\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Onglets */}\r\n      <Paper sx={{ mb: 3 }}>\r\n        <Tabs value={currentTab} onChange={handleTabChange} indicatorColor=\"primary\">\r\n          <Tab \r\n            label=\"Formulaires d'Évaluation\" \r\n            icon={<AssignmentIcon />}\r\n            iconPosition=\"start\"\r\n          />\r\n          <Tab \r\n            label=\"Évaluations Maturité Globale\" \r\n            icon={<AssessmentIcon />}\r\n            iconPosition=\"start\"\r\n          />\r\n        </Tabs>\r\n\r\n        {/* Onglet Formulaires */}\r\n        <TabPanel value={currentTab} index={0}>\r\n          {/* Statistiques formulaires */}\r\n          <Grid container spacing={2} sx={{ mb: 3 }}>\r\n            <Grid size={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom>\r\n                    Total Formulaires\r\n                  </Typography>\r\n                  <Typography variant=\"h4\">{formulaires.length}</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid size={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom>\r\n                    Validés\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color=\"success.main\">\r\n                    {formulaires.filter(formulaire => formulaire.statut === 'Validé').length}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid size={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom>\r\n                    En Cours\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color=\"warning.main\">\r\n                    {formulaires.filter(formulaire => formulaire.statut === 'Soumis').length}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid size={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom>\r\n                    Brouillons\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color=\"info.main\">\r\n                    {formulaires.filter(formulaire => formulaire.statut === 'Brouillon').length}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* Filtres formulaires */}\r\n          <Paper sx={{ p: 2, mb: 2 }}>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n              <Grid size={12} md={3}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Rechercher\"\r\n                  variant=\"outlined\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid size={12} md={2}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Statut</InputLabel>\r\n                  <Select\r\n                    value={statusFilter}\r\n                    label=\"Statut\"\r\n                    onChange={(e) => setStatusFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Tous</MenuItem>\r\n                    <MenuItem value=\"Brouillon\">Brouillon</MenuItem>\r\n                    <MenuItem value=\"Soumis\">Soumis</MenuItem>\r\n                    <MenuItem value=\"Validé\">Validé</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid size={12} md={3}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Entreprise</InputLabel>\r\n                  <Select\r\n                    value={entrepriseFilter}\r\n                    label=\"Entreprise\"\r\n                    onChange={(e) => setEntrepriseFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Toutes</MenuItem>\r\n                    {entreprises.map((entreprise) => (\r\n                      <MenuItem key={entreprise.id_entreprise} value={entreprise.id_entreprise}>\r\n                        {entreprise.nom_entreprise}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid size={12} md={2}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => navigate('/formulaires/new')}\r\n                  fullWidth\r\n                >\r\n                  Nouveau\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n\r\n          {/* Tableau des formulaires (version simplifiée pour l'exemple) */}\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Questionnaire</TableCell>\r\n                  <TableCell>Entreprise</TableCell>\r\n                  <TableCell>Acteur</TableCell>\r\n                  <TableCell>Statut</TableCell>\r\n                  <TableCell>Progression</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {filteredFormulaires.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((formulaire) => (\r\n                  <TableRow key={formulaire.id_formulaire}>\r\n                    <TableCell>{formulaire.questionnaire_nom}</TableCell>\r\n                    <TableCell>{formulaire.nom_entreprise}</TableCell>\r\n                    <TableCell>{formulaire.acteur_nom}</TableCell>\r\n                    <TableCell>\r\n                      <Chip \r\n                        label={formulaire.statut} \r\n                        color={formulaire.statut === 'Validé' ? 'success' : formulaire.statut === 'Soumis' ? 'primary' : 'warning'}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{ minWidth: 120 }}>\r\n                        <Typography variant=\"body2\" sx={{ mb: 0.5 }}>\r\n                          {formulaire.progression}%\r\n                        </Typography>\r\n                        <LinearProgress \r\n                          variant=\"determinate\" \r\n                          value={formulaire.progression} \r\n                          sx={{ height: 6, borderRadius: 3 }}\r\n                        />\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <IconButton size=\"small\" onClick={() => navigate(`/formulaires/${formulaire.id_formulaire}`)}>\r\n                        <ViewIcon />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n                {/* Message d'état vide amélioré */}\r\n                {filteredEvaluations.length === 0 && (\r\n                  <TableRow>\r\n                    <TableCell colSpan={7} align=\"center\">\r\n                      <Box py={4}>\r\n                        <AssessmentIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n                        <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n                          {evaluations.length === 0 ? \r\n                            \"Aucune évaluation de maturité\" : \r\n                            \"Aucune évaluation ne correspond aux filtres\"\r\n                          }\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {evaluations.length === 0 ? \r\n                            \"Créez votre première évaluation de maturité globale pour commencer.\" :\r\n                            \"Modifiez vos critères de recherche pour voir plus de résultats.\"\r\n                          }\r\n                        </Typography>\r\n                        {evaluations.length === 0 && (\r\n                          <Button \r\n                            variant=\"contained\" \r\n                            color=\"primary\" \r\n                            startIcon={<AddIcon />}\r\n                            sx={{ mt: 2 }}\r\n                            onClick={handleCreateEvaluation}\r\n                          >\r\n                            Créer la première évaluation\r\n                          </Button>\r\n                        )}\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n            <TablePagination\r\n              component=\"div\"\r\n              count={filteredFormulaires.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={(e, newPage) => setPage(newPage)}\r\n              onRowsPerPageChange={(e) => {\r\n                setRowsPerPage(parseInt(e.target.value, 10));\r\n                setPage(0);\r\n              }}\r\n            />\r\n          </TableContainer>\r\n        </TabPanel>\r\n\r\n        {/* Onglet Évaluations Maturité */}\r\n        <TabPanel value={currentTab} index={1}>\r\n          {/* Note d'information sur l'état des APIs */}\r\n          <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              📋 État des APIs pour les Évaluations de Maturité\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"div\">\r\n              <strong>✅ APIs disponibles :</strong>\r\n              <ul>\r\n                <li><code>/api/maturity-global/evaluations</code> - Liste des évaluations</li>\r\n                <li><code>/api/maturity-evaluation/start</code> - Démarrer une évaluation</li>\r\n                <li><code>/api/maturity-global/questions</code> - Questions d'évaluation</li>\r\n              </ul>\r\n              \r\n              <strong>⚠️ APIs manquantes (optionnelles) :</strong>\r\n              <ul>\r\n                <li><code>/api/acteurs/entreprise/:id</code> - Acteurs par entreprise</li>\r\n              </ul>\r\n              \r\n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\r\n                <strong>💡 Pour les développeurs :</strong> Montez les routes avec :<br/>\r\n                <code>app.use('/api/maturity-global', maturityGlobalRoute);</code><br/>\r\n                <code>app.use('/api/maturity-evaluation', maturityEvaluationRoute);</code><br/>\r\n                <Typography variant=\"caption\" component=\"div\" sx={{ mt: 0.5 }}>\r\n                  📋 Voir les instructions détaillées dans <code>server/setup-maturity-routes.js</code>\r\n                </Typography>\r\n              </Typography>\r\n            </Typography>\r\n          </Alert>\r\n\r\n          {/* Note d'information si pas d'évaluations */}\r\n          {evaluations.length === 0 && !loading && (\r\n            <Alert severity=\"success\" sx={{ mb: 3 }}>\r\n              <Typography variant=\"body2\">\r\n                🎉 L'interface est prête ! Les évaluations apparaîtront automatiquement dès qu'elles seront créées.\r\n              </Typography>\r\n            </Alert>\r\n          )}\r\n          {/* Statistiques évaluations */}\r\n          <Grid container spacing={2} sx={{ mb: 3 }}>\r\n            <Grid size={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom>\r\n                    Total Évaluations\r\n                  </Typography>\r\n                  <Typography variant=\"h4\">{evaluations.length}</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid size={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom>\r\n                    Terminées\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color=\"success.main\">\r\n                    {evaluations.filter(evaluation => evaluation.statut === 'TERMINE').length}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid size={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom>\r\n                    En Cours\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color=\"warning.main\">\r\n                    {evaluations.filter(evaluation => evaluation.statut === 'EN_COURS').length}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid size={12} sm={6} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"textSecondary\" gutterBottom>\r\n                    Score Moyen\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color=\"primary.main\">\r\n                    {evaluations.length > 0 ? \r\n                      (evaluations.filter(evaluation => evaluation.score_global).reduce((sum, evaluation) => sum + (evaluation.score_global || 0), 0) / \r\n                       evaluations.filter(evaluation => evaluation.score_global).length).toFixed(1) : '0'\r\n                    }\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* Actions et filtres évaluations */}\r\n          <Paper sx={{ p: 2, mb: 2 }}>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n              <Grid size={12} md={3}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Rechercher\"\r\n                  variant=\"outlined\"\r\n                  value={evalSearchTerm}\r\n                  onChange={(e) => setEvalSearchTerm(e.target.value)}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid size={12} md={2}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Statut</InputLabel>\r\n                  <Select\r\n                    value={evalStatusFilter}\r\n                    label=\"Statut\"\r\n                    onChange={(e) => setEvalStatusFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Tous</MenuItem>\r\n                    <MenuItem value=\"EN_COURS\">En cours</MenuItem>\r\n                    <MenuItem value=\"TERMINE\">Terminé</MenuItem>\r\n                    <MenuItem value=\"ENVOYE\">Envoyé</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid size={12} md={3}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Entreprise</InputLabel>\r\n                  <Select\r\n                    value={evalEntrepriseFilter}\r\n                    label=\"Entreprise\"\r\n                    onChange={(e) => setEvalEntrepriseFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Toutes</MenuItem>\r\n                    {entreprises.map((entreprise) => (\r\n                      <MenuItem key={entreprise.id_entreprise} value={entreprise.id_entreprise}>\r\n                        {entreprise.nom_entreprise}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid size={12} md={2}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={handleCreateEvaluation}\r\n                  fullWidth\r\n                >\r\n                  Nouvelle Évaluation\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n\r\n          {/* Tableau des évaluations */}\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Entreprise</TableCell>\r\n                  <TableCell>Évaluateur</TableCell>\r\n                  <TableCell>Statut</TableCell>\r\n                  <TableCell>Score Global</TableCell>\r\n                  <TableCell>Fonctions</TableCell>\r\n                  <TableCell>Date</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {filteredEvaluations.slice(evalPage * evalRowsPerPage, evalPage * evalRowsPerPage + evalRowsPerPage).map((evaluation) => (\r\n                  <TableRow key={evaluation.id_evaluation}>\r\n                    <TableCell>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                          {evaluation.nom_entreprise}\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                          {evaluation.nom_acteur}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"textSecondary\">\r\n                          {evaluation.email_acteur}\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip \r\n                        label={evaluation.statut} \r\n                        color={evaluation.statut === 'TERMINE' ? 'success' : evaluation.statut === 'EN_COURS' ? 'warning' : 'info'}\r\n                        size=\"small\"\r\n                        icon={evaluation.statut === 'TERMINE' ? <CheckCircleIcon /> : evaluation.statut === 'EN_COURS' ? <WarningIcon /> : undefined}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {evaluation.score_global ? (\r\n                        <Box>\r\n                          <Chip \r\n                            label={`${evaluation.score_global.toFixed(1)}/5`}\r\n                            color={getScoreColor(evaluation.score_global)}\r\n                            size=\"small\"\r\n                          />\r\n                          <Typography variant=\"caption\" display=\"block\" color=\"textSecondary\">\r\n                            {evaluation.niveau_global}\r\n                          </Typography>\r\n                        </Box>\r\n                      ) : (\r\n                        <Typography variant=\"caption\" color=\"textSecondary\">\r\n                          Non évalué\r\n                        </Typography>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box display=\"flex\" flexWrap=\"wrap\" gap={0.5}>\r\n                        {Object.entries(fonctionsMaturiteConfig).map(([key, config]) => {\r\n                          const score = evaluation[`score_${key}` as keyof EvaluationMaturite] as number;\r\n                          if (score) {\r\n                            return (\r\n                              <Tooltip key={key} title={`${config.label}: ${score.toFixed(1)}/5`}>\r\n                                <Chip\r\n                                  size=\"small\"\r\n                                  icon={<config.icon />}\r\n                                  label={score.toFixed(1)}\r\n                                  sx={{ color: config.color, borderColor: config.color }}\r\n                                  variant=\"outlined\"\r\n                                />\r\n                              </Tooltip>\r\n                            );\r\n                          }\r\n                          return null;\r\n                        })}\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {evaluation.date_soumission ? \r\n                          `Terminé: ${formatDate(evaluation.date_soumission)}` :\r\n                          `Débuté: ${formatDate(evaluation.date_debut)}`\r\n                        }\r\n                      </Typography>\r\n                      {evaluation.duree_evaluation && (\r\n                        <Typography variant=\"caption\" color=\"textSecondary\">\r\n                          Durée: {evaluation.duree_evaluation} min\r\n                        </Typography>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box display=\"flex\" gap={0.5}>\r\n                        <Tooltip title=\"Voir l'évaluation\">\r\n                          <IconButton \r\n                            size=\"small\" \r\n                            color=\"primary\"\r\n                            onClick={() => handleViewEvaluation(evaluation)}\r\n                          >\r\n                            <ViewIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        {evaluation.lien_evaluation && (\r\n                          <Tooltip title=\"Copier le lien\">\r\n                            <IconButton \r\n                              size=\"small\" \r\n                              color=\"info\"\r\n                              onClick={() => navigator.clipboard.writeText(evaluation.lien_evaluation || '')}\r\n                            >\r\n                              <LinkIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n            <TablePagination\r\n              component=\"div\"\r\n              count={filteredEvaluations.length}\r\n              rowsPerPage={evalRowsPerPage}\r\n              page={evalPage}\r\n              onPageChange={(e, newPage) => setEvalPage(newPage)}\r\n              onRowsPerPageChange={(e) => {\r\n                setEvalRowsPerPage(parseInt(e.target.value, 10));\r\n                setEvalPage(0);\r\n              }}\r\n            />\r\n          </TableContainer>\r\n        </TabPanel>\r\n      </Paper>\r\n\r\n      {/* Dialog de création d'évaluation */}\r\n      <Dialog \r\n        open={createEvalDialog} \r\n        onClose={() => setCreateEvalDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Créer une nouvelle évaluation de maturité\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n            <Typography variant=\"body2\">\r\n              <strong>📡 État de l'intégration :</strong><br/>\r\n              ✅ Routes principales disponibles<br/>\r\n              ⚠️ Route acteurs optionnelle (fallback inclus)<br/>\r\n              🔗 Création d'évaluations fonctionnelle\r\n            </Typography>\r\n          </Alert>\r\n          \r\n          <Stepper activeStep={currentStep} orientation=\"vertical\">\r\n            <Step>\r\n              <StepLabel>Sélectionner l'entreprise</StepLabel>\r\n              <StepContent>\r\n                <FormControl fullWidth sx={{ mt: 2 }}>\r\n                  <InputLabel>Entreprise</InputLabel>\r\n                  <Select\r\n                    value={selectedEntreprise}\r\n                    label=\"Entreprise\"\r\n                    onChange={(e) => handleEntrepriseSelection(e.target.value)}\r\n                  >\r\n                    {entreprises.map((entreprise) => (\r\n                      <MenuItem key={entreprise.id_entreprise} value={entreprise.id_entreprise}>\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                          <BusinessIcon sx={{ mr: 1 }} />\r\n                          {entreprise.nom_entreprise}\r\n                          {entreprise.secteur_activite && (\r\n                            <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: 1 }}>\r\n                              ({entreprise.secteur_activite})\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <Box sx={{ mt: 2 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => setCurrentStep(1)}\r\n                    disabled={!selectedEntreprise}\r\n                  >\r\n                    Suivant\r\n                  </Button>\r\n                </Box>\r\n              </StepContent>\r\n            </Step>\r\n            \r\n            <Step>\r\n              <StepLabel>Sélectionner les acteurs</StepLabel>\r\n              <StepContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\r\n                  Sélectionnez les acteurs qui devront remplir l'évaluation de maturité :\r\n                </Typography>\r\n                \r\n                {/* Loading state pour les acteurs */}\r\n                {loading && selectedEntreprise && (\r\n                  <Box display=\"flex\" alignItems=\"center\" sx={{ mb: 2 }}>\r\n                    <CircularProgress size={20} sx={{ mr: 1 }} />\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Chargement des acteurs...\r\n                    </Typography>\r\n                  </Box>\r\n                )}\r\n                \r\n                {/* Informations sur l'endpoint utilisé */}\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                  <Typography variant=\"caption\">\r\n                    📡 <strong>Endpoint utilisé :</strong> <code>/api/acteurs/entreprise/{selectedEntreprise}</code><br/>\r\n                    ✅ Récupération automatique des acteurs de l'entreprise sélectionnée<br/>\r\n                    🔄 Fallbacks disponibles en cas d'indisponibilité\r\n                  </Typography>\r\n                </Alert>\r\n                \r\n                {acteurs.length > 0 ? (\r\n                  <>\r\n                    {/* Indicateur de mode démo */}\r\n                    {acteurs[0]?.id_acteur?.startsWith('demo-') && (\r\n                      <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n                        <Typography variant=\"body2\">\r\n                          🔧 <strong>Mode démo actif</strong><br/>\r\n                          L'endpoint <code>/api/acteurs/entreprise/:id</code> n'est pas disponible.\r\n                          Des données d'exemple sont utilisées.\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" component=\"div\" sx={{ mt: 1 }}>\r\n                          Pour utiliser de vrais acteurs :<br/>\r\n                          • Vérifiez que la route est montée dans server.js<br/>\r\n                          • Assurez-vous que les middlewares d'authentification fonctionnent<br/>\r\n                          • Contrôlez les permissions d'accès aux acteurs\r\n                        </Typography>\r\n                      </Alert>\r\n                    )}\r\n                    \r\n                    {/* Statistiques des acteurs */}\r\n                    <Box sx={{ mb: 2, p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\r\n                      <Typography variant=\"subtitle2\" gutterBottom>\r\n                        📊 Résumé des acteurs disponibles\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        Total : {acteurs.length} acteur(s) • \r\n                        Sélectionnés : {selectedActeurs.length} • \r\n                        Entreprise : {entreprises.find(e => e.id_entreprise === selectedEntreprise)?.nom_entreprise}\r\n                      </Typography>\r\n                    </Box>\r\n                    \r\n                    {/* Actions rapides */}\r\n                    <Box sx={{ mb: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onClick={() => setSelectedActeurs(acteurs.map(a => a.id_acteur))}\r\n                        disabled={selectedActeurs.length === acteurs.length}\r\n                      >\r\n                        Tout sélectionner\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onClick={() => setSelectedActeurs([])}\r\n                        disabled={selectedActeurs.length === 0}\r\n                      >\r\n                        Tout désélectionner\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        startIcon={<RefreshIcon />}\r\n                        onClick={() => refreshActeurs(selectedEntreprise)}\r\n                      >\r\n                        Actualiser\r\n                      </Button>\r\n                    </Box>\r\n                    \r\n                    {/* Liste des acteurs avec sélection */}\r\n                    <FormGroup>\r\n                      {acteurs.map((acteur) => (\r\n                        <FormControlLabel\r\n                          key={acteur.id_acteur}\r\n                          control={\r\n                            <Checkbox\r\n                              checked={selectedActeurs.includes(acteur.id_acteur)}\r\n                              onChange={() => handleActeurToggle(acteur.id_acteur)}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Box display=\"flex\" alignItems=\"center\" sx={{ py: 0.5 }}>\r\n                              <PersonIcon sx={{ mr: 1, color: 'primary.main' }} />\r\n                              <Box>\r\n                                <Typography variant=\"body2\" component=\"div\">\r\n                                  {acteur.nom_prenom}\r\n                                  {acteur.id_acteur?.startsWith('demo-') && (\r\n                                    <Chip \r\n                                      label=\"DÉMO\" \r\n                                      size=\"small\" \r\n                                      color=\"warning\" \r\n                                      sx={{ ml: 1, height: 20 }} \r\n                                    />\r\n                                  )}\r\n                                </Typography>\r\n                                <Typography variant=\"caption\" color=\"textSecondary\" component=\"div\">\r\n                                  📧 {acteur.email}\r\n                                  {acteur.poste && ` • 💼 ${acteur.poste}`}\r\n                                  {acteur.organisation && ` • 🏢 ${acteur.organisation}`}\r\n                                </Typography>\r\n                                {acteur.anciennete_role && (\r\n                                  <Typography variant=\"caption\" color=\"textSecondary\" component=\"div\">\r\n                                    ⏱️ Ancienneté : {acteur.anciennete_role} mois\r\n                                  </Typography>\r\n                                )}\r\n                              </Box>\r\n                            </Box>\r\n                          }\r\n                          sx={{ \r\n                            border: 1, \r\n                            borderColor: 'divider', \r\n                            borderRadius: 1, \r\n                            mb: 1, \r\n                            mr: 0,\r\n                            bgcolor: selectedActeurs.includes(acteur.id_acteur) ? 'action.selected' : 'transparent'\r\n                          }}\r\n                        />\r\n                      ))}\r\n                    </FormGroup>\r\n                  </>\r\n                ) : (\r\n                  /* État vide ou erreur */\r\n                  <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n                    <Typography variant=\"body2\" gutterBottom>\r\n                      <strong>🔍 Aucun acteur trouvé pour cette entreprise</strong>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"div\">\r\n                      Causes possibles :\r\n                      <ul style={{ marginTop: 8, marginBottom: 8 }}>\r\n                        <li>L'entreprise n'a pas d'utilisateurs enregistrés</li>\r\n                        <li>Tous les acteurs sont marqués comme inactifs</li>\r\n                        <li>Problème de connexion à l'API</li>\r\n                        <li>Permissions insuffisantes</li>\r\n                      </ul>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"div\" sx={{ mt: 1 }}>\r\n                      <strong>Solutions :</strong>\r\n                      <ul style={{ marginTop: 4 }}>\r\n                        <li>Ajoutez des utilisateurs à l'entreprise sélectionnée</li>\r\n                        <li>Vérifiez l'endpoint <code>/api/acteurs/entreprise/{selectedEntreprise}</code></li>\r\n                        <li>Contrôlez les permissions d'accès</li>\r\n                      </ul>\r\n                    </Typography>\r\n                    <Box sx={{ mt: 2 }}>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        startIcon={<RefreshIcon />}\r\n                        onClick={() => refreshActeurs(selectedEntreprise)}\r\n                      >\r\n                        Réessayer\r\n                      </Button>\r\n                    </Box>\r\n                  </Alert>\r\n                )}\r\n                \r\n                {/* Actions de navigation */}\r\n                <Box sx={{ mt: 3, display: 'flex', gap: 1 }}>\r\n                  <Button onClick={() => setCurrentStep(0)}>\r\n                    ← Retour\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={generateEvaluationLinks}\r\n                    disabled={selectedActeurs.length === 0 || creatingEvaluation}\r\n                    startIcon={creatingEvaluation ? <CircularProgress size={20} /> : <SendIcon />}\r\n                  >\r\n                    {creatingEvaluation ? \r\n                      'Création en cours...' : \r\n                      `Créer ${selectedActeurs.length} évaluation(s)`\r\n                    }\r\n                  </Button>\r\n                </Box>\r\n                \r\n                {/* Informations supplémentaires */}\r\n                {selectedActeurs.length > 0 && (\r\n                  <Alert severity=\"success\" sx={{ mt: 2 }}>\r\n                    <Typography variant=\"body2\">\r\n                      ✅ <strong>{selectedActeurs.length} évaluation(s)</strong> seront créées.<br/>\r\n                      Chaque acteur recevra un lien unique pour remplir l'évaluation de maturité.\r\n                    </Typography>\r\n                  </Alert>\r\n                )}\r\n              </StepContent>\r\n            </Step>\r\n            \r\n\r\n          </Stepper>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setCreateEvalDialog(false)}>\r\n            Annuler\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Forms;","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container, Grid, Paper, Typography, Box, CircularProgress, Button,\r\n  Card, CardContent, Divider, TextField, FormControl, FormControlLabel, RadioGroup, Radio,\r\n  IconButton, Chip, Alert, Accordion, AccordionSummary, AccordionDetails, Tooltip, Badge,\r\n  Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Breadcrumbs, Link\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon, Save as SaveIcon, Send as SendIcon, Check as CheckIcon,\r\n  ExpandMore as ExpandMoreIcon, Home as HomeIcon, Business as BusinessIcon,\r\n  AccountTree as FunctionIcon, Person as PersonIcon, Warning as WarningIcon,\r\n  Comment as CommentIcon, InfoOutlined as InfoIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../../services/api';\r\n\r\n// Interfaces mises à jour\r\ninterface Thematique {\r\n  id: string;\r\n  nom: string;\r\n}\r\n\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_acteur: string;\r\n  acteur_nom: string;\r\n  id_application: string;\r\n  nom_application: string;\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  id_questionnaire: string;\r\n  questionnaire_nom: string;\r\n  thematiques: Thematique[];\r\n  fonctions: string[];\r\n  date_creation: string;\r\n  date_modification: string;\r\n  statut: 'Brouillon' | 'Soumis' | 'Validé';\r\n  progression: number;\r\n}\r\n\r\ninterface Reponse {\r\n  id_reponse: string;\r\n  id_formulaire: string;\r\n  id_question: string;\r\n  question_texte: string;\r\n  valeur_reponse: string;\r\n  score: number;\r\n  commentaire?: string;\r\n}\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  id_thematique: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre: number;\r\n  aide_reponse?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\nconst FormDetail: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [saving, setSaving] = useState<boolean>(false);\r\n  const [formulaire, setFormulaire] = useState<Formulaire | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [reponses, setReponses] = useState<Reponse[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [openConfirmDialog, setOpenConfirmDialog] = useState<{ open: boolean; action: 'Soumis' | 'Validé' | null }>({ open: false, action: null });\r\n\r\n  // Charger les données du formulaire\r\n  useEffect(() => {\r\n    const fetchFormulaire = async () => {\r\n      if (!id) {\r\n        setError('Identifiant du formulaire manquant');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // Récupérer les informations du formulaire\r\n        const formulaireResponse = await api.get(`formulaires/${id}`);\r\n        const formulaireData = formulaireResponse.data || formulaireResponse;\r\n\r\n        if (!formulaireData || typeof formulaireData !== 'object') {\r\n          throw new Error('Format de données du formulaire inattendu');\r\n        }\r\n\r\n        // Normaliser les données\r\n        const normalizedFormulaire: Formulaire = {\r\n          id_formulaire: formulaireData.id_formulaire || '',\r\n          id_acteur: formulaireData.acteur?.id_acteur || '',\r\n          acteur_nom: formulaireData.acteur?.nom_prenom || 'Utilisateur inconnu',\r\n          id_application: formulaireData.application?.id_application || '',\r\n          nom_application: formulaireData.application?.nom_application || 'Application inconnue',\r\n          id_entreprise: formulaireData.entreprise?.id_entreprise || '',\r\n          nom_entreprise: formulaireData.entreprise?.nom_entreprise || 'Entreprise inconnue',\r\n          id_questionnaire: formulaireData.questionnaire?.id_questionnaire || '',\r\n          questionnaire_nom: formulaireData.questionnaire?.nom || 'Questionnaire inconnu',\r\n          thematiques: Array.isArray(formulaireData.questionnaire?.thematiques)\r\n            ? formulaireData.questionnaire.thematiques.map((t: { id: string; nom: string }) => ({\r\n                id: t.id || '',\r\n                nom: t.nom || 'Thématique inconnue',\r\n              }))\r\n            : [],\r\n          fonctions: Array.isArray(formulaireData.questionnaire?.fonctions)\r\n            ? formulaireData.questionnaire.fonctions.map((f: { nom: string }) => f.nom).filter(Boolean)\r\n            : [],\r\n          date_creation: formulaireData.date_creation || new Date().toISOString(),\r\n          date_modification: formulaireData.date_modification || formulaireData.date_creation || new Date().toISOString(),\r\n          statut: formulaireData.statut || 'Brouillon',\r\n          progression: Number(formulaireData.progression) || 0,\r\n        };\r\n\r\n        setFormulaire(normalizedFormulaire);\r\n\r\n        if (!normalizedFormulaire.id_questionnaire) {\r\n          throw new Error('Questionnaire non valide associé au formulaire');\r\n        }\r\n\r\n        // Récupérer les questions pour chaque thématique\r\n        const questionsPromises = normalizedFormulaire.thematiques.map(async (thematique) => {\r\n          try {\r\n            const response = await api.get(`questions/thematique/${thematique.id}`);\r\n            const questions = Array.isArray(response) ? response : [];\r\n            return questions.map((q: any) => ({\r\n              id_question: q.id_question || '',\r\n              id_thematique: q.id_thematique || thematique.id,\r\n              texte: q.texte || 'Question inconnue',\r\n              ponderation: Number(q.ponderation) || 1,\r\n              ordre: Number(q.ordre) || 0,\r\n              aide_reponse: q.aide_reponse || undefined,\r\n              date_creation: q.date_creation || new Date().toISOString(),\r\n              date_modification: q.date_modification || q.date_creation || new Date().toISOString(),\r\n            }));\r\n          } catch (err) {\r\n            console.warn(`Erreur lors du chargement des questions pour la thématique ${thematique.nom}:`, err);\r\n            return [];\r\n          }\r\n        });\r\n\r\n        const questionsArrays = await Promise.all(questionsPromises);\r\n        const normalizedQuestions = questionsArrays.flat().sort((a: Question, b: Question) => a.ordre - b.ordre);\r\n        setQuestions(normalizedQuestions);\r\n\r\n        // Récupérer les réponses\r\n        const reponsesResponse = await api.get(`reponses/formulaire/${id}`);\r\n        const reponsesData = Array.isArray(reponsesResponse) ? reponsesResponse : [];\r\n        const normalizedReponses = reponsesData.map((r: any) => ({\r\n          id_reponse: r.id_reponse || '',\r\n          id_formulaire: r.id_formulaire || id,\r\n          id_question: r.id_question || '',\r\n          question_texte: r.question_texte || '',\r\n          valeur_reponse: r.valeur_reponse || '',\r\n          score: Number(r.score) || 0,\r\n          commentaire: r.commentaire || undefined,\r\n        }));\r\n        setReponses(normalizedReponses);\r\n      } catch (err: any) {\r\n        setError(err.message || 'Erreur lors du chargement du formulaire.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchFormulaire();\r\n  }, [id]);\r\n\r\n  // Calculs mémorisés\r\n  const isFormComplete = useMemo(\r\n    () => questions.length > 0 && questions.every((q) => reponses.some((r) => r.id_question === q.id_question)),\r\n    [questions, reponses]\r\n  );\r\n  const progression = useMemo(\r\n    () => (questions.length > 0 ? (reponses.length / questions.length) * 100 : 0),\r\n    [questions.length, reponses.length]\r\n  );\r\n  const commentCount = useMemo(\r\n    () => reponses.filter((r) => r.commentaire && r.commentaire.trim().length > 0).length,\r\n    [reponses]\r\n  );\r\n  const criticalQuestions = useMemo(\r\n    () => reponses.filter((r) => {\r\n      const score = parseFloat(r.valeur_reponse) || 0;\r\n      const question = questions.find((q) => q.id_question === r.id_question);\r\n      return score <= 2 && question && question.ponderation >= 3;\r\n    }).length,\r\n    [reponses, questions]\r\n  );\r\n\r\n  // Regrouper les questions par thématique\r\n  const questionsByThematique = useMemo(() => {\r\n    if (!formulaire) return {};\r\n\r\n    const grouped: { [key: string]: Question[] } = {};\r\n    formulaire.thematiques.forEach((thematique) => {\r\n      grouped[thematique.id] = questions\r\n        .filter((q) => q.id_thematique === thematique.id)\r\n        .sort((a, b) => a.ordre - b.ordre);\r\n    });\r\n    return grouped;\r\n  }, [formulaire, questions]);\r\n\r\n  // Trouver une réponse\r\n  const findReponse = (questionId: string) => reponses.find((r) => r.id_question === questionId);\r\n\r\n  // Mettre à jour une réponse\r\n  const updateReponse = (questionId: string, value: string) => {\r\n    const existingReponseIndex = reponses.findIndex((r) => r.id_question === questionId);\r\n    const question = questions.find((q) => q.id_question === questionId);\r\n\r\n    if (!question) return;\r\n\r\n    if (existingReponseIndex >= 0) {\r\n      const updatedReponses = [...reponses];\r\n      updatedReponses[existingReponseIndex] = {\r\n        ...updatedReponses[existingReponseIndex],\r\n        valeur_reponse: value,\r\n        score: parseInt(value) || 0,\r\n      };\r\n      setReponses(updatedReponses);\r\n    } else {\r\n      const newReponse: Reponse = {\r\n        id_reponse: `temp_${Date.now()}`,\r\n        id_formulaire: id || '',\r\n        id_question: questionId,\r\n        question_texte: question.texte,\r\n        valeur_reponse: value,\r\n        score: parseInt(value) || 0,\r\n      };\r\n      setReponses([...reponses, newReponse]);\r\n    }\r\n  };\r\n\r\n  // Mettre à jour un commentaire\r\n  const updateCommentaire = (questionId: string, commentaire: string) => {\r\n    const existingReponseIndex = reponses.findIndex((r) => r.id_question === questionId);\r\n    if (existingReponseIndex >= 0) {\r\n      const updatedReponses = [...reponses];\r\n      updatedReponses[existingReponseIndex] = {\r\n        ...updatedReponses[existingReponseIndex],\r\n        commentaire: commentaire || undefined,\r\n      };\r\n      setReponses(updatedReponses);\r\n    }\r\n  };\r\n\r\n  // Gestion des actions de confirmation\r\n  const handleConfirmAction = (action: 'Soumis' | 'Validé') => {\r\n    setOpenConfirmDialog({ open: true, action });\r\n  };\r\n\r\n  const handleCloseConfirmDialog = () => {\r\n    setOpenConfirmDialog({ open: false, action: null });\r\n  };\r\n\r\n  // Sauvegarder le formulaire\r\n  const saveFormulaire = async (newStatus?: 'Brouillon' | 'Soumis' | 'Validé') => {\r\n  if (!formulaire || !id) return;\r\n\r\n  setSaving(true);\r\n  setError(null);\r\n\r\n  try {\r\n    // ✅ ÉTAPE 1 : Mettre à jour le statut (IDENTIQUE à l'existant)\r\n    if (newStatus && newStatus !== formulaire.statut) {\r\n      await api.put(`formulaires/${id}`, { statut: newStatus, progression: Math.round(progression) });\r\n      setFormulaire({ ...formulaire, statut: newStatus, progression: Math.round(progression) });\r\n    }\r\n\r\n    // ✅ ÉTAPE 2 : Sauvegarder les réponses (IDENTIQUE à l'existant)\r\n    const savePromises = reponses.map(async (reponse, index) => {\r\n      try {\r\n        // Validation préalable\r\n        if (!reponse.id_question || !reponse.id_formulaire) {\r\n          console.warn(`Réponse ${index + 1} incomplète, ignorée:`, reponse);\r\n          return { skipped: true, index };\r\n        }\r\n\r\n        let response;\r\n        let result;\r\n\r\n        if (reponse.id_reponse.startsWith('temp_')) {\r\n          // POST pour nouvelles réponses\r\n          response = await api.post('reponses', {\r\n            id_formulaire: reponse.id_formulaire,\r\n            id_question: reponse.id_question,\r\n            valeur_reponse: reponse.valeur_reponse,\r\n            score: reponse.score,\r\n            commentaire: reponse.commentaire || '',\r\n          });\r\n\r\n          // ✅ Gestion robuste de la structure de réponse pour POST\r\n          if (response && response.data && response.data.id_reponse) {\r\n            result = response.data;\r\n          } else if (response && response.id_reponse) {\r\n            result = response;\r\n          } else if (response) {\r\n            console.warn(`Format de réponse inattendu pour POST réponse ${index + 1}:`, response);\r\n            result = { id_reponse: 'created', success: true, originalResponse: response };\r\n          } else {\r\n            throw new Error('Aucune réponse reçue de l\\'API');\r\n          }\r\n        } else {\r\n          // PUT pour réponses existantes\r\n          response = await api.put(`reponses/${reponse.id_reponse}`, {\r\n            valeur_reponse: reponse.valeur_reponse,\r\n            score: reponse.score,\r\n            commentaire: reponse.commentaire || '',\r\n          });\r\n\r\n          // ✅ Gestion robuste de la structure de réponse pour PUT\r\n          if (response && response.data) {\r\n            result = response.data;\r\n          } else if (response) {\r\n            result = response;\r\n          } else {\r\n            result = { id_reponse: reponse.id_reponse, success: true };\r\n          }\r\n        }\r\n\r\n        return { success: true, index, result };\r\n\r\n      } catch (err: any) {\r\n        console.error(`❌ Erreur sauvegarde réponse ${index + 1}:`, {\r\n          error: err,\r\n          reponse: reponse,\r\n          message: err?.message,\r\n          status: err?.response?.status\r\n        });\r\n        \r\n        return { \r\n          success: false, \r\n          index, \r\n          error: err?.message || 'Erreur inconnue',\r\n          reponse \r\n        };\r\n      }\r\n    });\r\n\r\n    const results = await Promise.all(savePromises);\r\n\r\n    // ✅ ÉTAPE 3 : Analyser les résultats (IDENTIQUE à l'existant)\r\n    const successfulSaves = results.filter(r => r.success === true);\r\n    const failedSaves = results.filter(r => r.success === false);\r\n    const skippedSaves = results.filter(r => r.skipped === true);\r\n\r\n    console.log(`📊 Résultats sauvegarde: ${successfulSaves.length} réussies, ${failedSaves.length} échouées, ${skippedSaves.length} ignorées`);\r\n\r\n    // ✅ ÉTAPE 4 : Gestion des messages d'erreur/succès (IDENTIQUE à l'existant)\r\n    if (failedSaves.length > 0) {\r\n      console.error('❌ Détails des échecs:', failedSaves);\r\n      \r\n      const errorDetails = failedSaves.map(f => `Réponse ${f.index + 1}: ${f.error}`).join('; ');\r\n      setError(`${failedSaves.length} réponses n'ont pas pu être sauvegardées. Détails: ${errorDetails}`);\r\n      \r\n    } else if (skippedSaves.length > 0) {\r\n      setError(`${skippedSaves.length} réponses incomplètes ont été ignorées.`);\r\n      \r\n    } else {\r\n      // 🆕 ÉTAPE 5 : NOUVEAU - Calcul du score après sauvegarde réussie\r\n      try {\r\n        console.log('🔢 Déclenchement du calcul de score...');\r\n        \r\n        // Déclencher le calcul de score via une mise à jour du formulaire\r\n        const updatedFormulaire = await api.put(`formulaires/${id}`, { \r\n          statut: formulaire.statut,\r\n          progression: Math.round(progression),\r\n          trigger_score_calculation: true // Flag pour indiquer qu'on veut recalculer\r\n        });\r\n\r\n        // Mettre à jour le formulaire avec les nouveaux scores\r\n        if (updatedFormulaire.score_actuel !== undefined && updatedFormulaire.score_maximum !== undefined) {\r\n          setFormulaire(prev => ({\r\n            ...prev,\r\n            ...updatedFormulaire,\r\n            // Conserver les données locales importantes\r\n            thematiques: prev.thematiques,\r\n            fonctions: prev.fonctions\r\n          }));\r\n          \r\n          console.log(`✅ Score calculé: ${updatedFormulaire.score_actuel}/${updatedFormulaire.score_maximum}`);\r\n        }\r\n        \r\n      } catch (scoreError: any) {\r\n        console.warn('⚠️ Erreur lors du calcul de score (réponses sauvegardées avec succès):', scoreError);\r\n        // On n'interrompt pas le processus si le calcul de score échoue\r\n      }\r\n\r\n      // 🆕 Messages de succès améliorés\r\n      const successMessage = newStatus === 'Soumis'\r\n        ? 'Formulaire soumis avec succès ! Score calculé.'\r\n        : newStatus === 'Validé'\r\n        ? 'Formulaire validé avec succès ! Score calculé.'\r\n        : 'Formulaire enregistré avec succès ! Score calculé.';\r\n        \r\n      setSuccess(successMessage);\r\n    }\r\n\r\n  } catch (err: any) {\r\n    console.error('❌ Erreur générale lors de la sauvegarde:', err);\r\n    setError(err.message || 'Erreur lors de la sauvegarde du formulaire.');\r\n  } finally {\r\n    setSaving(false);\r\n  }\r\n};\r\n\r\n  // Statut du formulaire\r\n  const getStatusInfo = (status: string) => {\r\n    switch (status) {\r\n      case 'Validé':\r\n        return { label: 'Validé', color: 'success' as const };\r\n      case 'Soumis':\r\n        return { label: 'Soumis', color: 'primary' as const };\r\n      default:\r\n        return { label: 'Brouillon', color: 'warning' as const };\r\n    }\r\n  };\r\n\r\n  // Formatage des dates\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        day: 'numeric',\r\n        month: 'long',\r\n        year: 'numeric',\r\n      });\r\n    } catch {\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (!formulaire) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Alert severity=\"error\">{error || 'Formulaire non trouvé.'}</Alert>\r\n        <Button startIcon={<ArrowBackIcon />} onClick={() => navigate('/formulaires')} sx={{ mt: 2 }}>\r\n          Retour à la liste\r\n        </Button>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  const statusInfo = getStatusInfo(formulaire.statut);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Breadcrumbs aria-label=\"breadcrumb\" sx={{ mb: 2 }}>\r\n        <Link underline=\"hover\" color=\"inherit\" sx={{ display: 'flex', alignItems: 'center' }} href=\"/\">\r\n          <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\r\n          Accueil\r\n        </Link>\r\n        <Link underline=\"hover\" color=\"inherit\" sx={{ display: 'flex', alignItems: 'center' }} href=\"/formulaires\">\r\n          Formulaires\r\n        </Link>\r\n        <Typography color=\"text.primary\" sx={{ display: 'flex', alignItems: 'center' }}>\r\n          {formulaire.questionnaire_nom}\r\n        </Typography>\r\n      </Breadcrumbs>\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <IconButton color=\"primary\" onClick={() => navigate('/formulaires')} sx={{ mr: 1 }}>\r\n                  <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                  {formulaire.questionnaire_nom}\r\n                </Typography>\r\n              </Box>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                {criticalQuestions > 0 && (\r\n                  <Tooltip title={`${criticalQuestions} question(s) critique(s)`}>\r\n                    <Badge badgeContent={criticalQuestions} color=\"error\" sx={{ mr: 2 }}>\r\n                      <WarningIcon color=\"error\" />\r\n                    </Badge>\r\n                  </Tooltip>\r\n                )}\r\n                {commentCount > 0 && (\r\n                  <Tooltip title={`${commentCount} commentaire(s)`}>\r\n                    <Badge badgeContent={commentCount} color=\"info\" sx={{ mr: 2 }}>\r\n                      <CommentIcon color=\"info\" />\r\n                    </Badge>\r\n                  </Tooltip>\r\n                )}\r\n                <Chip label={statusInfo.label} color={statusInfo.color} variant=\"outlined\" />\r\n              </Box>\r\n            </Box>\r\n\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={4}>\r\n                <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                  <BusinessIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                  <Typography variant=\"subtitle1\">\r\n                    <strong>Entreprise:</strong> {formulaire.nom_entreprise}\r\n                  </Typography>\r\n                </Box>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <FunctionIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                  <Typography variant=\"subtitle1\">\r\n                    <strong>Fonctions:</strong> {formulaire.fonctions.join(', ') || 'Aucune'}\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                  <InfoIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                  <Typography variant=\"subtitle1\">\r\n                    <strong>Thématiques:</strong>\r\n                  </Typography>\r\n                </Box>\r\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                  {formulaire.thematiques.map((thematique, index) => (\r\n                    <Chip key={index} label={thematique.nom} size=\"small\" color=\"secondary\" variant=\"outlined\" />\r\n                  ))}\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                  <PersonIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                  <Typography variant=\"subtitle1\">\r\n                    <strong>Acteur:</strong> {formulaire.acteur_nom}\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant=\"subtitle1\">\r\n                  <strong>Date de création:</strong> {formatDate(formulaire.date_creation)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box sx={{ width: '100%' }}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\">\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                  Progression: {Math.round(progression)}% \r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    {reponses.length} / {questions.length} questions répondues\r\n                </Typography>\r\n              </Box>\r\n              <Box sx={{ width: '100%', backgroundColor: '#e0e0e0', borderRadius: 1, height: 8 }}>\r\n                <Box\r\n                  sx={{\r\n                    width: `${progression}%`,\r\n                    backgroundColor: progression < 30 ? '#f44336' : progression < 70 ? '#ff9800' : '#4caf50',\r\n                    borderRadius: 1,\r\n                    height: '100%',\r\n                    transition: 'width 0.5s ease-in-out',\r\n                  }}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {error && (\r\n          <Grid item xs={12}>\r\n            <Alert severity=\"error\" onClose={() => setError(null)}>\r\n              {error}\r\n            </Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        {success && (\r\n          <Grid item xs={12}>\r\n            <Alert severity=\"success\" onClose={() => setSuccess(null)}>\r\n              {success}\r\n            </Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Questions par thématique\r\n            </Typography>\r\n            <Divider sx={{ mb: 3 }} />\r\n\r\n            {formulaire.thematiques.length > 0 ? (\r\n              formulaire.thematiques.map((thematique) => (\r\n                <Accordion key={thematique.id} defaultExpanded>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography variant=\"subtitle1\">{thematique.nom}</Typography>\r\n                    <Box sx={{ ml: 2 }}>\r\n                      <Chip\r\n                        label={`${questionsByThematique[thematique.id]?.length || 0} questions`}\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    {questionsByThematique[thematique.id]?.length > 0 ? (\r\n                      questionsByThematique[thematique.id].map((question) => {\r\n                        const reponse = findReponse(question.id_question);\r\n                        const isHighPriority = question.ponderation >= 3;\r\n                        const isCritical = reponse && (parseInt(reponse.valeur_reponse) || 0) <= 2 && isHighPriority;\r\n\r\n                        return (\r\n                          <Card\r\n                            key={question.id_question}\r\n                            sx={{\r\n                              mb: 3,\r\n                              position: 'relative',\r\n                              border: isCritical ? '1px solid #f44336' : isHighPriority ? '1px solid #ff9800' : 'none',\r\n                            }}\r\n                          >\r\n                            <CardContent>\r\n                              <Box\r\n                                sx={{\r\n                                  position: 'absolute',\r\n                                  top: -10,\r\n                                  left: -10,\r\n                                  width: 30,\r\n                                  height: 30,\r\n                                  borderRadius: '50%',\r\n                                  backgroundColor: isHighPriority ? 'warning.main' : 'primary.main',\r\n                                  color: 'white',\r\n                                  display: 'flex',\r\n                                  alignItems: 'center',\r\n                                  justifyContent: 'center',\r\n                                  fontWeight: 'bold',\r\n                                }}\r\n                              >\r\n                                {question.ordre}\r\n                              </Box>\r\n                              <Box sx={{ ml: 3 }}>\r\n                                <Typography variant=\"subtitle1\" gutterBottom fontWeight={isHighPriority ? 'bold' : 'normal'}>\r\n                                  {question.texte}\r\n                                  {isHighPriority && (\r\n                                    <Tooltip title=\"Question à forte pondération\">\r\n                                      <InfoIcon color=\"warning\" fontSize=\"small\" sx={{ ml: 1 }} />\r\n                                    </Tooltip>\r\n                                  )}\r\n                                </Typography>\r\n                                {question.aide_reponse && (\r\n                                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2}}>\r\n                                    <strong>Aide:</strong> {question.aide_reponse}\r\n                                  </Typography>\r\n                                )}\r\n                                <Typography\r\n                                  variant=\"caption\"\r\n                                  color={isHighPriority ? 'warning.main' : 'text.secondary'}\r\n                                  sx={{ display: 'block', mb: 2 }}\r\n                                >\r\n                                  Pondération: {question.ponderation} {isHighPriority ? '(Question importante)' : ''}\r\n                                </Typography>\r\n                                <FormControl component=\"fieldset\" sx={{ width: \"100%\" }}>\r\n                                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                                    Évaluation (1 = Niveau initial, 5 = Niveau optimisé)\r\n                                  </Typography>\r\n                                  <RadioGroup\r\n                                    row\r\n                                    name={`question-${question.id_question}`}\r\n                                    value={reponse?.valeur_reponse || ''}\r\n                                    onChange={(e) => updateReponse(question.id_question, e.target.value)}\r\n                                  >\r\n                                    {[1, 2, 3, 4, 5].map((value) => (\r\n                                      <FormControlLabel\r\n                                        key={value}\r\n                                        value={value.toString()}\r\n                                        control={\r\n                                          <Radio\r\n                                            sx={{\r\n                                              color: value <= 2 && isHighPriority ? 'error.main' : undefined,\r\n                                              '&.Mui-checked': {\r\n                                                color: value <= 2 && isHighPriority ? 'error.main' : undefined,\r\n                                              },\r\n                                            }}\r\n                                          />\r\n                                        }\r\n                                        label={value.toString()}\r\n                                        disabled={formulaire.statut === 'Validé'}\r\n                                      />\r\n                                    ))}\r\n                                  </RadioGroup>\r\n                                </FormControl>\r\n                                <TextField\r\n                                  fullWidth\r\n                                  label=\"Commentaire (optionnel)\"\r\n                                  multiline\r\n                                  rows={2}\r\n                                  margin=\"normal\"\r\n                                  value={reponse?.commentaire || ''}\r\n                                  onChange={(e) => updateCommentaire(question.id_question, e.target.value)}\r\n                                  disabled={formulaire.statut === 'Validé'}\r\n                                  helperText={isCritical ? 'Un commentaire est recommandé pour cette question critique' : ''}\r\n                                  error={isCritical && (!reponse?.commentaire || reponse.commentaire.trim() === '')}\r\n                                />\r\n                                {isCritical && (!reponse?.commentaire || reponse.commentaire.trim() === '') && (\r\n                                  <Alert severity=\"warning\" sx={{ mt: 1 }}>\r\n                                    Veuillez ajouter un commentaire pour justifier cette évaluation critique.\r\n                                  </Alert>\r\n                                )}\r\n                              </Box>\r\n                            </CardContent>\r\n                          </Card>\r\n                        );\r\n                      })\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Aucune question pour cette thématique.\r\n                      </Typography>\r\n                    )}\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              ))\r\n            ) : (\r\n              <Typography variant=\"body1\" align=\"center\" sx={{ py: 2 }}>\r\n                Aucune thématique associée à ce formulaire.\r\n              </Typography>\r\n            )}\r\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => saveFormulaire('Brouillon')}\r\n                disabled={saving || formulaire.statut === 'Validé'}\r\n                startIcon={<SaveIcon />}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                Enregistrer\r\n              </Button>\r\n              {formulaire.statut === 'Brouillon' && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => handleConfirmAction('Soumis')}\r\n                  disabled={saving || !isFormComplete}\r\n                  startIcon={<SendIcon />}\r\n                  sx={{ mr: 1 }}\r\n                >\r\n                  Soumettre\r\n                </Button>\r\n              )}\r\n              {formulaire.statut === 'Soumis' && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  onClick={() => handleConfirmAction('Validé')}\r\n                  disabled={saving || !isFormComplete}\r\n                  startIcon={<CheckIcon />}\r\n                >\r\n                  Valider\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Accordion>\r\n            <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"reponses-content\" id=\"reponses-header\">\r\n              <Typography>Aperçu des réponses</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Box sx={{ width: '100%' }}>\r\n                {formulaire.thematiques.map((thematique) => (\r\n                  <Box key={thematique.id} sx={{ mb: 3 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      {thematique.nom}\r\n                    </Typography>\r\n                    {questionsByThematique[thematique.id]?.length > 0 ? (\r\n                      questionsByThematique[thematique.id].map((question) => {\r\n                        const reponse = findReponse(question.id_question);\r\n                        const isHighPriority = question.ponderation >= 3;\r\n                        const isCritical = reponse && (parseInt(reponse.valeur_reponse) || 0) <= 2 && isHighPriority;\r\n\r\n                        return (\r\n                          <Box\r\n                            key={question.id_question}\r\n                            sx={{\r\n                              mb: 2,\r\n                              p: 2,\r\n                              border: isCritical ? '1px solid #f44336' : isHighPriority ? '1px solid #ff9800' : '1px solid #eee',\r\n                              borderRadius: 1,\r\n                              bgcolor: isCritical ? 'rgba(244, 67, 54, 0.05)' : isHighPriority ? 'rgba(255, 152, 0, 0.05)' : 'transparent',\r\n                            }}\r\n                          >\r\n                            <Typography variant=\"subtitle2\" fontWeight={isHighPriority ? 'bold' : 'normal'}>\r\n                              {question.ordre}. {question.texte}\r\n                              {isHighPriority && (\r\n                                <Tooltip title=\"Question à forte pondération\">\r\n                                  <InfoIcon color=\"warning\" fontSize=\"small\" sx={{ ml: 1 }} />\r\n                                </Tooltip>\r\n                              )}\r\n                            </Typography>\r\n                            {reponse ? (\r\n                              <>\r\n                                <Typography variant=\"body2\" sx={{ mt: 1, color: isCritical ? 'error.main' : 'inherit' }}>\r\n                                  <strong>Réponse:</strong> {reponse.valeur_reponse} / 5\r\n                                </Typography>\r\n                                {reponse.commentaire ? (\r\n                                  <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                                    <strong>Commentaire:</strong> {reponse.commentaire}\r\n                                  </Typography>\r\n                                ) : (\r\n                                  isCritical && (\r\n                                    <Typography variant=\"body2\" color=\"error\" sx={{ mt: 1 }}>\r\n                                      <strong>Commentaire manquant</strong> pour une question critique\r\n                                    </Typography>\r\n                                  )\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <Typography variant=\"body2\" sx={{ mt: 1, color: 'error.main' }}>\r\n                                Pas de réponse\r\n                              </Typography>\r\n                            )}\r\n                          </Box>\r\n                        );\r\n                      })\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Aucune question pour cette thématique.\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                ))}\r\n              </Box>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Dialog\r\n        open={openConfirmDialog.open}\r\n        onClose={handleCloseConfirmDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {openConfirmDialog.action === 'Soumis' ? 'Soumettre le formulaire ?' : 'Valider le formulaire ?'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {openConfirmDialog.action === 'Soumis'\r\n              ? 'Êtes-vous sûr de vouloir soumettre ce formulaire ? Après soumission, il sera en attente de validation.'\r\n              : 'Êtes-vous sûr de vouloir valider ce formulaire ? Cette action est définitive.'}\r\n          </DialogContentText>\r\n          {criticalQuestions > 0 && (\r\n            <Alert severity=\"warning\" sx={{ mt: 2 }}>\r\n              Attention : {criticalQuestions} question(s) critique(s) ont une note faible. Assurez-vous que tous les commentaires sont bien renseignés.\r\n            </Alert>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseConfirmDialog} color=\"inherit\">\r\n            Annuler\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              if (openConfirmDialog.action) {\r\n                saveFormulaire(openConfirmDialog.action);\r\n                handleCloseConfirmDialog();\r\n              }\r\n            }}\r\n            color={openConfirmDialog.action === 'Validé' ? 'success' : 'primary'}\r\n            variant=\"contained\"\r\n            autoFocus\r\n          >\r\n            Confirmer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormDetail;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  FormHelperText,\r\n  IconButton,\r\n  Divider,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Card,\r\n  CardContent,\r\n  Checkbox,\r\n  ListItemText,\r\n  Chip,\r\n  FormGroup,\r\n  FormControlLabel\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Save as SaveIcon,\r\n  Business as BusinessIcon,\r\n  Person as PersonIcon,\r\n  Assignment as AssignmentIcon,\r\n  CheckCircle as CheckCircleIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../../services/api';\r\n\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  id_entreprise: string;\r\n  entreprise_nom?: string;\r\n}\r\n\r\n// Mis à jour pour la nouvelle structure\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  nom: string;\r\n  description?: string;\r\n  thematiques?: string[];\r\n  fonctions?: string[];\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n}\r\n\r\nconst FormNew: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [submitting, setSubmitting] = useState<boolean>(false);\r\n  const [acteurs, setActeurs] = useState<Acteur[]>([]);\r\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  \r\n  // Valeurs du formulaire\r\n  const [formValues, setFormValues] = useState<{\r\n    id_entreprise: string;\r\n    id_acteur: string;\r\n    questionnaires: string[]; // Array de questionnaires sélectionnés\r\n  }>({\r\n    id_entreprise: '',\r\n    id_acteur: '',\r\n    questionnaires: []\r\n  });\r\n  \r\n  // États de validation\r\n  const [validation, setValidation] = useState({\r\n    id_entreprise: true,\r\n    id_acteur: true,\r\n    questionnaires: true\r\n  });\r\n  \r\n  // Étapes du stepper\r\n  const steps = [\r\n    { label: 'Entreprise', icon: <BusinessIcon /> },\r\n    { label: 'Acteur', icon: <PersonIcon /> },\r\n    { label: 'Questionnaires', icon: <AssignmentIcon /> }\r\n  ];\r\n  \r\n  // Filtres pour limiter les options basés sur les sélections précédentes\r\n  const [filteredActeurs, setFilteredActeurs] = useState<Acteur[]>([]);\r\n  \r\n  // Charger les données nécessaires\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // Récupérer les entreprises\r\n        const entreprisesResponse = await api.get('entreprises');\r\n        let entreprisesData: Entreprise[] = [];\r\n        if (Array.isArray(entreprisesResponse)) {\r\n          entreprisesData = entreprisesResponse;\r\n        } else if (entreprisesResponse && entreprisesResponse.data && Array.isArray(entreprisesResponse.data)) {\r\n          entreprisesData = entreprisesResponse.data;\r\n        }\r\n        setEntreprises(entreprisesData);\r\n        \r\n        // Récupérer les acteurs\r\n        const acteursResponse = await api.get('acteurs');\r\n        let acteursData: Acteur[] = [];\r\n        if (Array.isArray(acteursResponse)) {\r\n          acteursData = acteursResponse;\r\n        } else if (acteursResponse && acteursResponse.data && Array.isArray(acteursResponse.data)) {\r\n          acteursData = acteursResponse.data;\r\n        }\r\n        setActeurs(acteursData);\r\n        \r\n        // Récupérer les questionnaires avec la nouvelle structure\r\n        const questionnairesResponse = await api.get('questionnaires');\r\n        let questionnairesData: any[] = [];\r\n        if (Array.isArray(questionnairesResponse)) {\r\n          questionnairesData = questionnairesResponse;\r\n        } else if (questionnairesResponse && questionnairesResponse.data && Array.isArray(questionnairesResponse.data)) {\r\n          questionnairesData = questionnairesResponse.data;\r\n        }\r\n        \r\n        // Normaliser les questionnaires pour la nouvelle structure\r\n        const normalizedQuestionnaires = questionnairesData.map(q => ({\r\n          id_questionnaire: q.id_questionnaire,\r\n          nom: q.nom || q.questionnaire_nom || 'Questionnaire sans nom',\r\n          description: q.description || '',\r\n          // Adapter selon la réponse de l'API - ces champs peuvent venir sous forme d'arrays ou de strings\r\n          thematiques: Array.isArray(q.thematiques) ? q.thematiques : (q.thematiques ? q.thematiques.split(',').map(t => t.trim()) : []),\r\n          fonctions: Array.isArray(q.fonctions) ? q.fonctions : (q.fonctions ? q.fonctions.split(',').map(f => f.trim()) : [])\r\n        }));\r\n        \r\n        setQuestionnaires(normalizedQuestionnaires);\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n        setError('Erreur lors du chargement des données. Veuillez réessayer plus tard.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n  \r\n  // Mettre à jour les acteurs filtrés lorsque l'entreprise change\r\n  useEffect(() => {\r\n    if (formValues.id_entreprise) {\r\n      const filtered = acteurs.filter(acteur => acteur.id_entreprise === formValues.id_entreprise);\r\n      setFilteredActeurs(filtered);\r\n      \r\n      // Si l'acteur sélectionné ne fait pas partie de l'entreprise sélectionnée, réinitialiser\r\n      if (formValues.id_acteur && !filtered.some(acteur => acteur.id_acteur === formValues.id_acteur)) {\r\n        setFormValues(prev => ({ ...prev, id_acteur: '' }));\r\n      }\r\n    } else {\r\n      setFilteredActeurs(acteurs);\r\n    }\r\n  }, [formValues.id_entreprise, acteurs]);\r\n  \r\n  // Gérer les changements dans le formulaire\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const name = event.target.name as keyof typeof formValues;\r\n    const value = event.target.value;\r\n    \r\n    if (name) {\r\n      setFormValues({\r\n        ...formValues,\r\n        [name]: value\r\n      });\r\n      \r\n      // Réinitialiser l'état de validation pour ce champ\r\n      if (name in validation) {\r\n        setValidation({\r\n          ...validation,\r\n          [name]: true\r\n        });\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Gérer la sélection multiple de questionnaires\r\n  const handleQuestionnaireChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = event.target.value as string[];\r\n    setFormValues({\r\n      ...formValues,\r\n      questionnaires: value\r\n    });\r\n    setValidation({\r\n      ...validation,\r\n      questionnaires: true\r\n    });\r\n  };\r\n  \r\n  // Valider l'étape actuelle\r\n  const validateCurrentStep = () => {\r\n    let isValid = true;\r\n    const newValidation = { ...validation };\r\n    \r\n    switch(activeStep) {\r\n      case 0: // Entreprise\r\n        newValidation.id_entreprise = Boolean(formValues.id_entreprise);\r\n        isValid = newValidation.id_entreprise;\r\n        break;\r\n      case 1: // Acteur\r\n        newValidation.id_acteur = Boolean(formValues.id_acteur);\r\n        isValid = newValidation.id_acteur;\r\n        break;\r\n      case 2: // Questionnaires\r\n        newValidation.questionnaires = formValues.questionnaires.length > 0;\r\n        isValid = newValidation.questionnaires;\r\n        break;\r\n    }\r\n    \r\n    setValidation(newValidation);\r\n    return isValid;\r\n  };\r\n  \r\n  // Valider tout le formulaire\r\n  const validateForm = () => {\r\n    const newValidation = {\r\n      id_entreprise: Boolean(formValues.id_entreprise),\r\n      id_acteur: Boolean(formValues.id_acteur),\r\n      questionnaires: formValues.questionnaires.length > 0\r\n    };\r\n    \r\n    setValidation(newValidation);\r\n    \r\n    return Object.values(newValidation).every(Boolean);\r\n  };\r\n  \r\n  // Gérer le changement d'étape\r\n  const handleNext = () => {\r\n    if (validateCurrentStep()) {\r\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    } else {\r\n      setError('Veuillez remplir tous les champs obligatoires avant de continuer.');\r\n    }\r\n  };\r\n  \r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    setError(null);\r\n  };\r\n  \r\n  // Soumettre le formulaire\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      setError('Veuillez remplir tous les champs obligatoires.');\r\n      return;\r\n    }\r\n    \r\n    setSubmitting(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      const DEFAULT_APPLICATION_ID = \"892daedf-3423-11f0-9f03-04bf1ba7bd1e\";\r\n      \r\n      // Créer un formulaire pour chaque questionnaire sélectionné\r\n      const creationPromises = formValues.questionnaires.map(async (id_questionnaire) => {\r\n        const dataToSubmit = {\r\n          id_questionnaire,\r\n          id_acteur: formValues.id_acteur,\r\n          id_application: DEFAULT_APPLICATION_ID, // Valeur par défaut pour l'API\r\n          statut: 'Brouillon' as const\r\n        };\r\n        \r\n        try {\r\n          const response = await api.post('formulaires', dataToSubmit);\r\n          return { success: true, response, id_questionnaire };\r\n        } catch (error) {\r\n          return { success: false, error, id_questionnaire };\r\n        }\r\n      });\r\n      \r\n      const results = await Promise.all(creationPromises);\r\n      \r\n      // Compter les succès et les échecs\r\n      const successes = results.filter(r => r.success);\r\n      const failures = results.filter(r => !r.success);\r\n      \r\n      if (successes.length === 0) {\r\n        setError('Erreur lors de la création des formulaires. Aucun formulaire n\\'a pu être créé.');\r\n      } else if (failures.length > 0) {\r\n        setSuccess(`${successes.length} formulaire(s) créé(s) avec succès. ${failures.length} échec(s).`);\r\n        \r\n        // Attendre 2 secondes avant de rediriger\r\n        setTimeout(() => {\r\n          navigate('/formulaires');\r\n        }, 2000);\r\n      } else {\r\n        setSuccess(`${successes.length} formulaire(s) créé(s) avec succès !`);\r\n        \r\n        // Si un seul formulaire créé, rediriger vers son détail\r\n        if (successes.length === 1) {\r\n          const response = successes[0].response;\r\n          let formId = '';\r\n          if (response && response.data && response.data.id_formulaire) {\r\n            formId = response.data.id_formulaire;\r\n          } else if (response && response.id_formulaire) {\r\n            formId = response.id_formulaire;\r\n          }\r\n          \r\n          if (formId) {\r\n            navigate(`/formulaires/${formId}`);\r\n            return;\r\n          }\r\n        }\r\n        \r\n        // Sinon, rediriger vers la liste après 2 secondes\r\n        setTimeout(() => {\r\n          navigate('/formulaires');\r\n        }, 2000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création des formulaires:', error);\r\n      setError('Erreur lors de la création des formulaires. Veuillez réessayer plus tard.');\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n  \r\n  // Obtenir le contenu de l'étape actuelle\r\n  const getStepContent = (step: number) => {\r\n    switch (step) {\r\n      case 0: // Entreprise\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid size={12}>\r\n              <FormControl fullWidth error={!validation.id_entreprise}>\r\n                <InputLabel id=\"entreprise-label\">Entreprise *</InputLabel>\r\n                <Select\r\n                  labelId=\"entreprise-label\"\r\n                  id=\"id_entreprise\"\r\n                  name=\"id_entreprise\"\r\n                  value={formValues.id_entreprise}\r\n                  onChange={handleChange}\r\n                  label=\"Entreprise *\"\r\n                  required\r\n                >\r\n                  {entreprises.map((ent) => (\r\n                    <MenuItem key={ent.id_entreprise} value={ent.id_entreprise}>\r\n                      {ent.nom_entreprise}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {!validation.id_entreprise && (\r\n                  <FormHelperText>L'entreprise est requise</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n        \r\n      case 1: // Acteur\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid size={12}>\r\n              <FormControl fullWidth error={!validation.id_acteur}>\r\n                <InputLabel id=\"acteur-label\">Acteur *</InputLabel>\r\n                <Select\r\n                  labelId=\"acteur-label\"\r\n                  id=\"id_acteur\"\r\n                  name=\"id_acteur\"\r\n                  value={formValues.id_acteur}\r\n                  onChange={handleChange}\r\n                  label=\"Acteur *\"\r\n                  required\r\n                >\r\n                  {filteredActeurs.map((acteur) => (\r\n                    <MenuItem key={acteur.id_acteur} value={acteur.id_acteur}>\r\n                      {acteur.nom_prenom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {!validation.id_acteur && (\r\n                  <FormHelperText>L'acteur est requis</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n              {filteredActeurs.length === 0 && formValues.id_entreprise && (\r\n                <Alert severity=\"warning\" sx={{ mt: 2 }}>\r\n                  Aucun acteur n'est associé à cette entreprise. Veuillez en ajouter ou sélectionner une autre entreprise.\r\n                </Alert>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n        \r\n      case 2: // Questionnaires\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid size={12}>\r\n              <FormControl fullWidth error={!validation.questionnaires}>\r\n                <InputLabel id=\"questionnaires-label\">Questionnaires *</InputLabel>\r\n                <Select\r\n                  labelId=\"questionnaires-label\"\r\n                  id=\"questionnaires\"\r\n                  name=\"questionnaires\"\r\n                  multiple\r\n                  value={formValues.questionnaires}\r\n                  onChange={handleQuestionnaireChange}\r\n                  label=\"Questionnaires *\"\r\n                  renderValue={(selected) => (\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                      {(selected as string[]).map((value) => {\r\n                        const q = questionnaires.find(quest => quest.id_questionnaire === value);\r\n                        return (\r\n                          <Chip \r\n                            key={value} \r\n                            label={q?.nom || 'Questionnaire inconnu'} \r\n                            size=\"small\" \r\n                          />\r\n                        );\r\n                      })}\r\n                    </Box>\r\n                  )}\r\n                >\r\n                  {questionnaires.map((q) => (\r\n                    <MenuItem key={q.id_questionnaire} value={q.id_questionnaire}>\r\n                      <Checkbox checked={formValues.questionnaires.indexOf(q.id_questionnaire) > -1} />\r\n                      <ListItemText \r\n                        primary={q.nom}\r\n                        secondary={\r\n                          <Box>\r\n                            {q.description && (\r\n                              <Typography variant=\"caption\" display=\"block\">\r\n                                {q.description}\r\n                              </Typography>\r\n                            )}\r\n                            {q.fonctions && q.fonctions.length > 0 && (\r\n                              <Box sx={{ mt: 0.5 }}>\r\n                                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                  Fonctions: {q.fonctions.join(', ')}\r\n                                </Typography>\r\n                              </Box>\r\n                            )}\r\n                            {q.thematiques && q.thematiques.length > 0 && (\r\n                              <Box sx={{ mt: 0.5 }}>\r\n                                {q.thematiques.slice(0, 3).map((thematique, index) => (\r\n                                  <Chip\r\n                                    key={index}\r\n                                    label={thematique}\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"secondary\"\r\n                                    sx={{ mr: 0.5, mb: 0.5 }}\r\n                                  />\r\n                                ))}\r\n                                {q.thematiques.length > 3 && (\r\n                                  <Chip\r\n                                    label={`+${q.thematiques.length - 3}`}\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"default\"\r\n                                  />\r\n                                )}\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        }\r\n                      />\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {!validation.questionnaires && (\r\n                  <FormHelperText>Sélectionnez au moins un questionnaire</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\r\n                {formValues.questionnaires.length} questionnaire(s) sélectionné(s). \r\n                Un formulaire sera créé pour chaque questionnaire.\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n        \r\n      default:\r\n        return 'Étape inconnue';\r\n    }\r\n  };\r\n  \r\n  // Résumé avant soumission\r\n  const renderSummary = () => {\r\n    const entreprise = entreprises.find(e => e.id_entreprise === formValues.id_entreprise);\r\n    const acteur = acteurs.find(a => a.id_acteur === formValues.id_acteur);\r\n    const selectedQuestionnaires = questionnaires.filter(q => \r\n      formValues.questionnaires.includes(q.id_questionnaire)\r\n    );\r\n    \r\n    return (\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Résumé de la création\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid size={12}>\r\n              <Typography variant=\"subtitle2\">Entreprise:</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                {entreprise?.nom_entreprise || 'Non sélectionnée'}\r\n              </Typography>\r\n              \r\n              <Typography variant=\"subtitle2\">Acteur:</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                {acteur?.nom_prenom || 'Non sélectionné'}\r\n              </Typography>\r\n              \r\n              <Typography variant=\"subtitle2\" sx={{ mt: 2 }}>\r\n                Questionnaires sélectionnés ({selectedQuestionnaires.length}):\r\n              </Typography>\r\n              <Box sx={{ ml: 2 }}>\r\n                {selectedQuestionnaires.map((q) => (\r\n                  <Box key={q.id_questionnaire} sx={{ mb: 2 }}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      <CheckCircleIcon color=\"success\" fontSize=\"small\" sx={{ mr: 1 }} />\r\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                        {q.nom}\r\n                      </Typography>\r\n                    </Box>\r\n                    \r\n                    {q.fonctions && q.fonctions.length > 0 && (\r\n                      <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: 3, display: 'block' }}>\r\n                        Fonctions: {q.fonctions.join(', ')}\r\n                      </Typography>\r\n                    )}\r\n                    \r\n                    {q.thematiques && q.thematiques.length > 0 && (\r\n                      <Box sx={{ ml: 3, mt: 0.5 }}>\r\n                        {q.thematiques.map((thematique, index) => (\r\n                          <Chip\r\n                            key={index}\r\n                            label={thematique}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            sx={{ mr: 0.5, mb: 0.5 }}\r\n                          />\r\n                        ))}\r\n                      </Box>\r\n                    )}\r\n                  </Box>\r\n                ))}\r\n              </Box>\r\n              \r\n              <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                {selectedQuestionnaires.length} formulaire(s) seront créés à partir de cette sélection.\r\n              </Alert>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n              <IconButton color=\"primary\" onClick={() => navigate('/formulaires')} sx={{ mr: 1 }}>\r\n                <ArrowBackIcon />\r\n              </IconButton>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Créer des Formulaires d'Évaluation\r\n              </Typography>\r\n            </Box>\r\n            \r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Sélectionnez une entreprise, un acteur et un ou plusieurs questionnaires pour créer les formulaires correspondants.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Stepper */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Stepper activeStep={activeStep} alternativeLabel>\r\n              {steps.map((step, index) => (\r\n                <Step key={index}>\r\n                  <StepLabel>{step.label}</StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Formulaire */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box component=\"form\" noValidate onSubmit={handleSubmit}>\r\n              {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError(null)}>\r\n                  {error}\r\n                </Alert>\r\n              )}\r\n              \r\n              {success && (\r\n                <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n                  {success}\r\n                </Alert>\r\n              )}\r\n              \r\n              {activeStep === steps.length ? (\r\n                <Box>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Toutes les étapes sont complétées\r\n                  </Typography>\r\n                  \r\n                  {renderSummary()}\r\n                  \r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={() => setActiveStep(activeStep - 1)}\r\n                      startIcon={<ArrowBackIcon />}\r\n                    >\r\n                      Retour\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      disabled={submitting}\r\n                      startIcon={<SaveIcon />}\r\n                    >\r\n                      {submitting ? 'Création en cours...' : 'Créer les formulaires'}\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              ) : (\r\n                <Box>\r\n                  <Box sx={{ mb: 3 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      {steps[activeStep].label}\r\n                    </Typography>\r\n                    <Divider />\r\n                  </Box>\r\n                  \r\n                  {getStepContent(activeStep)}\r\n                  \r\n                  <Box display=\"flex\" justifyContent=\"space-between\" mt={3}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={activeStep === 0 ? () => navigate('/formulaires') : handleBack}\r\n                      startIcon={<ArrowBackIcon />}\r\n                    >\r\n                      {activeStep === 0 ? 'Annuler' : 'Précédent'}\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={activeStep === steps.length - 1 ? () => handleNext() : handleNext}\r\n                    >\r\n                      {activeStep === steps.length - 1 ? 'Finaliser' : 'Suivant'}\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormNew;","// src/pages/dashboard/utils/AnalysesUtils.ts\r\nimport { Analyse, Thematique } from '../types/AnalysesTypes';\r\n\r\n// Fonction pour convertir les thématiques en format pour le RadarChart\r\nexport const convertToRadarData = (thematiques: Thematique[] = []) => {\r\n  // Préparer les données pour le radar chart\r\n  return thematiques.map(theme => ({\r\n    thematique: theme.thematique,\r\n    score: theme.score,\r\n    fullMark: 5 // Score maximum possible\r\n  }));\r\n};\r\n\r\n// Normaliser l'objet analyse pour gérer les différents formats possibles (camelCase vs snake_case)\r\nexport const normalizeAnalyse = (analyse: Analyse): Analyse => {\r\n    // S'assurer que les scores globaux sont des nombres\r\n    const score_global = \r\n      typeof analyse.score_global === 'number' ? analyse.score_global :\r\n      typeof analyse.score_global === 'string' ? parseFloat(analyse.score_global) :\r\n      typeof analyse.scoreGlobal === 'number' ? analyse.scoreGlobal :\r\n      typeof analyse.scoreGlobal === 'string' ? parseFloat(analyse.scoreGlobal) : \r\n      null;\r\n    \r\n    // Normaliser les thématiques s'il y en a\r\n    const thematiques = Array.isArray(analyse.thematiques) \r\n      ? analyse.thematiques.map(theme => ({\r\n          ...theme,\r\n          // S'assurer que le score de la thématique est un nombre\r\n          score: typeof theme.score === 'number' ? theme.score :\r\n                 typeof theme.score === 'string' ? parseFloat(theme.score) : 0,\r\n          // S'assurer que le nombre de réponses est un nombre\r\n          nombre_reponses: typeof theme.nombre_reponses === 'number' ? theme.nombre_reponses :\r\n                          typeof theme.nombre_reponses === 'string' ? parseInt(theme.nombre_reponses, 10) : 0\r\n        }))\r\n      : [];\r\n  \r\n    return {\r\n      ...analyse,\r\n      nom_application: analyse.nom_application || analyse.nom || 'Application inconnue',\r\n      nom: analyse.nom || analyse.nom_application || 'Application inconnue',\r\n      score_global: score_global,\r\n      scoreGlobal: score_global,\r\n      thematiques\r\n    };\r\n  };\r\n\r\n// Fonction pour formater la date\r\nexport const formatDate = (dateString: string) => {\r\n  try {\r\n    return new Date(dateString).toLocaleDateString('fr-FR');\r\n  } catch (e) {\r\n    return 'Date inconnue';\r\n  }\r\n};\r\n\r\n// src/utils/AnalyseUtils.ts\r\n\r\n/**\r\n * Fonction pour obtenir la couleur MUI en fonction du niveau de maturité\r\n */\r\nexport const getNiveauColor = (niveau: string): \"success\" | \"info\" | \"warning\" | \"error\" | \"default\" => {\r\n  // Niveaux numériques\r\n  if (niveau.includes('5') || niveau.includes('Optimisé') || niveau.includes('Avancé')) return 'success';\r\n  if (niveau.includes('4') || niveau.includes('Géré')) return 'success';\r\n  if (niveau.includes('3') || niveau.includes('Mesuré') || niveau.includes('Intermédiaire')) return 'info';\r\n  if (niveau.includes('2') || niveau.includes('Défini')) return 'warning';\r\n  if (niveau.includes('1') || niveau.includes('Initial') || niveau.includes('Faible')) return 'error';\r\n  \r\n  // Niveaux qualitatifs\r\n  if (niveau.includes('Excellent')) return 'success';\r\n  if (niveau.includes('Bon')) return 'info';\r\n  if (niveau.includes('Moyen')) return 'warning';\r\n  if (niveau.includes('Faible')) return 'error';\r\n  \r\n  return 'default';\r\n};\r\n\r\n\r\n/**\r\n * Fonction pour calculer le score moyen d'une liste de scores\r\n */\r\nexport const calculateAverageScore = (scores: number[]): number => {\r\n  if (!scores || scores.length === 0) return 0;\r\n  const sum = scores.reduce((a, b) => a + b, 0);\r\n  return sum / scores.length;\r\n};\r\n\r\n/**\r\n * Fonction pour déterminer le niveau global en fonction du score\r\n */\r\nexport const determineNiveauGlobal = (score: number, fonction?: string): string => {\r\n  // Niveaux par défaut\r\n  if (score >= 4.5) return 'Niveau 5 - Optimisé';\r\n  if (score >= 3.5) return 'Niveau 4 - Géré';\r\n  if (score >= 2.5) return 'Niveau 3 - Mesuré';\r\n  if (score >= 1.5) return 'Niveau 2 - Défini';\r\n  return 'Niveau 1 - Initial';\r\n};\r\n\r\n/**\r\n * Fonction pour générer une recommandation basique en fonction du niveau\r\n */\r\nexport const generateBasicRecommendation = (score: number, fonction?: string): string => {\r\n  if (score >= 4.5) {\r\n    return \"Maintenir l'excellence par l'innovation continue et le partage des bonnes pratiques avec l'écosystème.\";\r\n  }\r\n  if (score >= 3.5) {\r\n    return \"Optimiser les processus existants et développer des mécanismes prédictifs.\";\r\n  }\r\n  if (score >= 2.5) {\r\n    return \"Automatiser davantage les contrôles et améliorer la mesure des performances.\";\r\n  }\r\n  if (score >= 1.5) {\r\n    return \"Standardiser les processus et renforcer le partage de connaissances entre équipes.\";\r\n  }\r\n  return \"Établir les fondations avec une sensibilisation et une formation des équipes.\";\r\n};","import React from 'react';\r\n\r\ninterface StatCardProps {\r\n  title: string;\r\n  value: string | number;\r\n  variant?: 'primary' | 'secondary' | 'accent1' | 'accent2' | 'accent3' | 'accent4';\r\n  size?: 'sm' | 'md' | 'lg';\r\n  subtitle?: string;\r\n  trend?: {\r\n    value: number;\r\n    label?: string;\r\n    isPositive?: boolean;\r\n  };\r\n}\r\n\r\nconst StatCard: React.FC<StatCardProps> = ({\r\n  title,\r\n  value,\r\n  variant = 'primary',\r\n  size = 'md',\r\n  subtitle,\r\n  trend\r\n}) => {\r\n  // Définir les classes basées sur la variante\r\n  const getVariantClasses = () => {\r\n    switch (variant) {\r\n      case 'primary':\r\n        return {\r\n          bg: 'bg-primary-50',\r\n          text: 'text-primary-900',\r\n          border: 'border-primary-200'\r\n        };\r\n      case 'secondary':\r\n        return {\r\n          bg: 'bg-secondary-50',\r\n          text: 'text-secondary-900',\r\n          border: 'border-secondary-200'\r\n        };\r\n      case 'accent1':\r\n        return {\r\n          bg: 'bg-accent1-light bg-opacity-30',\r\n          text: 'text-accent1',\r\n          border: 'border-accent1-light'\r\n        };\r\n      case 'accent2':\r\n        return {\r\n          bg: 'bg-accent2-light bg-opacity-30',\r\n          text: 'text-accent2',\r\n          border: 'border-accent2-light'\r\n        };\r\n      case 'accent3':\r\n        return {\r\n          bg: 'bg-accent3-light bg-opacity-30',\r\n          text: 'text-accent3',\r\n          border: 'border-accent3-light'\r\n        };\r\n      case 'accent4':\r\n        return {\r\n          bg: 'bg-accent4-light bg-opacity-30',\r\n          text: 'text-accent4',\r\n          border: 'border-accent4-light'\r\n        };\r\n      default:\r\n        return {\r\n          bg: 'bg-gray-50',\r\n          text: 'text-gray-900',\r\n          border: 'border-gray-200'\r\n        };\r\n    }\r\n  };\r\n\r\n  // Taille du composant\r\n  const getSizeClasses = () => {\r\n    switch (size) {\r\n      case 'sm':\r\n        return 'p-3';\r\n      case 'lg':\r\n        return 'p-5';\r\n      default:\r\n        return 'p-4';\r\n    }\r\n  };\r\n\r\n  const variantClasses = getVariantClasses();\r\n  const sizeClasses = getSizeClasses();\r\n\r\n  return (\r\n    <div className={`rounded-lg border ${variantClasses.bg} ${variantClasses.border} ${sizeClasses} shadow-card`}>\r\n      <div>\r\n        <p className=\"text-sm font-medium text-gray-500 mb-1\">{title}</p>\r\n        <div className=\"flex items-baseline\">\r\n          <h3 className={`text-2xl font-bold ${variantClasses.text}`}>{value}</h3>\r\n          {subtitle && <p className=\"ml-2 text-sm text-gray-500\">{subtitle}</p>}\r\n        </div>\r\n        \r\n        {trend && (\r\n          <p className=\"mt-1 flex items-center text-sm\">\r\n            <span className={trend.isPositive ? 'text-success-500' : 'text-danger-500'}>\r\n              {trend.isPositive ? '↑' : '↓'} {Math.abs(trend.value)}%\r\n            </span>\r\n            {trend.label && <span className=\"text-gray-500 ml-1\">{trend.label}</span>}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant pour afficher un ensemble de cartes statistiques\r\ninterface StatsGridProps {\r\n  stats: StatCardProps[];\r\n  columns?: 1 | 2 | 3 | 4 | 5 | 6;\r\n  className?: string;\r\n}\r\n\r\nconst StatsGrid: React.FC<StatsGridProps> = ({\r\n  stats,\r\n  columns = 4,\r\n  className = ''\r\n}) => {\r\n  const gridClasses = `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-${columns} gap-4 ${className}`;\r\n  \r\n  return (\r\n    <div className={gridClasses}>\r\n      {stats.map((stat, index) => (\r\n        <StatCard key={index} {...stat} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { StatCard, StatsGrid };","//\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  Box,\r\n  Grid,\r\n  Divider,\r\n  Chip,\r\n  CircularProgress,\r\n  Alert,\r\n  Button,\r\n  Tooltip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from '@mui/material';\r\nimport {\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip as RechartsTooltip,\r\n  Legend,\r\n} from 'recharts';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { StatCard } from '../../components/dashboard/StatsCard';\r\nimport api from '../../services/api';\r\n\r\nconst getNiveauColor = (score) => {\r\n  if (score >= 4) return 'success';\r\n  if (score >= 3) return 'info';\r\n  if (score >= 2) return 'warning';\r\n  return 'error';\r\n};\r\n\r\nconst getNiveauLabel = (score) => {\r\n  if (score >= 4) return 'Optimisé';\r\n  if (score >= 3) return 'Mesuré';\r\n  if (score >= 2) return 'Défini';\r\n  if (score >= 1) return 'Initial';\r\n  return 'Non défini';\r\n};\r\n\r\nconst EntrepriseScoresPanel = ({ entrepriseId }) => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [entreprise, setEntreprise] = useState(null);\r\n  const [analyses, setAnalyses] = useState([]);\r\n  const [historique, setHistorique] = useState([]);\r\n  const [updatingScore, setUpdatingScore] = useState(false);\r\n\r\n  const fetchEntrepriseData = async () => {\r\n    if (!entrepriseId) return;\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const [entrepriseData, analysesResponse, historiqueResponse] = await Promise.all([\r\n        api.get(`/entreprises/${entrepriseId}`),\r\n        api.get(`/analyses/entreprise/${entrepriseId}`),\r\n        api.get(`/historique/entreprise/${entrepriseId}`)\r\n      ]);\r\n      setEntreprise(entrepriseData);\r\n      setAnalyses(Array.isArray(analysesResponse) ? analysesResponse : analysesResponse.data || []);\r\n      setHistorique(historiqueResponse.historique_global || []);\r\n    } catch (err) {\r\n      console.error('Erreur lors de la récupération des données:', err);\r\n      setError('Impossible de charger les données.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const recalculateScore = async () => {\r\n    if (!entrepriseId) return;\r\n    setUpdatingScore(true);\r\n    setError(null);\r\n    try {\r\n      await api.post(`/entreprises/${entrepriseId}/calculer`);\r\n      await fetchEntrepriseData();\r\n    } catch (err) {\r\n      console.error('Erreur lors du recalcul:', err);\r\n      setError('Impossible de recalculer le score.');\r\n    } finally {\r\n      setUpdatingScore(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEntrepriseData();\r\n  }, [entrepriseId]);\r\n\r\n  const prepareChartData = () => {\r\n    if (!historique.length) return [];\r\n    return [...historique]\r\n      .sort((a, b) => new Date(a.date_mesure) - new Date(b.date_mesure))\r\n      .map(item => ({\r\n        date: new Date(item.date_mesure).toLocaleDateString('fr-FR'),\r\n        score: item.score_global || 0,\r\n      }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>;\r\n  }\r\n\r\n  if (!entreprise) {\r\n    return <Alert severity=\"info\">Aucune entreprise sélectionnée.</Alert>;\r\n  }\r\n\r\n  const scoreGlobal = entreprise.score_global || 0;\r\n  const niveauLabel = getNiveauLabel(scoreGlobal);\r\n  const niveauColor = getNiveauColor(scoreGlobal);\r\n  const chartData = prepareChartData();\r\n\r\n  return (\r\n    <Card variant=\"outlined\" sx={{ mb: 3 }}>\r\n      <CardHeader\r\n        title={\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Typography variant=\"h6\">Scores de maturité - {entreprise.nom_entreprise}</Typography>\r\n            <Tooltip title=\"Recalculer le score\">\r\n              <Button\r\n                size=\"small\"\r\n                startIcon={<RefreshIcon />}\r\n                onClick={recalculateScore}\r\n                disabled={updatingScore}\r\n              >\r\n                {updatingScore ? 'Calcul en cours...' : 'Recalculer'}\r\n              </Button>\r\n            </Tooltip>\r\n          </Box>\r\n        }\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={4}>\r\n            <StatCard\r\n              title=\"Score Global\"\r\n              value={typeof scoreGlobal === 'number' ? scoreGlobal.toFixed(2) : '0.00'}\r\n              variant=\"primary\"\r\n              subtitle={<Chip label={niveauLabel} color={niveauColor} />}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8}>\r\n            {chartData.length > 1 ? (\r\n              <Box height={250}>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <LineChart data={chartData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"date\" />\r\n                    <YAxis domain={[0, 5]} />\r\n                    <RechartsTooltip />\r\n                    <Legend />\r\n                    <Line\r\n                      type=\"monotone\"\r\n                      dataKey=\"score\"\r\n                      stroke=\"#0B4E87\"\r\n                      name=\"Score global\"\r\n                      activeDot={{ r: 8, fill: '#0B4E87' }}\r\n                    />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </Box>\r\n            ) : (\r\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height={250}>\r\n                <Typography color=\"text.secondary\">\r\n                  Pas assez de données historiques.\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Divider sx={{ my: 2 }} />\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Analyses des applications ({analyses.length})\r\n            </Typography>\r\n            {analyses.length > 0 ? (\r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Application</TableCell>\r\n                      <TableCell>Score Global</TableCell>\r\n                      <TableCell>Date d'analyse</TableCell>\r\n                      <TableCell>Actions</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {analyses.map((analyse) => (\r\n                      <TableRow key={analyse.id_analyse}>\r\n                        <TableCell>{analyse.nom_application || 'Non spécifié'}</TableCell>\r\n                        <TableCell>\r\n                          {typeof analyse.score_global === 'number' ? analyse.score_global.toFixed(2) : '0.00'}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {new Date(analyse.date_analyse).toLocaleDateString('fr-FR')}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Button\r\n                            size=\"small\"\r\n                            onClick={() => navigate(`/analyses-interpretations/${analyse.id_application}`)}\r\n                          >\r\n                            Détails\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            ) : (\r\n              <Alert severity=\"info\">Aucune analyse disponible pour cette entreprise.</Alert>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EntrepriseScoresPanel;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Autocomplete,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Drawer,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Chip,\r\n  IconButton,\r\n  TableSortLabel,\r\n  TablePagination,\r\n  InputAdornment,\r\n  ToggleButtonGroup,\r\n  ToggleButton,\r\n  Snackbar,\r\n} from '@mui/material';\r\nimport {\r\n  Radar,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  ResponsiveContainer,\r\n  Legend,\r\n} from 'recharts';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { fr } from 'date-fns/locale';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CalculateIcon from '@mui/icons-material/Calculate';\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport AppsTwoToneIcon from '@mui/icons-material/AppsTwoTone';\r\nimport EntrepriseScoresPanel from './EntrepriseScoresPanel';\r\nimport { StatCard } from '../dashboard/StatsCard';\r\nimport { AnalysesInterpretationsUIProps, TabPanelProps } from '../../types/AnalysesTypes';\r\nimport { getNiveauColor, formatDate } from '../../utils/AnalyseUtils';\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`analysis-tabpanel-${index}`}\r\n      aria-labelledby={`analysis-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const AnalysesInterpretationsUI: React.FC<AnalysesInterpretationsUIProps> = ({\r\n  loading,\r\n  error,\r\n  applications,\r\n  entreprises,\r\n  selectedApplication,\r\n  selectedEntreprise,\r\n  analyses,\r\n  selectedAnalyse,\r\n  interpretation,\r\n  historique,\r\n  filteredHistorique,\r\n  tabValue,\r\n  selectedThematique,\r\n  openDialog,\r\n  newAnalyseData,\r\n  interpretationsSummary,\r\n  page,\r\n  rowsPerPage,\r\n  order,\r\n  orderBy,\r\n  searchTerm,\r\n  filters,\r\n  showFilters,\r\n  uniqueThematiques,\r\n  handleApplicationChange,\r\n  handleEntrepriseChange,\r\n  handleAnalyseChange,\r\n  handleThematiqueChange,\r\n  handleTabChange,\r\n  handleOpenNewAnalyseDialog,\r\n  handleCloseDialog,\r\n  addThematique,\r\n  updateThematique,\r\n  removeThematique,\r\n  createNewAnalyse,\r\n  calculateNewAnalyse,\r\n  getScoreGlobal,\r\n  prepareHistoriqueData,\r\n  handleChangePage,\r\n  handleChangeRowsPerPage,\r\n  handleRequestSort,\r\n  getFilteredData,\r\n  getUniqueValues,\r\n  setSearchTerm,\r\n  setFilters,\r\n  setShowFilters,\r\n  fetchAllInterpretations,\r\n  fetchAnalysesByApplication,\r\n  fetchAnalysesByEntreprise,\r\n  fetchHistoriqueByEntreprise,\r\n}) => {\r\n  const [viewMode, setViewMode] = useState<'application' | 'entreprise'>(\r\n    selectedApplication ? 'application' : selectedEntreprise ? 'entreprise' : 'application'\r\n  );\r\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });\r\n\r\n  useEffect(() => {\r\n    if (selectedApplication && !selectedEntreprise) setViewMode('application');\r\n    else if (selectedEntreprise && !selectedApplication) setViewMode('entreprise');\r\n  }, [selectedApplication, selectedEntreprise]);\r\n\r\n  const toggleViewMode = () => {\r\n    if (viewMode === 'application') {\r\n      setViewMode('entreprise');\r\n      if (selectedApplication) {\r\n        const app = applications.find(a => a.id_application === selectedApplication);\r\n        if (app?.id_entreprise) {\r\n          handleEntrepriseChange({ target: { value: app.id_entreprise } } as any);\r\n        }\r\n      }\r\n    } else {\r\n      setViewMode('application');\r\n      if (selectedEntreprise && !selectedApplication) {\r\n        const appsOfEntreprise = applications.filter(a => a.id_entreprise === selectedEntreprise);\r\n        if (appsOfEntreprise.length > 0) {\r\n          handleApplicationChange({ target: { value: appsOfEntreprise[0].id_application } } as any);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const CustomRadarTooltip = ({ active, payload }: any) => {\r\n    if (active && payload?.length) {\r\n      return (\r\n        <Paper sx={{ p: 1 }}>\r\n          <Typography>{`Thématique: ${payload[0].payload.thematique}`}</Typography>\r\n          <Typography>{`Score: ${payload[0].value}`}</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n      >\r\n        <Alert severity={snackbar.severity}>{snackbar.message}</Alert>\r\n      </Snackbar>\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Analyses et Interprétations de Maturité\r\n              </Typography>\r\n              <Box>\r\n                <ToggleButtonGroup\r\n                  value={viewMode}\r\n                  exclusive\r\n                  onChange={(e, newMode) => newMode && toggleViewMode()}\r\n                  color=\"primary\"\r\n                  sx={{ mr: 2 }}\r\n                >\r\n                  <ToggleButton value=\"application\" startIcon={<AppsTwoToneIcon />}>\r\n                    Vue Application\r\n                  </ToggleButton>\r\n                  <ToggleButton value=\"entreprise\" startIcon={<BusinessIcon />}>\r\n                    Vue Entreprise\r\n                  </ToggleButton>\r\n                </ToggleButtonGroup>\r\n                {viewMode === 'application' && (\r\n                  <>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={handleOpenNewAnalyseDialog}\r\n                      sx={{ mr: 1 }}\r\n                    >\r\n                      Nouvelle Analyse\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={calculateNewAnalyse}\r\n                      startIcon={<CalculateIcon />}\r\n                    >\r\n                      Calculer Analyse\r\n                    </Button>\r\n                  </>\r\n                )}\r\n                {viewMode === 'entreprise' && selectedEntreprise && (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => fetchAnalysesByEntreprise(selectedEntreprise)}\r\n                    startIcon={<CalculateIcon />}\r\n                  >\r\n                    Calculer Scores\r\n                  </Button>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n\r\n            <Autocomplete\r\n              options={entreprises}\r\n              getOptionLabel={(option) => option.nom_entreprise}\r\n              value={entreprises.find(e => e.id_entreprise === selectedEntreprise) || null}\r\n              onChange={(e, newValue) => handleEntrepriseChange({ target: { value: newValue?.id_entreprise || '' } } as any)}\r\n              renderInput={(params) => <TextField {...params} label=\"Entreprise\" />}\r\n              sx={{ mb: 2 }}\r\n            />\r\n\r\n            {(viewMode === 'application' || selectedEntreprise) && (\r\n              <Autocomplete\r\n                options={applications.filter(app => !selectedEntreprise || app.id_entreprise === selectedEntreprise)}\r\n                getOptionLabel={(option) => option.nom_application}\r\n                value={applications.find(a => a.id_application === selectedApplication) || null}\r\n                onChange={(e, newValue) => handleApplicationChange({ target: { value: newValue?.id_application || '' } } as any)}\r\n                renderInput={(params) => <TextField {...params} label=\"Application\" />}\r\n                disabled={loading}\r\n              />\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {viewMode === 'entreprise' && selectedEntreprise ? (\r\n          <Grid xs={12}>\r\n            <EntrepriseScoresPanel entrepriseId={selectedEntreprise} />\r\n          </Grid>\r\n        ) : (\r\n          <>\r\n            {selectedAnalyse && (\r\n              <Grid xs={12} md={4}>\r\n                <StatCard\r\n                  title=\"Score Global\"\r\n                  value={getScoreGlobal()}\r\n                  variant=\"primary\"\r\n                  subtitle=\"Maturité\"\r\n                />\r\n              </Grid>\r\n            )}\r\n\r\n            <Grid xs={12}>\r\n              <Paper sx={{ width: '100%', mb: 2 }}>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" p={2}>\r\n                  <Typography variant=\"h6\">Récapitulatif des analyses</Typography>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <TextField\r\n                      size=\"small\"\r\n                      placeholder=\"Rechercher...\"\r\n                      value={searchTerm}\r\n                      onChange={(e) => setSearchTerm(e.target.value)}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <SearchIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      sx={{ mr: 2 }}\r\n                    />\r\n                    <Button startIcon={<FilterListIcon />} onClick={() => setShowFilters(true)}>\r\n                      Filtres\r\n                    </Button>\r\n                    <IconButton onClick={fetchAllInterpretations}>\r\n                      <RefreshIcon />\r\n                    </IconButton>\r\n                  </Box>\r\n                </Box>\r\n\r\n                <Drawer anchor=\"right\" open={showFilters} onClose={() => setShowFilters(false)}>\r\n                  <Box sx={{ width: 300, p: 2 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>Filtres</Typography>\r\n                    <Autocomplete\r\n                      options={getUniqueValues('nom_application')}\r\n                      value={filters.application}\r\n                      onChange={(e, newValue) => setFilters({ ...filters, application: newValue || '' })}\r\n                      renderInput={(params) => <TextField {...params} label=\"Application\" />}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <Autocomplete\r\n                      options={getUniqueValues('niveau_global')}\r\n                      value={filters.niveau}\r\n                      onChange={(e, newValue) => setFilters({ ...filters, niveau: newValue || '' })}\r\n                      renderInput={(params) => <TextField {...params} label=\"Niveau\" />}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Score min\"\r\n                      type=\"number\"\r\n                      value={filters.scoreMin}\r\n                      onChange={(e) => setFilters({ ...filters, scoreMin: e.target.value })}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Score max\"\r\n                      type=\"number\"\r\n                      value={filters.scoreMax}\r\n                      onChange={(e) => setFilters({ ...filters, scoreMax: e.target.value })}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <Button\r\n                      onClick={() => setFilters({ application: '', niveau: '', organisation: '', scoreMin: '', scoreMax: '' })}\r\n                    >\r\n                      Réinitialiser\r\n                    </Button>\r\n                  </Box>\r\n                </Drawer>\r\n\r\n                <TableContainer sx={{ maxHeight: 440 }}>\r\n                  <Table stickyHeader>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'nom_application'}\r\n                            direction={orderBy === 'nom_application' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('nom_application')}\r\n                          >\r\n                            Application\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'id_entreprise'}\r\n                            direction={orderBy === 'id_entreprise' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('id_entreprise')}\r\n                          >\r\n                            Entreprise\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'score_global'}\r\n                            direction={orderBy === 'score_global' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('score_global')}\r\n                          >\r\n                            Score\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'niveau_global'}\r\n                            direction={orderBy === 'niveau_global' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('niveau_global')}\r\n                          >\r\n                            Niveau\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'date_analyse'}\r\n                            direction={orderBy === 'date_analyse' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('date_analyse')}\r\n                          >\r\n                            Date\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>Actions</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {getFilteredData().map((interpretation) => {\r\n                        const entreprise = entreprises.find(e => e.id_entreprise === interpretation.id_entreprise);\r\n                        const entrepriseName = entreprise ? entreprise.nom_entreprise : 'Non spécifiée';\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            key={interpretation.id_analyse}\r\n                            selected={selectedApplication === interpretation.id_application}\r\n                            onClick={() => fetchAnalysesByApplication(interpretation.id_application)}\r\n                            sx={{ cursor: 'pointer' }}\r\n                          >\r\n                            <TableCell>{interpretation.nom_application}</TableCell>\r\n                            <TableCell>{entrepriseName}</TableCell>\r\n                            <TableCell>\r\n                              {typeof interpretation.score_global === 'number'\r\n                                ? interpretation.score_global.toFixed(2)\r\n                                : '0.00'}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Chip\r\n                                label={interpretation.niveau_global}\r\n                                color={getNiveauColor(interpretation.niveau_global)}\r\n                                size=\"small\"\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>{formatDate(interpretation.date_analyse)}</TableCell>\r\n                            <TableCell>\r\n                              <Button\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                color={selectedApplication === interpretation.id_application ? 'secondary' : 'primary'}\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                  fetchAnalysesByApplication(interpretation.id_application);\r\n                                }}\r\n                              >\r\n                                {selectedApplication === interpretation.id_application ? 'Sélectionnée' : 'Sélectionner'}\r\n                              </Button>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                      {getFilteredData().length === 0 && (\r\n                        <TableRow>\r\n                          <TableCell colSpan={6} align=\"center\">\r\n                            Aucune analyse trouvée\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n\r\n                <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25, 50]}\r\n                  component=\"div\"\r\n                  count={interpretationsSummary.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                  labelRowsPerPage=\"Lignes par page:\"\r\n                  labelDisplayedRows={({ from, to, count }) => `${from}-${to} sur ${count}`}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n\r\n            {selectedAnalyse && (\r\n              <>\r\n                <Grid xs={12}>\r\n                  <Card>\r\n                    <CardHeader title=\"Répartition par Thématique\" />\r\n                    <CardContent>\r\n                      {selectedAnalyse.thematiques?.length > 0 ? (\r\n                        <ResponsiveContainer width=\"100%\" height={350}>\r\n                          <RadarChart\r\n                            outerRadius={150}\r\n                            data={selectedAnalyse.thematiques.map(theme => ({\r\n                              thematique: theme.thematique,\r\n                              score: theme.score || 0,\r\n                              fullMark: 5,\r\n                            }))}\r\n                          >\r\n                            <PolarGrid />\r\n                            <PolarAngleAxis dataKey=\"thematique\" />\r\n                            <PolarRadiusAxis angle={30} domain={[0, 5]} />\r\n                            <Radar\r\n                              name=\"Score\"\r\n                              dataKey=\"score\"\r\n                              stroke=\"#0B4E87\"\r\n                              fill=\"#0B4E87\"\r\n                              fillOpacity={0.6}\r\n                            />\r\n                            <Legend />\r\n                            <RechartsTooltip content={<CustomRadarTooltip />} />\r\n                          </RadarChart>\r\n                        </ResponsiveContainer>\r\n                      ) : (\r\n                        <Typography align=\"center\">Aucune donnée de thématique disponible</Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                <Grid xs={12}>\r\n                  <Paper sx={{ width: '100%' }}>\r\n                    <Tabs\r\n                      value={tabValue}\r\n                      onChange={handleTabChange}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      variant=\"fullWidth\"\r\n                    >\r\n                      <Tab label=\"Interprétation\" />\r\n                      <Tab label=\"Détails par Thématique\" />\r\n                      <Tab label=\"Historique\" />\r\n                      <Tab label=\"Analyses Précédentes\" />\r\n                    </Tabs>\r\n\r\n                    <TabPanel value={tabValue} index={0}>\r\n                      {interpretation ? (\r\n                        <Grid container spacing={2}>\r\n                          <Grid xs={12}>\r\n                            <Card>\r\n                              <CardHeader\r\n                                title=\"Niveau de Maturité\"\r\n                                subheader={interpretation.niveau}\r\n                                action={\r\n                                  <Chip\r\n                                    label={interpretation.niveau}\r\n                                    color={getNiveauColor(interpretation.niveau)}\r\n                                    size=\"medium\"\r\n                                  />\r\n                                }\r\n                              />\r\n                              <CardContent>\r\n                                <Typography variant=\"body1\" paragraph>\r\n                                  {interpretation.description}\r\n                                </Typography>\r\n                              </CardContent>\r\n                            </Card>\r\n                          </Grid>\r\n                          <Grid xs={12}>\r\n                            <Card>\r\n                              <CardHeader title=\"Recommandations\" />\r\n                              <CardContent>\r\n                                <Typography variant=\"body1\" paragraph>\r\n                                  {interpretation.recommandations}\r\n                                </Typography>\r\n                              </CardContent>\r\n                            </Card>\r\n                          </Grid>\r\n                        </Grid>\r\n                      ) : (\r\n                        <Alert severity=\"info\">\r\n                          Aucune interprétation disponible.\r\n                        </Alert>\r\n                      )}\r\n                    </TabPanel>\r\n                    {/* Autres onglets inchangés */}\r\n                  </Paper>\r\n                </Grid>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </Grid>\r\n\r\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Créer une nouvelle analyse</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle1\" gutterBottom>\r\n            Application: {applications.find(app => app.id_application === selectedApplication)?.nom_application || 'Non sélectionnée'}\r\n          </Typography>\r\n          <Box sx={{ mt: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>Thématiques et Scores</Typography>\r\n            {newAnalyseData.thematiques.map((theme, index) => (\r\n              <Grid container spacing={2} key={index} sx={{ mb: 2 }}>\r\n                <Grid xs={5}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Thématique\"\r\n                    value={theme.thematique}\r\n                    onChange={(e) => updateThematique(index, 'thematique', e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"number\"\r\n                    label=\"Score\"\r\n                    value={theme.score}\r\n                    inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                    onChange={(e) => updateThematique(index, 'score', parseFloat(e.target.value))}\r\n                  />\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"number\"\r\n                    label=\"Nombre de réponses\"\r\n                    value={theme.nombre_reponses}\r\n                    inputProps={{ min: 0, step: 1 }}\r\n                    onChange={(e) => updateThematique(index, 'nombre_reponses', parseInt(e.target.value))}\r\n                  />\r\n                </Grid>\r\n                <Grid xs={1}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"error\"\r\n                    onClick={() => removeThematique(index)}\r\n                    sx={{ height: '100%' }}\r\n                  >\r\n                    X\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            ))}\r\n            <Button variant=\"outlined\" onClick={addThematique} sx={{ mt: 1 }}>\r\n              Ajouter une thématique\r\n            </Button>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Annuler</Button>\r\n          <Button\r\n            onClick={() => {\r\n              createNewAnalyse().then(() =>\r\n                setSnackbar({ open: true, message: 'Analyse créée avec succès', severity: 'success' })\r\n              ).catch(() =>\r\n                setSnackbar({ open: true, message: 'Erreur lors de la création', severity: 'error' })\r\n              );\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={newAnalyseData.thematiques.length === 0}\r\n          >\r\n            Créer l'analyse\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AnalysesInterpretationsUI;","// src/pages/dashboard/AnalysesInterpretations.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport api from '../../services/api';\r\nimport {\r\n  Application,\r\n  Analyse,\r\n  Interpretation,\r\n  HistoriqueScore,\r\n  Thematique,\r\n  Entreprise,\r\n  InterpretationSummary,\r\n  FilterState\r\n} from '../../types/AnalysesTypes';\r\nimport { normalizeAnalyse } from '../../utils/AnalyseUtils';\r\nimport { AnalysesInterpretationsUI } from '../../components/dashboard/AnalysesInterpretationsUI';\r\n\r\nconst AnalysesInterpretations: React.FC = () => {\r\n  const { id } = useParams<{ id?: string }>();\r\n  const navigate = useNavigate();\r\n  \r\n  // États de chargement et erreurs\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // États principaux liés aux données\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [selectedApplication, setSelectedApplication] = useState<string>('');\r\n  const [analyses, setAnalyses] = useState<Analyse[]>([]);\r\n  const [selectedAnalyse, setSelectedAnalyse] = useState<Analyse | null>(null);\r\n  const [interpretation, setInterpretation] = useState<Interpretation | null>(null);\r\n  const [historique, setHistorique] = useState<HistoriqueScore[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [selectedEntreprise, setSelectedEntreprise] = useState<string>('');\r\n\r\n  // États d'interface utilisateur\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  const [selectedThematique, setSelectedThematique] = useState<string>('');\r\n  const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n  const [newAnalyseData, setNewAnalyseData] = useState<{ id_application: string, thematiques: Thematique[] }>({\r\n    id_application: '',\r\n    thematiques: []\r\n  });\r\n  const [interpretationsSummary, setInterpretationsSummary] = useState<InterpretationSummary[]>([]);\r\n  \r\n  // États pour la pagination et le tri du tableau\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [order, setOrder] = useState<'asc' | 'desc'>('desc');\r\n  const [orderBy, setOrderBy] = useState<keyof InterpretationSummary>('date_analyse');\r\n  \r\n  // États pour le filtrage\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filters, setFilters] = useState<FilterState>({\r\n    application: '',\r\n    niveau: '',\r\n    organisation: '',\r\n    scoreMin: '',\r\n    scoreMax: ''\r\n  });\r\n  const [showFilters, setShowFilters] = useState(false);\r\n\r\n  // Préparation des données dérivées\r\n  const filteredHistorique = selectedThematique\r\n    ? historique.filter(item => item.thematique === selectedThematique)\r\n    : historique;\r\n  \r\n  const uniqueThematiques = [...new Set(historique.map(item => item.thematique))];\r\n\r\n  // Fonctions de chargement des données\r\n  \r\n  // Charger toutes les interprétations\r\n  const fetchAllInterpretations = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Récupérer toutes les interprétations\r\n      const interpretationsResponse = await api.get('interpretations');\r\n      \r\n      // Récupérer tous les mappings application-entreprise\r\n      // si l'API ne fournit pas directement cette relation\r\n      const appEntrepriseMapResponse = await api.get('applications/entreprise-mapping');\r\n      \r\n      if (Array.isArray(interpretationsResponse)) {\r\n        let interpretationsData = interpretationsResponse;\r\n        \r\n        // Si nous avons un mapping application-entreprise, l'utiliser pour enrichir les données\r\n        if (appEntrepriseMapResponse && typeof appEntrepriseMapResponse === 'object') {\r\n          // Créer un mapping d'ID d'application à ID d'entreprise\r\n          const appToEntrepriseMap = {};\r\n          \r\n          // Si le mapping est un tableau d'objets avec id_application et id_entreprise\r\n          if (Array.isArray(appEntrepriseMapResponse)) {\r\n            appEntrepriseMapResponse.forEach(mapping => {\r\n              appToEntrepriseMap[mapping.id_application] = mapping.id_entreprise;\r\n            });\r\n          } \r\n          // Si le mapping est un objet avec des clés d'application et des valeurs d'entreprise\r\n          else {\r\n            Object.keys(appEntrepriseMapResponse).forEach(appId => {\r\n              appToEntrepriseMap[appId] = appEntrepriseMapResponse[appId];\r\n            });\r\n          }\r\n          \r\n          // Enrichir les interprétations avec l'ID d'entreprise\r\n          interpretationsData = interpretationsData.map(interpretation => ({\r\n            ...interpretation,\r\n            id_entreprise: \r\n              // Utiliser l'ID d'entreprise s'il existe déjà\r\n              interpretation.id_entreprise || \r\n              // Sinon, le récupérer depuis le mapping\r\n              (appToEntrepriseMap[interpretation.id_application] || ''),\r\n            // Ajouter une organisation par défaut si elle n'existe pas\r\n            organisation: interpretation.organisation || 'DSIN'\r\n          }));\r\n        } else {\r\n          // Si nous n'avons pas de mapping, juste s'assurer que les champs requis existent\r\n          interpretationsData = interpretationsData.map(interpretation => ({\r\n            ...interpretation,\r\n            id_entreprise: interpretation.id_entreprise || '',\r\n            organisation: interpretation.organisation || 'DSIN'\r\n          }));\r\n        }\r\n        \r\n        // Mettre à jour l'état\r\n        setInterpretationsSummary(interpretationsData);\r\n        console.log(`Chargement de ${interpretationsData.length} interprétations`);\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les interprétations:', interpretationsResponse);\r\n        setInterpretationsSummary([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des interprétations:', error);\r\n      setError('Impossible de charger les interprétations');\r\n      setInterpretationsSummary([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Charger les applications au démarrage\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const [appsResponse, entrepriseResponse] = await Promise.all([\r\n          api.get('applications'),\r\n          api.get('entreprises')\r\n        ]);\r\n  \r\n        if (Array.isArray(appsResponse)) {\r\n          setApplications(appsResponse);\r\n        } else {\r\n          setError('Format de réponse inattendu pour les applications');\r\n          setApplications([]);\r\n        }\r\n  \r\n        if (Array.isArray(entrepriseResponse)) {\r\n          setEntreprises(entrepriseResponse);\r\n        } else {\r\n          setError('Format de réponse inattendu pour les entreprises');\r\n          setEntreprises([]);\r\n        }\r\n  \r\n        // Charger toutes les interprétations sans filtre d'entreprise par défaut\r\n        await fetchAllInterpretations();\r\n        \r\n        // Ne pas définir d'entreprise ou d'application par défaut\r\n        // pour éviter des erreurs de sélection\r\n        setSelectedEntreprise('');\r\n        setSelectedApplication('');\r\n        \r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données initiales:', error);\r\n        setError('Impossible de charger les données initiales');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n\r\n  // Gérer le changement d'application sélectionnée\r\n  const handleApplicationChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const appId = event.target.value as string;\r\n    setSelectedApplication(appId);\r\n    fetchAnalysesByApplication(appId);\r\n  };\r\n\r\n  // Charger l'historique des scores pour une entreprise\r\n  const fetchHistoriqueByEntreprise = async (entrepriseId: string) => {\r\n    try {\r\n      const response = await api.get(`historique/entreprise/${entrepriseId}`);\r\n      \r\n      if (Array.isArray(response)) {\r\n        setHistorique(response);\r\n        \r\n        // Mettre à jour la liste des thématiques uniques\r\n        const uniqueThemes = [...new Set(response.map(item => item.thematique))];\r\n        console.log(`${uniqueThemes.length} thématiques uniques trouvées dans l'historique de l'entreprise ${entrepriseId}`);\r\n        \r\n        // Si une thématique était déjà sélectionnée mais n'existe pas dans le nouvel ensemble, la réinitialiser\r\n        if (selectedThematique && !uniqueThemes.includes(selectedThematique)) {\r\n          setSelectedThematique('');\r\n        }\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour l\\'historique:', response);\r\n        setHistorique([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'historique pour l\\'entreprise:', error);\r\n      setHistorique([]);\r\n    }\r\n  };\r\n  // Charger les analyses par entreprise\r\n  // Fonction fetchAnalysesByEntreprise à ajouter dans AnalysesInterpretations.tsx\r\n  const fetchAnalysesByEntreprise = async (entrepriseId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.get(`analyses/entreprise/${entrepriseId}`);\r\n      \r\n      // Vérifier le format de la réponse\r\n      if (response && typeof response === 'object') {\r\n        console.log('Données d\\'entreprise reçues:', response);\r\n        \r\n        // Vérifier si l'objet contient un tableau d'analyses\r\n        if (response.analyses && Array.isArray(response.analyses)) {\r\n          const normalizedAnalyses = response.analyses.map(normalizeAnalyse);\r\n          setAnalyses(normalizedAnalyses);\r\n          \r\n          if (normalizedAnalyses.length > 0) {\r\n            const latestAnalyse = normalizedAnalyses[0];\r\n            setSelectedAnalyse(latestAnalyse);\r\n            fetchInterpretation(latestAnalyse.id_analyse);\r\n          } else {\r\n            setSelectedAnalyse(null);\r\n            setInterpretation(null);\r\n          }\r\n        } else {\r\n          // Si l'objet ne contient pas d'analyses, créer un tableau vide\r\n          console.warn('Aucune analyse trouvée dans la réponse de l\\'API pour l\\'entreprise:', entrepriseId);\r\n          setAnalyses([]);\r\n          setSelectedAnalyse(null);\r\n          setInterpretation(null);\r\n        }\r\n        \r\n        // Mettre à jour les applications disponibles pour cette entreprise\r\n        if (response.applications && Array.isArray(response.applications)) {\r\n          // Si vous voulez limiter la liste des applications à celles de l'entreprise sélectionnée\r\n          // setApplications(response.applications);\r\n          console.log(`${response.applications.length} applications trouvées pour l'entreprise ${entrepriseId}`);\r\n        }\r\n      } else if (Array.isArray(response)) {\r\n        // Si la réponse est un tableau (format alternatif)\r\n        const normalizedAnalyses = response.map(normalizeAnalyse);\r\n        setAnalyses(normalizedAnalyses);\r\n        \r\n        if (normalizedAnalyses.length > 0) {\r\n          const latestAnalyse = normalizedAnalyses[0];\r\n          setSelectedAnalyse(latestAnalyse);\r\n          fetchInterpretation(latestAnalyse.id_analyse);\r\n        } else {\r\n          setSelectedAnalyse(null);\r\n          setInterpretation(null);\r\n        }\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les analyses:', response);\r\n        setAnalyses([]);\r\n        setSelectedAnalyse(null);\r\n        setInterpretation(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des analyses pour l\\'entreprise:', error);\r\n      setError('Impossible de charger les analyses pour cette entreprise');\r\n      setAnalyses([]);\r\n      setSelectedAnalyse(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Charger les analyses quand une application est sélectionnée\r\n  const fetchAnalysesByApplication = async (appId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.get(`analyses/application/${appId}`);\r\n      \r\n      if (Array.isArray(response)) {\r\n        const normalizedAnalyses = response.map(normalizeAnalyse);\r\n        setAnalyses(normalizedAnalyses);\r\n        \r\n        if (normalizedAnalyses.length > 0) {\r\n          const latestAnalyse = normalizedAnalyses[0];\r\n          setSelectedAnalyse(latestAnalyse);\r\n          fetchInterpretation(latestAnalyse.id_analyse);\r\n          fetchHistorique(appId);\r\n        } else {\r\n          setSelectedAnalyse(null);\r\n          setInterpretation(null);\r\n          setHistorique([]);\r\n        }\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les analyses:', response);\r\n        setAnalyses([]);\r\n        setSelectedAnalyse(null);\r\n        setInterpretation(null);\r\n        setHistorique([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des analyses:', error);\r\n      setError('Impossible de charger les analyses');\r\n      setAnalyses([]);\r\n      setSelectedAnalyse(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Charger l'interprétation pour une analyse\r\n  const fetchInterpretation = async (analyseId: string) => {\r\n    try {\r\n      const response = await api.get(`interpretations/analyse/${analyseId}`);\r\n      \r\n      if (response && typeof response === 'object') {\r\n        const formattedInterpretation: Interpretation = {\r\n          niveau: response.niveau || 'Non évalué',\r\n          description: response.description || 'Aucune description disponible',\r\n          recommandations: response.recommandations || 'Aucune recommandation disponible',\r\n          score: response.score || 0\r\n        };\r\n        \r\n        setInterpretation(formattedInterpretation);\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour l\\'interprétation:', response);\r\n        setInterpretation(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'interprétation:', error);\r\n      setInterpretation(null);\r\n    }\r\n  };\r\n\r\n  // Charger l'historique des scores pour une application\r\n  const fetchHistorique = async (appId: string) => {\r\n    try {\r\n      const response = await api.get(`historique/application/${appId}`);\r\n      if (Array.isArray(response)) {\r\n        setHistorique(response);\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour l\\'historique:', response);\r\n        setHistorique([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'historique:', error);\r\n      setHistorique([]);\r\n    }\r\n  };\r\n\r\n   // Gestionnaires d'événements pour l'interface utilisateur\r\n  \r\n  // Gérer le changement d'entreprise sélectionnée\r\n  const handleEntrepriseChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n  const entrepriseId = event.target.value as string;\r\n  setSelectedEntreprise(entrepriseId || '');\r\n  \r\n  // Réinitialiser les données actuelles\r\n  setSelectedAnalyse(null);\r\n  setInterpretation(null);\r\n  \r\n  if (entrepriseId) {\r\n    // Si une entreprise est sélectionnée, charger les données pour cette entreprise\r\n    setLoading(true);\r\n    \r\n    // Récupérer les analyses pour cette entreprise\r\n    fetchAnalysesByEntreprise(entrepriseId);\r\n    \r\n    // Récupérer l'historique pour cette entreprise\r\n    fetchHistoriqueByEntreprise(entrepriseId);\r\n    \r\n    // Filtrer les interprétations pour cette entreprise\r\n    // Cette étape est importante pour mettre à jour le tableau récapitulatif\r\n    const filteredInterpretations = interpretationsSummary.filter(\r\n      item => item.id_entreprise === entrepriseId\r\n    );\r\n    \r\n    console.log(`Filtre entreprise appliqué: ${entrepriseId}, ${filteredInterpretations.length} résultats trouvés`);\r\n    \r\n    // Réinitialiser la pagination\r\n    setPage(0);\r\n  } else {\r\n    // Si \"Toutes les entreprises\" est sélectionné, charger toutes les analyses\r\n    fetchAllInterpretations();\r\n    setHistorique([]);\r\n    \r\n    // Réinitialiser l'application sélectionnée\r\n    setSelectedApplication('');\r\n  }\r\n  \r\n  // Réinitialiser les filtres supplémentaires\r\n  setFilters({\r\n    application: '',\r\n    niveau: '',\r\n    organisation: '',\r\n    scoreMin: '',\r\n    scoreMax: ''\r\n  });\r\n};\r\n\r\n  // Gérer le changement d'analyse sélectionnée\r\n  const handleAnalyseChange = (analyse: Analyse) => {\r\n    const normalizedAnalyse = normalizeAnalyse(analyse);\r\n    setSelectedAnalyse(normalizedAnalyse);\r\n    fetchInterpretation(normalizedAnalyse.id_analyse);\r\n  };\r\n\r\n  // Gérer le changement de thématique pour l'historique\r\n  const handleThematiqueChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setSelectedThematique(event.target.value as string);\r\n  };\r\n\r\n  // Gérer le changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Ouvrir le dialogue pour créer une nouvelle analyse\r\n  const handleOpenNewAnalyseDialog = () => {\r\n    setNewAnalyseData({\r\n      id_application: selectedApplication,\r\n      thematiques: []\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  // Fermer le dialogue\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  // Ajouter une thématique à la nouvelle analyse\r\n  const addThematique = () => {\r\n    setNewAnalyseData({\r\n      ...newAnalyseData,\r\n      thematiques: [\r\n        ...newAnalyseData.thematiques,\r\n        {\r\n          thematique: '',\r\n          score: 0,\r\n          nombre_reponses: 0\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  // Mettre à jour une thématique\r\n  const updateThematique = (index: number, field: keyof Thematique, value: any) => {\r\n    const updatedThematiques = [...newAnalyseData.thematiques];\r\n    updatedThematiques[index] = {\r\n      ...updatedThematiques[index],\r\n      [field]: value\r\n    };\r\n    \r\n    setNewAnalyseData({\r\n      ...newAnalyseData,\r\n      thematiques: updatedThematiques\r\n    });\r\n  };\r\n\r\n  // Supprimer une thématique\r\n  const removeThematique = (index: number) => {\r\n    const updatedThematiques = newAnalyseData.thematiques.filter((_, i) => i !== index);\r\n    setNewAnalyseData({\r\n      ...newAnalyseData,\r\n      thematiques: updatedThematiques\r\n    });\r\n  };\r\n\r\n  // Créer une nouvelle analyse\r\n  const createNewAnalyse = async () => {\r\n    try {\r\n      await api.post(`analyses`, newAnalyseData);\r\n      fetchAnalysesByApplication(selectedApplication);\r\n      fetchAllInterpretations();\r\n      handleCloseDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création de l\\'analyse:', error);\r\n      setError('Erreur lors de la création de l\\'analyse');\r\n    }\r\n  };\r\n\r\n  // Calculer une nouvelle analyse\r\n  const calculateNewAnalyse = async () => {\r\n    try {\r\n      await api.post(`analyses/calculer/${selectedApplication}`);\r\n      fetchAnalysesByApplication(selectedApplication);\r\n      fetchAllInterpretations();\r\n    } catch (error) {\r\n      console.error('Erreur lors du calcul de l\\'analyse:', error);\r\n      setError('Erreur lors du calcul de l\\'analyse');\r\n    }\r\n  };\r\n\r\n  // Fonctions utilitaires pour le traitement des données\r\n  \r\n  // Préparer les données pour le graphique d'historique\r\n  const prepareHistoriqueData = () => {\r\n    if (filteredHistorique.length === 0) return [];\r\n    \r\n    const sortedData = [...filteredHistorique].sort((a, b) => {\r\n      try {\r\n        return new Date(a.date_mesure).getTime() - new Date(b.date_mesure).getTime();\r\n      } catch (error) {\r\n        console.error('Erreur lors du tri des données historiques:', error);\r\n        return 0;\r\n      }\r\n    });\r\n    \r\n    return sortedData.map(item => {\r\n      try {\r\n        return {\r\n          date: new Date(item.date_mesure).toLocaleDateString('fr-FR'),\r\n          score: item.score,\r\n          thematique: item.thematique\r\n        };\r\n      } catch (error) {\r\n        console.error('Erreur lors de la préparation des données historiques:', error);\r\n        return {\r\n          date: 'Date inconnue',\r\n          score: item.score || 0,\r\n          thematique: item.thematique || 'Inconnue'\r\n        };\r\n      }\r\n    });\r\n  };\r\n\r\n  // Calculer le score global à afficher\r\n  const getScoreGlobal = () => {\r\n    if (!selectedAnalyse) return 'N/A';\r\n    \r\n    const score = selectedAnalyse.score_global !== undefined ? selectedAnalyse.score_global :\r\n                 selectedAnalyse.scoreGlobal !== undefined ? selectedAnalyse.scoreGlobal : null;\r\n    \r\n    return score !== null ? score.toFixed(2) : 'N/A';\r\n  };\r\n\r\n  // Fonctions de pagination et de tri pour le tableau\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleRequestSort = (property: keyof InterpretationSummary) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  // Filtrer les données du tableau récapitulatif\r\n  const getFilteredData = () => {\r\n    // Commencer avec toutes les interprétations\r\n    let filteredData = [...interpretationsSummary];\r\n    \r\n    // Filtrer par entreprise si une entreprise est sélectionnée\r\n    if (selectedEntreprise) {\r\n      filteredData = filteredData.filter(row => {\r\n        // Vérifier si l'ID d'entreprise correspond\r\n        // Si l'ID d'entreprise n'est pas disponible directement dans l'objet, nous pouvons\r\n        // utiliser une relation entre applications et entreprises\r\n        return row.id_entreprise === selectedEntreprise;\r\n      });\r\n      \r\n      console.log(`Filtré par entreprise ${selectedEntreprise}: ${filteredData.length} résultats`);\r\n    }\r\n    \r\n    // Appliquer les autres filtres\r\n    filteredData = filteredData.filter(row => {\r\n      // Filtre de recherche\r\n      const searchLower = searchTerm.toLowerCase();\r\n      const appNameMatch = row.nom_application?.toLowerCase().includes(searchLower) || false;\r\n      const niveauMatch = row.niveau_global?.toLowerCase().includes(searchLower) || false;\r\n      const orgMatch = row.organisation?.toLowerCase().includes(searchLower) || false;\r\n      \r\n      if (searchTerm && !appNameMatch && !niveauMatch && !orgMatch) {\r\n        return false;\r\n      }\r\n      \r\n      // Filtres avancés\r\n      if (filters.application && row.nom_application !== filters.application) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.niveau && row.niveau_global !== filters.niveau) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.organisation && row.organisation !== filters.organisation) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.scoreMin && typeof row.score_global === 'number' && \r\n          row.score_global < parseFloat(filters.scoreMin)) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.scoreMax && typeof row.score_global === 'number' && \r\n          row.score_global > parseFloat(filters.scoreMax)) {\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    });\r\n    \r\n    // Trier les données\r\n    filteredData.sort((a, b) => {\r\n      const valueA = a[orderBy];\r\n      const valueB = b[orderBy];\r\n      \r\n      if (typeof valueA === 'number' && typeof valueB === 'number') {\r\n        return order === 'asc' ? valueA - valueB : valueB - valueA;\r\n      }\r\n      \r\n      // Conversion en chaînes pour la comparaison\r\n      const strA = String(valueA || '');\r\n      const strB = String(valueB || '');\r\n      \r\n      return order === 'asc' \r\n        ? strA.localeCompare(strB)\r\n        : strB.localeCompare(strA);\r\n    });\r\n    \r\n    // Appliquer la pagination\r\n    return filteredData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\r\n  };\r\n\r\n  // Obtenir les options uniques pour les filtres déroulants\r\n  const getUniqueValues = (field: keyof InterpretationSummary) => {\r\n    return [...new Set(interpretationsSummary.map(item => item[field]))].filter(Boolean);\r\n  };\r\n\r\n  // Rendu du composant avec AnalysesInterpretationsUI\r\n  return (\r\n    <AnalysesInterpretationsUI\r\n    loading={loading}\r\n    error={error}\r\n    applications={applications}\r\n    entreprises={entreprises}\r\n    selectedApplication={selectedApplication}\r\n    selectedEntreprise={selectedEntreprise}\r\n    analyses={analyses}\r\n    selectedAnalyse={selectedAnalyse}\r\n    interpretation={interpretation}\r\n    historique={historique}\r\n    filteredHistorique={filteredHistorique}\r\n    tabValue={tabValue}\r\n    selectedThematique={selectedThematique}\r\n    openDialog={openDialog}\r\n    newAnalyseData={newAnalyseData}\r\n    interpretationsSummary={interpretationsSummary}\r\n    page={page}\r\n    rowsPerPage={rowsPerPage}\r\n    order={order}\r\n    orderBy={orderBy}\r\n    searchTerm={searchTerm}\r\n    filters={filters}\r\n    showFilters={showFilters}\r\n    uniqueThematiques={uniqueThematiques}\r\n    handleApplicationChange={handleApplicationChange}\r\n    handleEntrepriseChange={handleEntrepriseChange}\r\n    handleAnalyseChange={handleAnalyseChange}\r\n    handleThematiqueChange={handleThematiqueChange}\r\n    handleTabChange={handleTabChange}\r\n    handleOpenNewAnalyseDialog={handleOpenNewAnalyseDialog}\r\n    handleCloseDialog={handleCloseDialog}\r\n    addThematique={addThematique}\r\n    updateThematique={updateThematique}\r\n    removeThematique={removeThematique}\r\n    createNewAnalyse={createNewAnalyse}\r\n    calculateNewAnalyse={calculateNewAnalyse}\r\n    getScoreGlobal={getScoreGlobal}\r\n    prepareHistoriqueData={prepareHistoriqueData}\r\n    handleChangePage={handleChangePage}\r\n    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n    handleRequestSort={handleRequestSort}\r\n    getFilteredData={getFilteredData}\r\n    getUniqueValues={getUniqueValues}\r\n    setSearchTerm={setSearchTerm}\r\n    setFilters={setFilters}\r\n    setShowFilters={setShowFilters}\r\n    fetchAllInterpretations={fetchAllInterpretations}\r\n    fetchAnalysesByApplication={fetchAnalysesByApplication}\r\n    fetchAnalysesByEntreprise={fetchAnalysesByEntreprise}   \r\n    fetchHistoriqueByEntreprise={fetchHistoriqueByEntreprise} \r\n  />\r\n  );\r\n};\r\n\r\nexport default AnalysesInterpretations;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container, Grid, Paper, Typography, Box, CircularProgress, Card, CardContent, CardHeader,\r\n  Tabs, Tab, List, ListItem, ListItemText, Divider, Alert, FormControl, InputLabel,\r\n  MenuItem, Select, Chip,\r\n} from '@mui/material';\r\nimport {\r\n  Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer, Legend,\r\n} from 'recharts';\r\nimport { getNiveauColor } from '../../utils/AnalyseUtils';\r\nimport api from '../../services/api';\r\n\r\n// Types corrigés selon la vraie structure des données\r\ninterface Thematique {\r\n  id: string;\r\n  nom: string;\r\n  score: number;\r\n  score_moyen: number;\r\n  niveau: string;\r\n  recommandations: string;\r\n  description?: string;\r\n}\r\n\r\ninterface Fonction {\r\n  id: string;\r\n  nom: string;\r\n  score_global: number;\r\n  niveau: string;\r\n  recommandations: string;\r\n  description?: string;\r\n  thematiques: Thematique[];\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  secteur?: string;\r\n  score_global: string;\r\n  niveau_global: string;\r\n  recommandations_globales: string;\r\n  fonctions: Fonction[];\r\n}\r\n\r\n// Nouveaux types pour l'API Benchmark avec LLMs\r\ninterface LLMRecommendation {\r\n  source: 'ChatGPT' | 'Grok' | 'Claude';\r\n  score: number;\r\n  recommandation: string;\r\n  niveau_confiance: number; // 0-100\r\n}\r\n\r\ninterface BenchmarkThematiqueLLM {\r\n  nom: string;\r\n  score_moyen: number; // Moyenne des 3 LLMs\r\n  recommandations_llm: LLMRecommendation[];\r\n  ecart_type: number; // Variabilité entre les LLMs\r\n}\r\n\r\ninterface BenchmarkDataLLM {\r\n  secteur: string;\r\n  fonction: string;\r\n  date_analyse: string;\r\n  thematiques: BenchmarkThematiqueLLM[];\r\n  scores: {\r\n    niveau_entreprise: number;\r\n    niveau_fonction: number;\r\n    niveau_thematique: number;\r\n  };\r\n  metadata: {\r\n    version_api: string;\r\n    sources_utilisees: string[];\r\n    fiabilite_globale: number;\r\n  };\r\n}\r\n\r\n// Structure de la requête API\r\ninterface BenchmarkRequest {\r\n  secteur: string;\r\n  fonction: string;\r\n  thematiques: string[];\r\n}\r\n\r\n// Cache pour éviter les appels répétitifs\r\nconst benchmarkCache = new Map<string, BenchmarkDataLLM>();\r\n\r\n// Helper function améliorée pour gérer les scores\r\nconst formatScore = (score: string | number | undefined | null): string => {\r\n  if (score === undefined || score === null || score === '') return 'N/A';\r\n  const numScore = typeof score === 'string' ? parseFloat(score) : score;\r\n  return isNaN(numScore) ? 'N/A' : numScore.toFixed(1);\r\n};\r\n\r\n// Helper function pour s'assurer qu'un score est un nombre valide\r\nconst ensureValidScore = (score: any): number => {\r\n  if (typeof score === 'number' && !isNaN(score)) return score;\r\n  if (typeof score === 'string') {\r\n    const parsed = parseFloat(score);\r\n    return isNaN(parsed) ? 0 : parsed;\r\n  }\r\n  return 0;\r\n};\r\n\r\n// Fonction pour récupérer les données benchmark depuis l'API\r\nconst fetchBenchmarkData = async (\r\n  secteur: string, \r\n  fonction: string, \r\n  thematiques: string[]\r\n): Promise<BenchmarkDataLLM | null> => {\r\n  const cacheKey = `${secteur}_${fonction}_${thematiques.join('|')}`;\r\n  \r\n  // Vérifier le cache d'abord\r\n  if (benchmarkCache.has(cacheKey)) {\r\n    console.log('Benchmark data retrieved from cache');\r\n    return benchmarkCache.get(cacheKey)!;\r\n  }\r\n\r\n  try {\r\n    console.log('Fetching benchmark data from API...', { secteur, fonction, thematiques });\r\n    \r\n    const requestBody: BenchmarkRequest = {\r\n      secteur,\r\n      fonction,\r\n      thematiques\r\n    };\r\n\r\n    const response = await api.post('benchmark/analyze', requestBody);\r\n    \r\n    // Normaliser la réponse\r\n    let benchmarkData: BenchmarkDataLLM;\r\n    if (response && response.data) {\r\n      benchmarkData = response.data;\r\n    } else if (response) {\r\n      benchmarkData = response;\r\n    } else {\r\n      throw new Error('Aucune donnée reçue de l\\'API benchmark');\r\n    }\r\n\r\n    // Mettre en cache\r\n    benchmarkCache.set(cacheKey, benchmarkData);\r\n    \r\n    console.log('Benchmark data retrieved successfully:', benchmarkData);\r\n    return benchmarkData;\r\n    \r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des données benchmark:', error);\r\n    \r\n    // Fallback avec données mockées en cas d'erreur\r\n    return generateMockBenchmarkData(secteur, fonction, thematiques);\r\n  }\r\n};\r\n\r\n// Données de fallback en cas d'erreur API\r\nconst generateMockBenchmarkData = (\r\n  secteur: string, \r\n  fonction: string, \r\n  thematiques: string[]\r\n): BenchmarkDataLLM => {\r\n  return {\r\n    secteur,\r\n    fonction,\r\n    date_analyse: new Date().toISOString(),\r\n    thematiques: thematiques.map(theme => ({\r\n      nom: theme,\r\n      score_moyen: 3.0 + Math.random() * 1.5, // Score entre 3.0 et 4.5\r\n      ecart_type: 0.2 + Math.random() * 0.3,\r\n      recommandations_llm: [\r\n        {\r\n          source: 'ChatGPT',\r\n          score: 3.0 + Math.random() * 1.5,\r\n          recommandation: `Recommandation ChatGPT pour ${theme}: Optimiser les processus et améliorer l'efficacité opérationnelle en mettant l'accent sur l'automatisation et la standardisation.`,\r\n          niveau_confiance: 85 + Math.floor(Math.random() * 15)\r\n        },\r\n        {\r\n          source: 'Grok',\r\n          score: 3.0 + Math.random() * 1.5,\r\n          recommandation: `Recommandation Grok pour ${theme}: Implémenter des solutions innovantes et agiles en adoptant une approche disruptive et en exploitant les technologies émergentes.`,\r\n          niveau_confiance: 80 + Math.floor(Math.random() * 20)\r\n        },\r\n        {\r\n          source: 'Claude',\r\n          score: 3.0 + Math.random() * 1.5,\r\n          recommandation: `Recommandation Claude pour ${theme}: Structurer l'approche avec des méthodes éprouvées en privilégiant la qualité, la cohérence et une amélioration progressive.`,\r\n          niveau_confiance: 88 + Math.floor(Math.random() * 12)\r\n        }\r\n      ]\r\n    })),\r\n    scores: {\r\n      niveau_entreprise: 3.5,\r\n      niveau_fonction: 3.6,\r\n      niveau_thematique: 3.4\r\n    },\r\n    metadata: {\r\n      version_api: '1.0.0',\r\n      sources_utilisees: ['ChatGPT-4', 'Grok-2', 'Claude-3.5'],\r\n      fiabilite_globale: 87\r\n    }\r\n  };\r\n};\r\n\r\n// Derive global level and recommendations from score_global\r\nconst deriveGlobalLevelAndRecommendations = (scoreGlobal: number): { niveau_global: string; recommandations_globales: string } => {\r\n  if (scoreGlobal >= 4.5) {\r\n    return {\r\n      niveau_global: 'Niveau 5 - Optimisé',\r\n      recommandations_globales: 'Maintenir l\\'excellence par l\\'innovation continue et le partage des bonnes pratiques.'\r\n    };\r\n  } else if (scoreGlobal >= 3.5) {\r\n    return {\r\n      niveau_global: 'Niveau 4 - Géré',\r\n      recommandations_globales: 'Perfectionner les processus existants et développer des capacités prédictives.'\r\n    };\r\n  } else if (scoreGlobal >= 2.5) {\r\n    return {\r\n      niveau_global: 'Niveau 3 - Mesuré',\r\n      recommandations_globales: 'Renforcer la culture d\\'amélioration continue et automatiser davantage les processus.'\r\n    };\r\n  } else if (scoreGlobal >= 1.5) {\r\n    return {\r\n      niveau_global: 'Niveau 2 - Défini',\r\n      recommandations_globales: 'Standardiser les pratiques et formaliser les processus dans toute l\\'organisation.'\r\n    };\r\n  } else {\r\n    return {\r\n      niveau_global: 'Niveau 1 - Initial',\r\n      recommandations_globales: 'Initier une démarche d\\'amélioration structurée et identifier les processus critiques.'\r\n    };\r\n  }\r\n};\r\n\r\nconst AnalysesFonctions: React.FC = () => {\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [selectedEntreprise, setSelectedEntreprise] = useState<string>('');\r\n  const [selectedFonction, setSelectedFonction] = useState<string>('');\r\n  const [entrepriseDetails, setEntrepriseDetails] = useState<Entreprise | null>(null);\r\n  const [fonctionDetails, setFonctionDetails] = useState<Fonction | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string>('');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Nouveaux états pour l'API Benchmark\r\n  const [benchmarkDataLLM, setBenchmarkDataLLM] = useState<BenchmarkDataLLM | null>(null);\r\n  const [loadingBenchmark, setLoadingBenchmark] = useState<boolean>(false);\r\n  const [radarData, setRadarData] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadEntreprises();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log('Selected entreprise changed:', selectedEntreprise); // Debug log\r\n    if (selectedEntreprise) {\r\n      loadEntrepriseDetails(selectedEntreprise);\r\n    } else {\r\n      setEntrepriseDetails(null);\r\n      setFonctionDetails(null);\r\n    }\r\n  }, [selectedEntreprise]);\r\n\r\n  useEffect(() => {\r\n    if (entrepriseDetails && selectedFonction) {\r\n      const fonction = entrepriseDetails.fonctions.find(f => f.id === selectedFonction);\r\n      if (fonction) {\r\n        setFonctionDetails(fonction);\r\n      }\r\n    }\r\n  }, [selectedFonction, entrepriseDetails]);\r\n\r\n  // Appeler convertToRadarData quand les données changent\r\n  useEffect(() => {\r\n    if (fonctionDetails?.thematiques && entrepriseDetails) {\r\n      convertToRadarData(\r\n        fonctionDetails.thematiques,\r\n        entrepriseDetails.secteur || \"Finance\",\r\n        fonctionDetails.nom\r\n      );\r\n    }\r\n  }, [fonctionDetails, entrepriseDetails]);\r\n\r\n  // Fonction pour obtenir les données benchmark depuis l'API\r\n  const getBenchmarkData = async (\r\n    secteur: string, \r\n    fonction: string, \r\n    thematiques: Thematique[]\r\n  ): Promise<BenchmarkThematiqueLLM[]> => {\r\n    \r\n    if (!thematiques || thematiques.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      setLoadingBenchmark(true);\r\n      \r\n      const thematiqueNames = thematiques.map(t => t.nom);\r\n      const benchmarkData = await fetchBenchmarkData(secteur, fonction, thematiqueNames);\r\n      \r\n      if (benchmarkData) {\r\n        setBenchmarkDataLLM(benchmarkData);\r\n        return benchmarkData.thematiques;\r\n      }\r\n      \r\n      return [];\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du benchmark:', error);\r\n      return [];\r\n    } finally {\r\n      setLoadingBenchmark(false);\r\n    }\r\n  };\r\n\r\n  // Fonction utilitaire pour obtenir le score benchmark d'une thématique\r\n  const getBenchmarkScore = (\r\n    themeName: string, \r\n    benchmarkThematiques: BenchmarkThematiqueLLM[]\r\n  ): number => {\r\n    const benchmark = benchmarkThematiques.find(b => \r\n      b.nom.toLowerCase().includes(themeName.toLowerCase()) || \r\n      themeName.toLowerCase().includes(b.nom.toLowerCase())\r\n    );\r\n    \r\n    return benchmark ? benchmark.score_moyen : 3.5; // Score par défaut\r\n  };\r\n\r\n  // Convert thematiques to radar chart data with benchmark API\r\n  const convertToRadarData = async (\r\n    thematiques: Thematique[] = [], \r\n    secteur: string = \"Finance\", \r\n    fonctionName: string = \"RH\"\r\n  ) => {\r\n    console.log('Converting radar data with API benchmark:', { thematiques, secteur, fonctionName });\r\n    \r\n    if (!Array.isArray(thematiques) || thematiques.length === 0) {\r\n      console.warn('No thematiques data available for radar chart');\r\n      setRadarData([]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Obtenir les données benchmark depuis l'API\r\n      const benchmarkThematiques = await getBenchmarkData(secteur, fonctionName, thematiques);\r\n      \r\n      const newRadarData = thematiques.map((theme) => {\r\n        const score = ensureValidScore(theme.score || theme.score_moyen);\r\n        \r\n        // Trouver le score benchmark correspondant depuis l'API\r\n        const benchmarkScore = getBenchmarkScore(theme.nom, benchmarkThematiques);\r\n        \r\n        return {\r\n          thematique: theme.nom || 'Thématique inconnue',\r\n          score: score,\r\n          benchmark: benchmarkScore,\r\n          fullMark: 5,\r\n        };\r\n      }).filter(item => item.score > 0);\r\n      \r\n      console.log('Final radar data with API benchmark:', newRadarData);\r\n      setRadarData(newRadarData);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur lors de la conversion des données radar:', error);\r\n      // Fallback vers données locales en cas d'erreur\r\n      const fallbackData = thematiques.map((theme) => ({\r\n        thematique: theme.nom || 'Thématique inconnue',\r\n        score: ensureValidScore(theme.score || theme.score_moyen),\r\n        benchmark: 3.5,\r\n        fullMark: 5,\r\n      })).filter(item => item.score > 0);\r\n      \r\n      setRadarData(fallbackData);\r\n    }\r\n  };\r\n\r\n  const loadEntreprises = async () => {\r\n    try {\r\n      const response = await api.get('entreprises');\r\n      console.log('Response from entreprises API:', response); // Debug log\r\n      \r\n      // Normaliser la réponse selon le format observé dans les autres fichiers\r\n      let entreprisesData: any[] = [];\r\n      if (Array.isArray(response)) {\r\n        entreprisesData = response;\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        entreprisesData = response.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour entreprises:', response);\r\n        setError(\"Format de données invalide reçu du serveur.\");\r\n        return;\r\n      }\r\n\r\n      // Transformer les données d'entreprises au format attendu\r\n      const formattedEntreprises = entreprisesData.map(ent => ({\r\n        id_entreprise: ent.id_entreprise,\r\n        nom_entreprise: ent.nom_entreprise || ent.nom || 'Entreprise inconnue',\r\n        secteur: ent.secteur || 'Non défini',\r\n        score_global: '0',\r\n        niveau_global: 'Non évalué',\r\n        recommandations_globales: 'Aucune évaluation disponible',\r\n        fonctions: []\r\n      }));\r\n\r\n      console.log('Formatted entreprises:', formattedEntreprises); // Debug log\r\n      setEntreprises(formattedEntreprises);\r\n      \r\n      if (formattedEntreprises.length > 0) {\r\n        setSelectedEntreprise(formattedEntreprises[0].id_entreprise);\r\n      }\r\n    } catch (error: unknown) {\r\n      const err = error as Error;\r\n      console.error('Erreur lors du chargement des entreprises:', err.message);\r\n      setError(\"Impossible de charger la liste des entreprises.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadEntrepriseDetails = async (entrepriseId: string) => {\r\n    try {\r\n      setLoading(true);\r\n      console.log('Loading details for enterprise:', entrepriseId); // Debug log\r\n      \r\n      // Récupérer les détails de l'entreprise et ses fonctions depuis le bon endpoint\r\n      const [entrepriseResponse, fonctionsResponse] = await Promise.all([\r\n        api.get(`entreprises/${entrepriseId}`),\r\n        api.get(`entreprises/${entrepriseId}/fonctions`)\r\n      ]);\r\n      \r\n      console.log('Enterprise response:', entrepriseResponse); // Debug log\r\n      console.log('Functions response:', fonctionsResponse); // Debug log\r\n      \r\n      // Normaliser la réponse entreprise\r\n      let entrepriseData: any = {};\r\n      if (entrepriseResponse && entrepriseResponse.data) {\r\n        entrepriseData = entrepriseResponse.data;\r\n      } else if (entrepriseResponse) {\r\n        entrepriseData = entrepriseResponse;\r\n      }\r\n      \r\n      // Normaliser la réponse fonctions\r\n      let fonctionsData: any = {};\r\n      if (fonctionsResponse && fonctionsResponse.data) {\r\n        fonctionsData = fonctionsResponse.data;\r\n      } else if (fonctionsResponse) {\r\n        fonctionsData = fonctionsResponse;\r\n      }\r\n      \r\n      // Construire l'objet entreprise details\r\n      const scoreGlobal = ensureValidScore(fonctionsData.score_global || 0);\r\n      const derivedData = deriveGlobalLevelAndRecommendations(scoreGlobal);\r\n      \r\n      const entrepriseDetails: Entreprise = {\r\n        id_entreprise: entrepriseId,\r\n        nom_entreprise: entrepriseData.nom_entreprise || fonctionsData.entreprise || \"Entreprise inconnue\",\r\n        secteur: entrepriseData.secteur || \"Non défini\",\r\n        score_global: String(scoreGlobal),\r\n        niveau_global: fonctionsData.niveau_global || derivedData.niveau_global,\r\n        recommandations_globales: fonctionsData.recommandations_globales || derivedData.recommandations_globales,\r\n        fonctions: Array.isArray(fonctionsData.fonctions) ? fonctionsData.fonctions : []\r\n      };\r\n      \r\n      console.log('Final entreprise details:', entrepriseDetails); // Debug log\r\n      setEntrepriseDetails(entrepriseDetails);\r\n      \r\n      // Auto-select first function if available\r\n      if (entrepriseDetails.fonctions.length > 0) {\r\n        setSelectedFonction(entrepriseDetails.fonctions[0].id);\r\n      } else {\r\n        setSelectedFonction('');\r\n        setFonctionDetails(null);\r\n      }\r\n    } catch (error: unknown) {\r\n      const err = error as Error;\r\n      console.error('Erreur lors du chargement des détails de l\\'entreprise:', err.message);\r\n      setError(\"Impossible de charger les détails de l'entreprise.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Convert thematiques to radar chart data with benchmark\r\n  // const convertToRadarData = (\r\n  //   thematiques: Thematique[] = [], \r\n  //   secteur: string = \"Finance\", \r\n  //   fonctionName: string = \"RH\"\r\n  // ) => {\r\n  //   console.log('Converting radar data:', { thematiques, secteur, fonctionName }); // Debug log\r\n    \r\n  //   if (!Array.isArray(thematiques) || thematiques.length === 0) {\r\n  //     console.warn('No thematiques data available for radar chart');\r\n  //     return [];\r\n  //   }\r\n\r\n  //   // Obtenir les données benchmark\r\n  //   const benchmarkData = getBenchmarkData(secteur, fonctionName);\r\n  //   console.log('Benchmark data:', benchmarkData); // Debug log\r\n    \r\n  //   const radarData = thematiques.map((theme) => {\r\n  //     const score = ensureValidScore(theme.score || theme.score_moyen);\r\n      \r\n  //     // Trouver le score benchmark correspondant\r\n  //     const benchmarkScore = benchmarkData.find(b => \r\n  //       b.nom.toLowerCase().includes(theme.nom.toLowerCase()) || \r\n  //       theme.nom.toLowerCase().includes(b.nom.toLowerCase())\r\n  //     )?.score || 3.5; // Score par défaut si pas de correspondance\r\n      \r\n  //     return {\r\n  //       thematique: theme.nom || 'Thématique inconnue',\r\n  //       score: score,\r\n  //       benchmark: benchmarkScore,\r\n  //       fullMark: 5,\r\n  //     };\r\n  //   }).filter(item => item.score > 0);\r\n    \r\n  //   console.log('Final radar data:', radarData); // Debug log\r\n  //   return radarData;\r\n  // };\r\n\r\n  // Handle enterprise selection\r\n  const handleEntrepriseChange = (event: any) => {\r\n    const entrepriseId = event.target.value as string;\r\n    setSelectedEntreprise(entrepriseId);\r\n  };\r\n\r\n  // Handle function selection\r\n  const handleFonctionChange = (fonctionId: string) => {\r\n    setSelectedFonction(fonctionId);\r\n  };\r\n\r\n  // Handle tab change\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '80vh' }}>\r\n        <CircularProgress />\r\n        <Typography sx={{ ml: 2 }}>Chargement des données d'analyse...</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n          <br />\r\n          <Typography variant=\"caption\">\r\n            Vérifiez que l'entreprise sélectionnée possède des analyses de maturité.\r\n          </Typography>\r\n        </Alert>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Enterprise selection */}\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Analyses de maturité par Fonctions évaluées\r\n              </Typography>\r\n            </Box>\r\n\r\n            <FormControl fullWidth variant=\"outlined\" sx={{ mb: 2 }}>\r\n              <InputLabel id=\"entreprise-select-label\">Entreprise</InputLabel>\r\n              <Select\r\n                labelId=\"entreprise-select-label\"\r\n                id=\"entreprise-select\"\r\n                value={selectedEntreprise}\r\n                onChange={handleEntrepriseChange}\r\n                label=\"Entreprise\"\r\n              >\r\n                {entreprises && entreprises.length > 0 ? (\r\n                  entreprises.map((entreprise, index) => (\r\n                    <MenuItem key={`${entreprise.id_entreprise}-${index}`} value={entreprise.id_entreprise}>\r\n                      {entreprise.nom_entreprise}\r\n                    </MenuItem>\r\n                  ))\r\n                ) : (\r\n                  <MenuItem value=\"\">\r\n                    <em>Aucune entreprise disponible</em>\r\n                  </MenuItem>\r\n                )}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            {/* Debug info */}\r\n            {process.env.NODE_ENV === 'development' && (\r\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                Debug: {entreprises.length} entreprises chargées | \r\n                Sélectionnée: {selectedEntreprise || 'Aucune'}\r\n              </Alert>\r\n            )}\r\n\r\n            {entrepriseDetails && (\r\n              <Card sx={{ mb: 2 }}>\r\n                <CardHeader\r\n                  title={`Entreprise: ${entrepriseDetails.nom_entreprise}`}\r\n                  subheader={`Secteur: ${entrepriseDetails.secteur || 'Non défini'}`}\r\n                  action={\r\n                    <Chip\r\n                      label={`Score Global: ${formatScore(entrepriseDetails.score_global)}`}\r\n                      color={getNiveauColor(entrepriseDetails.niveau_global || '')}\r\n                    />\r\n                  }\r\n                />\r\n                <CardContent>\r\n                  <Typography variant=\"body2\">\r\n                    <strong>Niveau:</strong> {entrepriseDetails.niveau_global || 'Non défini'}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                    <strong>Recommandations:</strong> {entrepriseDetails.recommandations_globales || 'Aucune recommandation disponible'}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Function list */}\r\n        <Grid item xs={12} md={4}>\r\n          <Card>\r\n            <CardHeader title=\"Fonctions Analysées\" />\r\n            <CardContent sx={{ p: 0 }}>\r\n              {entrepriseDetails?.fonctions && entrepriseDetails.fonctions.length > 0 ? (\r\n                <List>\r\n                  {entrepriseDetails.fonctions.map((fonction, index) => (\r\n                    <React.Fragment key={`fonction-${fonction.id}-${index}`}>\r\n                      <ListItem\r\n                        onClick={() => handleFonctionChange(fonction.id)}\r\n                        sx={{\r\n                          borderLeft:\r\n                            selectedFonction === fonction.id ? '4px solid #0B4E87' : '4px solid transparent',\r\n                          bgcolor: selectedFonction === fonction.id ? 'rgba(11, 78, 135, 0.05)' : 'transparent',\r\n                          cursor: 'pointer',\r\n                        }}\r\n                      >\r\n                        <ListItemText\r\n                          primary={\r\n                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                              <Typography variant=\"subtitle1\">{fonction.nom}</Typography>\r\n                              <Chip\r\n                                label={formatScore(fonction.score_global)}\r\n                                color={getNiveauColor(fonction.niveau || '')}\r\n                                size=\"small\"\r\n                              />\r\n                            </Box>\r\n                          }\r\n                          secondary={\r\n                            <Typography variant=\"body2\" sx={{ mt: 0.5 }}>\r\n                              {fonction.niveau || 'Niveau non défini'}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </ListItem>\r\n                      {index < entrepriseDetails.fonctions.length - 1 && <Divider />}\r\n                    </React.Fragment>\r\n                  ))}\r\n                </List>\r\n              ) : (\r\n                <Alert severity=\"info\">Aucune fonction évaluée pour cette entreprise.</Alert>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Selected function analysis */}\r\n        <Grid item xs={12} md={8}>\r\n          {fonctionDetails ? (\r\n            <Card>\r\n              <CardHeader\r\n                title={`Analyse de la fonction: ${fonctionDetails.nom}`}\r\n                action={\r\n                  <Chip\r\n                    label={`Score: ${formatScore(fonctionDetails.score_global)}`}\r\n                    color={getNiveauColor(fonctionDetails.niveau || '')}\r\n                  />\r\n                }\r\n              />\r\n              <CardContent>\r\n                <Tabs\r\n                  value={tabValue}\r\n                  onChange={handleTabChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"fullWidth\"\r\n                  sx={{ mb: 2 }}\r\n                >\r\n                  <Tab label=\"Vue d'ensemble\" />\r\n                  <Tab label=\"Nos Recommandation\" />\r\n                  <Tab label=\"Recommandations LLM Publics\" />\r\n                </Tabs>\r\n\r\n                {/* Overview tab avec graphique RADAR corrigé */}\r\n                {tabValue === 0 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Score par Thématique vs Benchmark Marché\r\n                    </Typography>\r\n\r\n                    {fonctionDetails.thematiques && fonctionDetails.thematiques.length > 0 ? (\r\n                      <>\r\n                        <Box sx={{ width: '100%', height: 400 }}>\r\n                          <ResponsiveContainer width=\"100%\" height={350}>\r\n                            <RadarChart\r\n                              outerRadius={140}\r\n                              width={500}\r\n                              height={350}\r\n                              data={radarData} // Utilise les données de l'état\r\n                            >\r\n                              <PolarGrid />\r\n                              <PolarAngleAxis dataKey=\"thematique\" />\r\n                              <PolarRadiusAxis angle={30} domain={[0, 5]} />\r\n                              \r\n                              {/* Représentation des scores actuels (bleu) */}\r\n                              <Radar\r\n                                name=\"Score Actuel\"\r\n                                dataKey=\"score\"\r\n                                stroke=\"#0B4E87\"\r\n                                fill=\"#0B4E87\"\r\n                                fillOpacity={0.6}\r\n                              />\r\n                              \r\n                              {/* Représentation benchmark (vert avec trait interrompu) */}\r\n                              <Radar\r\n                                name=\"Benchmark Marché\"\r\n                                dataKey=\"benchmark\"\r\n                                stroke=\"#4CAF50\"\r\n                                fill=\"#4CAF50\"\r\n                                fillOpacity={0.3}\r\n                                strokeDasharray=\"5 5\"\r\n                                strokeWidth={2}\r\n                              />\r\n                            </RadarChart>\r\n                          </ResponsiveContainer>\r\n                          \r\n                          {/* Légende séparée avec espacement contrôlé */}\r\n                          <Box sx={{ \r\n                            display: 'flex', \r\n                            justifyContent: 'center', \r\n                            gap: 3, \r\n                            mt: '10px',\r\n                            alignItems: 'center' \r\n                          }}>\r\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                              <Box sx={{ \r\n                                width: 16, \r\n                                height: 16, \r\n                                backgroundColor: '#0B4E87', \r\n                                opacity: 0.6,\r\n                                borderRadius: 1 \r\n                              }} />\r\n                              <Typography variant=\"body2\">Score Actuel</Typography>\r\n                            </Box>\r\n                            \r\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                              <Box sx={{ \r\n                                width: 16, \r\n                                height: 16, \r\n                                backgroundColor: '#4CAF50', \r\n                                opacity: 0.3,\r\n                                border: '2px dashed #4CAF50',\r\n                                borderRadius: 1 \r\n                              }} />\r\n                              <Typography variant=\"body2\">Benchmark Marché</Typography>\r\n                            </Box>\r\n                            \r\n                            {loadingBenchmark && (\r\n                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, ml: 2 }}>\r\n                                <CircularProgress size={16} />\r\n                                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                  Chargement benchmark...\r\n                                </Typography>\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        </Box>\r\n                        \r\n                        {/* Métadonnées benchmark si disponibles */}\r\n                        {benchmarkDataLLM && (\r\n                          <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                            <Typography variant=\"body2\">\r\n                              <strong>Benchmark basé sur :</strong> {benchmarkDataLLM.metadata.sources_utilisees.join(', ')} | \r\n                              <strong> Fiabilité :</strong> {benchmarkDataLLM.metadata.fiabilite_globale}% | \r\n                              <strong> Analyse du :</strong> {new Date(benchmarkDataLLM.date_analyse).toLocaleDateString('fr-FR')}\r\n                            </Typography>\r\n                          </Alert>\r\n                        )}\r\n                        \r\n                        {/* Détails des thématiques */}\r\n                        <Box sx={{ mt: 2 }}>\r\n                          <Typography variant=\"subtitle1\" gutterBottom fontWeight=\"bold\">\r\n                            Détail des scores par thématique:\r\n                          </Typography>\r\n                          <List>\r\n                            {fonctionDetails.thematiques.map((theme, index) => (\r\n                              <ListItem key={index}>\r\n                                <ListItemText\r\n                                  primary={\r\n                                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                      <Typography variant=\"body1\">{theme.nom}</Typography>\r\n                                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                                        <Chip\r\n                                          label={`Actuel: ${formatScore(theme.score)}`}\r\n                                          color={getNiveauColor(theme.niveau || '')}\r\n                                          size=\"small\"\r\n                                        />\r\n                                        {benchmarkDataLLM && (\r\n                                          <Chip\r\n                                            label={`Benchmark: ${getBenchmarkScore(theme.nom, benchmarkDataLLM.thematiques).toFixed(1)}`}\r\n                                            variant=\"outlined\"\r\n                                            color=\"success\"\r\n                                            size=\"small\"\r\n                                          />\r\n                                        )}\r\n                                      </Box>\r\n                                    </Box>\r\n                                  }\r\n                                  secondary={theme.niveau}\r\n                                />\r\n                              </ListItem>\r\n                            ))}\r\n                          </List>\r\n                        </Box>\r\n                      </>\r\n                    ) : (\r\n                      <Alert severity=\"info\">\r\n                        Aucune donnée de thématique disponible pour cette fonction.\r\n                        <br />\r\n                        <Typography variant=\"caption\">\r\n                          Vérifiez que des formulaires ont été soumis et analysés pour cette fonction.\r\n                        </Typography>\r\n                      </Alert>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n\r\n                {/* Recommandations ST Digital tab */}\r\n                {tabValue === 1 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Nos Recommandations \r\n                    </Typography>\r\n                    <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n                      <strong>Recommandations générales pour la fonction:</strong>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ mb: 3, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\r\n                      {fonctionDetails.recommandations || 'Aucune recommandation spécifique disponible pour cette fonction.'}\r\n                    </Typography>\r\n\r\n                    {fonctionDetails.thematiques && fonctionDetails.thematiques.length > 0 ? (\r\n                      <List>\r\n                        {fonctionDetails.thematiques.map((theme, index) => (\r\n                          <React.Fragment key={index}>\r\n                            <ListItem>\r\n                              <ListItemText\r\n                                primary={\r\n                                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">{theme.nom}</Typography>\r\n                                    <Chip\r\n                                      label={formatScore(theme.score)}\r\n                                      color={getNiveauColor(theme.niveau || '')}\r\n                                      size=\"small\"\r\n                                    />\r\n                                  </Box>\r\n                                }\r\n                                secondary={\r\n                                  <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                                    {theme.recommandations || 'Aucune recommandation spécifique pour cette thématique.'}\r\n                                  </Typography>\r\n                                }\r\n                              />\r\n                            </ListItem>\r\n                            {index < fonctionDetails.thematiques.length - 1 && <Divider />}\r\n                          </React.Fragment>\r\n                        ))}\r\n                      </List>\r\n                    ) : (\r\n                      <Alert severity=\"info\">Aucune recommandation thématique disponible pour cette fonction.</Alert>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n\r\n                {/* LLM Recommendations tab */}\r\n                {tabValue === 2 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Recommandations LLM Publics\r\n                    </Typography>\r\n                    \r\n                    {benchmarkDataLLM && benchmarkDataLLM.thematiques.length > 0 ? (\r\n                      <Box>\r\n                        {/* Métadonnées de l'analyse */}\r\n                        <Card sx={{ mb: 3, bgcolor: 'grey.50' }}>\r\n                          <CardContent>\r\n                            <Typography variant=\"subtitle1\" fontWeight=\"bold\" gutterBottom>\r\n                              Informations sur l'analyse benchmark\r\n                            </Typography>\r\n                            <Grid container spacing={2}>\r\n                              <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"body2\">\r\n                                  <strong>Sources:</strong> {benchmarkDataLLM.metadata.sources_utilisees.join(', ')}\r\n                                </Typography>\r\n                              </Grid>\r\n                              <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"body2\">\r\n                                  <strong>Fiabilité globale:</strong> {benchmarkDataLLM.metadata.fiabilite_globale}%\r\n                                </Typography>\r\n                              </Grid>\r\n                              <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"body2\">\r\n                                  <strong>Date d'analyse:</strong> {new Date(benchmarkDataLLM.date_analyse).toLocaleDateString('fr-FR')}\r\n                                </Typography>\r\n                              </Grid>\r\n                            </Grid>\r\n                          </CardContent>\r\n                        </Card>\r\n\r\n                        {/* Recommandations par thématique */}\r\n                        {benchmarkDataLLM.thematiques.map((thematique, index) => (\r\n                          <Card key={index} sx={{ mb: 2 }}>\r\n                            <CardHeader\r\n                              title={thematique.nom}\r\n                              action={\r\n                                <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\r\n                                  <Chip\r\n                                    label={`Score moyen: ${thematique.score_moyen.toFixed(1)}`}\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                  />\r\n                                  <Chip\r\n                                    label={`Écart-type: ${thematique.ecart_type.toFixed(2)}`}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                  />\r\n                                </Box>\r\n                              }\r\n                            />\r\n                            <CardContent>\r\n                              {/* Recommandations de chaque LLM */}\r\n                              <Grid container spacing={2}>\r\n                                {thematique.recommandations_llm.map((rec, recIndex) => (\r\n                                  <Grid item xs={12} md={4} key={recIndex}>\r\n                                    <Card variant=\"outlined\" sx={{ height: '100%' }}>\r\n                                      <CardHeader\r\n                                        title={rec.source}\r\n                                        avatar={\r\n                                          <Box sx={{ \r\n                                            width: 32, \r\n                                            height: 32, \r\n                                            borderRadius: '50%',\r\n                                            bgcolor: rec.source === 'ChatGPT' ? '#10a37f' : \r\n                                                     rec.source === 'Grok' ? '#1da1f2' : '#ff6b35',\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'center',\r\n                                            color: 'white',\r\n                                            fontSize: '0.75rem',\r\n                                            fontWeight: 'bold'\r\n                                          }}>\r\n                                            {rec.source === 'ChatGPT' ? 'GPT' : \r\n                                             rec.source === 'Grok' ? 'GRK' : 'CLD'}\r\n                                          </Box>\r\n                                        }\r\n                                        action={\r\n                                          <Box sx={{ textAlign: 'right' }}>\r\n                                            <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                                              {rec.score.toFixed(1)}/5\r\n                                            </Typography>\r\n                                            <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                              Confiance: {rec.niveau_confiance}%\r\n                                            </Typography>\r\n                                          </Box>\r\n                                        }\r\n                                        sx={{ pb: 1 }}\r\n                                      />\r\n                                      <CardContent sx={{ pt: 0 }}>\r\n                                        <Typography variant=\"body2\">\r\n                                          {rec.recommandation}\r\n                                        </Typography>\r\n                                      </CardContent>\r\n                                    </Card>\r\n                                  </Grid>\r\n                                ))}\r\n                              </Grid>\r\n                            </CardContent>\r\n                          </Card>\r\n                        ))}\r\n                      </Box>\r\n                    ) : (\r\n                      <Box>\r\n                        {loadingBenchmark ? (\r\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, p: 3 }}>\r\n                            <CircularProgress size={24} />\r\n                            <Typography>Chargement des recommandations LLM...</Typography>\r\n                          </Box>\r\n                        ) : (\r\n                          <Alert severity=\"info\">\r\n                            Aucune recommandation LLM disponible pour cette fonction.\r\n                            <br />\r\n                            <Typography variant=\"caption\">\r\n                              Les recommandations seront générées automatiquement lors de la sélection d'une fonction avec des thématiques.\r\n                            </Typography>\r\n                          </Alert>\r\n                        )}\r\n                      </Box>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            <Alert severity=\"info\">Veuillez sélectionner une fonction pour voir son analyse détaillée.</Alert>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AnalysesFonctions;","// src/pages/dashboard/AnalysesInterpretationsEntreprises.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container, Grid, Paper, Typography, Box, CircularProgress, Card, CardContent, CardHeader,\r\n  Tabs, Tab, List, ListItem, ListItemText, Divider, Alert, FormControl, InputLabel,\r\n  MenuItem, Select, Chip, Button, Accordion, AccordionSummary, AccordionDetails,\r\n  Avatar, Badge, Tooltip\r\n} from '@mui/material';\r\nimport {\r\n  Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer,\r\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend,\r\n  PieChart, Pie, Cell\r\n} from 'recharts';\r\nimport {\r\n  Business, Assessment, TrendingUp, Security, Computer, Storage, Code, Lightbulb,\r\n  ExpandMore, Refresh, GetApp, Share, Timeline\r\n} from '@mui/icons-material';\r\nimport { getNiveauColor } from '../../utils/AnalyseUtils';\r\nimport api from '../../services/api';\r\n\r\n// Types pour les données V2 des nouvelles routes\r\ninterface EntrepriseGlobalV2 {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  secteur: string;\r\n  description?: string;\r\n  taille_entreprise: 'TPE' | 'PME' | 'ETI' | 'GE';\r\n  effectif_total: number;\r\n  ville_siege_social: string;\r\n  pays_siege_social: string;\r\n  \r\n  // Scores de maturité (moyennes)\r\n  score_maturite_global: number;\r\n  score_maturite_global_percentage: number;\r\n  score_cybersecurite_moyen: number;\r\n  score_cybersecurite_percentage: number;\r\n  score_maturite_digitale_moyen: number;\r\n  score_maturite_digitale_percentage: number;\r\n  score_gouvernance_donnees_moyen: number;\r\n  score_gouvernance_donnees_percentage: number;\r\n  score_devsecops_moyen: number;\r\n  score_devsecops_percentage: number;\r\n  score_innovation_numerique_moyen: number;\r\n  score_innovation_numerique_percentage: number;\r\n  \r\n  // Niveaux de maturité\r\n  niveau_maturite_global: string;\r\n  niveau_cybersecurite: string;\r\n  niveau_maturite_digitale: string;\r\n  niveau_gouvernance_donnees: string;\r\n  niveau_devsecops: string;\r\n  niveau_innovation_numerique: string;\r\n  \r\n  // Métadonnées\r\n  recommandations_globales: string;\r\n  nombre_evaluations: number;\r\n  nombre_acteurs_evalues: number;\r\n  nombre_utilisateurs: number;\r\n  nombre_applications: number;\r\n  has_evaluation: boolean;\r\n  evaluation_completion_rate: number;\r\n  derniere_evaluation: string;\r\n  premiere_evaluation_reelle: string;\r\n}\r\n\r\ninterface EntrepriseDetailsV2 {\r\n  entreprise: EntrepriseGlobalV2;\r\n  fonctions_analysis: FonctionAnalysisV2[];\r\n  evaluations_individuelles: EvaluationIndividuelle[];\r\n  statistiques: StatistiquesEntreprise;\r\n  radar_data: RadarDataPoint[];\r\n}\r\n\r\ninterface FonctionAnalysisV2 {\r\n  fonction: string;\r\n  label: string;\r\n  score: number;\r\n  score_percentage: number;\r\n  niveau: string;\r\n  description: string;\r\n  icon: React.ReactNode;\r\n  color: string;\r\n}\r\n\r\ninterface EvaluationIndividuelle {\r\n  id_evaluation: string;\r\n  id_acteur: string;\r\n  score_global: number;\r\n  score_cybersecurite: number;\r\n  score_maturite_digitale: number;\r\n  score_gouvernance_donnees: number;\r\n  score_devsecops: number;\r\n  score_innovation_numerique: number;\r\n  niveau_global: string;\r\n  date_soumission: string;\r\n  duree_evaluation: number;\r\n  evaluateur_nom: string;\r\n  evaluateur_email: string;\r\n}\r\n\r\ninterface StatistiquesEntreprise {\r\n  nombre_evaluations: number;\r\n  nombre_acteurs_evalues: number;\r\n  nombre_utilisateurs: number;\r\n  nombre_applications: number;\r\n  taux_participation: number;\r\n  premiere_evaluation: string;\r\n  derniere_evaluation: string;\r\n}\r\n\r\ninterface RadarDataPoint {\r\n  fonction: string;\r\n  score: number;\r\n  niveau: string;\r\n  fullMark: number;\r\n}\r\n\r\ninterface BenchmarkDataLLM {\r\n  secteur: string;\r\n  fonction: string;\r\n  date_analyse: string;\r\n  scores: {\r\n    niveau_entreprise: number;\r\n    niveau_fonction: number;\r\n    niveau_thematique: number;\r\n  };\r\n  metadata: {\r\n    version_api: string;\r\n    sources_utilisees: string[];\r\n  };\r\n}\r\n\r\n// Cache pour les données benchmark\r\nconst benchmarkCache = new Map<string, BenchmarkDataLLM>();\r\n\r\n// Fonctions utilitaires\r\nconst formatScore = (score: number): string => {\r\n  return Math.round(score || 0).toString();\r\n};\r\n\r\nconst getNiveauColorByScore = (score: number): \"default\" | \"primary\" | \"secondary\" | \"error\" | \"info\" | \"success\" | \"warning\" => {\r\n  if (score >= 80) return 'success';\r\n  if (score >= 60) return 'info';\r\n  if (score >= 40) return 'warning';\r\n  if (score >= 20) return 'error';\r\n  return 'default';\r\n};\r\n\r\nconst ensureValidScore = (score: any): number => {\r\n  const numScore = typeof score === 'string' ? parseFloat(score) : score;\r\n  return isNaN(numScore) ? 0 : Math.max(0, Math.min(100, numScore));\r\n};\r\n\r\n// Fonction pour récupérer les données benchmark (simulée pour l'instant)\r\nconst fetchBenchmarkData = async (secteur: string, fonction: string): Promise<BenchmarkDataLLM | null> => {\r\n  const cacheKey = `${secteur}-${fonction}`;\r\n  \r\n  if (benchmarkCache.has(cacheKey)) {\r\n    return benchmarkCache.get(cacheKey)!;\r\n  }\r\n\r\n  try {\r\n    const response = await api.post('benchmark/analyze', {\r\n      secteur,\r\n      fonction,\r\n      thematiques: ['General']\r\n    });\r\n\r\n    const benchmarkData = response.data || response;\r\n    benchmarkCache.set(cacheKey, benchmarkData);\r\n    return benchmarkData;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération du benchmark:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst AnalysesInterpretationsEntreprises: React.FC = () => {\r\n  // États principaux\r\n  const [entreprises, setEntreprises] = useState<EntrepriseGlobalV2[]>([]);\r\n  const [selectedEntreprise, setSelectedEntreprise] = useState<string>('');\r\n  const [entrepriseDetails, setEntrepriseDetails] = useState<EntrepriseDetailsV2 | null>(null);\r\n  const [selectedFonction, setSelectedFonction] = useState<string>('');\r\n  \r\n  // États de l'interface\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [loadingDetails, setLoadingDetails] = useState<boolean>(false);\r\n  const [loadingBenchmark, setLoadingBenchmark] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>('');\r\n  const [mainTabValue, setMainTabValue] = useState<number>(0); // 0: Vue d'ensemble, 1: Fonctions détaillées\r\n  const [functionTabValue, setFunctionTabValue] = useState<number>(0);\r\n  \r\n  // États pour les données benchmark\r\n  const [benchmarkDataLLM, setBenchmarkDataLLM] = useState<BenchmarkDataLLM | null>(null);\r\n\r\n  // Configuration des icônes et couleurs pour les fonctions\r\n  const getFunctionConfig = (fonction: string) => {\r\n    const configs = {\r\n      cybersecurite: { icon: <Security />, color: '#f44336', label: 'Cybersécurité' },\r\n      maturite_digitale: { icon: <Computer />, color: '#2196f3', label: 'Maturité Digitale' },\r\n      gouvernance_donnees: { icon: <Storage />, color: '#4caf50', label: 'Gouvernance des Données' },\r\n      devsecops: { icon: <Code />, color: '#ff9800', label: 'DevSecOps' },\r\n      innovation_numerique: { icon: <Lightbulb />, color: '#9c27b0', label: 'Innovation Numérique' }\r\n    };\r\n    return configs[fonction] || { icon: <Assessment />, color: '#607d8b', label: fonction };\r\n  };\r\n\r\n  // Chargement initial des entreprises\r\n  useEffect(() => {\r\n    loadEntreprises();\r\n  }, []);\r\n\r\n  // Chargement des détails quand l'entreprise change\r\n  useEffect(() => {\r\n    if (selectedEntreprise) {\r\n      loadEntrepriseDetails(selectedEntreprise);\r\n    }\r\n  }, [selectedEntreprise]);\r\n\r\n  // Chargement des entreprises avec la nouvelle route\r\n  const loadEntreprises = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError('');\r\n      \r\n      console.log('Chargement des entreprises via /api/entreprise-global');\r\n      const response = await api.get('/entreprise-global');\r\n      \r\n      let entreprisesData: EntrepriseGlobalV2[] = [];\r\n      if (Array.isArray(response)) {\r\n        entreprisesData = response;\r\n      } else if (response?.data && Array.isArray(response.data)) {\r\n        entreprisesData = response.data;\r\n      }\r\n\r\n      console.log('Entreprises récupérées:', entreprisesData.length);\r\n\r\n      // Filtrer les entreprises qui ont des évaluations de maturité\r\n      const entreprisesAvecEvaluation = entreprisesData.filter(ent => \r\n        ent.has_evaluation && ent.nombre_evaluations > 0\r\n      );\r\n\r\n      console.log('Entreprises avec évaluations:', entreprisesAvecEvaluation.length);\r\n\r\n      setEntreprises(entreprisesAvecEvaluation);\r\n      \r\n      if (entreprisesAvecEvaluation.length > 0) {\r\n        setSelectedEntreprise(entreprisesAvecEvaluation[0].id_entreprise);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des entreprises:', error);\r\n      setError('Impossible de charger la liste des entreprises avec évaluations.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Chargement des détails d'une entreprise avec la nouvelle route\r\n  const loadEntrepriseDetails = async (entrepriseId: string) => {\r\n    try {\r\n      setLoadingDetails(true);\r\n      setError('');\r\n\r\n      console.log(`Chargement des détails pour l'entreprise: ${entrepriseId}`);\r\n      \r\n      // Utiliser la nouvelle route entreprise-global pour récupérer les détails complets\r\n      const response = await api.get(`/entreprise-global/${entrepriseId}`);\r\n      \r\n      const detailsData: EntrepriseDetailsV2 = response.data || response;\r\n      \r\n      console.log('Détails de l\\'entreprise récupérés:', detailsData);\r\n\r\n      // Enrichir les fonctions avec les configurations d'affichage\r\n      if (detailsData.fonctions_analysis) {\r\n        detailsData.fonctions_analysis = detailsData.fonctions_analysis.map(fonction => {\r\n          const config = getFunctionConfig(fonction.fonction);\r\n          return {\r\n            ...fonction,\r\n            ...config\r\n          };\r\n        });\r\n      }\r\n\r\n      setEntrepriseDetails(detailsData);\r\n\r\n      // Auto-sélectionner la première fonction si disponible\r\n      if (detailsData.fonctions_analysis && detailsData.fonctions_analysis.length > 0) {\r\n        setSelectedFonction(detailsData.fonctions_analysis[0].fonction);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des détails de l\\'entreprise:', error);\r\n      setError('Impossible de charger les détails de l\\'entreprise.');\r\n    } finally {\r\n      setLoadingDetails(false);\r\n    }\r\n  };\r\n\r\n  // Chargement des données benchmark pour une fonction\r\n  const loadBenchmarkForFunction = async (fonction: string) => {\r\n    if (!entrepriseDetails?.entreprise) return;\r\n\r\n    try {\r\n      setLoadingBenchmark(true);\r\n      const benchmarkData = await fetchBenchmarkData(\r\n        entrepriseDetails.entreprise.secteur, \r\n        fonction\r\n      );\r\n      setBenchmarkDataLLM(benchmarkData);\r\n    } catch (error) {\r\n      console.error('Erreur benchmark:', error);\r\n    } finally {\r\n      setLoadingBenchmark(false);\r\n    }\r\n  };\r\n\r\n  // Gestionnaires d'événements\r\n  const handleEntrepriseChange = (event: any) => {\r\n    setSelectedEntreprise(event.target.value);\r\n  };\r\n\r\n  const handleMainTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setMainTabValue(newValue);\r\n  };\r\n\r\n  const handleFunctionTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setFunctionTabValue(newValue);\r\n  };\r\n\r\n  const handleFunctionSelect = (fonction: string) => {\r\n    setSelectedFonction(fonction);\r\n    loadBenchmarkForFunction(fonction);\r\n  };\r\n\r\n  const handleRefreshData = () => {\r\n    if (selectedEntreprise) {\r\n      loadEntrepriseDetails(selectedEntreprise);\r\n    }\r\n  };\r\n\r\n  // Rendu conditionnel selon le chargement\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '80vh' }}>\r\n        <CircularProgress size={60} />\r\n        <Typography sx={{ ml: 2 }}>Chargement des analyses d'entreprise...</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (entreprises.length === 0) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n        <Alert severity=\"info\">\r\n          Aucune entreprise avec évaluation de maturité disponible.\r\n          <br />\r\n          Les entreprises doivent d'abord compléter leur évaluation de maturité DSIN.\r\n        </Alert>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {/* En-tête avec sélection d'entreprise */}\r\n      <Paper elevation={2} sx={{ p: 3, mb: 3 }}>\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item xs={12} md={8}>\r\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n              <Assessment sx={{ mr: 2, verticalAlign: 'middle' }} />\r\n              Analyses & Interprétations - Entreprises\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"text.secondary\">\r\n              Analyse approfondie de la maturité DSIN des entreprises avec benchmarks sectoriels\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Sélectionner une entreprise</InputLabel>\r\n              <Select\r\n                value={selectedEntreprise}\r\n                onChange={handleEntrepriseChange}\r\n                label=\"Sélectionner une entreprise\"\r\n              >\r\n                {entreprises.map((entreprise) => (\r\n                  <MenuItem key={entreprise.id_entreprise} value={entreprise.id_entreprise}>\r\n                    <Box>\r\n                      <Typography variant=\"body1\">\r\n                        {entreprise.nom_entreprise}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" color=\"text.secondary\">\r\n                        {entreprise.secteur} • {entreprise.taille_entreprise}\r\n                      </Typography>\r\n                    </Box>\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {loadingDetails && (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n          <CircularProgress />\r\n          <Typography sx={{ ml: 2 }}>Chargement des détails...</Typography>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Contenu principal - Détails de l'entreprise */}\r\n      {entrepriseDetails && !loadingDetails && (\r\n        <>\r\n          {/* Carte d'information entreprise */}\r\n          <Card sx={{ mb: 3 }}>\r\n            <CardHeader\r\n              avatar={<Business color=\"primary\" sx={{ fontSize: 40 }} />}\r\n              title={\r\n                <Typography variant=\"h5\" component=\"div\">\r\n                  {entrepriseDetails.entreprise.nom_entreprise}\r\n                </Typography>\r\n              }\r\n              subheader={\r\n                <Box sx={{ mt: 1 }}>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {entrepriseDetails.entreprise.secteur} • {entrepriseDetails.entreprise.taille_entreprise} • {entrepriseDetails.entreprise.effectif_total} employés\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Dernière évaluation: {new Date(entrepriseDetails.entreprise.derniere_evaluation).toLocaleDateString('fr-FR')}\r\n                    {entrepriseDetails.statistiques.nombre_evaluations > 1 && \r\n                      ` • ${entrepriseDetails.statistiques.nombre_evaluations} évaluations au total`\r\n                    }\r\n                  </Typography>\r\n                </Box>\r\n              }\r\n              action={\r\n                <Box sx={{ textAlign: 'right' }}>\r\n                  <Typography variant=\"h4\" color=\"primary\" fontWeight=\"bold\">\r\n                    {formatScore(entrepriseDetails.entreprise.score_maturite_global_percentage)}/100\r\n                  </Typography>\r\n                  <Chip \r\n                    label={entrepriseDetails.entreprise.niveau_maturite_global}\r\n                    color={getNiveauColorByScore(entrepriseDetails.entreprise.score_maturite_global_percentage)}\r\n                    sx={{ mt: 1 }}\r\n                  />\r\n                  <Box sx={{ mt: 1 }}>\r\n                    <Button\r\n                      size=\"small\"\r\n                      startIcon={<Refresh />}\r\n                      onClick={handleRefreshData}\r\n                    >\r\n                      Actualiser\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              }\r\n            />\r\n            <CardContent>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                <strong>Recommandations globales:</strong> {entrepriseDetails.entreprise.recommandations_globales}\r\n              </Typography>\r\n              \r\n              {/* Statistiques rapides */}\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={6} md={3}>\r\n                  <Box sx={{ textAlign: 'center' }}>\r\n                    <Typography variant=\"h6\" color=\"primary\">\r\n                      {entrepriseDetails.statistiques.nombre_acteurs_evalues}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\">Acteurs évalués</Typography>\r\n                  </Box>\r\n                </Grid>\r\n                <Grid item xs={6} md={3}>\r\n                  <Box sx={{ textAlign: 'center' }}>\r\n                    <Typography variant=\"h6\" color=\"primary\">\r\n                      {Math.round(entrepriseDetails.statistiques.taux_participation)}%\r\n                    </Typography>\r\n                    <Typography variant=\"caption\">Taux participation</Typography>\r\n                  </Box>\r\n                </Grid>\r\n                <Grid item xs={6} md={3}>\r\n                  <Box sx={{ textAlign: 'center' }}>\r\n                    <Typography variant=\"h6\" color=\"primary\">\r\n                      {entrepriseDetails.statistiques.nombre_utilisateurs}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\">Utilisateurs total</Typography>\r\n                  </Box>\r\n                </Grid>\r\n                <Grid item xs={6} md={3}>\r\n                  <Box sx={{ textAlign: 'center' }}>\r\n                    <Typography variant=\"h6\" color=\"primary\">\r\n                      {entrepriseDetails.statistiques.nombre_applications}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\">Applications</Typography>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Onglets principaux */}\r\n          <Paper sx={{ mb: 3 }}>\r\n            <Tabs\r\n              value={mainTabValue}\r\n              onChange={handleMainTabChange}\r\n              variant=\"fullWidth\"\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n            >\r\n              <Tab \r\n                label=\"Vue d'ensemble\" \r\n                icon={<Timeline />}\r\n                iconPosition=\"start\"\r\n              />\r\n              <Tab \r\n                label=\"Analyse par fonctions\" \r\n                icon={<Assessment />}\r\n                iconPosition=\"start\"\r\n              />\r\n            </Tabs>\r\n          </Paper>\r\n\r\n          {/* Contenu des onglets */}\r\n          {mainTabValue === 0 && (\r\n            <Grid container spacing={3}>\r\n              {/* Graphique radar */}\r\n              <Grid item xs={12} md={6}>\r\n                <Card>\r\n                  <CardHeader\r\n                    title=\"Radar de maturité\"\r\n                    subheader=\"Scores par fonction DSIN\"\r\n                  />\r\n                  <CardContent>\r\n                    <ResponsiveContainer width=\"100%\" height={350}>\r\n                      <RadarChart data={entrepriseDetails.radar_data}>\r\n                        <PolarGrid />\r\n                        <PolarAngleAxis dataKey=\"fonction\" />\r\n                        <PolarRadiusAxis\r\n                          angle={90}\r\n                          domain={[0, 100]}\r\n                          tick={false}\r\n                        />\r\n                        <Radar\r\n                          name=\"Score\"\r\n                          dataKey=\"score\"\r\n                          stroke=\"#2196f3\"\r\n                          fill=\"#2196f3\"\r\n                          fillOpacity={0.3}\r\n                        />\r\n                      </RadarChart>\r\n                    </ResponsiveContainer>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n\r\n              {/* Scores par fonction */}\r\n              <Grid item xs={12} md={6}>\r\n                <Card>\r\n                  <CardHeader\r\n                    title=\"Scores détaillés\"\r\n                    subheader=\"Performance par fonction\"\r\n                  />\r\n                  <CardContent>\r\n                    <List>\r\n                      {entrepriseDetails.fonctions_analysis.map((fonction, index) => (\r\n                        <React.Fragment key={fonction.fonction}>\r\n                          <ListItem>\r\n                            <Avatar sx={{ bgcolor: fonction.color, mr: 2 }}>\r\n                              {fonction.icon}\r\n                            </Avatar>\r\n                            <ListItemText\r\n                              primary={fonction.label}\r\n                              secondary={\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>\r\n                                  <Typography variant=\"body2\" sx={{ mr: 2 }}>\r\n                                    {formatScore(fonction.score_percentage)}/100\r\n                                  </Typography>\r\n                                  <Chip\r\n                                    size=\"small\"\r\n                                    label={fonction.niveau}\r\n                                    color={getNiveauColorByScore(fonction.score_percentage)}\r\n                                  />\r\n                                </Box>\r\n                              }\r\n                            />\r\n                          </ListItem>\r\n                          {index < entrepriseDetails.fonctions_analysis.length - 1 && <Divider />}\r\n                        </React.Fragment>\r\n                      ))}\r\n                    </List>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n\r\n              {/* Évaluations individuelles */}\r\n              <Grid item xs={12}>\r\n                <Card>\r\n                  <CardHeader\r\n                    title=\"Historique des évaluations\"\r\n                    subheader={`${entrepriseDetails.evaluations_individuelles.length} évaluation(s) terminée(s)`}\r\n                  />\r\n                  <CardContent>\r\n                    <Grid container spacing={2}>\r\n                      {entrepriseDetails.evaluations_individuelles.map((evaluation) => (\r\n                        <Grid item xs={12} md={6} lg={4} key={evaluation.id_evaluation}>\r\n                          <Paper sx={{ p: 2, border: '1px solid #e0e0e0' }}>\r\n                            <Typography variant=\"subtitle1\" gutterBottom>\r\n                              {evaluation.evaluateur_nom}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\r\n                              {new Date(evaluation.date_soumission).toLocaleDateString('fr-FR')}\r\n                            </Typography>\r\n                            <Box sx={{ mt: 2 }}>\r\n                              <Typography variant=\"h6\" color=\"primary\">\r\n                                {formatScore((evaluation.score_global / 5) * 100)}/100\r\n                              </Typography>\r\n                              <Chip\r\n                                size=\"small\"\r\n                                label={evaluation.niveau_global}\r\n                                color={getNiveauColorByScore((evaluation.score_global / 5) * 100)}\r\n                                sx={{ mt: 1 }}\r\n                              />\r\n                            </Box>\r\n                          </Paper>\r\n                        </Grid>\r\n                      ))}\r\n                    </Grid>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {mainTabValue === 1 && (\r\n            <Grid container spacing={3}>\r\n              {/* Sélection de fonction */}\r\n              <Grid item xs={12}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Sélectionner une fonction pour l'analyse détaillée\r\n                  </Typography>\r\n                  <Grid container spacing={2}>\r\n                    {entrepriseDetails.fonctions_analysis.map((fonction) => (\r\n                      <Grid item xs={12} sm={6} md={4} lg={2.4} key={fonction.fonction}>\r\n                        <Button\r\n                          fullWidth\r\n                          variant={selectedFonction === fonction.fonction ? \"contained\" : \"outlined\"}\r\n                          onClick={() => handleFunctionSelect(fonction.fonction)}\r\n                          startIcon={fonction.icon}\r\n                          sx={{\r\n                            height: 80,\r\n                            flexDirection: 'column',\r\n                            gap: 1,\r\n                            borderColor: fonction.color,\r\n                            color: selectedFonction === fonction.fonction ? 'white' : fonction.color,\r\n                            bgcolor: selectedFonction === fonction.fonction ? fonction.color : 'transparent',\r\n                            '&:hover': {\r\n                              bgcolor: selectedFonction === fonction.fonction ? fonction.color : `${fonction.color}20`\r\n                            }\r\n                          }}\r\n                        >\r\n                          <Typography variant=\"caption\">\r\n                            {fonction.label}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                            {formatScore(fonction.score_percentage)}/100\r\n                          </Typography>\r\n                        </Button>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              {/* Détails de la fonction sélectionnée */}\r\n              {selectedFonction && (\r\n                <Grid item xs={12}>\r\n                  {(() => {\r\n                    const fonction = entrepriseDetails.fonctions_analysis.find(f => f.fonction === selectedFonction);\r\n                    if (!fonction) return null;\r\n\r\n                    return (\r\n                      <Card>\r\n                        <CardHeader\r\n                          avatar={\r\n                            <Avatar sx={{ bgcolor: fonction.color }}>\r\n                              {fonction.icon}\r\n                            </Avatar>\r\n                          }\r\n                          title={fonction.label}\r\n                          subheader={fonction.description}\r\n                          action={\r\n                            <Box sx={{ textAlign: 'right' }}>\r\n                              <Typography variant=\"h5\" color=\"primary\">\r\n                                {formatScore(fonction.score_percentage)}/100\r\n                              </Typography>\r\n                              <Chip\r\n                                label={fonction.niveau}\r\n                                color={getNiveauColorByScore(fonction.score_percentage)}\r\n                              />\r\n                            </Box>\r\n                          }\r\n                        />\r\n                        <CardContent>\r\n                          {loadingBenchmark ? (\r\n                            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n                              <CircularProgress size={30} />\r\n                              <Typography sx={{ ml: 2 }}>Chargement du benchmark...</Typography>\r\n                            </Box>\r\n                          ) : benchmarkDataLLM ? (\r\n                            <Alert severity=\"info\">\r\n                              <Typography variant=\"body2\">\r\n                                <strong>Benchmark sectoriel disponible</strong><br />\r\n                                Score entreprise: {fonction.score_percentage}% • \r\n                                Score secteur: {benchmarkDataLLM.scores.niveau_fonction}%\r\n                              </Typography>\r\n                            </Alert>\r\n                          ) : (\r\n                            <Alert severity=\"warning\">\r\n                              Données de benchmark non disponibles pour cette fonction.\r\n                            </Alert>\r\n                          )}\r\n                        </CardContent>\r\n                      </Card>\r\n                    );\r\n                  })()}\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          )}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AnalysesInterpretationsEntreprises;","// src/pages/MaturityEvaluation.tsx\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Container, Grid, Paper, Typography, Box, Button, LinearProgress, Card, CardContent,\r\n  Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Tabs, Tab, Alert,\r\n  CircularProgress, Chip, Divider, IconButton, Tooltip, Dialog, DialogTitle,\r\n  DialogContent, DialogActions, Snackbar\r\n} from '@mui/material';\r\nimport {\r\n  Security, Computer, Storage, Code, Lightbulb, CheckCircle, ArrowForward, ArrowBack,\r\n  Save, Assessment, Info, Timer, Refresh, CloudUpload, CloudDone, Error\r\n} from '@mui/icons-material';\r\nimport api from '../services/api';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  fonction: string;\r\n  numero_question: number;\r\n  texte_question: string;\r\n  description?: string;\r\n  poids: number;\r\n  type_reponse: 'OUI_NON' | 'ECHELLE_1_5' | 'CHOIX_MULTIPLE';\r\n  options_reponse?: string[];\r\n  ordre_affichage: number;\r\n}\r\n\r\ninterface QuestionsByFunction {\r\n  [fonction: string]: Question[];\r\n}\r\n\r\ninterface Response {\r\n  id_question: string;\r\n  valeur_reponse: string;\r\n  score_question: number;\r\n  commentaire?: string;\r\n}\r\n\r\ninterface FunctionScore {\r\n  fonction: string;\r\n  score: number;\r\n  niveau: string;\r\n  progress: number;\r\n}\r\n\r\ninterface EvaluationData {\r\n  id_evaluation: string;\r\n  id_entreprise: string;\r\n  entreprise_nom: string;\r\n  manager_id: string;\r\n  date_debut: string;\r\n  statut: 'BROUILLON' | 'EN_COURS' | 'TERMINE';\r\n  responses: Record<string, Response>;\r\n  scores: Record<string, FunctionScore>;\r\n}\r\n\r\nconst functionsConfig = {\r\n  cybersecurite: {\r\n    label: 'Cybersécurité',\r\n    icon: <Security />,\r\n    color: '#d32f2f',\r\n    description: 'Sécurité des systèmes et données'\r\n  },\r\n  maturite_digitale: {\r\n    label: 'Maturité Digitale',\r\n    icon: <Computer />,\r\n    color: '#1976d2',\r\n    description: 'Transformation et stratégie digitale'\r\n  },\r\n  gouvernance_donnees: {\r\n    label: 'Gouvernance des Données',\r\n    icon: <Storage />,\r\n    color: '#388e3c',\r\n    description: 'Gestion et qualité des données'\r\n  },\r\n  devsecops: {\r\n    label: 'DevSecOps',\r\n    icon: <Code />,\r\n    color: '#f57c00',\r\n    description: 'Développement et opérations sécurisées'\r\n  },\r\n  innovation_numerique: {\r\n    label: 'Innovation Numérique',\r\n    icon: <Lightbulb />,\r\n    color: '#7b1fa2',\r\n    description: 'Veille et adoption technologique'\r\n  }\r\n};\r\n\r\nconst scaleOptions = [\r\n  { value: '1', label: '1 - Pas du tout', description: 'Aucune mise en place' },\r\n  { value: '2', label: '2 - Partiellement', description: 'Début de mise en place' },\r\n  { value: '3', label: '3 - Moyennement', description: 'Mise en place partielle' },\r\n  { value: '4', label: '4 - Largement', description: 'Mise en place avancée' },\r\n  { value: '5', label: '5 - Totalement', description: 'Mise en place complète' }\r\n];\r\n\r\nconst useDebounce = (value: any, delay: number) => {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n  return debouncedValue;\r\n};\r\n\r\nconst MaturityEvaluation: React.FC = () => {\r\n  const { enterpriseId } = useParams<{ enterpriseId: string }>();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { currentUser } = useAuth();\r\n  const [evaluationData, setEvaluationData] = useState<EvaluationData | null>(null);\r\n  const [questionsByFunction, setQuestionsByFunction] = useState<QuestionsByFunction>({});\r\n  const [currentFunction, setCurrentFunction] = useState(0);\r\n  const [responses, setResponses] = useState<Record<string, Response>>({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n  const [startTime] = useState(Date.now());\r\n  const [lastSaveTime, setLastSaveTime] = useState<Date | null>(null);\r\n  const [autoSaveStatus, setAutoSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n  const [unsavedChanges, setUnsavedChanges] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n  const functionKeys = Object.keys(functionsConfig);\r\n  const debouncedResponses = useDebounce(responses, 5000);\r\n\r\n  const initializeEvaluation = useCallback(async () => {\r\n  if (!enterpriseId || !currentUser) {\r\n    setError('ID de l\\'entreprise ou utilisateur manquant');\r\n    setLoading(false);\r\n    return;\r\n  }\r\n  try {\r\n    setLoading(true);\r\n    setError('');\r\n    console.log('🚀 Initialisation de l\\'évaluation pour entreprise:', enterpriseId);\r\n    let evaluationId: string;\r\n    const navigationState = location.state as { fromInvite?: boolean; inviteId?: string; evaluationId?: string };\r\n    if (navigationState?.fromInvite && navigationState?.evaluationId) {\r\n      console.log('📧 Arrivée depuis invitation:', navigationState);\r\n      const response = await api.get(`evaluation-invite/check-evaluation/${navigationState.evaluationId}`);\r\n      evaluationId = response.data.evaluation.id;\r\n      if (response.data.evaluation.statut === 'NOUVEAU') {\r\n        await api.post(`maturity-evaluation/start`, {\r\n          id_entreprise: enterpriseId,\r\n          id_acteur: currentUser?.id_acteur,\r\n          id_evaluation: evaluationId\r\n        });\r\n      }\r\n    } else {\r\n      try {\r\n        const existingResponse = await api.get(`maturity-evaluation/current/${enterpriseId}`);\r\n        evaluationId = existingResponse.data.id_evaluation || `eval_${enterpriseId}_${Date.now()}`;\r\n      } catch {\r\n        const newResponse = await api.post(`maturity-evaluation/start`, {\r\n          id_entreprise: enterpriseId,\r\n          id_acteur: currentUser?.id_acteur\r\n        });\r\n        evaluationId = newResponse.data.id_evaluation;\r\n      }\r\n    }\r\n    const evaluationResponse = await api.get(`evaluation-data/${evaluationId}`);\r\n    const { evaluation, fonctionsGlobales, responses } = evaluationResponse.data;\r\n    // Transform fonctionsGlobales into questionsByFunction format\r\n    const questionsByFunction: QuestionsByFunction = {};\r\n    fonctionsGlobales.forEach((func: any) => {\r\n      questionsByFunction[func.code_fonction] = func.questions.map((q: any) => ({\r\n        id_question: q.id_question,\r\n        fonction: func.code_fonction,\r\n        numero_question: q.numero_question,\r\n        texte_question: q.texte_question,\r\n        description: q.description,\r\n        poids: q.poids,\r\n        type_reponse: q.type_reponse,\r\n        ordre_affichage: q.ordre_question\r\n      }));\r\n    });\r\n    setQuestionsByFunction(questionsByFunction);\r\n    setEvaluationData({\r\n      id_evaluation: evaluation.id_evaluation,\r\n      id_entreprise: evaluation.id_entreprise,\r\n      entreprise_nom: evaluation.nom_entreprise,\r\n      manager_id: evaluation.id_acteur,\r\n      date_debut: evaluation.date_debut,\r\n      statut: evaluation.statut,\r\n      responses,\r\n      scores: {} // Will be calculated client-side\r\n    });\r\n    if (responses && Object.keys(responses).length > 0) {\r\n      setResponses(responses);\r\n      setSnackbarMessage('Évaluation en cours récupérée');\r\n      setSnackbarOpen(true);\r\n    }\r\n    console.log('✅ Évaluation initialisée:', evaluationId);\r\n  } catch (error: any) {\r\n    console.error('❌ Erreur lors de l\\'initialisation:', error);\r\n    setError(error.response?.data?.message || 'Erreur lors du chargement de l\\'évaluation');\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}, [enterpriseId, currentUser, location.state]);\r\n\r\n  useEffect(() => {\r\n    initializeEvaluation();\r\n  }, [initializeEvaluation]);\r\n\r\n  useEffect(() => {\r\n    if (debouncedResponses && Object.keys(debouncedResponses).length > 0 && evaluationData && unsavedChanges) {\r\n      saveResponses(false);\r\n    }\r\n  }, [debouncedResponses]);\r\n\r\n  useEffect(() => {\r\n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\r\n      if (unsavedChanges) {\r\n        e.preventDefault();\r\n        e.returnValue = '';\r\n      }\r\n    };\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\r\n  }, [unsavedChanges]);\r\n\r\n  const handleResponseChange = (questionId: string, value: string) => {\r\n    const question = Object.values(questionsByFunction).flat().find(q => q.id_question === questionId);\r\n    if (!question) return;\r\n    const numericValue = parseInt(value);\r\n    const score = (numericValue / 5) * 100;\r\n    const newResponse: Response = {\r\n      id_question: questionId,\r\n      valeur_reponse: value,\r\n      score_question: score\r\n    };\r\n    setResponses(prev => ({\r\n      ...prev,\r\n      [questionId]: newResponse\r\n    }));\r\n    setUnsavedChanges(true);\r\n    setAutoSaveStatus('idle');\r\n  };\r\n\r\n  const calculateFunctionScores = (): Record<string, FunctionScore> => {\r\n    const scores: Record<string, FunctionScore> = {};\r\n    Object.keys(functionsConfig).forEach(functionKey => {\r\n      const functionQuestions = questionsByFunction[functionKey] || [];\r\n      const functionResponses = functionQuestions\r\n        .map(q => responses[q.id_question])\r\n        .filter(Boolean);\r\n      const totalQuestions = functionQuestions.length;\r\n      const answeredQuestions = functionResponses.length;\r\n      const progress = totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0;\r\n      let averageScore = 0;\r\n      if (functionResponses.length > 0) {\r\n        const totalScore = functionResponses.reduce((sum, response) => sum + response.score_question, 0);\r\n        averageScore = totalScore / functionResponses.length;\r\n      }\r\n      let niveau = 'Non évalué';\r\n      if (averageScore >= 80) niveau = 'Optimisé';\r\n      else if (averageScore >= 60) niveau = 'Géré';\r\n      else if (averageScore >= 40) niveau = 'Mesuré';\r\n      else if (averageScore >= 20) niveau = 'Défini';\r\n      else if (averageScore > 0) niveau = 'Initial';\r\n      scores[functionKey] = {\r\n        fonction: functionsConfig[functionKey].label,\r\n        score: averageScore,\r\n        niveau,\r\n        progress\r\n      };\r\n    });\r\n    return scores;\r\n  };\r\n\r\n  const saveResponses = async (showMessage = true) => {\r\n    if (!evaluationData || Object.keys(responses).length === 0) return;\r\n    try {\r\n      setSaving(true);\r\n      setAutoSaveStatus('saving');\r\n      const responsesArray = Object.values(responses);\r\n      await api.post(`maturity-evaluation/${evaluationData.id_evaluation}/responses-batch`, {\r\n        responses: responsesArray\r\n      });\r\n      setLastSaveTime(new Date());\r\n      setUnsavedChanges(false);\r\n      setAutoSaveStatus('saved');\r\n      if (showMessage) {\r\n        setSnackbarMessage('✅ Réponses sauvegardées');\r\n        setSnackbarOpen(true);\r\n      }\r\n      setTimeout(() => {\r\n        setAutoSaveStatus('idle');\r\n      }, 3000);\r\n    } catch (error: any) {\r\n      console.error('❌ Erreur lors de la sauvegarde:', error);\r\n      setAutoSaveStatus('error');\r\n      setSnackbarMessage('❌ Erreur lors de la sauvegarde');\r\n      setSnackbarOpen(true);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n const submitEvaluation = async () => {\r\n  if (!evaluationData) return;\r\n  try {\r\n    setLoading(true);\r\n    await saveResponses(false); // Save any pending responses\r\n    const scores = calculateFunctionScores();\r\n    // Ensure scores format matches backend expectation\r\n    const formattedScores = Object.fromEntries(\r\n      Object.entries(scores).map(([key, value]) => [\r\n        key,\r\n        {\r\n          score: value.score,\r\n          niveau: value.niveau,\r\n          progress: value.progress\r\n        }\r\n      ])\r\n    );\r\n    const response = await api.post(`maturity-evaluation/${evaluationData.id_evaluation}/submit`, {\r\n      scores: formattedScores,\r\n      duree_minutes: Math.round((Date.now() - startTime) / 1000 / 60)\r\n    });\r\n    console.log('✅ Évaluation soumise:', response.data);\r\n    navigate(`/maturity-analysis/${evaluationData.id_evaluation}`, {\r\n      state: {\r\n        enterpriseId: evaluationData.id_entreprise,\r\n        enterpriseName: evaluationData.entreprise_nom,\r\n        scores: response.data.scores, // Use the backend-returned scores\r\n        fromEvaluation: true\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    console.error('❌ Erreur lors de la soumission:', error);\r\n    setError(error.response?.data?.message || 'Erreur lors de la soumission de l\\'évaluation');\r\n    setSnackbarMessage(error.response?.data?.message || 'Erreur lors de la soumission');\r\n    setSnackbarOpen(true);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    if (unsavedChanges) {\r\n      saveResponses(false);\r\n    }\r\n    setCurrentFunction(newValue);\r\n  };\r\n\r\n  const calculateOverallProgress = () => {\r\n    const totalQuestions = Object.values(questionsByFunction).reduce((sum, questions) => sum + questions.length, 0);\r\n    const answeredQuestions = Object.keys(responses).length;\r\n    return totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0;\r\n  };\r\n\r\n  const isEvaluationComplete = () => {\r\n    const totalQuestions = Object.values(questionsByFunction).reduce((sum, questions) => sum + questions.length, 0);\r\n    return Object.keys(responses).length === totalQuestions;\r\n  };\r\n\r\n  const handleConfirmSubmit = () => {\r\n    setShowConfirmDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setShowConfirmDialog(false);\r\n  };\r\n\r\n  const handleConfirmDialogSubmit = () => {\r\n    setShowConfirmDialog(false);\r\n    submitEvaluation();\r\n  };\r\n\r\n  const handleSnackbarClose = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" minHeight=\"60vh\" justifyContent=\"center\">\r\n          <CircularProgress size={60} />\r\n          <Typography variant=\"h6\" sx={{ mt: 2 }}>\r\n            Chargement de l'évaluation...\r\n          </Typography>\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (error && !evaluationData) {\r\n    return (\r\n      <Container maxWidth=\"md\" sx={{ py: 4 }}>\r\n        <Paper elevation={3} sx={{ p: 4, textAlign: 'center' }}>\r\n          <Error sx={{ fontSize: 64, color: 'error.main', mb: 2 }} />\r\n          <Typography variant=\"h6\" color=\"error\" gutterBottom>\r\n            Erreur\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n            {error}\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => navigate('/dashboard')}\r\n              startIcon={<ArrowBack />}\r\n            >\r\n              Retour au tableau de bord\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={initializeEvaluation}\r\n              startIcon={<Refresh />}\r\n            >\r\n              Réessayer\r\n            </Button>\r\n          </Box>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  const functionScores = calculateFunctionScores();\r\n  const overallProgress = calculateOverallProgress();\r\n  const currentFunctionQuestions = questionsByFunction[functionKeys[currentFunction]] || [];\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      <Paper elevation={3} sx={{ p: 3, mb: 4 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\r\n          <Box>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              Évaluation de Maturité DSIN\r\n            </Typography>\r\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n              {evaluationData?.entreprise_nom}\r\n            </Typography>\r\n          </Box>\r\n          <Box sx={{ textAlign: 'right' }}>\r\n            <Chip\r\n              icon={<Timer />}\r\n              label={`${Math.round((Date.now() - startTime) / 1000 / 60)} min`}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n            {autoSaveStatus === 'saving' && (\r\n              <Chip\r\n                icon={<CloudUpload />}\r\n                label=\"Sauvegarde...\"\r\n                color=\"info\"\r\n                size=\"small\"\r\n                sx={{ ml: 1 }}\r\n              />\r\n            )}\r\n            {autoSaveStatus === 'saved' && (\r\n              <Chip\r\n                icon={<CloudDone />}\r\n                label=\"Sauvegardé\"\r\n                color=\"success\"\r\n                size=\"small\"\r\n                sx={{ ml: 1 }}\r\n              />\r\n            )}\r\n            {autoSaveStatus === 'error' && (\r\n              <Chip\r\n                icon={<Error />}\r\n                label=\"Erreur sauvegarde\"\r\n                color=\"error\"\r\n                size=\"small\"\r\n                sx={{ ml: 1 }}\r\n              />\r\n            )}\r\n          </Box>\r\n        </Box>\r\n        <Box sx={{ mb: 2 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n            <Typography variant=\"body2\">\r\n              Progression globale: {Object.keys(responses).length}/{Object.values(questionsByFunction).reduce((sum, q) => sum + q.length, 0)} questions\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              {Math.round(overallProgress)}%\r\n            </Typography>\r\n          </Box>\r\n          <LinearProgress variant=\"determinate\" value={overallProgress} sx={{ height: 8, borderRadius: 4 }} />\r\n        </Box>\r\n        {error && (\r\n          <Alert severity=\"error\" onClose={() => setError('')} sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        {lastSaveTime && (\r\n          <Typography variant=\"caption\" color=\"text.secondary\">\r\n            Dernière sauvegarde: {lastSaveTime.toLocaleTimeString('fr-FR')}\r\n          </Typography>\r\n        )}\r\n      </Paper>\r\n      <Paper elevation={2} sx={{ mb: 4 }}>\r\n        <Tabs\r\n          value={currentFunction}\r\n          onChange={handleTabChange}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          sx={{ borderBottom: 1, borderColor: 'divider' }}\r\n        >\r\n          {functionKeys.map((functionKey, index) => {\r\n            const config = functionsConfig[functionKey];\r\n            const score = functionScores[functionKey];\r\n            return (\r\n              <Tab\r\n                key={functionKey}\r\n                icon={config.icon}\r\n                label={\r\n                  <Box>\r\n                    <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                      {config.label}\r\n                    </Typography>\r\n                    {score && (\r\n                      <Typography variant=\"caption\" sx={{ color: config.color }}>\r\n                        {Math.round(score.progress)}% • {score.niveau}\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                }\r\n                sx={{\r\n                  minHeight: 80,\r\n                  '& .MuiTab-iconWrapper': { color: config.color }\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </Tabs>\r\n      </Paper>\r\n      <Paper elevation={2} sx={{ p: 4, mb: 4 }}>\r\n        <Box sx={{ mb: 3 }}>\r\n          <Typography variant=\"h5\" gutterBottom sx={{ color: functionsConfig[functionKeys[currentFunction]].color }}>\r\n            {functionsConfig[functionKeys[currentFunction]].label}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {functionsConfig[functionKeys[currentFunction]].description}\r\n          </Typography>\r\n        </Box>\r\n        <Divider sx={{ mb: 3 }} />\r\n        {currentFunctionQuestions.length === 0 ? (\r\n          <Alert severity=\"info\">\r\n            Aucune question disponible pour cette fonction\r\n          </Alert>\r\n        ) : (\r\n          <Grid container spacing={3}>\r\n            {currentFunctionQuestions.map((question, index) => (\r\n              <Grid item xs={12} key={question.id_question}>\r\n                <Card\r\n                  variant=\"outlined\"\r\n                  sx={{\r\n                    bgcolor: responses[question.id_question] ? 'success.50' : 'background.paper',\r\n                    border: responses[question.id_question] ? 2 : 1,\r\n                    borderColor: responses[question.id_question] ? 'success.main' : 'divider'\r\n                  }}\r\n                >\r\n                  <CardContent>\r\n                    <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2, mb: 2 }}>\r\n                      <Chip\r\n                        label={question.numero_question}\r\n                        size=\"small\"\r\n                        sx={{\r\n                          bgcolor: functionsConfig[functionKeys[currentFunction]].color,\r\n                          color: 'white'\r\n                        }}\r\n                      />\r\n                      <Box sx={{ flex: 1 }}>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                          {question.texte_question}\r\n                        </Typography>\r\n                        {question.description && (\r\n                          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                            {question.description}\r\n                          </Typography>\r\n                        )}\r\n                      </Box>\r\n                      {responses[question.id_question] && (\r\n                        <CheckCircle color=\"success\" />\r\n                      )}\r\n                    </Box>\r\n                    <FormControl component=\"fieldset\">\r\n                      <FormLabel component=\"legend\">Votre évaluation:</FormLabel>\r\n                      <RadioGroup\r\n                        row\r\n                        value={responses[question.id_question]?.valeur_reponse || ''}\r\n                        onChange={(e) => handleResponseChange(question.id_question, e.target.value)}\r\n                      >\r\n                        {scaleOptions.map(option => (\r\n                          <FormControlLabel\r\n                            key={option.value}\r\n                            value={option.value}\r\n                            control={<Radio />}\r\n                            label={\r\n                              <Tooltip title={option.description} arrow>\r\n                                <Typography variant=\"body2\">\r\n                                  {option.label}\r\n                                </Typography>\r\n                              </Tooltip>\r\n                            }\r\n                          />\r\n                        ))}\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        )}\r\n      </Paper>\r\n      <Paper elevation={2} sx={{ p: 4, mb: 4 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Résumé des scores par fonction\r\n        </Typography>\r\n        <Grid container spacing={2}>\r\n          {functionKeys.map(functionKey => {\r\n            const config = functionsConfig[functionKey];\r\n            const score = functionScores[functionKey];\r\n            return (\r\n              <Grid item xs={12} sm={6} md={4} key={functionKey}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\r\n                      <Box sx={{ color: config.color }}>\r\n                        {config.icon}\r\n                      </Box>\r\n                      <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                        {config.label}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                      <Typography variant=\"h6\" sx={{ color: config.color }}>\r\n                        {Math.round(score?.score || 0)}%\r\n                      </Typography>\r\n                      <Chip\r\n                        size=\"small\"\r\n                        label={score?.niveau || 'Non évalué'}\r\n                        sx={{ bgcolor: config.color, color: 'white' }}\r\n                      />\r\n                    </Box>\r\n                    <LinearProgress\r\n                      variant=\"determinate\"\r\n                      value={score?.progress || 0}\r\n                      sx={{ height: 6, borderRadius: 3 }}\r\n                    />\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">\r\n                      {Math.round(score?.progress || 0)}% des questions répondues\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </Paper>\r\n      <Paper elevation={2} sx={{ p: 3 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => navigate('/dashboard')}\r\n            startIcon={<ArrowBack />}\r\n            disabled={saving || loading}\r\n          >\r\n            Retour au tableau de bord\r\n          </Button>\r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<Save />}\r\n              onClick={() => saveResponses(true)}\r\n              disabled={saving || loading || !unsavedChanges}\r\n              sx={{ bgcolor: '#1976d2' }}\r\n            >\r\n              {saving ? 'Sauvegarde...' : 'Sauvegarder'}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<ArrowForward />}\r\n              onClick={handleConfirmSubmit}\r\n              disabled={saving || loading || !isEvaluationComplete()}\r\n              sx={{ bgcolor: '#09C4B8' }}\r\n            >\r\n              Soumettre l'évaluation\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n      <Dialog open={showConfirmDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>Confirmer la soumission</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body1\">\r\n            Êtes-vous sûr de vouloir soumettre votre évaluation ? Une fois soumise, vous ne pourrez plus modifier vos réponses.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog} color=\"primary\">\r\n            Annuler\r\n          </Button>\r\n          <Button onClick={handleConfirmDialogSubmit} color=\"primary\" variant=\"contained\">\r\n            Soumettre\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={3000}\r\n        onClose={handleSnackbarClose}\r\n        message={snackbarMessage}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MaturityEvaluation;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Card,\r\n  CardContent,\r\n  Tabs,\r\n  Tab,\r\n  Checkbox,\r\n  Alert,\r\n  Badge,\r\n  Tooltip,\r\n  Switch,\r\n  FormControlLabel,\r\n  Snackbar\r\n} from '@mui/material';\r\nimport {\r\n  PlusIcon,\r\n  PencilIcon,\r\n  TrashIcon,\r\n  LockClosedIcon,\r\n  ShieldCheckIcon,\r\n  UserIcon,\r\n  ArrowLeftIcon,\r\n  UsersIcon,\r\n  UserGroupIcon,\r\n  Cog6ToothIcon,\r\n  EyeIcon,\r\n  EyeSlashIcon,\r\n  CheckIcon,\r\n  XMarkIcon,\r\n  BuildingOfficeIcon\r\n} from '@heroicons/react/24/outline';\r\nimport {\r\n  ShieldExclamationIcon\r\n} from '@heroicons/react/24/solid';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport api from '../../services/api';\r\n\r\n// Types existants + nouveaux pour les entreprises\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  email: string;\r\n  organisation: string;\r\n  id_entreprise: string;\r\n  nom_entreprise?: string;\r\n  role: string;\r\n  nom_role?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n  est_admin?: boolean;\r\n  compte_actif?: boolean;\r\n  derniere_connexion?: string;\r\n  id_role?: string;\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  secteur?: string;\r\n  description?: string;\r\n  adresse?: string;\r\n  telephone?: string;\r\n  email?: string;\r\n  site_web?: string;\r\n  date_creation?: string;\r\n  date_modification?: string;\r\n  nombre_utilisateurs?: number;\r\n  nombre_applications?: number;\r\n}\r\n\r\ninterface Role {\r\n  id_role: string;\r\n  nom_role: string;\r\n  description: string;\r\n  niveau_acces: 'GLOBAL' | 'ENTREPRISE';\r\n  nombre_utilisateurs?: number;\r\n}\r\n\r\ninterface Module {\r\n  id_module: string;\r\n  nom_module: string;\r\n  description: string;\r\n  route_base: string;\r\n  icone?: string;\r\n  ordre_affichage: number;\r\n  actif: boolean;\r\n}\r\n\r\ninterface Permission {\r\n  id_permission: string;\r\n  id_acteur: string;\r\n  acteur_nom?: string;\r\n  type_ressource: 'APPLICATION' | 'QUESTIONNAIRE' | 'FORMULAIRE' | 'RAPPORT';\r\n  id_ressource: string | null;\r\n  peut_voir: boolean;\r\n  peut_editer: boolean;\r\n  peut_supprimer: boolean;\r\n  peut_administrer: boolean;\r\n}\r\n\r\ninterface RolePermission {\r\n  id_role_permission: string;\r\n  id_role: string;\r\n  id_module: string;\r\n  nom_module: string;\r\n  module_description?: string;\r\n  peut_voir: boolean;\r\n  peut_editer: boolean;\r\n  peut_supprimer: boolean;\r\n  peut_administrer: boolean;\r\n}\r\n\r\ninterface ActeurFormValues {\r\n  nom_prenom: string;\r\n  email: string;\r\n  fonction: string;\r\n  organisation: string;\r\n  id_entreprise: string;\r\n  mot_de_passe?: string;\r\n  id_role: string;\r\n}\r\n\r\ninterface RoleFormValues {\r\n  nom_role: string;\r\n  description: string;\r\n  niveau_acces: 'GLOBAL' | 'ENTREPRISE';\r\n}\r\n\r\ninterface EntrepriseFormValues {\r\n  nom_entreprise: string;\r\n  secteur: string;\r\n  description: string;\r\n  adresse: string;\r\n  telephone: string;\r\n  email: string;\r\n  site_web: string;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\n// Interface pour les droits utilisateur\r\ninterface UserRights {\r\n  canViewAll: boolean;\r\n  canManageUsers: boolean;\r\n  canManageRoles: boolean;\r\n  canManagePermissions: boolean;\r\n  canManageModules: boolean;\r\n  canEditAll: boolean;\r\n  canDeleteAll: boolean;\r\n  scope: 'GLOBAL' | 'ENTREPRISE';\r\n}\r\n\r\n// Composant pour les icônes Heroicons\r\ninterface HeroIconProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst HeroIcon: React.FC<HeroIconProps> = ({ children, className = \"h-5 w-5\" }) => (\r\n  <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center', '& svg': { width: 20, height: 20 } }}>\r\n    {React.cloneElement(children as React.ReactElement, { className })}\r\n  </Box>\r\n);\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`admin-tabpanel-${index}`}\r\n      aria-labelledby={`admin-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Administration: React.FC = () => {\r\n  const { \r\n    hasPermission, \r\n    canAccessAdminModule, \r\n    isAdmin, \r\n    isSuperAdmin, \r\n    currentUser,\r\n    hasGlobalAccess\r\n  } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Fonction pour déterminer si l'utilisateur est consultant\r\n  const isConsultant = (): boolean => {\r\n    return currentUser?.nom_role?.toUpperCase() === 'CONSULTANT';\r\n  };\r\n\r\n  // Fonction pour obtenir le scope de l'utilisateur\r\n  const getScope = (): 'GLOBAL' | 'ENTREPRISE' => {\r\n    if (isSuperAdmin() || hasGlobalAccess) return 'GLOBAL';\r\n    return currentUser?.niveau_acces || 'ENTREPRISE';\r\n  };\r\n\r\n  // Fonction pour déterminer si on doit filtrer par entreprise\r\n  const shouldFilterByEntreprise = (): boolean => {\r\n    return getScope() === 'ENTREPRISE';\r\n  };\r\n  \r\n  // Fonction pour obtenir les droits utilisateur\r\n  const getUserRights = (): UserRights => {\r\n    const scope = getScope();\r\n    \r\n    if (isSuperAdmin()) {\r\n      return {\r\n        canViewAll: true,\r\n        canManageUsers: true,\r\n        canManageRoles: true,\r\n        canManagePermissions: true,\r\n        canManageModules: true,\r\n        canEditAll: true,\r\n        canDeleteAll: true,\r\n        scope: 'GLOBAL'\r\n      };\r\n    }\r\n    \r\n    if (isAdmin()) {\r\n      return {\r\n        canViewAll: true,\r\n        canManageUsers: true,\r\n        canManageRoles: scope === 'GLOBAL',\r\n        canManagePermissions: scope === 'GLOBAL',\r\n        canManageModules: scope === 'GLOBAL',\r\n        canEditAll: true,\r\n        canDeleteAll: false, // Les admin ne peuvent pas supprimer\r\n        scope: scope\r\n      };\r\n    }\r\n    \r\n    if (isConsultant()) {\r\n      return {\r\n        canViewAll: true,\r\n        canManageUsers: false,\r\n        canManageRoles: false,\r\n        canManagePermissions: false,\r\n        canManageModules: false,\r\n        canEditAll: false,\r\n        canDeleteAll: false,\r\n        scope: scope\r\n      };\r\n    }\r\n    \r\n    // Utilisateur normal - pas d'accès admin\r\n    return {\r\n      canViewAll: false,\r\n      canManageUsers: false,\r\n      canManageRoles: false,\r\n      canManagePermissions: false,\r\n      canManageModules: false,\r\n      canEditAll: false,\r\n      canDeleteAll: false,\r\n      scope: 'ENTREPRISE'\r\n    };\r\n  };\r\n  \r\n  // Obtenir les droits utilisateur\r\n  const userRights = getUserRights();\r\n  \r\n  // Déterminer l'onglet initial basé sur l'URL ou localStorage\r\n  const getInitialTab = () => {\r\n    // Essayer de récupérer l'onglet depuis localStorage\r\n    const savedTab = localStorage.getItem('admin-active-tab');\r\n    if (savedTab && parseInt(savedTab) >= 0 && parseInt(savedTab) <= 4) {\r\n      return parseInt(savedTab);\r\n    }\r\n    return 0; // Par défaut, onglet Utilisateurs\r\n  };\r\n\r\n  // États principaux\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [tabValue, setTabValue] = useState<number>(getInitialTab());\r\n  const [snackbar, setSnackbar] = useState<{open: boolean, message: string, severity: 'success' | 'error' | 'warning' | 'info'}>({\r\n    open: false, message: '', severity: 'info'\r\n  });\r\n  \r\n  // États pour les données\r\n  const [acteurs, setActeurs] = useState<Acteur[]>([]);\r\n  const [roles, setRoles] = useState<Role[]>([]);\r\n  const [modules, setModules] = useState<Module[]>([]);\r\n  const [permissions, setPermissions] = useState<Permission[]>([]);\r\n  const [rolePermissions, setRolePermissions] = useState<RolePermission[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  \r\n  // États pour les dialogues\r\n  const [openActeurDialog, setOpenActeurDialog] = useState<boolean>(false);\r\n  const [openRoleDialog, setOpenRoleDialog] = useState<boolean>(false);\r\n  const [openEntrepriseDialog, setOpenEntrepriseDialog] = useState<boolean>(false);\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState<boolean>(false);\r\n  \r\n  // États pour l'édition des permissions\r\n  const [editingPermissions, setEditingPermissions] = useState<boolean>(false);\r\n  const [tempRolePermissions, setTempRolePermissions] = useState<RolePermission[]>([]);\r\n  \r\n  // États pour les formulaires\r\n  const [acteurFormValues, setActeurFormValues] = useState<ActeurFormValues>({\r\n    nom_prenom: '',\r\n    email: '',\r\n    fonction: '',\r\n    organisation: 'DSIN',\r\n    id_entreprise: '',  \r\n    mot_de_passe: '',\r\n    id_role: ''\r\n  });\r\n  \r\n  const [roleFormValues, setRoleFormValues] = useState<RoleFormValues>({\r\n    nom_role: '',\r\n    description: '',\r\n    niveau_acces: 'ENTREPRISE'\r\n  });\r\n\r\n  const [entrepriseFormValues, setEntrepriseFormValues] = useState<EntrepriseFormValues>({\r\n    nom_entreprise: '',\r\n    secteur: '',\r\n    description: '',\r\n    adresse: '',\r\n    telephone: '',\r\n    email: '',\r\n    site_web: ''\r\n  });\r\n  \r\n  // États pour les modes d'édition\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [selectedItem, setSelectedItem] = useState<any>(null);\r\n  const [selectedRole, setSelectedRole] = useState<string>('');\r\n\r\n  // Fonction pour afficher les notifications\r\n  const showSnackbar = (message: string, severity: 'success' | 'error' | 'warning' | 'info' = 'info') => {\r\n    setSnackbar({ open: true, message, severity });\r\n  };\r\n\r\n  // Vérifier les permissions d'accès\r\n  useEffect(() => {\r\n    if (!userRights.canViewAll && !isConsultant()) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n    \r\n    loadInitialData();\r\n  }, []);\r\n\r\n  // Sauvegarder l'onglet actif dans localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('admin-active-tab', tabValue.toString());\r\n  }, [tabValue]);\r\n\r\n  const loadInitialData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await Promise.all([\r\n        loadActeurs(),\r\n        loadRoles(),\r\n        loadModules(),\r\n        loadEntreprises()\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des données:', error);\r\n      showSnackbar('Erreur lors du chargement des données', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadActeurs = async () => {\r\n    try {\r\n      let response;\r\n      try {\r\n        response = await api.get('admin/users');\r\n        setActeurs(response.users || response || []);\r\n      } catch (adminError) {\r\n        console.warn('Endpoint admin/users non disponible, utilisation de permissions-management/users');\r\n        response = await api.get('permissions-management/users');\r\n        setActeurs(response || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des utilisateurs:', error);\r\n      showSnackbar('Erreur lors du chargement des utilisateurs', 'error');\r\n    }\r\n  };\r\n\r\n  const loadRoles = async () => {\r\n    try {\r\n      let response;\r\n      try {\r\n        response = await api.get('admin/roles');\r\n        setRoles(response || []);\r\n      } catch (adminError) {\r\n        console.warn('Endpoint admin/roles non disponible, utilisation de permissions-management/roles');\r\n        response = await api.get('permissions-management/roles');\r\n        setRoles(response || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des rôles:', error);\r\n      showSnackbar('Erreur lors du chargement des rôles', 'error');\r\n    }\r\n  };\r\n\r\n  const loadModules = async () => {\r\n    try {\r\n      let response;\r\n      try {\r\n        response = await api.get('admin/modules');\r\n        setModules(response || []);\r\n      } catch (adminError) {\r\n        console.warn('Endpoint admin/modules non disponible, utilisation de permissions-management/modules');\r\n        response = await api.get('permissions-management/modules');\r\n        setModules(response || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des modules:', error);\r\n      showSnackbar('Erreur lors du chargement des modules', 'error');\r\n    }\r\n  };\r\n\r\n  const loadEntreprises = async () => {\r\n    try {\r\n      console.log('🔍 Chargement des entreprises...');\r\n      const response = await api.get('entreprises');\r\n      console.log('✅ Entreprises reçues:', response);\r\n      \r\n      // Gestion du format de réponse (response.entreprises ou response direct)\r\n      const entreprisesData = (response.entreprises || response || []).map((ent: any) => ({\r\n        id_entreprise: ent.id_entreprise,\r\n        nom_entreprise: ent.nom_entreprise,\r\n        secteur: ent.secteur,\r\n        description: ent.description,\r\n        adresse: ent.adresse,\r\n        telephone: ent.telephone,\r\n        email: ent.email,\r\n        site_web: ent.site_web,\r\n        date_creation: ent.date_creation,\r\n        date_modification: ent.date_modification,\r\n        nombre_utilisateurs: ent.nombre_utilisateurs || 0,\r\n        nombre_applications: ent.nombre_applications || 0\r\n      }));\r\n      \r\n      console.log('🏢 Entreprises finales:', entreprisesData);\r\n      setEntreprises(entreprisesData);\r\n    } catch (error) {\r\n      console.error('❌ Erreur chargement entreprises:', error);\r\n      showSnackbar('Erreur lors du chargement des entreprises', 'error');\r\n      setEntreprises([\r\n        { \r\n          id_entreprise: 'DSIN', \r\n          nom_entreprise: 'DSIN', \r\n          secteur: 'Public',\r\n          description: 'Direction du Système d\\'Information et du Numérique',\r\n          adresse: '',\r\n          telephone: '',\r\n          email: '',\r\n          site_web: '',\r\n          nombre_utilisateurs: 0,\r\n          nombre_applications: 0\r\n        }\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const loadRolePermissions = async (roleId: string) => {\r\n    try {\r\n      let response;\r\n      try {\r\n        response = await api.get(`admin/roles/${roleId}/permissions`);\r\n        setRolePermissions(response || []);\r\n        setTempRolePermissions(response || []);\r\n      } catch (adminError) {\r\n        response = await api.get(`permissions-management/roles/${roleId}/permissions`);\r\n        setRolePermissions(response || []);\r\n        setTempRolePermissions(response || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des permissions du rôle:', error);\r\n      showSnackbar('Erreur lors du chargement des permissions', 'error');\r\n    }\r\n  };\r\n\r\n  // Gestionnaires d'événements pour les onglets\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    // Vérifier si l'utilisateur a le droit d'accéder à cet onglet\r\n    const hasAccess = [\r\n      userRights.canViewAll, // Utilisateurs\r\n      userRights.canManageRoles, // Rôles\r\n      userRights.canManagePermissions, // Permissions\r\n      userRights.canEditAll || userRights.canViewAll, // Entreprises - lecture pour consultants\r\n      userRights.canManageModules // Modules\r\n    ];\r\n    \r\n    if (hasAccess[newValue]) {\r\n      setTabValue(newValue);\r\n    } else {\r\n      showSnackbar('Vous n\\'avez pas les droits pour accéder à cet onglet', 'warning');\r\n    }\r\n  };\r\n\r\n  // Gestionnaires pour les utilisateurs\r\n  const handleCreateActeur = () => {\r\n    if (!userRights.canManageUsers) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour créer des utilisateurs', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('create');\r\n    setActeurFormValues({\r\n      nom_prenom: '',\r\n      email: '',\r\n      fonction: '',\r\n      organisation: '',\r\n      id_entreprise: userRights.scope === 'ENTREPRISE' ? (currentUser?.id_entreprise || 'DSIN') : 'DSIN',\r\n      mot_de_passe: '',\r\n      id_role: ''\r\n    });\r\n    setOpenActeurDialog(true);\r\n  };\r\n\r\n  const handleEditActeur = (acteur: Acteur) => {\r\n    if (!userRights.canEditAll) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour modifier des utilisateurs', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('edit');\r\n    setSelectedItem(acteur);\r\n    setActeurFormValues({\r\n      nom_prenom: acteur.nom_prenom,\r\n      email: acteur.email,\r\n      fonction: acteur.role || '',\r\n      organisation: acteur.organisation,\r\n      id_entreprise: acteur.id_entreprise || 'DSIN',\r\n      id_role: acteur.id_role || ''\r\n    });\r\n    setOpenActeurDialog(true);\r\n  };\r\n\r\n  // Gestionnaires pour les rôles\r\n  const handleCreateRole = () => {\r\n    if (!userRights.canManageRoles) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour créer des rôles', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('create');\r\n    setRoleFormValues({\r\n      nom_role: '',\r\n      description: '',\r\n      niveau_acces: 'ENTREPRISE'\r\n    });\r\n    setOpenRoleDialog(true);\r\n  };\r\n\r\n  const handleEditRole = (role: Role) => {\r\n    if (!userRights.canManageRoles) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour modifier des rôles', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('edit');\r\n    setSelectedItem(role);\r\n    setRoleFormValues({\r\n      nom_role: role.nom_role,\r\n      description: role.description,\r\n      niveau_acces: role.niveau_acces\r\n    });\r\n    setOpenRoleDialog(true);\r\n  };\r\n\r\n  // Gestionnaires pour les entreprises\r\n  const handleCreateEntreprise = () => {\r\n    if (!userRights.canEditAll) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour créer des entreprises', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('create');\r\n    setEntrepriseFormValues({\r\n      nom_entreprise: '',\r\n      secteur: '',\r\n      description: '',\r\n      adresse: '',\r\n      telephone: '',\r\n      email: '',\r\n      site_web: ''\r\n    });\r\n    setOpenEntrepriseDialog(true);\r\n  };\r\n\r\n  const handleEditEntreprise = (entreprise: Entreprise) => {\r\n    if (!userRights.canEditAll) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour modifier des entreprises', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setDialogMode('edit');\r\n    setSelectedItem(entreprise);\r\n    setEntrepriseFormValues({\r\n      nom_entreprise: entreprise.nom_entreprise,\r\n      secteur: entreprise.secteur || '',\r\n      description: entreprise.description || '',\r\n      adresse: entreprise.adresse || '',\r\n      telephone: entreprise.telephone || '',\r\n      email: entreprise.email || '',\r\n      site_web: entreprise.site_web || ''\r\n    });\r\n    setOpenEntrepriseDialog(true);\r\n  };\r\n\r\n  // Gestionnaires pour les permissions\r\n  const handleEditPermissions = () => {\r\n    if (!userRights.canManagePermissions) {\r\n      showSnackbar('Vous n\\'avez pas les droits pour modifier les permissions', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setEditingPermissions(true);\r\n    setTempRolePermissions([...rolePermissions]);\r\n  };\r\n\r\n  const handleSavePermissions = async () => {\r\n    try {\r\n      const permissionsData = tempRolePermissions.map(perm => ({\r\n        id_module: perm.id_module,\r\n        peut_voir: perm.peut_voir,\r\n        peut_editer: perm.peut_editer,\r\n        peut_supprimer: perm.peut_supprimer,\r\n        peut_administrer: perm.peut_administrer\r\n      }));\r\n\r\n      try {\r\n        await api.put(`admin/roles/${selectedRole}/permissions`, { permissions: permissionsData });\r\n      } catch (adminError) {\r\n        await api.put(`permissions-management/roles/${selectedRole}/permissions`, { permissions: permissionsData });\r\n      }\r\n\r\n      setRolePermissions([...tempRolePermissions]);\r\n      setEditingPermissions(false);\r\n      showSnackbar('Permissions mises à jour avec succès', 'success');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde des permissions:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde des permissions', 'error');\r\n    }\r\n  };\r\n\r\n  const handleCancelPermissions = () => {\r\n    setTempRolePermissions([...rolePermissions]);\r\n    setEditingPermissions(false);\r\n  };\r\n\r\n  const updatePermission = (moduleId: string, field: keyof RolePermission, value: boolean) => {\r\n    setTempRolePermissions(prev => \r\n      prev.map(perm => \r\n        perm.id_module === moduleId \r\n          ? { ...perm, [field]: value }\r\n          : perm\r\n      )\r\n    );\r\n  };\r\n\r\n  // Gestionnaires de soumission\r\n  const handleSubmitActeur = async () => {\r\n    try {\r\n      const apiData = {\r\n        nom_prenom: acteurFormValues.nom_prenom,\r\n        email: acteurFormValues.email,\r\n        organisation: acteurFormValues.organisation,\r\n        id_entreprise: acteurFormValues.id_entreprise,\r\n        id_role: acteurFormValues.id_role,\r\n        ...(dialogMode === 'create' && { mot_de_passe: acteurFormValues.mot_de_passe })\r\n      };\r\n      \r\n      console.log('📤 Envoi données utilisateur:', apiData);\r\n      \r\n      if (dialogMode === 'create') {\r\n        try {\r\n          await api.post('admin/users', apiData);\r\n        } catch (adminError) {\r\n          console.warn('Endpoint admin/users non disponible, utilisation de permissions-management/users');\r\n          await api.post('permissions-management/users', apiData);\r\n        }\r\n        showSnackbar('Utilisateur créé avec succès', 'success');\r\n      } else if (selectedItem) {\r\n        try {\r\n          await api.put(`admin/users/${selectedItem.id_acteur}`, apiData);\r\n        } catch (adminError) {\r\n          await api.put(`acteurs/${selectedItem.id_acteur}`, apiData);\r\n        }\r\n        showSnackbar('Utilisateur mis à jour avec succès', 'success');\r\n      }\r\n      \r\n      await loadActeurs();\r\n      setOpenActeurDialog(false);\r\n      console.log('✅ Utilisateur sauvegardé avec succès');\r\n    } catch (error) {\r\n      console.error('❌ Erreur lors de la sauvegarde de l\\'utilisateur:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde de l\\'utilisateur', 'error');\r\n    }\r\n  };\r\n\r\n  const handleSubmitRole = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        try {\r\n          await api.post('admin/roles', roleFormValues);\r\n        } catch (adminError) {\r\n          await api.post('permissions-management/roles', roleFormValues);\r\n        }\r\n        showSnackbar('Rôle créé avec succès', 'success');\r\n      } else if (selectedItem) {\r\n        try {\r\n          await api.put(`admin/roles/${selectedItem.id_role}`, roleFormValues);\r\n        } catch (adminError) {\r\n          await api.put(`permissions-management/roles/${selectedItem.id_role}`, roleFormValues);\r\n        }\r\n        showSnackbar('Rôle mis à jour avec succès', 'success');\r\n      }\r\n      \r\n      await loadRoles();\r\n      setOpenRoleDialog(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde du rôle:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde du rôle', 'error');\r\n    }\r\n  };\r\n\r\n  const handleSubmitEntreprise = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        await api.post('entreprises', entrepriseFormValues);\r\n        showSnackbar('Entreprise créée avec succès', 'success');\r\n      } else if (selectedItem) {\r\n        await api.put(`entreprises/${selectedItem.id_entreprise}`, entrepriseFormValues);\r\n        showSnackbar('Entreprise mise à jour avec succès', 'success');\r\n      }\r\n      \r\n      await loadEntreprises();\r\n      setOpenEntrepriseDialog(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde de l\\'entreprise:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde de l\\'entreprise', 'error');\r\n    }\r\n  };\r\n\r\n  const handleDeleteItem = async () => {\r\n    try {\r\n      if (!selectedItem) return;\r\n      \r\n      if (tabValue === 0) { // Utilisateurs\r\n        try {\r\n          await api.delete(`admin/users/${selectedItem.id_acteur}`);\r\n        } catch (adminError) {\r\n          await api.delete(`acteurs/${selectedItem.id_acteur}`);\r\n        }\r\n        await loadActeurs();\r\n        showSnackbar('Utilisateur supprimé avec succès', 'success');\r\n      } else if (tabValue === 1) { // Rôles\r\n        try {\r\n          await api.delete(`admin/roles/${selectedItem.id_role}`);\r\n        } catch (adminError) {\r\n          await api.delete(`permissions-management/roles/${selectedItem.id_role}`);\r\n        }\r\n        await loadRoles();\r\n        showSnackbar('Rôle supprimé avec succès', 'success');\r\n      } else if (tabValue === 3) { // Entreprises\r\n        await api.delete(`entreprises/${selectedItem.id_entreprise}`);\r\n        await loadEntreprises();\r\n        showSnackbar('Entreprise supprimée avec succès', 'success');\r\n      }\r\n      \r\n      setOpenDeleteDialog(false);\r\n      setSelectedItem(null);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression:', error);\r\n      showSnackbar('Erreur lors de la suppression', 'error');\r\n    }\r\n  };\r\n\r\n  const getRoleLabel = (role: string, nom_role?: string) => {\r\n    const displayRole = nom_role || role;\r\n    \r\n    switch (displayRole) {\r\n      case 'SUPER_ADMINISTRATEUR':\r\n      case 'SuperAdmin':\r\n        return { \r\n          label: 'Super Admin', \r\n          color: 'error' as const, \r\n          icon: <HeroIcon><ShieldExclamationIcon /></HeroIcon> \r\n        };\r\n      case 'ADMINISTRATEUR':\r\n      case 'Admin':\r\n        return { \r\n          label: 'Admin', \r\n          color: 'primary' as const, \r\n          icon: <HeroIcon><ShieldCheckIcon /></HeroIcon> \r\n        };\r\n      case 'CONSULTANT':\r\n        return { \r\n          label: 'Consultant', \r\n          color: 'secondary' as const, \r\n          icon: <HeroIcon><UserGroupIcon /></HeroIcon> \r\n        };\r\n      case 'MANAGER':\r\n        return { \r\n          label: 'Manager', \r\n          color: 'info' as const, \r\n          icon: <HeroIcon><UsersIcon /></HeroIcon> \r\n        };\r\n      case 'INTERVENANT':\r\n      default:\r\n        return { \r\n          label: 'Intervenant', \r\n          color: 'default' as const, \r\n          icon: <HeroIcon><UserIcon /></HeroIcon> \r\n        };\r\n    }\r\n  };\r\n\r\n  const canManageUser = (acteur: Acteur): boolean => {\r\n    if (isSuperAdmin()) return true;\r\n    \r\n    if (isAdmin()) {\r\n      const userRole = getRoleLabel(acteur.role, acteur.nom_role);\r\n      // Admin ne peut pas gérer les super admin\r\n      return userRole.label !== 'Super Admin';\r\n    }\r\n    \r\n    return false;\r\n  };\r\n\r\n  const getEntrepriseName = (id: string) => {\r\n    if (!id) return 'Non spécifiée';\r\n    const entreprise = entreprises.find(ent => ent.id_entreprise === id);\r\n    return entreprise ? entreprise.nom_entreprise : id;\r\n  };\r\n\r\n  const getAvailableTabs = () => {\r\n    const tabs = [\r\n      { label: 'Utilisateurs', icon: <UsersIcon />, enabled: userRights.canViewAll },\r\n      { label: 'Rôles', icon: <UserGroupIcon />, enabled: userRights.canManageRoles },\r\n      { label: 'Permissions', icon: <ShieldCheckIcon />, enabled: userRights.canManagePermissions },\r\n      { label: 'Entreprises', icon: <BuildingOfficeIcon />, enabled: userRights.canEditAll || userRights.canViewAll },\r\n      { label: 'Modules', icon: <Cog6ToothIcon />, enabled: userRights.canManageModules }\r\n    ];\r\n    \r\n    return tabs;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (!userRights.canViewAll && !isConsultant()) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Alert severity=\"error\">\r\n          Accès non autorisé. Vous devez avoir les permissions appropriées pour accéder à cette page.\r\n        </Alert>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                <HeroIcon><ShieldCheckIcon /></HeroIcon>\r\n                <Box>\r\n                  <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                    Administration Système\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    {userRights.scope === 'GLOBAL' ? 'Vue globale' : `Vue limitée - ${getEntrepriseName(currentUser?.id_entreprise || '')}`}\r\n                    {isConsultant() && ' (Consultation seule)'}\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Box display=\"flex\" gap={1}>\r\n                <Chip \r\n                  icon={<HeroIcon><ShieldExclamationIcon /></HeroIcon>}\r\n                  label={isSuperAdmin() ? \"Super Administrateur\" : isAdmin() ? \"Administrateur\" : isConsultant() ? \"Consultant\" : \"Utilisateur\"}\r\n                  color={isSuperAdmin() ? \"error\" : isAdmin() ? \"primary\" : isConsultant() ? \"secondary\" : \"default\"}\r\n                  variant=\"filled\"\r\n                />\r\n                {!userRights.canEditAll && (\r\n                  <Chip \r\n                    icon={<HeroIcon><EyeIcon /></HeroIcon>}\r\n                    label=\"Lecture seule\"\r\n                    color=\"warning\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* Statistiques rapides */}\r\n            <Grid container spacing={2} sx={{ mt: 1 }}>\r\n              <Grid size={{ xs: 12, sm: 3 }}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"primary\">\r\n                      {acteurs.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Utilisateurs{userRights.scope === 'ENTREPRISE' ? ' (Entreprise)' : ''}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 3 }}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"secondary\">\r\n                      {roles.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Rôles\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 3 }}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"info\">\r\n                      {entreprises.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Entreprises\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 3 }}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"success\">\r\n                      {acteurs.filter(a => getRoleLabel(a.role, a.nom_role).label === 'Admin').length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Administrateurs\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Onglets principaux */}\r\n        <Grid size={12}>\r\n          <Paper sx={{ width: '100%' }}>\r\n            <Tabs\r\n              value={tabValue}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n              sx={{ borderBottom: 1, borderColor: 'divider' }}\r\n            >\r\n              {getAvailableTabs().map((tab, index) => (\r\n                <Tab \r\n                  key={index}\r\n                  label={tab.label} \r\n                  icon={<HeroIcon>{tab.icon}</HeroIcon>}\r\n                  iconPosition=\"start\"\r\n                  disabled={!tab.enabled}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n\r\n            {/* Onglet Utilisateurs */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Utilisateurs</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<HeroIcon><PlusIcon /></HeroIcon>}\r\n                  onClick={handleCreateActeur}\r\n                  disabled={!userRights.canManageUsers}\r\n                >\r\n                  Nouvel Utilisateur\r\n                </Button>\r\n              </Box>\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Nom</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell>Fonction</TableCell>\r\n                      <TableCell>Organisation</TableCell>\r\n                      <TableCell>Entreprise</TableCell>\r\n                      <TableCell>Rôle</TableCell>\r\n                      {userRights.canEditAll && <TableCell>Actions</TableCell>}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {acteurs.map((acteur) => {\r\n                      const roleInfo = getRoleLabel(acteur.role, acteur.nom_role);\r\n                      const canManage = canManageUser(acteur);\r\n                      \r\n                      return (\r\n                        <TableRow key={acteur.id_acteur} hover>\r\n                          <TableCell>{acteur.nom_prenom}</TableCell>\r\n                          <TableCell>{acteur.email}</TableCell>\r\n                          <TableCell>{acteur.role}</TableCell>\r\n                          <TableCell>{acteur.organisation}</TableCell>\r\n                          <TableCell>{getEntrepriseName(acteur.id_entreprise)}</TableCell>\r\n                          <TableCell>\r\n                            <Chip \r\n                              label={roleInfo.label} \r\n                              color={roleInfo.color} \r\n                              icon={roleInfo.icon}\r\n                              size=\"small\"\r\n                            />\r\n                          </TableCell>\r\n                          {userRights.canEditAll && (\r\n                            <TableCell>\r\n                              <Tooltip title={canManage ? \"Modifier l'utilisateur\" : \"Droits insuffisants\"}>\r\n                                <span>\r\n                                  <IconButton \r\n                                    color=\"primary\" \r\n                                    onClick={() => handleEditActeur(acteur)}\r\n                                    disabled={!canManage}\r\n                                  >\r\n                                    <HeroIcon><PencilIcon /></HeroIcon>\r\n                                  </IconButton>\r\n                                </span>\r\n                              </Tooltip>\r\n                              <Tooltip title={canManage && userRights.canDeleteAll ? \"Supprimer l'utilisateur\" : \"Droits insuffisants\"}>\r\n                                <span>\r\n                                  <IconButton \r\n                                    color=\"error\" \r\n                                    onClick={() => {\r\n                                      setSelectedItem(acteur);\r\n                                      setOpenDeleteDialog(true);\r\n                                    }}\r\n                                    disabled={!canManage || !userRights.canDeleteAll}\r\n                                  >\r\n                                    <HeroIcon><TrashIcon /></HeroIcon>\r\n                                  </IconButton>\r\n                                </span>\r\n                              </Tooltip>\r\n                            </TableCell>\r\n                          )}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Rôles */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Rôles</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<HeroIcon><PlusIcon /></HeroIcon>}\r\n                  onClick={handleCreateRole}\r\n                  disabled={!userRights.canManageRoles}\r\n                >\r\n                  Nouveau Rôle\r\n                </Button>\r\n              </Box>\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Nom du Rôle</TableCell>\r\n                      <TableCell>Description</TableCell>\r\n                      <TableCell>Niveau d'Accès</TableCell>\r\n                      <TableCell>Utilisateurs</TableCell>\r\n                      {userRights.canManageRoles && <TableCell>Actions</TableCell>}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {roles.map((role) => (\r\n                      <TableRow key={role.id_role} hover>\r\n                        <TableCell>\r\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                            {role.nom_role === 'SUPER_ADMINISTRATEUR' && <HeroIcon><ShieldExclamationIcon /></HeroIcon>}\r\n                            {role.nom_role === 'ADMINISTRATEUR' && <HeroIcon><ShieldCheckIcon /></HeroIcon>}\r\n                            {role.nom_role === 'CONSULTANT' && <HeroIcon><UserGroupIcon /></HeroIcon>}\r\n                            {role.nom_role === 'MANAGER' && <HeroIcon><UsersIcon /></HeroIcon>}\r\n                            {role.nom_role === 'INTERVENANT' && <HeroIcon><UserIcon /></HeroIcon>}\r\n                            <Typography variant=\"body2\">{role.nom_role}</Typography>\r\n                          </Box>\r\n                        </TableCell>\r\n                        <TableCell>{role.description}</TableCell>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={role.niveau_acces} \r\n                            color={role.niveau_acces === 'GLOBAL' ? 'primary' : 'default'} \r\n                            size=\"small\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge badgeContent={role.nombre_utilisateurs || 0} color=\"primary\">\r\n                            <HeroIcon><UserGroupIcon /></HeroIcon>\r\n                          </Badge>\r\n                        </TableCell>\r\n                        {userRights.canManageRoles && (\r\n                          <TableCell>\r\n                            <IconButton \r\n                              color=\"primary\" \r\n                              onClick={() => handleEditRole(role)}\r\n                            >\r\n                              <HeroIcon><PencilIcon /></HeroIcon>\r\n                            </IconButton>\r\n                            <IconButton \r\n                              color=\"error\" \r\n                              onClick={() => {\r\n                                setSelectedItem(role);\r\n                                setOpenDeleteDialog(true);\r\n                              }}\r\n                              disabled={!userRights.canDeleteAll || (role.nombre_utilisateurs || 0) > 0}\r\n                            >\r\n                              <HeroIcon><TrashIcon /></HeroIcon>\r\n                            </IconButton>\r\n                          </TableCell>\r\n                        )}\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Permissions */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Permissions par Rôle</Typography>\r\n                {selectedRole && rolePermissions.length > 0 && (\r\n                  <Box>\r\n                    {editingPermissions ? (\r\n                      <>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          startIcon={<HeroIcon><CheckIcon /></HeroIcon>}\r\n                          onClick={handleSavePermissions}\r\n                          sx={{ mr: 1 }}\r\n                        >\r\n                          Sauvegarder\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          color=\"secondary\"\r\n                          startIcon={<HeroIcon><XMarkIcon /></HeroIcon>}\r\n                          onClick={handleCancelPermissions}\r\n                        >\r\n                          Annuler\r\n                        </Button>\r\n                      </>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<HeroIcon><PencilIcon /></HeroIcon>}\r\n                        onClick={handleEditPermissions}\r\n                        disabled={!userRights.canManagePermissions}\r\n                      >\r\n                        Modifier les Permissions\r\n                      </Button>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n              \r\n              <FormControl fullWidth sx={{ mb: 3 }}>\r\n                <InputLabel>Sélectionner un rôle</InputLabel>\r\n                <Select\r\n                  value={selectedRole}\r\n                  onChange={(e) => {\r\n                    setSelectedRole(e.target.value);\r\n                    setEditingPermissions(false);\r\n                    if (e.target.value) {\r\n                      loadRolePermissions(e.target.value);\r\n                    }\r\n                  }}\r\n                >\r\n                  {roles.map((role) => (\r\n                    <MenuItem key={role.id_role} value={role.id_role}>\r\n                      {role.nom_role} - {role.description}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {selectedRole && (editingPermissions ? tempRolePermissions : rolePermissions).length > 0 && (\r\n                <TableContainer>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Module</TableCell>\r\n                        <TableCell>Description</TableCell>\r\n                        <TableCell align=\"center\">Voir</TableCell>\r\n                        <TableCell align=\"center\">Éditer</TableCell>\r\n                        <TableCell align=\"center\">Supprimer</TableCell>\r\n                        <TableCell align=\"center\">Administrer</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {(editingPermissions ? tempRolePermissions : rolePermissions).map((perm) => (\r\n                        <TableRow key={perm.id_role_permission || perm.id_module}>\r\n                          <TableCell>\r\n                            <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                              {perm.nom_module}\r\n                            </Typography>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Typography variant=\"caption\" color=\"text.secondary\">\r\n                              {perm.module_description}\r\n                            </Typography>\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {editingPermissions ? (\r\n                              <Switch\r\n                                checked={perm.peut_voir}\r\n                                onChange={(e) => updatePermission(perm.id_module, 'peut_voir', e.target.checked)}\r\n                                color=\"primary\"\r\n                              />\r\n                            ) : (\r\n                              <Checkbox checked={perm.peut_voir} disabled />\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {editingPermissions ? (\r\n                              <Switch\r\n                                checked={perm.peut_editer}\r\n                                onChange={(e) => updatePermission(perm.id_module, 'peut_editer', e.target.checked)}\r\n                                color=\"primary\"\r\n                                disabled={!perm.peut_voir}\r\n                              />\r\n                            ) : (\r\n                              <Checkbox checked={perm.peut_editer} disabled />\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {editingPermissions ? (\r\n                              <Switch\r\n                                checked={perm.peut_supprimer}\r\n                                onChange={(e) => updatePermission(perm.id_module, 'peut_supprimer', e.target.checked)}\r\n                                color=\"primary\"\r\n                                disabled={!perm.peut_editer}\r\n                              />\r\n                            ) : (\r\n                              <Checkbox checked={perm.peut_supprimer} disabled />\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            {editingPermissions ? (\r\n                              <Switch\r\n                                checked={perm.peut_administrer}\r\n                                onChange={(e) => updatePermission(perm.id_module, 'peut_administrer', e.target.checked)}\r\n                                color=\"primary\"\r\n                                disabled={!perm.peut_editer}\r\n                              />\r\n                            ) : (\r\n                              <Checkbox checked={perm.peut_administrer} disabled />\r\n                            )}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              )}\r\n\r\n              {selectedRole && rolePermissions.length === 0 && (\r\n                <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                  Aucune permission définie pour ce rôle.\r\n                </Alert>\r\n              )}\r\n            </TabPanel>\r\n\r\n            {/* Onglet Entreprises */}\r\n            <TabPanel value={tabValue} index={3}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Entreprises</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<HeroIcon><PlusIcon /></HeroIcon>}\r\n                  onClick={handleCreateEntreprise}\r\n                  disabled={!userRights.canEditAll}\r\n                >\r\n                  Nouvelle Entreprise\r\n                </Button>\r\n              </Box>\r\n              \r\n              {!userRights.canEditAll && userRights.canViewAll && (\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                  Vous consultez les entreprises en mode lecture seule.\r\n                </Alert>\r\n              )}\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Nom</TableCell>\r\n                      <TableCell>Secteur</TableCell>\r\n                      <TableCell>Utilisateurs</TableCell>\r\n                      <TableCell>Applications</TableCell>\r\n                      <TableCell>Date Création</TableCell>\r\n                      {userRights.canEditAll && <TableCell>Actions</TableCell>}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {entreprises.map((entreprise) => (\r\n                      <TableRow key={entreprise.id_entreprise} hover>\r\n                        <TableCell>\r\n                          <Box>\r\n                            <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                              {entreprise.nom_entreprise}\r\n                            </Typography>\r\n                            {entreprise.description && (\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                {entreprise.description}\r\n                              </Typography>\r\n                            )}\r\n                          </Box>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={entreprise.secteur || 'Non défini'} \r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge badgeContent={entreprise.nombre_utilisateurs || 0} color=\"primary\">\r\n                            <HeroIcon><UsersIcon /></HeroIcon>\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge badgeContent={entreprise.nombre_applications || 0} color=\"secondary\">\r\n                            <HeroIcon><Cog6ToothIcon /></HeroIcon>\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {entreprise.date_creation ? \r\n                            new Date(entreprise.date_creation).toLocaleDateString() : \r\n                            'Non définie'\r\n                          }\r\n                        </TableCell>\r\n                        {userRights.canEditAll && (\r\n                          <TableCell>\r\n                            <IconButton \r\n                              color=\"primary\" \r\n                              onClick={() => handleEditEntreprise(entreprise)}\r\n                            >\r\n                              <HeroIcon><PencilIcon /></HeroIcon>\r\n                            </IconButton>\r\n                            <IconButton \r\n                              color=\"error\" \r\n                              onClick={() => {\r\n                                setSelectedItem(entreprise);\r\n                                setOpenDeleteDialog(true);\r\n                              }}\r\n                              disabled={!userRights.canDeleteAll || (entreprise.nombre_utilisateurs || 0) > 0}\r\n                            >\r\n                              <HeroIcon><TrashIcon /></HeroIcon>\r\n                            </IconButton>\r\n                          </TableCell>\r\n                        )}\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Modules */}\r\n            <TabPanel value={tabValue} index={4}>\r\n              <Typography variant=\"h6\" gutterBottom>Configuration des Modules</Typography>\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Module</TableCell>\r\n                      <TableCell>Description</TableCell>\r\n                      <TableCell>Route</TableCell>\r\n                      <TableCell>Ordre</TableCell>\r\n                      <TableCell>Statut</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {modules.map((module) => (\r\n                      <TableRow key={module.id_module}>\r\n                        <TableCell>{module.nom_module}</TableCell>\r\n                        <TableCell>{module.description}</TableCell>\r\n                        <TableCell>\r\n                          <code>{module.route_base}</code>\r\n                        </TableCell>\r\n                        <TableCell>{module.ordre_affichage}</TableCell>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={module.actif ? 'Actif' : 'Inactif'} \r\n                            color={module.actif ? 'success' : 'default'} \r\n                            size=\"small\"\r\n                          />\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialogues */}\r\n      {/* Dialog pour créer/modifier un utilisateur */}\r\n      <Dialog open={openActeurDialog} onClose={() => setOpenActeurDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer un nouvel utilisateur' : 'Modifier l\\'utilisateur'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Nom et prénom\"\r\n                  value={acteurFormValues.nom_prenom}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, nom_prenom: e.target.value})}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  type=\"email\"\r\n                  label=\"Email\"\r\n                  value={acteurFormValues.email}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, email: e.target.value})}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Fonction\"\r\n                  value={acteurFormValues.fonction}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, fonction: e.target.value})}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Organisation/Département\"\r\n                  placeholder=\"ex: IT, RH, Finance...\"\r\n                  value={acteurFormValues.organisation}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, organisation: e.target.value})}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Rôle</InputLabel>\r\n                  <Select\r\n                    value={acteurFormValues.id_role}\r\n                    onChange={(e) => setActeurFormValues({...acteurFormValues, id_role: e.target.value})}\r\n                  >\r\n                    {roles.filter(role => {\r\n                      // Filtrer les rôles selon les droits utilisateur\r\n                      if (userRights.scope === 'ENTREPRISE') {\r\n                        return role.niveau_acces === 'ENTREPRISE' || role.nom_role === 'INTERVENANT';\r\n                      }\r\n                      return true;\r\n                    }).map((role) => (\r\n                      <MenuItem key={role.id_role} value={role.id_role}>\r\n                        {role.nom_role}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              <Grid size={12}>\r\n                <FormControl fullWidth required>\r\n                  <InputLabel id=\"entreprise-label\">Entreprise</InputLabel>\r\n                  <Select\r\n                    labelId=\"entreprise-label\"\r\n                    value={acteurFormValues.id_entreprise}\r\n                    label=\"Entreprise\"\r\n                    onChange={(e) => setActeurFormValues({...acteurFormValues, id_entreprise: e.target.value})}\r\n                    disabled={userRights.scope === 'ENTREPRISE'}\r\n                  >\r\n                    {entreprises.map((entreprise) => (\r\n                      <MenuItem key={entreprise.id_entreprise} value={entreprise.id_entreprise}>\r\n                        {entreprise.nom_entreprise}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              {dialogMode === 'create' && (\r\n                <Grid size={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"password\"\r\n                    label=\"Mot de passe\"\r\n                    value={acteurFormValues.mot_de_passe}\r\n                    onChange={(e) => setActeurFormValues({...acteurFormValues, mot_de_passe: e.target.value})}\r\n                  />\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenActeurDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleSubmitActeur} variant=\"contained\" color=\"primary\">\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog pour créer/modifier un rôle */}\r\n      <Dialog open={openRoleDialog} onClose={() => setOpenRoleDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer un nouveau rôle' : 'Modifier le rôle'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Nom du rôle\"\r\n                  value={roleFormValues.nom_role}\r\n                  onChange={(e) => setRoleFormValues({...roleFormValues, nom_role: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  rows={3}\r\n                  label=\"Description\"\r\n                  value={roleFormValues.description}\r\n                  onChange={(e) => setRoleFormValues({...roleFormValues, description: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Niveau d'accès</InputLabel>\r\n                  <Select\r\n                    value={roleFormValues.niveau_acces}\r\n                    onChange={(e) => setRoleFormValues({...roleFormValues, niveau_acces: e.target.value as 'GLOBAL' | 'ENTREPRISE'})}\r\n                  >\r\n                    <MenuItem value=\"ENTREPRISE\">Entreprise</MenuItem>\r\n                    <MenuItem value=\"GLOBAL\">Global</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenRoleDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleSubmitRole} variant=\"contained\" color=\"primary\">\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog pour créer/modifier une entreprise */}\r\n      <Dialog open={openEntrepriseDialog} onClose={() => setOpenEntrepriseDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer une nouvelle entreprise' : 'Modifier l\\'entreprise'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Nom de l'entreprise\"\r\n                  value={entrepriseFormValues.nom_entreprise}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, nom_entreprise: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Secteur\"\r\n                  value={entrepriseFormValues.secteur}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, secteur: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  rows={3}\r\n                  label=\"Description\"\r\n                  value={entrepriseFormValues.description}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, description: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Adresse\"\r\n                  value={entrepriseFormValues.adresse}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, adresse: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Téléphone\"\r\n                  value={entrepriseFormValues.telephone}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, telephone: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  type=\"email\"\r\n                  label=\"Email\"\r\n                  value={entrepriseFormValues.email}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, email: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid size={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Site web\"\r\n                  placeholder=\"https://\"\r\n                  value={entrepriseFormValues.site_web}\r\n                  onChange={(e) => setEntrepriseFormValues({...entrepriseFormValues, site_web: e.target.value})}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenEntrepriseDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleSubmitEntreprise} variant=\"contained\" color=\"primary\">\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression */}\r\n      <Dialog open={openDeleteDialog} onClose={() => setOpenDeleteDialog(false)}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer cet élément ? Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDeleteDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleDeleteItem} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar pour les notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n      >\r\n        <Alert \r\n          onClose={() => setSnackbar({ ...snackbar, open: false })} \r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Administration;","// src/pages/MaturityModelAdmin/index.tsx - Version corrigée avec affichage thématiques\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Tabs,\r\n  Tab,\r\n  Card,\r\n  CardContent,\r\n  Chip,\r\n  Alert,\r\n  Snackbar,\r\n  CircularProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Fab,\r\n  Divider,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  List,\r\n  ListItem,\r\n  Switch,\r\n  FormControlLabel,\r\n  Badge\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Download as DownloadIcon,\r\n  Upload as UploadIcon,\r\n  School as SchoolIcon,\r\n  Category as CategoryIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon,\r\n  Functions as FunctionsIcon,\r\n  Layers as LayersIcon,\r\n  Lightbulb as LightbulbIcon,\r\n  Security as SecurityIcon,\r\n  Computer as ComputerIcon,\r\n  Storage as StorageIcon,\r\n  Code as CodeIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../services/api';\r\n\r\n// Types existants + nouveaux types pour les fonctions globales\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n  description: string;\r\n  ordre: number;\r\n  actif: boolean;\r\n  nb_thematiques?: number;\r\n  nb_niveaux_globaux?: number;\r\n  thematiques?: Thematique[];\r\n  niveauxGlobaux?: NiveauGlobal[];\r\n}\r\n\r\ninterface Thematique {\r\n  id_thematique: string;\r\n  nom: string;\r\n  description: string;\r\n  id_fonction: string;\r\n  nombre_questions: number;\r\n  ordre: number;\r\n  actif: boolean;\r\n  nb_niveaux?: number;\r\n  niveauxThematiques?: NiveauThematique[];\r\n}\r\n\r\ninterface NiveauGlobal {\r\n  id_niveau: string;\r\n  id_fonction: string;\r\n  score_min: number;\r\n  score_max: number;\r\n  niveau: string;\r\n  description: string;\r\n  recommandations: string;\r\n  ordre: number;\r\n}\r\n\r\ninterface NiveauThematique {\r\n  id_niveau: string;\r\n  id_fonction: string;\r\n  id_thematique: string;\r\n  score_min: number;\r\n  score_max: number;\r\n  niveau: string;\r\n  description: string;\r\n  recommandations: string;\r\n}\r\n\r\ninterface FonctionGlobale {\r\n  id_fonction: string;\r\n  nom: string;\r\n  description: string;\r\n  code_fonction: string;\r\n  poids: number;\r\n  ordre_affichage: number;\r\n  actif: boolean;\r\n  couleur: string;\r\n  icone: string;\r\n  nb_questions?: number;\r\n  nb_niveaux?: number;\r\n  nb_recommandations?: number;\r\n  niveaux?: NiveauMaturiteGlobale[];\r\n  recommandations?: RecommandationGlobale[];\r\n  questions?: QuestionGlobale[];\r\n}\r\n\r\ninterface NiveauMaturiteGlobale {\r\n  id_niveau: string;\r\n  id_fonction: string;\r\n  nom_niveau: string;\r\n  description: string;\r\n  score_min: number;\r\n  score_max: number;\r\n  ordre_niveau: number;\r\n  couleur: string;\r\n  actif: boolean;\r\n}\r\n\r\ninterface RecommandationGlobale {\r\n  id_recommandation: string;\r\n  id_fonction: string;\r\n  id_niveau?: string;\r\n  titre: string;\r\n  description: string;\r\n  actions_recommandees: string[];\r\n  priorite: 'FAIBLE' | 'MOYENNE' | 'HAUTE' | 'CRITIQUE';\r\n  type_recommandation: 'IMMEDIATE' | 'COURT_TERME' | 'MOYEN_TERME' | 'LONG_TERME';\r\n  score_min?: number;\r\n  score_max?: number;\r\n  ordre_affichage: number;\r\n  actif: boolean;\r\n  nom_niveau?: string;\r\n}\r\n\r\ninterface QuestionGlobale {\r\n  id_question: string;\r\n  fonction: string;\r\n  numero_question: number;\r\n  texte_question: string;\r\n  description: string;\r\n  poids: number;\r\n  type_reponse: string;\r\n  ordre_affichage: number;\r\n  actif: boolean;\r\n}\r\n\r\ninterface FormData {\r\n  [key: string]: any;\r\n}\r\n\r\ntype DialogType = 'fonction' | 'thematique' | 'niveau-global' | 'niveau-thematique' | \r\n                  'fonction-globale' | 'niveau-maturite-globale' | 'recommandation-globale' | \r\n                  'question' | 'question-globale' | '';\r\n\r\nconst MaturityModelAdmin: React.FC = () => {\r\n  // États existants\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [selectedFonction, setSelectedFonction] = useState<Fonction | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [mainTabValue, setMainTabValue] = useState(0); // Onglets principaux: Modèle Standard / Fonctions Globales\r\n  const [subTabValue, setSubTabValue] = useState(0); // Sous-onglets pour les détails\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success' as 'success' | 'error' | 'warning' | 'info'\r\n  });\r\n\r\n  // Nouveaux états pour les fonctions globales\r\n  const [fonctionsGlobales, setFonctionsGlobales] = useState<FonctionGlobale[]>([]);\r\n  const [selectedFonctionGlobale, setSelectedFonctionGlobale] = useState<FonctionGlobale | null>(null);\r\n  const [loadingGlobales, setLoadingGlobales] = useState(false);\r\n\r\n  const [questions, setQuestions] = useState<{ [id_thematique: string]: any[] }>({});\r\n\r\n  // États pour les dialogues\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [dialogType, setDialogType] = useState<DialogType>('');\r\n  const [editingItem, setEditingItem] = useState<any>(null);\r\n  const [formData, setFormData] = useState<FormData>({});\r\n  \r\n  // États pour les confirmations\r\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\r\n  const [itemToDelete, setItemToDelete] = useState<{ type: string; id: string; name: string } | null>(null);\r\n\r\n  // Icônes disponibles\r\n  const availableIcons = [\r\n    { value: 'TrendingUp', label: 'Tendance', component: TrendingUpIcon },\r\n    { value: 'Security', label: 'Sécurité', component: SecurityIcon },\r\n    { value: 'Computer', label: 'Ordinateur', component: ComputerIcon },\r\n    { value: 'Storage', label: 'Stockage', component: StorageIcon },\r\n    { value: 'Code', label: 'Code', component: CodeIcon },\r\n    { value: 'Lightbulb', label: 'Innovation', component: LightbulbIcon },\r\n    { value: 'Assessment', label: 'Évaluation', component: AssessmentIcon },\r\n    { value: 'Functions', label: 'Fonctions', component: FunctionsIcon }\r\n  ];\r\n\r\n  // Charger les données au montage et changement d'onglet\r\n  useEffect(() => {\r\n    if (mainTabValue === 0) {\r\n      loadFonctions();\r\n    } else if (mainTabValue === 1) {\r\n      loadFonctionsGlobales();\r\n    }\r\n  }, [mainTabValue]);\r\n\r\n  // Charger les questions quand une fonction est sélectionnée\r\n  useEffect(() => {\r\n    if (selectedFonction?.thematiques) {\r\n      selectedFonction.thematiques.forEach((t) => loadQuestionsForThematique(t.id_thematique));\r\n    }\r\n  }, [selectedFonction]);\r\n\r\n  // Fonctions utilitaires\r\n  const showSnackbar = (message: string, severity: 'success' | 'error' | 'warning' | 'info' = 'success') => {\r\n    setSnackbar({ open: true, message, severity });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({});\r\n    setEditingItem(null);\r\n    setDialogType('');\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  const getScoreColor = (score: number): string => {\r\n    if (score >= 4) return '#4CAF50';\r\n    if (score >= 3) return '#FF9800';\r\n    if (score >= 2) return '#F44336';\r\n    return '#9E9E9E';\r\n  };\r\n\r\n  // ========================================\r\n  // FONCTIONS POUR LE MODÈLE STANDARD (existant)\r\n  // ========================================\r\n\r\n  const loadFonctions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('/maturity-model/fonctions');\r\n      const data = response.data || response;\r\n      setFonctions(data);\r\n      if (data.length > 0 && !selectedFonction) {\r\n        loadFonctionDetails(data[0].id_fonction);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des fonctions:', error);\r\n      showSnackbar('Erreur lors du chargement des fonctions', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadFonctionDetails = async (fonctionId: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get(`/maturity-model/fonctions/${fonctionId}`);\r\n      setSelectedFonction(response.data || response);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des détails:', error);\r\n      showSnackbar('Erreur lors du chargement des détails', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadQuestionsForThematique = async (id_thematique: string) => {\r\n    try {\r\n      const data = await api.get(`/questions/thematique/${id_thematique}`);\r\n      setQuestions((prev) => ({ ...prev, [id_thematique]: data }));\r\n    } catch (e) {\r\n      showSnackbar('Erreur chargement des questions', 'error');\r\n    }\r\n  };\r\n\r\n  const openDialog = (type: DialogType, item: any = null) => {\r\n    setDialogType(type);\r\n    setEditingItem(item);\r\n    setFormData(item || {});\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleAddQuestion = (thematique: Thematique) => {\r\n    setFormData({\r\n      id_thematique: thematique.id_thematique,\r\n      texte: '',\r\n      ponderation: 1,\r\n      aide_reponse: ''\r\n    });\r\n    setDialogType('question');\r\n    setEditingItem(null);\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  // Fonction handleSave pour les éléments du modèle standard\r\n  const handleSave = async () => {\r\n    try {\r\n      let response;\r\n      \r\n      switch (dialogType) {\r\n        case 'fonction':\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/fonctions/${editingItem.id_fonction}`, formData);\r\n            showSnackbar('Fonction mise à jour avec succès');\r\n          } else {\r\n            response = await api.post('/maturity-model/fonctions', formData);\r\n            showSnackbar('Fonction créée avec succès');\r\n          }\r\n          await loadFonctions();\r\n          break;\r\n        \r\n        case 'thematique':\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/thematiques/${editingItem.id_thematique}`, formData);\r\n            showSnackbar('Thématique mise à jour avec succès');\r\n          } else {\r\n            response = await api.post(`/maturity-model/fonctions/${selectedFonction?.id_fonction}/thematiques`, formData);\r\n            showSnackbar('Thématique créée avec succès');\r\n          }\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-global':\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/niveaux-globaux/${editingItem.id_niveau}`, formData);\r\n            showSnackbar('Niveau global mis à jour avec succès');\r\n          } else {\r\n            response = await api.post(`/maturity-model/fonctions/${selectedFonction?.id_fonction}/niveaux-globaux`, formData);\r\n            showSnackbar('Niveau global créé avec succès');\r\n          }\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-thematique':\r\n          const { id_thematique } = formData;\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/niveaux-thematiques/${editingItem.id_niveau}`, formData);\r\n            showSnackbar('Niveau thématique mis à jour avec succès');\r\n          } else {\r\n            response = await api.post(`/maturity-model/thematiques/${id_thematique}/niveaux`, {\r\n              ...formData,\r\n              id_fonction: selectedFonction?.id_fonction\r\n            });\r\n            showSnackbar('Niveau thématique créé avec succès');\r\n          }\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n\r\n        case 'question':\r\n          if (!formData.texte || formData.texte.trim() === '') {\r\n            showSnackbar('Le texte est obligatoire', 'warning');\r\n            return;\r\n          }\r\n\r\n          if (editingItem) {\r\n            await api.put(`/questions/${editingItem.id_question}`, formData);\r\n            showSnackbar('Question modifiée');\r\n          } else {\r\n            await api.post(`/questions`, formData);\r\n            showSnackbar('Question ajoutée');\r\n          }\r\n\r\n          await loadQuestionsForThematique(formData.id_thematique);\r\n          resetForm();\r\n          return;\r\n\r\n        default:\r\n          showSnackbar('Type de dialogue non reconnu', 'error');\r\n          return;\r\n      }\r\n      \r\n      resetForm();\r\n    } catch (error: any) {\r\n      console.error('Erreur lors de la sauvegarde:', error);\r\n      showSnackbar(error.response?.data?.message || 'Erreur lors de la sauvegarde', 'error');\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!itemToDelete) return;\r\n    \r\n    try {\r\n      switch (itemToDelete.type) {\r\n        case 'fonction':\r\n          await api.delete(`/maturity-model/fonctions/${itemToDelete.id}`);\r\n          showSnackbar('Fonction supprimée avec succès');\r\n          await loadFonctions();\r\n          if (selectedFonction?.id_fonction === itemToDelete.id) {\r\n            setSelectedFonction(null);\r\n          }\r\n          break;\r\n        \r\n        case 'thematique':\r\n          await api.delete(`/maturity-model/thematiques/${itemToDelete.id}`);\r\n          showSnackbar('Thématique supprimée avec succès');\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-global':\r\n          await api.delete(`/maturity-model/niveaux-globaux/${itemToDelete.id}`);\r\n          showSnackbar('Niveau global supprimé avec succès');\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-thematique':\r\n          await api.delete(`/maturity-model/niveaux-thematiques/${itemToDelete.id}`);\r\n          showSnackbar('Niveau thématique supprimé avec succès');\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n      }\r\n      \r\n      setDeleteConfirmOpen(false);\r\n      setItemToDelete(null);\r\n    } catch (error: any) {\r\n      console.error('Erreur lors de la suppression:', error);\r\n      showSnackbar(error.response?.data?.message || 'Erreur lors de la suppression', 'error');\r\n    }\r\n  };\r\n\r\n  const exportModel = async () => {\r\n    try {\r\n      const response = await api.get('/maturity-model/export');\r\n      const dataStr = JSON.stringify(response.data || response, null, 2);\r\n      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n      \r\n      const exportFileDefaultName = `maturity-model-${new Date().toISOString().split('T')[0]}.json`;\r\n      \r\n      const linkElement = document.createElement('a');\r\n      linkElement.setAttribute('href', dataUri);\r\n      linkElement.setAttribute('download', exportFileDefaultName);\r\n      linkElement.click();\r\n      \r\n      showSnackbar('Modèle exporté avec succès');\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'export:', error);\r\n      showSnackbar('Erreur lors de l\\'export', 'error');\r\n    }\r\n  };\r\n\r\n  const confirmDelete = (type: string, id: string, name: string) => {\r\n    setItemToDelete({ type, id, name });\r\n    setDeleteConfirmOpen(true);\r\n  };\r\n\r\n  // ========================================\r\n  // NOUVELLES FONCTIONS POUR LES FONCTIONS GLOBALES\r\n  // ========================================\r\n\r\n  const loadFonctionsGlobales = async () => {\r\n    try {\r\n      setLoadingGlobales(true);\r\n      const data = await api.get('/maturity-global-functions');\r\n      setFonctionsGlobales(data);\r\n    } catch (error) {\r\n      showSnackbar('Erreur lors du chargement des fonctions globales', 'error');\r\n    } finally {\r\n      setLoadingGlobales(false);\r\n    }\r\n  };\r\n\r\n  const loadFonctionGlobaleDetails = async (id: string) => {\r\n    try {\r\n      const data = await api.get(`/maturity-global-functions/${id}`);\r\n      setSelectedFonctionGlobale(data);\r\n    } catch (error) {\r\n      showSnackbar('Erreur lors du chargement des détails', 'error');\r\n    }\r\n  };\r\n\r\n  const handleSaveGlobale = async () => {\r\n    try {\r\n      switch (dialogType) {\r\n        case 'fonction-globale':\r\n          if (editingItem) {\r\n            await api.put(`/maturity-global-functions/${editingItem.id_fonction}`, formData);\r\n            showSnackbar('Fonction globale mise à jour avec succès');\r\n          } else {\r\n            await api.post('/maturity-global-functions', formData);\r\n            showSnackbar('Fonction globale créée avec succès');\r\n          }\r\n          await loadFonctionsGlobales();\r\n          break;\r\n        \r\n        case 'niveau-maturite-globale':\r\n          if (editingItem) {\r\n            await api.put(`/maturity-global-functions/niveaux/${editingItem.id_niveau}`, formData);\r\n            showSnackbar('Niveau mis à jour avec succès');\r\n          } else {\r\n            await api.post(`/maturity-global-functions/${selectedFonctionGlobale?.id_fonction}/niveaux`, formData);\r\n            showSnackbar('Niveau créé avec succès');\r\n          }\r\n          if (selectedFonctionGlobale) {\r\n            await loadFonctionGlobaleDetails(selectedFonctionGlobale.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'recommandation-globale':\r\n          if (editingItem) {\r\n            await api.put(`/maturity-global-functions/recommandations/${editingItem.id_recommandation}`, formData);\r\n            showSnackbar('Recommandation mise à jour avec succès');\r\n          } else {\r\n            await api.post(`/maturity-global-functions/${selectedFonctionGlobale?.id_fonction}/recommandations`, formData);\r\n            showSnackbar('Recommandation créée avec succès');\r\n          }\r\n          if (selectedFonctionGlobale) {\r\n            await loadFonctionGlobaleDetails(selectedFonctionGlobale.id_fonction);\r\n          }\r\n          break;\r\n      }\r\n      \r\n      resetForm();\r\n    } catch (error: any) {\r\n      showSnackbar(error.response?.data?.message || 'Erreur lors de la sauvegarde', 'error');\r\n    }\r\n  };\r\n\r\n  const handleDeleteGlobale = async (type: string, id: string) => {\r\n    try {\r\n      switch (type) {\r\n        case 'fonction-globale':\r\n          await api.delete(`/maturity-global-functions/${id}`);\r\n          await loadFonctionsGlobales();\r\n          break;\r\n        case 'niveau':\r\n          await api.delete(`/maturity-global-functions/niveaux/${id}`);\r\n          if (selectedFonctionGlobale) {\r\n            await loadFonctionGlobaleDetails(selectedFonctionGlobale.id_fonction);\r\n          }\r\n          break;\r\n        case 'recommandation':\r\n          await api.delete(`/maturity-global-functions/recommandations/${id}`);\r\n          if (selectedFonctionGlobale) {\r\n            await loadFonctionGlobaleDetails(selectedFonctionGlobale.id_fonction);\r\n          }\r\n          break;\r\n      }\r\n      \r\n      showSnackbar('Élément supprimé avec succès');\r\n      setDeleteConfirmOpen(false);\r\n      setItemToDelete(null);\r\n    } catch (error: any) {\r\n      showSnackbar(error.response?.data?.message || 'Erreur lors de la suppression', 'error');\r\n    }\r\n  };\r\n\r\n  // ========================================\r\n  // COMPOSANTS DE RENDU POUR LE MODÈLE STANDARD\r\n  // ========================================\r\n\r\n  const renderModelStandard = () => (\r\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* Header */}\r\n        <Grid item xs={12}>\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n            <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n              <CategoryIcon color=\"primary\" fontSize=\"large\" />\r\n              <Typography component=\"h2\" variant=\"h5\" color=\"primary\">\r\n                Modèle Standard de Maturité\r\n              </Typography>\r\n            </Box>\r\n            <Box>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<DownloadIcon />}\r\n                onClick={exportModel}\r\n                sx={{ mr: 2 }}\r\n              >\r\n                Exporter\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                onClick={() => openDialog('fonction')}\r\n              >\r\n                Nouvelle Fonction\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n\r\n        {/* Liste des fonctions */}\r\n        <Grid item xs={12} md={4}>\r\n          <Paper sx={{ p: 2, height: 'calc(100vh - 250px)', overflow: 'auto' }}>\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mb: 3 }}>\r\n              Fonctions d'évaluation\r\n            </Typography>\r\n            \r\n            {loading && <CircularProgress />}\r\n            \r\n            <List>\r\n              {fonctions.map((fonction) => (\r\n                <Card\r\n                  key={fonction.id_fonction}\r\n                  sx={{\r\n                    mb: 2,\r\n                    cursor: 'pointer',\r\n                    border: selectedFonction?.id_fonction === fonction.id_fonction ? '2px solid #0B4E87' : '1px solid #e0e0e0',\r\n                    transition: 'all 0.3s',\r\n                    '&:hover': { \r\n                      boxShadow: 3,\r\n                      transform: 'translateY(-2px)'\r\n                    }\r\n                  }}\r\n                  onClick={() => loadFonctionDetails(fonction.id_fonction)}\r\n                >\r\n                  <CardContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                      <Typography variant=\"h6\" color=\"primary\">\r\n                        {fonction.nom}\r\n                      </Typography>\r\n                      <Box>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            openDialog('fonction', fonction);\r\n                          }}\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          color=\"error\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            confirmDelete('fonction', fonction.id_fonction, fonction.nom);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </Box>\r\n                    \r\n                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1, mb: 2 }}>\r\n                      {fonction.description}\r\n                    </Typography>\r\n                    \r\n                    <Box display=\"flex\" gap={1}>\r\n                      <Chip\r\n                        size=\"small\"\r\n                        icon={<CategoryIcon />}\r\n                        label={`${fonction.nb_thematiques || 0} thématiques`}\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                      <Chip\r\n                        size=\"small\"\r\n                        icon={<TrendingUpIcon />}\r\n                        label={`${fonction.nb_niveaux_globaux || 0} niveaux`}\r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </List>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Détails de la fonction sélectionnée */}\r\n        <Grid item xs={12} md={8}>\r\n          {selectedFonction ? (\r\n            <Paper sx={{ p: 2, height: 'calc(100vh - 250px)', overflow: 'auto' }}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                <Box>\r\n                  <Typography variant=\"h5\" gutterBottom>\r\n                    {selectedFonction.nom}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {selectedFonction.description}\r\n                  </Typography>\r\n                </Box>\r\n                <Box>\r\n                  <Chip\r\n                    label={selectedFonction.actif ? 'Actif' : 'Inactif'}\r\n                    color={selectedFonction.actif ? 'success' : 'default'}\r\n                    sx={{ mr: 2 }}\r\n                  />\r\n                  <Tooltip title=\"Modifier\">\r\n                    <IconButton\r\n                      onClick={() => openDialog('fonction', selectedFonction)}\r\n                    >\r\n                      <EditIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Tabs value={subTabValue} onChange={(e, v) => setSubTabValue(v)} sx={{ mb: 3 }}>\r\n                <Tab label=\"Thématiques\" />\r\n                <Tab label=\"Niveaux Globaux\" />\r\n                <Tab label=\"Niveaux Thématiques\" />\r\n              </Tabs>\r\n\r\n              {/* Tab Thématiques */}\r\n              {subTabValue === 0 && (\r\n                <Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h6\">Thématiques ({selectedFonction.thematiques?.length || 0})</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => openDialog('thematique')}\r\n                    >\r\n                      Ajouter une thématique\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  {selectedFonction.thematiques?.map((them) => (\r\n                    <Accordion key={them.id_thematique} sx={{ mb: 1 }}>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\r\n                          <Box>\r\n                            <Typography variant=\"subtitle1\" sx={{ fontWeight: 500 }}>\r\n                              {them.nom}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                              {them.nombre_questions} questions • {them.niveauxThematiques?.length || 0} niveaux définis\r\n                            </Typography>\r\n                          </Box>\r\n                          <Box onClick={(e) => e.stopPropagation()}>\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => openDialog('thematique', them)}\r\n                            >\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              color=\"error\"\r\n                              onClick={() => confirmDelete('thematique', them.id_thematique, them.nom)}\r\n                            >\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </Box>\r\n                        </Box>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\r\n                          {them.description}\r\n                        </Typography>\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          size=\"small\"\r\n                          startIcon={<AddIcon />}\r\n                          onClick={() => handleAddQuestion(them)}\r\n                          disabled={(questions[them.id_thematique]?.length || 0) >= them.nombre_questions}\r\n                        >\r\n                          Ajouter une question\r\n                        </Button>\r\n                        <Box sx={{ mt: 2 }}>\r\n                          <Typography variant=\"subtitle2\">Questions :</Typography>\r\n                          {questions[them.id_thematique]?.map((q, i) => (\r\n                            <Paper key={q.id_question} sx={{ p: 1, mb: 1 }}>\r\n                              <Box display=\"flex\" justifyContent=\"space-between\">\r\n                                <Typography>{i + 1}. {q.texte}</Typography>\r\n                                <Box>\r\n                                  <IconButton size=\"small\" onClick={() => openDialog('question', q)}>\r\n                                    <EditIcon />\r\n                                  </IconButton>\r\n                                </Box>\r\n                              </Box>\r\n                            </Paper>\r\n                          ))}\r\n                        </Box>\r\n                                                        \r\n                        {them.niveauxThematiques && them.niveauxThematiques.length > 0 && (\r\n                          <Box>\r\n                            <Typography variant=\"subtitle2\" gutterBottom>\r\n                              Niveaux définis:\r\n                            </Typography>\r\n                            <Box display=\"flex\" flexWrap=\"wrap\" gap={1}>\r\n                              {them.niveauxThematiques.map(niveau => (\r\n                                <Chip\r\n                                  key={niveau.id_niveau}\r\n                                  label={`${niveau.score_min}-${niveau.score_max}: ${niveau.niveau}`}\r\n                                  size=\"small\"\r\n                                  sx={{\r\n                                    bgcolor: getScoreColor((niveau.score_min + niveau.score_max) / 2),\r\n                                    color: 'white'\r\n                                  }}\r\n                                />\r\n                              ))}\r\n                            </Box>\r\n                          </Box>\r\n                        )}\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  ))}\r\n                  \r\n                  {(!selectedFonction.thematiques || selectedFonction.thematiques.length === 0) && (\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucune thématique définie pour cette fonction\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n\r\n              {/* Tab Niveaux Globaux */}\r\n              {subTabValue === 1 && (\r\n                <Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h6\">Niveaux Globaux ({selectedFonction.niveauxGlobaux?.length || 0})</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => openDialog('niveau-global')}\r\n                    >\r\n                      Ajouter un niveau\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  <TableContainer>\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell width=\"120\">Score</TableCell>\r\n                          <TableCell width=\"200\">Niveau</TableCell>\r\n                          <TableCell>Description</TableCell>\r\n                          <TableCell width=\"100\">Actions</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {selectedFonction.niveauxGlobaux?.map((niveau) => (\r\n                          <TableRow key={niveau.id_niveau}>\r\n                            <TableCell>\r\n                              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                                <Box\r\n                                  sx={{\r\n                                    width: 16,\r\n                                    height: 16,\r\n                                    borderRadius: '50%',\r\n                                    bgcolor: getScoreColor((niveau.score_min + niveau.score_max) / 2)\r\n                                  }}\r\n                                />\r\n                                {niveau.score_min} - {niveau.score_max}\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Typography variant=\"subtitle2\">\r\n                                {niveau.niveau}\r\n                              </Typography>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Box>\r\n                                <Typography variant=\"body2\">\r\n                                  {niveau.description}\r\n                                </Typography>\r\n                                {niveau.recommandations && (\r\n                                  <Typography variant=\"caption\" color=\"textSecondary\" sx={{ mt: 1, display: 'block' }}>\r\n                                    <strong>Recommandations:</strong> {niveau.recommandations}\r\n                                  </Typography>\r\n                                )}\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Box>\r\n                                <IconButton\r\n                                  size=\"small\"\r\n                                  onClick={() => openDialog('niveau-global', niveau)}\r\n                                >\r\n                                  <EditIcon />\r\n                                </IconButton>\r\n                                <IconButton\r\n                                  size=\"small\"\r\n                                  color=\"error\"\r\n                                  onClick={() => confirmDelete('niveau-global', niveau.id_niveau, niveau.niveau)}\r\n                                >\r\n                                  <DeleteIcon />\r\n                                </IconButton>\r\n                              </Box>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  \r\n                  {(!selectedFonction.niveauxGlobaux || selectedFonction.niveauxGlobaux.length === 0) && (\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucun niveau global défini pour cette fonction\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n\r\n              {/* Tab Niveaux Thématiques */}\r\n              {subTabValue === 2 && (\r\n                <Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h6\">Niveaux Thématiques</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => openDialog('niveau-thematique')}\r\n                      disabled={!selectedFonction.thematiques || selectedFonction.thematiques.length === 0}\r\n                    >\r\n                      Ajouter un niveau\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  {selectedFonction.thematiques?.map((them) => (\r\n                    <Box key={them.id_thematique} mb={3}>\r\n                      <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 500, color: '#0B4E87' }}>\r\n                        {them.nom}\r\n                      </Typography>\r\n                      \r\n                      {them.niveauxThematiques && them.niveauxThematiques.length > 0 ? (\r\n                        <TableContainer sx={{ mb: 2 }}>\r\n                          <Table size=\"small\">\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell width=\"100\">Score</TableCell>\r\n                                <TableCell width=\"200\">Niveau</TableCell>\r\n                                <TableCell>Description</TableCell>\r\n                                <TableCell width=\"80\">Actions</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {them.niveauxThematiques.map((niveau) => (\r\n                                <TableRow key={niveau.id_niveau}>\r\n                                  <TableCell>\r\n                                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                                      <Box\r\n                                        sx={{\r\n                                          width: 12,\r\n                                          height: 12,\r\n                                          borderRadius: '50%',\r\n                                          bgcolor: getScoreColor((niveau.score_min + niveau.score_max) / 2)\r\n                                        }}\r\n                                      />\r\n                                      {niveau.score_min} - {niveau.score_max}\r\n                                    </Box>\r\n                                  </TableCell>\r\n                                  <TableCell>{niveau.niveau}</TableCell>\r\n                                  <TableCell>\r\n                                    <Typography variant=\"body2\" sx={{ fontSize: '0.875rem' }}>\r\n                                      {niveau.description}\r\n                                    </Typography>\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    <Box>\r\n                                      <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => openDialog('niveau-thematique', niveau)}\r\n                                      >\r\n                                        <EditIcon fontSize=\"small\" />\r\n                                      </IconButton>\r\n                                      <IconButton\r\n                                        size=\"small\"\r\n                                        color=\"error\"\r\n                                        onClick={() => confirmDelete('niveau-thematique', niveau.id_niveau, niveau.niveau)}\r\n                                      >\r\n                                        <DeleteIcon fontSize=\"small\" />\r\n                                      </IconButton>\r\n                                    </Box>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ ml: 2, mb: 2 }}>\r\n                          Aucun niveau défini pour cette thématique\r\n                        </Typography>\r\n                      )}\r\n                      \r\n                      <Divider />\r\n                    </Box>\r\n                  ))}\r\n                  \r\n                  {(!selectedFonction.thematiques || selectedFonction.thematiques.length === 0) && (\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucune thématique définie. Créez d'abord des thématiques pour définir leurs niveaux.\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n            </Paper>\r\n          ) : (\r\n            <Paper sx={{ p: 6, textAlign: 'center', height: 'calc(100vh - 250px)', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              <Box>\r\n                <AssessmentIcon sx={{ fontSize: 80, color: '#e0e0e0', mb: 2 }} />\r\n                <Typography variant=\"h6\" color=\"textSecondary\">\r\n                  Sélectionnez une fonction pour voir les détails\r\n                </Typography>\r\n              </Box>\r\n            </Paper>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n\r\n  // ========================================\r\n  // COMPOSANTS DE RENDU POUR LES FONCTIONS GLOBALES\r\n  // ========================================\r\n\r\n  const renderFonctionsGlobales = () => (\r\n    <Box>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          <FunctionsIcon sx={{ mr: 1, verticalAlign: 'middle' }} />\r\n          Fonctions de Maturité Globale\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          onClick={() => {\r\n            setDialogType('fonction-globale');\r\n            setEditingItem(null);\r\n            setFormData({\r\n              nom: '',\r\n              description: '',\r\n              code_fonction: '',\r\n              poids: 1.0,\r\n              ordre_affichage: fonctionsGlobales.length + 1,\r\n              couleur: '#2196F3',\r\n              icone: 'TrendingUp'\r\n            });\r\n            setDialogOpen(true);\r\n          }}\r\n        >\r\n          Nouvelle Fonction\r\n        </Button>\r\n      </Box>\r\n\r\n      {loadingGlobales ? (\r\n        <Box display=\"flex\" justifyContent=\"center\" p={4}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {fonctionsGlobales.map((fonction) => (\r\n            <Grid item xs={12} md={6} lg={4} key={fonction.id_fonction}>\r\n              <Card \r\n                sx={{ \r\n                  cursor: 'pointer',\r\n                  '&:hover': { boxShadow: 6 },\r\n                  borderLeft: `4px solid ${fonction.couleur}` \r\n                }}\r\n                onClick={() => loadFonctionGlobaleDetails(fonction.id_fonction)}\r\n              >\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                    {React.createElement(\r\n                      availableIcons.find(icon => icon.value === fonction.icone)?.component || TrendingUpIcon,\r\n                      { sx: { color: fonction.couleur, mr: 1 } }\r\n                    )}\r\n                    <Typography variant=\"h6\" component=\"h3\" flexGrow={1}>\r\n                      {fonction.nom}\r\n                    </Typography>\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        setDialogType('fonction-globale');\r\n                        setEditingItem(fonction);\r\n                        setFormData({\r\n                          nom: fonction.nom,\r\n                          description: fonction.description,\r\n                          code_fonction: fonction.code_fonction,\r\n                          poids: fonction.poids,\r\n                          ordre_affichage: fonction.ordre_affichage,\r\n                          couleur: fonction.couleur,\r\n                          icone: fonction.icone\r\n                        });\r\n                        setDialogOpen(true);\r\n                      }}\r\n                    >\r\n                      <EditIcon />\r\n                    </IconButton>\r\n                  </Box>\r\n                  \r\n                  <Typography variant=\"body2\" color=\"text.secondary\" mb={2}>\r\n                    {fonction.description}\r\n                  </Typography>\r\n                  \r\n                  <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\r\n                    <Chip \r\n                      size=\"small\" \r\n                      label={`${fonction.nb_questions || 0} questions`} \r\n                      icon={<SchoolIcon />}\r\n                    />\r\n                    <Chip \r\n                      size=\"small\" \r\n                      label={`${fonction.nb_niveaux || 0} niveaux`} \r\n                      icon={<LayersIcon />}\r\n                    />\r\n                    <Chip \r\n                      size=\"small\" \r\n                      label={`${fonction.nb_recommandations || 0} recommandations`} \r\n                      icon={<LightbulbIcon />}\r\n                    />\r\n                  </Box>\r\n                  \r\n                  <Box mt={2} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Chip \r\n                      size=\"small\" \r\n                      label={`Poids: ${fonction.poids}`} \r\n                      variant=\"outlined\"\r\n                    />\r\n                    <Chip \r\n                      size=\"small\" \r\n                      label={fonction.actif ? 'Actif' : 'Inactif'} \r\n                      color={fonction.actif ? 'success' : 'default'}\r\n                    />\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n\r\n  const renderDetailsFonctionGlobale = () => {\r\n    if (!selectedFonctionGlobale) return null;\r\n\r\n    return (\r\n      <Box>\r\n        <Box display=\"flex\" alignItems=\"center\" mb={3}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => setSelectedFonctionGlobale(null)}\r\n            sx={{ mr: 2 }}\r\n          >\r\n            ← Retour\r\n          </Button>\r\n          <Box display=\"flex\" alignItems=\"center\" flexGrow={1}>\r\n            {React.createElement(\r\n              availableIcons.find(icon => icon.value === selectedFonctionGlobale.icone)?.component || TrendingUpIcon,\r\n              { sx: { color: selectedFonctionGlobale.couleur, mr: 1 } }\r\n            )}\r\n            <Typography variant=\"h5\">\r\n              {selectedFonctionGlobale.nom}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n\r\n        <Grid container spacing={3}>\r\n          {/* Section Niveaux */}\r\n          <Grid item xs={12} md={6}>\r\n            <Paper sx={{ p: 3 }}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">\r\n                  <LayersIcon sx={{ mr: 1, verticalAlign: 'middle' }} />\r\n                  Niveaux de Maturité\r\n                </Typography>\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => {\r\n                    setDialogType('niveau-maturite-globale');\r\n                    setEditingItem(null);\r\n                    setFormData({\r\n                      nom_niveau: '',\r\n                      description: '',\r\n                      score_min: 0,\r\n                      score_max: 1,\r\n                      ordre_niveau: (selectedFonctionGlobale.niveaux?.length || 0) + 1,\r\n                      couleur: '#4CAF50'\r\n                    });\r\n                    setDialogOpen(true);\r\n                  }}\r\n                >\r\n                  Ajouter\r\n                </Button>\r\n              </Box>\r\n\r\n              {selectedFonctionGlobale.niveaux?.map((niveau) => (\r\n                <Card key={niveau.id_niveau} sx={{ mb: 2, borderLeft: `4px solid ${niveau.couleur}` }}>\r\n                  <CardContent sx={{ py: 2 }}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                      <Box>\r\n                        <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                          {niveau.nom_niveau}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Score: {niveau.score_min} - {niveau.score_max}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                          {niveau.description}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => {\r\n                            setDialogType('niveau-maturite-globale');\r\n                            setEditingItem(niveau);\r\n                            setFormData({\r\n                              nom_niveau: niveau.nom_niveau,\r\n                              description: niveau.description,\r\n                              score_min: niveau.score_min,\r\n                              score_max: niveau.score_max,\r\n                              ordre_niveau: niveau.ordre_niveau,\r\n                              couleur: niveau.couleur\r\n                            });\r\n                            setDialogOpen(true);\r\n                          }}\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => {\r\n                            setItemToDelete({\r\n                              type: 'niveau',\r\n                              id: niveau.id_niveau,\r\n                              name: niveau.nom_niveau\r\n                            });\r\n                            setDeleteConfirmOpen(true);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </Paper>\r\n          </Grid>\r\n\r\n          {/* Section Recommandations */}\r\n          <Grid item xs={12} md={6}>\r\n            <Paper sx={{ p: 3 }}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">\r\n                  <LightbulbIcon sx={{ mr: 1, verticalAlign: 'middle' }} />\r\n                  Recommandations\r\n                </Typography>\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => {\r\n                    setDialogType('recommandation-globale');\r\n                    setEditingItem(null);\r\n                    setFormData({\r\n                      titre: '',\r\n                      description: '',\r\n                      actions_recommandees: [],\r\n                      priorite: 'MOYENNE',\r\n                      type_recommandation: 'MOYEN_TERME',\r\n                      ordre_affichage: 0\r\n                    });\r\n                    setDialogOpen(true);\r\n                  }}\r\n                >\r\n                  Ajouter\r\n                </Button>\r\n              </Box>\r\n\r\n              {selectedFonctionGlobale.recommandations?.map((recommandation) => (\r\n                <Card key={recommandation.id_recommandation} sx={{ mb: 2 }}>\r\n                  <CardContent sx={{ py: 2 }}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"start\">\r\n                      <Box flexGrow={1}>\r\n                        <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                          {recommandation.titre}\r\n                        </Typography>\r\n                        <Box display=\"flex\" gap={1} my={1}>\r\n                          <Chip \r\n                            size=\"small\" \r\n                            label={recommandation.priorite} \r\n                            color={\r\n                              recommandation.priorite === 'CRITIQUE' ? 'error' :\r\n                              recommandation.priorite === 'HAUTE' ? 'warning' :\r\n                              recommandation.priorite === 'MOYENNE' ? 'primary' : 'default'\r\n                            }\r\n                          />\r\n                          <Chip \r\n                            size=\"small\" \r\n                            label={recommandation.type_recommandation.replace('_', ' ')} \r\n                            variant=\"outlined\"\r\n                          />\r\n                          {recommandation.nom_niveau && (\r\n                            <Chip \r\n                              size=\"small\" \r\n                              label={recommandation.nom_niveau} \r\n                              variant=\"outlined\"\r\n                            />\r\n                          )}\r\n                        </Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {recommandation.description}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => {\r\n                            setDialogType('recommandation-globale');\r\n                            setEditingItem(recommandation);\r\n                            setFormData({\r\n                              titre: recommandation.titre,\r\n                              description: recommandation.description,\r\n                              actions_recommandees: recommandation.actions_recommandees || [],\r\n                              priorite: recommandation.priorite,\r\n                              type_recommandation: recommandation.type_recommandation,\r\n                              id_niveau: recommandation.id_niveau,\r\n                              score_min: recommandation.score_min,\r\n                              score_max: recommandation.score_max,\r\n                              ordre_affichage: recommandation.ordre_affichage\r\n                            });\r\n                            setDialogOpen(true);\r\n                          }}\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => {\r\n                            setItemToDelete({\r\n                              type: 'recommandation',\r\n                              id: recommandation.id_recommandation,\r\n                              name: recommandation.titre\r\n                            });\r\n                            setDeleteConfirmOpen(true);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  // ========================================\r\n  // DIALOGUES\r\n  // ========================================\r\n\r\n  const renderDialogContent = () => {\r\n    switch (dialogType) {\r\n      case 'fonction':\r\n        return (\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Nom\"\r\n              value={formData.nom || ''}\r\n              onChange={(e) => setFormData({ ...formData, nom: e.target.value })}\r\n              required\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Description\"\r\n              multiline\r\n              rows={3}\r\n              value={formData.description || ''}\r\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n              required\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Ordre\"\r\n              type=\"number\"\r\n              value={formData.ordre || 999}\r\n              onChange={(e) => setFormData({ ...formData, ordre: parseInt(e.target.value) || 999 })}\r\n            />\r\n          </Box>\r\n        );\r\n\r\n      case 'thematique':\r\n        return (\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Nom\"\r\n              value={formData.nom || ''}\r\n              onChange={(e) => setFormData({ ...formData, nom: e.target.value })}\r\n              required\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Description\"\r\n              multiline\r\n              rows={3}\r\n              value={formData.description || ''}\r\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n              required\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Ordre\"\r\n              type=\"number\"\r\n              value={formData.ordre || 999}\r\n              onChange={(e) => setFormData({ ...formData, ordre: parseInt(e.target.value) || 999 })}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Nombre de questions\"\r\n              type=\"number\"\r\n              value={formData.nombre_questions || 0}\r\n              onChange={(e) => setFormData({ ...formData, nombre_questions: parseInt(e.target.value) || 0 })}\r\n            />\r\n          </Box>\r\n        );\r\n\r\n      case 'niveau-global':\r\n      case 'niveau-thematique':\r\n        return (\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <Box>\r\n              <Typography gutterBottom>Plage de scores</Typography>\r\n              <Box sx={{ display: 'flex', gap: 2 }}>\r\n                <TextField\r\n                  label=\"Score min\"\r\n                  type=\"number\"\r\n                  inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                  value={formData.score_min ?? ''}\r\n                  onChange={(e) => setFormData({ ...formData, score_min: parseFloat(e.target.value) || 0 })}\r\n                  required\r\n                />\r\n                <TextField\r\n                  label=\"Score max\"\r\n                  type=\"number\"\r\n                  inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                  value={formData.score_max ?? ''}\r\n                  onChange={(e) => setFormData({ ...formData, score_max: parseFloat(e.target.value) || 0 })}\r\n                  required\r\n                />\r\n              </Box>\r\n            </Box>\r\n            \r\n            <TextField\r\n              fullWidth\r\n              label=\"Niveau\"\r\n              value={formData.niveau || ''}\r\n              onChange={(e) => setFormData({ ...formData, niveau: e.target.value })}\r\n              required\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              label=\"Description\"\r\n              multiline\r\n              rows={3}\r\n              value={formData.description || ''}\r\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n              required\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              label=\"Recommandations\"\r\n              multiline\r\n              rows={3}\r\n              value={formData.recommandations || ''}\r\n              onChange={(e) => setFormData({ ...formData, recommandations: e.target.value })}\r\n            />\r\n            \r\n            {dialogType === 'niveau-global' && (\r\n              <TextField\r\n                fullWidth\r\n                label=\"Ordre\"\r\n                type=\"number\"\r\n                value={formData.ordre || 999}\r\n                onChange={(e) => setFormData({ ...formData, ordre: parseInt(e.target.value) || 999 })}\r\n              />\r\n            )}\r\n\r\n            {dialogType === 'niveau-thematique' && !editingItem && (\r\n              <FormControl fullWidth required>\r\n                <InputLabel>Thématique</InputLabel>\r\n                <Select\r\n                  value={formData.id_thematique || ''}\r\n                  onChange={(e) => setFormData({ ...formData, id_thematique: e.target.value })}\r\n                  label=\"Thématique\"\r\n                >\r\n                  {selectedFonction?.thematiques?.map(them => (\r\n                    <MenuItem key={them.id_thematique} value={them.id_thematique}>\r\n                      {them.nom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n          </Box>\r\n        );\r\n\r\n      case 'question':\r\n        return (\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              label=\"Texte de la question\"\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n              required\r\n              value={formData.texte || ''}\r\n              onChange={(e) => setFormData({ ...formData, texte: e.target.value })}\r\n            />\r\n            <TextField\r\n              label=\"Pondération\"\r\n              type=\"number\"\r\n              fullWidth\r\n              value={formData.ponderation || 1}\r\n              onChange={(e) => setFormData({ ...formData, ponderation: parseInt(e.target.value) || 1 })}\r\n            />\r\n            <TextField\r\n              label=\"Aide à la réponse\"\r\n              fullWidth\r\n              multiline\r\n              rows={2}\r\n              value={formData.aide_reponse || ''}\r\n              onChange={(e) => setFormData({ ...formData, aide_reponse: e.target.value })}\r\n            />\r\n          </Box>\r\n        );\r\n\r\n      case 'fonction-globale':\r\n        return (\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Nom de la fonction\"\r\n                value={formData.nom || ''}\r\n                onChange={(e) => setFormData({ ...formData, nom: e.target.value })}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Code fonction\"\r\n                value={formData.code_fonction || ''}\r\n                onChange={(e) => setFormData({ ...formData, code_fonction: e.target.value })}\r\n                required\r\n                disabled={!!editingItem}\r\n                helperText=\"Code unique pour identifier la fonction (non modifiable après création)\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                label=\"Description\"\r\n                value={formData.description || ''}\r\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"number\"\r\n                label=\"Poids\"\r\n                value={formData.poids || 1.0}\r\n                onChange={(e) => setFormData({ ...formData, poids: parseFloat(e.target.value) })}\r\n                inputProps={{ step: 0.1, min: 0.1, max: 5.0 }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"number\"\r\n                label=\"Ordre d'affichage\"\r\n                value={formData.ordre_affichage || 1}\r\n                onChange={(e) => setFormData({ ...formData, ordre_affichage: parseInt(e.target.value) })}\r\n                inputProps={{ min: 1 }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"color\"\r\n                label=\"Couleur\"\r\n                value={formData.couleur || '#2196F3'}\r\n                onChange={(e) => setFormData({ ...formData, couleur: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Icône</InputLabel>\r\n                <Select\r\n                  value={formData.icone || 'TrendingUp'}\r\n                  onChange={(e) => setFormData({ ...formData, icone: e.target.value })}\r\n                  label=\"Icône\"\r\n                >\r\n                  {availableIcons.map((icon) => (\r\n                    <MenuItem key={icon.value} value={icon.value}>\r\n                      <Box display=\"flex\" alignItems=\"center\">\r\n                        {React.createElement(icon.component, { sx: { mr: 1 } })}\r\n                        {icon.label}\r\n                      </Box>\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n\r\n      case 'niveau-maturite-globale':\r\n        return (\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Nom du niveau\"\r\n                value={formData.nom_niveau || ''}\r\n                onChange={(e) => setFormData({ ...formData, nom_niveau: e.target.value })}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={2}\r\n                label=\"Description\"\r\n                value={formData.description || ''}\r\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"number\"\r\n                label=\"Score minimum\"\r\n                value={formData.score_min || 0}\r\n                onChange={(e) => setFormData({ ...formData, score_min: parseFloat(e.target.value) })}\r\n                inputProps={{ step: 0.01, min: 0, max: 5 }}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"number\"\r\n                label=\"Score maximum\"\r\n                value={formData.score_max || 1}\r\n                onChange={(e) => setFormData({ ...formData, score_max: parseFloat(e.target.value) })}\r\n                inputProps={{ step: 0.01, min: 0, max: 5 }}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"number\"\r\n                label=\"Ordre\"\r\n                value={formData.ordre_niveau || 1}\r\n                onChange={(e) => setFormData({ ...formData, ordre_niveau: parseInt(e.target.value) })}\r\n                inputProps={{ min: 1 }}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                type=\"color\"\r\n                label=\"Couleur\"\r\n                value={formData.couleur || '#4CAF50'}\r\n                onChange={(e) => setFormData({ ...formData, couleur: e.target.value })}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n\r\n      case 'recommandation-globale':\r\n        return (\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Titre\"\r\n                value={formData.titre || ''}\r\n                onChange={(e) => setFormData({ ...formData, titre: e.target.value })}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={4}\r\n                label=\"Description\"\r\n                value={formData.description || ''}\r\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Priorité</InputLabel>\r\n                <Select\r\n                  value={formData.priorite || 'MOYENNE'}\r\n                  onChange={(e) => setFormData({ ...formData, priorite: e.target.value })}\r\n                  label=\"Priorité\"\r\n                >\r\n                  <MenuItem value=\"FAIBLE\">Faible</MenuItem>\r\n                  <MenuItem value=\"MOYENNE\">Moyenne</MenuItem>\r\n                  <MenuItem value=\"HAUTE\">Haute</MenuItem>\r\n                  <MenuItem value=\"CRITIQUE\">Critique</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Type</InputLabel>\r\n                <Select\r\n                  value={formData.type_recommandation || 'MOYEN_TERME'}\r\n                  onChange={(e) => setFormData({ ...formData, type_recommandation: e.target.value })}\r\n                  label=\"Type\"\r\n                >\r\n                  <MenuItem value=\"IMMEDIATE\">Immédiate</MenuItem>\r\n                  <MenuItem value=\"COURT_TERME\">Court terme</MenuItem>\r\n                  <MenuItem value=\"MOYEN_TERME\">Moyen terme</MenuItem>\r\n                  <MenuItem value=\"LONG_TERME\">Long terme</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            {selectedFonctionGlobale?.niveaux && (\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Niveau associé (optionnel)</InputLabel>\r\n                  <Select\r\n                    value={formData.id_niveau || ''}\r\n                    onChange={(e) => setFormData({ ...formData, id_niveau: e.target.value || null })}\r\n                    label=\"Niveau associé (optionnel)\"\r\n                  >\r\n                    <MenuItem value=\"\">Aucun niveau spécifique</MenuItem>\r\n                    {selectedFonctionGlobale.niveaux.map((niveau) => (\r\n                      <MenuItem key={niveau.id_niveau} value={niveau.id_niveau}>\r\n                        {niveau.nom_niveau} ({niveau.score_min} - {niveau.score_max})\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        );\r\n\r\n      default:\r\n        return <Typography>Contenu du dialogue non défini pour le type: {dialogType}</Typography>;\r\n    }\r\n  };\r\n\r\n  const getDialogTitle = () => {\r\n    const action = editingItem ? 'Modifier' : 'Créer';\r\n    switch (dialogType) {\r\n      case 'fonction': return `${action} une fonction`;\r\n      case 'thematique': return `${action} une thématique`;\r\n      case 'niveau-global': return `${action} un niveau global`;\r\n      case 'niveau-thematique': return `${action} un niveau thématique`;\r\n      case 'question': return `${action} une question`;\r\n      case 'fonction-globale': return `${action} une fonction globale`;\r\n      case 'niveau-maturite-globale': return `${action} un niveau de maturité`;\r\n      case 'recommandation-globale': return `${action} une recommandation`;\r\n      default: return 'Dialogue';\r\n    }\r\n  };\r\n\r\n  // ========================================\r\n  // COMPOSANT PRINCIPAL\r\n  // ========================================\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ py: 4 }}>\r\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n        <SettingsIcon sx={{ mr: 2, verticalAlign: 'middle' }} />\r\n        Administration du Modèle de Maturité\r\n      </Typography>\r\n\r\n      <Paper sx={{ mt: 3 }}>\r\n        <Tabs \r\n          value={mainTabValue} \r\n          onChange={(e, newValue) => setMainTabValue(newValue)}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n        >\r\n          <Tab label=\"Modèle Standard\" icon={<CategoryIcon />} />\r\n          <Tab label=\"Fonctions Globales\" icon={<FunctionsIcon />} />\r\n        </Tabs>\r\n\r\n        <Box sx={{ p: 0 }}>\r\n          {mainTabValue === 0 && renderModelStandard()}\r\n          \r\n          {mainTabValue === 1 && (\r\n            <Box sx={{ p: 3 }}>\r\n              {selectedFonctionGlobale ? \r\n                renderDetailsFonctionGlobale() : \r\n                renderFonctionsGlobales()\r\n              }\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Dialogue universel */}\r\n      <Dialog open={dialogOpen} onClose={resetForm} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>{getDialogTitle()}</DialogTitle>\r\n        <DialogContent>\r\n          {renderDialogContent()}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={resetForm}>Annuler</Button>\r\n          <Button\r\n            onClick={\r\n              dialogType.includes('globale') || \r\n              dialogType.includes('niveau-maturite') || \r\n              dialogType.includes('recommandation') ? \r\n              handleSaveGlobale : \r\n              handleSave\r\n            }\r\n            variant=\"contained\"\r\n            startIcon={<SaveIcon />}\r\n            disabled={\r\n              (!formData.nom && (dialogType === 'fonction' || dialogType === 'thematique' || dialogType === 'fonction-globale')) ||\r\n              (!formData.niveau && (dialogType === 'niveau-global' || dialogType === 'niveau-thematique')) ||\r\n              (!formData.nom_niveau && dialogType === 'niveau-maturite-globale') ||\r\n              (!formData.titre && dialogType === 'recommandation-globale') ||\r\n              (!formData.texte && dialogType === 'question')\r\n            }\r\n          >\r\n            Enregistrer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialogue de confirmation de suppression */}\r\n      <Dialog\r\n        open={deleteConfirmOpen}\r\n        onClose={() => setDeleteConfirmOpen(false)}\r\n      >\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer \"{itemToDelete?.name}\" ?\r\n          </Typography>\r\n          <Typography variant=\"caption\" color=\"error\" sx={{ mt: 1, display: 'block' }}>\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteConfirmOpen(false)}>\r\n            Annuler\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              if (itemToDelete) {\r\n                if (itemToDelete.type === 'fonction-globale' || \r\n                    itemToDelete.type === 'niveau' || \r\n                    itemToDelete.type === 'recommandation') {\r\n                  handleDeleteGlobale(itemToDelete.type, itemToDelete.id);\r\n                } else {\r\n                  handleDelete();\r\n                }\r\n              }\r\n            }}\r\n            color=\"error\"\r\n            variant=\"contained\"\r\n            startIcon={<DeleteIcon />}\r\n          >\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar pour les notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert\r\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MaturityModelAdmin;","// src/components/ProtectedRoute.tsx - Version corrigée\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { \r\n  Box, \r\n  CircularProgress, \r\n  Alert, \r\n  AlertTitle, \r\n  Button, \r\n  Typography,\r\n  Paper,\r\n  Container\r\n} from '@mui/material';\r\nimport { \r\n  Lock as LockIcon, \r\n  AdminPanelSettings as AdminIcon,\r\n  Warning as WarningIcon \r\n} from '@mui/icons-material';\r\n\r\ninterface ProtectedRouteProps {\r\n  children: React.ReactNode;\r\n  module?: string;\r\n  action?: string;\r\n  adminOnly?: boolean;\r\n  fallbackUrl?: string;\r\n  showDetailedError?: boolean;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \r\n  children,\r\n  module,\r\n  action = 'voir',\r\n  adminOnly = false,\r\n  fallbackUrl = '/auth/login',\r\n  showDetailedError = true\r\n}) => {\r\n  const { \r\n    isAuthenticated, \r\n    isLoading, \r\n    currentUser, \r\n    hasPermission, \r\n    canAccessRoute,\r\n    isAdmin, \r\n    isSuperAdmin\r\n  } = useAuth();\r\n  \r\n  const location = useLocation();\r\n  const [permissionLoading, setPermissionLoading] = useState(true);\r\n  const [hasAccess, setHasAccess] = useState(false);\r\n  const [errorDetails, setErrorDetails] = useState<{\r\n    type: 'auth' | 'permission' | 'admin';\r\n    message: string;\r\n    suggestion?: string;\r\n  } | null>(null);\r\n\r\n  // Mémoriser les valeurs pour éviter les re-renders\r\n  const isUserAdmin = useCallback(() => isAdmin(), [isAdmin]);\r\n  const isUserSuperAdmin = useCallback(() => isSuperAdmin(), [isSuperAdmin]);\r\n\r\n  // Vérification des permissions - UNIQUEMENT basée sur les valeurs primitives\r\n  useEffect(() => {\r\n    let isMounted = true; // Pour éviter les setState sur composants démontés\r\n\r\n    const checkPermissions = async () => {\r\n      console.log('🔍 ProtectedRoute - Vérification permissions pour:', location.pathname);\r\n      \r\n      try {\r\n        if (!isMounted) return;\r\n        \r\n        setPermissionLoading(true);\r\n        setErrorDetails(null);\r\n\r\n        // 1. Vérifier l'authentification\r\n        if (!isAuthenticated) {\r\n          console.log('❌ Utilisateur non authentifié');\r\n          if (isMounted) {\r\n            setErrorDetails({\r\n              type: 'auth',\r\n              message: 'Vous devez être connecté pour accéder à cette page.',\r\n              suggestion: 'Veuillez vous connecter avec vos identifiants.'\r\n            });\r\n            setHasAccess(false);\r\n            setPermissionLoading(false);\r\n          }\r\n          return;\r\n        }\r\n\r\n        // 2. Vérifier si admin requis\r\n        if (adminOnly && !isUserAdmin() && !isUserSuperAdmin()) {\r\n          console.log('❌ Accès administrateur requis mais utilisateur non admin');\r\n          if (isMounted) {\r\n            setErrorDetails({\r\n              type: 'admin',\r\n              message: 'Accès réservé aux administrateurs.',\r\n              suggestion: 'Contactez votre administrateur système pour obtenir les droits nécessaires.'\r\n            });\r\n            setHasAccess(false);\r\n            setPermissionLoading(false);\r\n          }\r\n          return;\r\n        }\r\n\r\n        // 3. Vérifier les permissions spécifiques\r\n        if (module && hasPermission) {\r\n          const hasModulePermission = hasPermission(module, action);\r\n          console.log(`🔍 Permission ${module}:${action} = ${hasModulePermission ? '✅' : '❌'}`);\r\n\r\n          if (!hasModulePermission) {\r\n            if (isMounted) {\r\n              setErrorDetails({\r\n                type: 'permission',\r\n                message: `Vous n'avez pas les permissions nécessaires pour ${action === 'voir' ? 'consulter' : action} ce module.`,\r\n                suggestion: `Module requis: ${module} (${action}). Contactez votre administrateur pour obtenir ces permissions.`\r\n              });\r\n              setHasAccess(false);\r\n              setPermissionLoading(false);\r\n            }\r\n            return;\r\n          }\r\n        }\r\n\r\n        // 4. Vérifier l'accès par route\r\n        if (canAccessRoute) {\r\n          const routeAccess = canAccessRoute(location.pathname);\r\n          console.log(`🚦 Accès route ${location.pathname} = ${routeAccess ? '✅' : '❌'}`);\r\n\r\n          if (!routeAccess) {\r\n            if (isMounted) {\r\n              setErrorDetails({\r\n                type: 'permission',\r\n                message: 'Vous n\\'avez pas accès à cette page.',\r\n                suggestion: 'Vérifiez que vous avez les permissions nécessaires ou contactez votre administrateur.'\r\n              });\r\n              setHasAccess(false);\r\n              setPermissionLoading(false);\r\n            }\r\n            return;\r\n          }\r\n        }\r\n\r\n        // 5. Accès autorisé\r\n        console.log('✅ Accès autorisé');\r\n        if (isMounted) {\r\n          setHasAccess(true);\r\n          setPermissionLoading(false);\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('❌ Erreur lors de la vérification des permissions:', error);\r\n        if (isMounted) {\r\n          setErrorDetails({\r\n            type: 'permission',\r\n            message: 'Erreur lors de la vérification des permissions.',\r\n            suggestion: 'Veuillez rafraîchir la page ou contacter le support technique.'\r\n          });\r\n          setHasAccess(false);\r\n          setPermissionLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Attendre que isLoading soit false avant de vérifier\r\n    if (!isLoading) {\r\n      checkPermissions();\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [\r\n    // UNIQUEMENT les valeurs primitives pour éviter les boucles\r\n    isAuthenticated, \r\n    isLoading, \r\n    module, \r\n    action, \r\n    adminOnly, \r\n    location.pathname,\r\n    currentUser?.id_acteur, // Uniquement l'ID au lieu de l'objet entier\r\n    currentUser?.nom_role\r\n  ]); // NE PAS inclure les fonctions ici\r\n\r\n  // Affichage du chargement\r\n  if (isLoading || (permissionLoading && isAuthenticated)) {\r\n    return (\r\n      <Box \r\n        display=\"flex\" \r\n        flexDirection=\"column\"\r\n        justifyContent=\"center\" \r\n        alignItems=\"center\" \r\n        minHeight=\"80vh\"\r\n        gap={2}\r\n      >\r\n        <CircularProgress size={48} />\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          Vérification des permissions...\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Redirection si non authentifié\r\n  if (!isAuthenticated) {\r\n    console.log('🔄 Redirection vers page de connexion');\r\n    return <Navigate to={fallbackUrl} state={{ from: location }} replace />;\r\n  }\r\n\r\n  // Affichage des erreurs de permission\r\n  if (!hasAccess && errorDetails) {\r\n    if (!showDetailedError) {\r\n      return <Navigate to=\"/\" replace />;\r\n    }\r\n\r\n    return (\r\n      <Container maxWidth=\"md\" sx={{ mt: 8, mb: 4 }}>\r\n        <Paper elevation={3} sx={{ p: 4, textAlign: 'center' }}>\r\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" gap={3}>\r\n            {/* Icône selon le type d'erreur */}\r\n            {errorDetails.type === 'auth' && (\r\n              <LockIcon color=\"error\" sx={{ fontSize: 64 }} />\r\n            )}\r\n            {errorDetails.type === 'admin' && (\r\n              <AdminIcon color=\"warning\" sx={{ fontSize: 64 }} />\r\n            )}\r\n            {errorDetails.type === 'permission' && (\r\n              <WarningIcon color=\"error\" sx={{ fontSize: 64 }} />\r\n            )}\r\n\r\n            {/* Message d'erreur */}\r\n            <Alert \r\n              severity={errorDetails.type === 'admin' ? 'warning' : 'error'} \r\n              sx={{ width: '100%', textAlign: 'left' }}\r\n            >\r\n              <AlertTitle>\r\n                {errorDetails.type === 'auth' && 'Authentification requise'}\r\n                {errorDetails.type === 'admin' && 'Accès administrateur requis'}\r\n                {errorDetails.type === 'permission' && 'Permissions insuffisantes'}\r\n              </AlertTitle>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                {errorDetails.message}\r\n              </Typography>\r\n              {errorDetails.suggestion && (\r\n                <Typography variant=\"body2\" sx={{ mt: 1, opacity: 0.8 }}>\r\n                  💡 {errorDetails.suggestion}\r\n                </Typography>\r\n              )}\r\n            </Alert>\r\n\r\n            {/* Actions */}\r\n            <Box display=\"flex\" gap={2} mt={2}>\r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={() => window.history.back()}\r\n                color=\"primary\"\r\n              >\r\n                Retour\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                onClick={() => window.location.href = '/'}\r\n                color=\"primary\"\r\n              >\r\n                Accueil\r\n              </Button>\r\n              {errorDetails.type === 'auth' && (\r\n                <Button \r\n                  variant=\"contained\" \r\n                  onClick={() => window.location.href = fallbackUrl}\r\n                  color=\"secondary\"\r\n                >\r\n                  Se connecter\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  // Affichage du contenu protégé\r\n  console.log('✅ Affichage du contenu protégé');\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default ProtectedRoute;","// src/App.jsx - Version V2 avec nouvelles fonctionnalités\r\nimport React, { useEffect } from 'react';\r\nimport { Routes, Route, Navigate } from 'react-router-dom';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport { frFR } from '@mui/material/locale';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { fr } from 'date-fns/locale';\r\n\r\n// Contexts\r\nimport { AuthProvider } from './contexts/AuthContext';\r\n\r\n// Layouts\r\nimport MainLayout from './layouts/MainLayout';\r\nimport AuthLayout from './layouts/AuthLayout';\r\n\r\n// Pages d'authentification\r\nimport Login from './pages/auth/Login';\r\nimport EnterpriseRegistration from './pages/auth/EnterpriseRegistration';\r\nimport EvaluationInvite from './pages/auth/EvaluationInvite'; \r\n\r\n\r\n// Pages principales existantes\r\nimport Dashboard from './pages/dashboard';\r\nimport QuestionnaireIndex from './pages/dashboard/questionnaires';\r\nimport QuestionnaireDetail from './pages/dashboard/questionnaires/[id]';\r\nimport QuestionnaireAdmin from './pages/dashboard/questionnaires/admin';\r\nimport Applications from './pages/dashboard/applications';\r\nimport Organisations from './pages/dashboard/organisations';\r\nimport CalculateScore from './pages/dashboard/CalculateScore';\r\nimport Forms from './pages/dashboard/forms';\r\nimport FormDetail from './pages/dashboard/forms/FormDetail';\r\nimport FormNew from './pages/dashboard/forms/FormNew';\r\n\r\n// Pages d'analyses - V1 et V2\r\nimport AnalysesInterpretations from './pages/dashboard/AnalysesInterpretations';\r\nimport AnalysesFonctions from './pages/dashboard/AnalysesInterpretationfunctions';\r\nimport AnalysesInterpretationsEntreprises from './pages/dashboard/AnalysesInterpretationsEntreprises';\r\n\r\n// Nouvelles pages V2\r\nimport MaturityEvaluation from './pages/MaturityEvaluation';\r\n\r\n// Pages d'administration\r\nimport Administration from './pages/Administration';\r\nimport MaturityModelAdmin from './pages/MaturityModelAdmin';\r\n\r\n// Composants de protection\r\nimport ProtectedRoute from './components/ProtectedRoute';\r\n\r\n// Utils\r\nimport logger from './utils/logger';\r\n\r\n// Configuration du logger global\r\nif (typeof window !== 'undefined') {\r\n  window.onerror = (message, source, lineno, colno, error) => {\r\n    logger.error('Erreur globale non gérée', {\r\n      message,\r\n      source,\r\n      lineno,\r\n      colno,\r\n      stack: error?.stack\r\n    });\r\n    return false;\r\n  };\r\n\r\n  window.addEventListener('unhandledrejection', (event) => {\r\n    logger.error('Promesse rejetée non gérée', {\r\n      reason: event.reason?.message || String(event.reason),\r\n      stack: event.reason?.stack\r\n    });\r\n  });\r\n\r\n  (window as any).initialLoadTime = performance.now();\r\n}\r\n\r\n// Création du thème\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#0B4E87',\r\n    },\r\n    secondary: {\r\n      main: '#09C4B8',\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: '\"Ubuntu\", sans-serif',\r\n  },\r\n  components: {\r\n    MuiButton: {\r\n      styleOverrides: {\r\n        root: {\r\n          textTransform: 'none',\r\n        },\r\n      },\r\n    },\r\n  },\r\n}, frFR);\r\n\r\n// Composant de route protégée avec permissions\r\nconst PermissionRoute = ({ children, module, action = 'voir', adminOnly = false }) => {\r\n  return (\r\n    <ProtectedRoute \r\n      module={module} \r\n      action={action} \r\n      adminOnly={adminOnly}\r\n      showDetailedError={true}\r\n    >\r\n      {children}\r\n    </ProtectedRoute>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    logger.info('Application V2 initialisée', {\r\n      version: import.meta.env.VITE_APP_VERSION || '2.0.0-dev',\r\n      environment: import.meta.env.MODE,\r\n      features: [\r\n        'enterprise_registration',\r\n        'maturity_evaluation', \r\n        'enterprise_analysis',\r\n        'unified_administration',\r\n        'enhanced_permissions'\r\n      ]\r\n    });\r\n\r\n    const loadTime = performance.now() - ((window as any).initialLoadTime || 0);\r\n    if (loadTime > 0) {\r\n      logger.logPerformance('app-v2-initial-load', loadTime);\r\n    }\r\n\r\n    return () => {\r\n      logger.flush().catch(console.error);\r\n    };\r\n  }, []);\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={fr}>\r\n        <AuthProvider>\r\n          <Routes>\r\n            {/* === ROUTES PUBLIQUES / AUTHENTIFICATION === */}\r\n            <Route path=\"/auth\" element={<AuthLayout />}>\r\n              <Route path=\"login\" element={<Login />} />\r\n              {/* 🆕 NOUVELLE ROUTE V2 - Enregistrement entreprise */}\r\n              <Route path=\"enterprise-registration\" element={<EnterpriseRegistration />} />\r\n              <Route path=\"enterprise-registration/step/:step\" element={<EnterpriseRegistration />} />\r\n              <Route path=\"evaluation-invite/:token\" element={<EvaluationInvite />} />\r\n            </Route>\r\n\r\n            {/* 🆕 NOUVELLES ROUTES V2 - Évaluation de maturité (hors AuthLayout) */}\r\n            <Route \r\n              path=\"/maturity-evaluation/:enterpriseId\" \r\n              element={\r\n                <ProtectedRoute fallbackUrl=\"/auth/login\">\r\n                  <MaturityEvaluation />\r\n                </ProtectedRoute>\r\n              } \r\n            />\r\n\r\n            <Route \r\n              path=\"/maturity-analysis/:evaluationId\" \r\n              element={\r\n                <ProtectedRoute fallbackUrl=\"/auth/login\">\r\n                  <AnalysesInterpretationsEntreprises />\r\n                </ProtectedRoute>\r\n              } \r\n            />\r\n\r\n            {/* === ROUTES PROTÉGÉES AVEC LAYOUT PRINCIPAL === */}\r\n            <Route \r\n              path=\"/\" \r\n              element={\r\n                <ProtectedRoute fallbackUrl=\"/auth/login\">\r\n                  <MainLayout />\r\n                </ProtectedRoute>\r\n              }\r\n            >\r\n              {/* Dashboard principal */}\r\n              <Route \r\n                index \r\n                element={\r\n                  <PermissionRoute module=\"DASHBOARD\">\r\n                    <Dashboard />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* === ANALYSES ET INTERPRÉTATIONS === */}\r\n              \r\n              {/* V1 - Analyses par application (conservé) */}\r\n              <Route \r\n                path=\"analyses-interpretations\" \r\n                element={\r\n                  <PermissionRoute module=\"ANALYSES\">\r\n                    <AnalysesInterpretations />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* V1 - Analyses par fonction (conservé) */}\r\n              <Route \r\n                path=\"analyses-interpretations-functions\" \r\n                element={\r\n                  <PermissionRoute module=\"ANALYSES\">\r\n                    <AnalysesFonctions />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* 🆕 V2 - Analyses par entreprise (nouveau) */}\r\n              <Route \r\n                path=\"analyses-interpretations-entreprises\" \r\n                element={\r\n                  <PermissionRoute module=\"ANALYSES\">\r\n                    <AnalysesInterpretationsEntreprises />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* Calcul de scores */}\r\n              <Route \r\n                path=\"calculate-score\" \r\n                element={\r\n                  <PermissionRoute module=\"ANALYSES\" action=\"editer\">\r\n                    <CalculateScore />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* === QUESTIONNAIRES === */}\r\n              <Route \r\n                path=\"questionnaires\" \r\n                element={\r\n                  <PermissionRoute module=\"QUESTIONNAIRES\">\r\n                    <QuestionnaireIndex />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"questionnaires/:id\" \r\n                element={\r\n                  <PermissionRoute module=\"QUESTIONNAIRES\">\r\n                    <QuestionnaireDetail />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"questionnaires-admin\" \r\n                element={\r\n                  <PermissionRoute module=\"QUESTIONNAIRES\" action=\"administrer\" adminOnly={true}>\r\n                    <QuestionnaireAdmin />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* === FORMULAIRES === */}\r\n              <Route \r\n                path=\"forms\" \r\n                element={\r\n                  <PermissionRoute module=\"FORMULAIRES\">\r\n                    <Forms />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"forms/new\" \r\n                element={\r\n                  <PermissionRoute module=\"FORMULAIRES\" action=\"editer\">\r\n                    <FormNew />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"forms/:id\" \r\n                element={\r\n                  <PermissionRoute module=\"FORMULAIRES\">\r\n                    <FormDetail />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* === APPLICATIONS === */}\r\n              <Route \r\n                path=\"applications\" \r\n                element={\r\n                  <PermissionRoute module=\"APPLICATIONS\">\r\n                    <Applications />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* === ORGANISATIONS / ENTREPRISES === */}\r\n              <Route \r\n                path=\"organisations\" \r\n                element={\r\n                  <PermissionRoute module=\"ENTREPRISES\">\r\n                    <Organisations />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* === ADMINISTRATION === */}\r\n              \r\n              {/* Administration unifiée */}\r\n              <Route \r\n                path=\"administration\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMINISTRATION\" adminOnly={true}>\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* Gestion du modèle de maturité */}\r\n              <Route \r\n                path=\"maturity-model-admin\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMINISTRATION\" action=\"administrer\" adminOnly={true}>\r\n                    <MaturityModelAdmin />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* 🆕 V2 - Routes d'administration spécifiques */}\r\n              <Route \r\n                path=\"administration/users\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMINISTRATION\" action=\"administrer\">\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"administration/enterprises\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMINISTRATION\" action=\"administrer\">\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"administration/roles\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMINISTRATION\" action=\"administrer\" adminOnly={true}>\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              <Route \r\n                path=\"administration/permissions\" \r\n                element={\r\n                  <PermissionRoute module=\"ADMINISTRATION\" action=\"administrer\" adminOnly={true}>\r\n                    <Administration />\r\n                  </PermissionRoute>\r\n                } \r\n              />\r\n\r\n              {/* === ROUTES DE COMPATIBILITÉ === */}\r\n              \r\n              {/* Redirections pour compatibilité V1 */}\r\n              <Route path=\"analyses-functions\" element={<Navigate to=\"/analyses-interpretations-functions\" replace />} />\r\n              <Route path=\"analyses\" element={<Navigate to=\"/analyses-interpretations\" replace />} />\r\n              <Route path=\"admin\" element={<Navigate to=\"/administration\" replace />} />\r\n              \r\n              {/* 🆕 Route par défaut vers analyses entreprises pour les nouveaux utilisateurs */}\r\n              <Route path=\"welcome\" element={<Navigate to=\"/analyses-interpretations-entreprises\" replace />} />\r\n            </Route>\r\n\r\n            {/* === ROUTES DE FALLBACK === */}\r\n            \r\n            {/* Redirection racine intelligente */}\r\n            <Route \r\n              path=\"/\" \r\n              element={\r\n                <ProtectedRoute fallbackUrl=\"/auth/login\">\r\n                  <Navigate to=\"/dashboard\" replace />\r\n                </ProtectedRoute>\r\n              } \r\n            />\r\n\r\n            {/* Routes d'erreur et fallback */}\r\n            <Route path=\"/unauthorized\" element={\r\n              <div style={{ \r\n                display: 'flex', \r\n                justifyContent: 'center', \r\n                alignItems: 'center', \r\n                minHeight: '100vh',\r\n                flexDirection: 'column',\r\n                gap: '20px'\r\n              }}>\r\n                <h1>🚫 Accès non autorisé</h1>\r\n                <p>Vous n'avez pas les permissions nécessaires pour accéder à cette page.</p>\r\n                <button onClick={() => window.history.back()}>\r\n                  Retour\r\n                </button>\r\n              </div>\r\n            } />\r\n\r\n            <Route path=\"/maintenance\" element={\r\n              <div style={{ \r\n                display: 'flex', \r\n                justifyContent: 'center', \r\n                alignItems: 'center', \r\n                minHeight: '100vh',\r\n                flexDirection: 'column',\r\n                gap: '20px'\r\n              }}>\r\n                <h1>🔧 Maintenance en cours</h1>\r\n                <p>La plateforme est temporairement indisponible pour maintenance.</p>\r\n                <p>Veuillez réessayer dans quelques minutes.</p>\r\n              </div>\r\n            } />\r\n\r\n            {/* Catch-all - 404 */}\r\n            <Route path=\"*\" element={\r\n              <div style={{ \r\n                display: 'flex', \r\n                justifyContent: 'center', \r\n                alignItems: 'center', \r\n                minHeight: '100vh',\r\n                flexDirection: 'column',\r\n                gap: '20px'\r\n              }}>\r\n                <h1>📄 Page non trouvée</h1>\r\n                <p>La page que vous recherchez n'existe pas.</p>\r\n                <div>\r\n                  <button onClick={() => window.location.href = '/'} style={{ marginRight: '10px' }}>\r\n                    Accueil\r\n                  </button>\r\n                  <button onClick={() => window.history.back()}>\r\n                    Retour\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            } />\r\n          </Routes>\r\n        </AuthProvider>\r\n      </LocalizationProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;","// src/components/common/Toast.tsx\r\nimport React, { useState, useEffect } from 'react';\r\n\r\ninterface ToastProps {\r\n  message: string;\r\n  type: 'success' | 'error' | 'info' | 'warning';\r\n  duration?: number;\r\n  onClose?: () => void;\r\n}\r\n\r\nconst Toast: React.FC<ToastProps> = ({ \r\n  message, \r\n  type, \r\n  duration = 3000, \r\n  onClose \r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setIsVisible(false);\r\n      if (onClose) onClose();\r\n    }, duration);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [duration, onClose]);\r\n\r\n  if (!isVisible) return null;\r\n\r\n  const bgColorClass = {\r\n    success: 'bg-success-500',\r\n    error: 'bg-danger-500',\r\n    info: 'bg-primary-500',\r\n    warning: 'bg-warning-500'\r\n  }[type];\r\n\r\n  const iconMap = {\r\n    success: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n      </svg>\r\n    ),\r\n    error: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n      </svg>\r\n    ),\r\n    info: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n      </svg>\r\n    ),\r\n    warning: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"></path>\r\n      </svg>\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 right-4 z-50 flex items-center p-4 mb-4 rounded-lg shadow-lg text-white animate-slideIn-right min-w-64 max-w-md\">\r\n      <div className={`flex items-center justify-center rounded-full p-2 ${bgColorClass}`}>\r\n        {iconMap[type]}\r\n      </div>\r\n      <div className=\"ml-3 text-sm font-medium\">\r\n        {message}\r\n      </div>\r\n      <button \r\n        onClick={() => {\r\n          setIsVisible(false);\r\n          if (onClose) onClose();\r\n        }}\r\n        className=\"ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 inline-flex h-8 w-8 text-white hover:bg-white hover:bg-opacity-20\"\r\n      >\r\n        <span className=\"sr-only\">Close</span>\r\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toast;","// src/contexts/ToastContext.tsx\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react';\r\nimport Toast from '../components/common/Toast';\r\n\r\ntype ToastType = 'success' | 'error' | 'info' | 'warning';\r\n\r\ninterface ToastMessage {\r\n  id: string;\r\n  message: string;\r\n  type: ToastType;\r\n}\r\n\r\ninterface ToastContextProps {\r\n  toasts: ToastMessage[];\r\n  addToast: (message: string, type: ToastType) => void;\r\n  removeToast: (id: string) => void;\r\n}\r\n\r\nconst ToastContext = createContext<ToastContextProps | undefined>(undefined);\r\n\r\nexport const useToast = () => {\r\n  const context = useContext(ToastContext);\r\n  if (!context) {\r\n    throw new Error('useToast must be used within a ToastProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ToastProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {\r\n  const [toasts, setToasts] = useState<ToastMessage[]>([]);\r\n\r\n  const addToast = (message: string, type: ToastType) => {\r\n    const id = Math.random().toString(36).substring(2, 9);\r\n    setToasts((prevToasts) => [...prevToasts, { id, message, type }]);\r\n  };\r\n\r\n  const removeToast = (id: string) => {\r\n    setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));\r\n  };\r\n\r\n  return (\r\n    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>\r\n      {children}\r\n      <div className=\"toast-container\">\r\n        {toasts.map((toast) => (\r\n          <Toast\r\n            key={toast.id}\r\n            message={toast.message}\r\n            type={toast.type}\r\n            onClose={() => removeToast(toast.id)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </ToastContext.Provider>\r\n  );\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport { ToastProvider } from './contexts/ToastContext';\r\nimport './index.css';\r\n\r\n\r\n// Fonction pour masquer le splash screen\r\nconst hideSplashScreen = () => {\r\n  const splashScreen = document.getElementById('splash-screen');\r\n  if (splashScreen) {\r\n    // D'abord on réduit l'opacité\r\n    splashScreen.style.opacity = '0';\r\n    \r\n    // Puis on le retire complètement après la transition\r\n    setTimeout(() => {\r\n      splashScreen.style.display = 'none';\r\n    }, 500); // Correspond à la durée de transition dans le CSS\r\n  }\r\n};\r\n\r\n// Composant wrapper avec Router et futures flags\r\nconst AppWithRouter = () => (\r\n  <BrowserRouter\r\n    future={{\r\n      v7_startTransition: true,\r\n      v7_relativeSplatPath: true,\r\n    }}\r\n  >\r\n    <ToastProvider>\r\n      <App />\r\n    </ToastProvider>\r\n  </BrowserRouter>\r\n);\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n      <ToastProvider>\r\n      <AppWithRouter />\r\n      </ToastProvider>\r\n    </React.StrictMode>\r\n);\r\n\r\nsetTimeout(hideSplashScreen, 1000);"],"names":["defaultConfig","LOG_LEVEL_ORDER","Logger","customConfig","__publicField","sessionId","event","_a","_b","force","logsToSend","metadata","response","error","level","message","details","logEntry","newConfig","action","path","operation","durationMs","endpoint","method","status","logger","getAPIBaseURL","API_URL","API_PREFIX","apiClient","axios","config","token","logData","dataString","errorMessage","errorStack","duration","calculateRequestDuration","url","_c","errorData","_d","_e","_f","_g","_h","_i","_j","normalizePath","normalizedUrl","withPerformanceLogging","extraDetails","startTime","result","testConnection","api","data","formData","ALL_APP_MODULES","AuthContext","createContext","useAuth","useContext","AuthProvider","children","currentUser","setCurrentUser","useState","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","setError","permissions","setPermissions","hasGlobalAccess","setHasGlobalAccess","isUserAdmin","useCallback","user","role","isUserSuperAdmin","generateFullAdminPermissions","module","mainPermission","sousModule","getDefaultPermissionsForRole","nomRole","niveauAcces","basePermissions","roleUpper","p","checkAuthStatus","permissionsResponse","err","login","email","password","logout","register","userData","forgotPassword","updateProfile","isAdmin","isSuperAdmin","hasPermission","permission","sp","canAccessRoute","route","cleanRoute","routeToModuleMap","moduleForRoute","routePath","moduleName","canAccessAdminModule","subModule","getAccessibleModules","getAdminSubModules","adminModule","adminPermission","refreshPermissions","getAllAppModules","useEffect","value","jsxDEV","this","drawerWidth","MainLayout","theme","useTheme","isMobile","useMediaQuery","open","setOpen","adminMenuOpen","setAdminMenuOpen","analysesMenuOpen","setAnalysesMenuOpen","navigate","useNavigate","location","useLocation","menuItems","DashboardIcon","AnalyticsIcon","BusinessIcon","TimelineIcon","AssignmentIcon","QuestionIcon","ComputerIcon","OrganizationIcon","Fragment","AdminIcon","PeopleIcon","SecurityIcon","MaturityIcon","SettingsIcon","handleDrawerToggle","handleNavigate","handleAnalysesMenuToggle","handleAdminMenuToggle","handleLogout","isMenuItemAccessible","item","isMenuItemActive","isAnalysesMenuActive","isAdminMenuActive","renderMenuItem","isSubItem","Divider","isActive","hasSubItems","ListItem","ListItemButton","ListItemIcon","ListItemText","Box","Typography","Chip","ExpandLess","ExpandMore","renderAnalysesSubItems","analysesItem","Collapse","List","subItem","renderAdminSubItems","adminItem","React","CssBaseline","AppBar","Toolbar","IconButton","MenuIcon","Badge","LogoutIcon","Drawer","ChevronLeftIcon","Outlet","AuthLayout","isRegistrationPage","isEvaluationPage","getContainerWidth","Container","Link","Paper","Login","setFormData","loading","setLoading","from","handleChange","name","prev","handleSubmit","isFormValid","Alert","TextField","Button","CircularProgress","LoginIcon","RouterLink","Card","CardContent","AssessmentIcon","steps","Business","Person","PersonAdd","Analytics","secteurs","taillesEntreprise","EnterpriseRegistration","activeStep","setActiveStep","success","setSuccess","showPassword","setShowPassword","validationErrors","setValidationErrors","teamMembers","setTeamMembers","newMember","setNewMember","showAddMemberDialog","setShowAddMemberDialog","finalResults","setFinalResults","validateEmail","validateEffectifTaille","effectif","taille","tailleConfig","t","effectifNum","newErrors","getTailleFromEffectif","field","suggestedTaille","addTeamMember","member","removeTeamMember","memberId","validateCurrentStep","isValid","handleNext","createEnterprise","generateEvaluationLinks","handleBack","enterpriseResponse","evaluationLinks","evaluationId","managerToken","managerInviteResponse","memberToken","memberInviteResponse","renderStepContent","Grid","Warning","InputAdornment","FormControl","InputLabel","Select","secteur","MenuItem","FormHelperText","Email","Phone","People","TrendingUp","LocationOn","Language","VisibilityOff","Visibility","LinearProgress","Add","index","ListItemSecondaryAction","Delete","Dialog","DialogTitle","DialogContent","e","FormLabel","RadioGroup","FormControlLabel","Radio","DialogActions","link","Assignment","Tooltip","Share","Launch","CheckCircle","progressPercentage","Stepper","step","Step","StepLabel","ArrowBack","ArrowForward","EvaluationInvite","useParams","setStep","inviteDetails","setInviteDetails","setPassword","confirmPassword","setConfirmPassword","showConfirmPassword","setShowConfirmPassword","loginPassword","setLoginPassword","showLoginPassword","setShowLoginPassword","Lock","Quiz","validateInvitation","inviteData","handleCreatePassword","validatePassword","pwd","validatePasswordStrength","score","handleLogin","Error","AccountCircle","Work","getCurrentStep","stepInfo","COLORS","Dashboard","refreshing","setRefreshing","successMessage","setSuccessMessage","entreprises","setEntreprises","setSecteurs","fonctions","setFonctions","applications","setApplications","formulaires","setFormulaires","searchTerm","setSearchTerm","hebergementFilter","setHebergementFilter","technologieFilter","setTechnologieFilter","tabValue","setTabValue","hebergementOptions","setHebergementOptions","technologieOptions","setTechnologieOptions","fetchDashboardData","isRefresh","entreprisesResponse","fonctionsResponse","applicationsResponse","formulairesResponse","entreprisesData","normalizeApiResponse","fonctionsData","applicationsData","formulairesData","secteursData","calculerStatistiquesSecteur","applicationsAvecScore","app","hebergements","technologies","normalizedFormulaires","form","dataType","getScoreWithFallback","defaultValue","secteursMap","acc","entreprise","nom","scoreTotal","count","a","b","formatScore","scoreActuel","scoreMaximum","actuel","maximum","calculateScorePercentage","countFormulairesByFunction","countByFunction","fonctionsArray","fonction","handleRefresh","CustomTooltip","active","payload","label","getScoreColor","formatDate","dateString","RefreshIcon","Avatar","DomainIcon","DescriptionIcon","ResponsiveContainer","BarChart","CartesianGrid","XAxis","YAxis","Legend","Bar","entry","Cell","PieChart","Pie","SearchIcon","f","scorePercent","QuestionnairesIndex","questionnaires","setQuestionnaires","questionnaireStats","setQuestionnaireStats","fetchQuestionnaires","questionnaireData","normalizedQuestionnaires","q","statsResponse","statsData","statsObj","stat","handleViewQuestionnaire","questionnaire","handleGoToAdmin","getStats","questionnaireId","statType","AddIcon","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","ExpandMoreIcon","QuestionnaireDetail","id","setQuestionnaire","questions","setQuestions","stats","setStats","fetchQuestionnaireData","questionnaireResponse","questionsResponse","questionsData","questionsError","statsError","handleBackToList","sortedQuestions","ArrowBackIcon","EditIcon","question","Accordion","AccordionSummary","AccordionDetails","TabPanel","props","other","initialQuestionnaireFormValues","initialQuestionFormValues","QuestionnaireAdmin","searchParams","useSearchParams","selectedQuestionnaire","setSelectedQuestionnaire","thematiques","setThematiques","selectedThematiques","setSelectedThematiques","loadingFonctions","setLoadingFonctions","loadingThematiques","setLoadingThematiques","questionnaireFormValues","setQuestionnaireFormValues","questionFormValues","setQuestionFormValues","openQuestionnaireDialog","setOpenQuestionnaireDialog","openQuestionDialog","setOpenQuestionDialog","openDeleteDialog","setOpenDeleteDialog","openDeleteQuestionDialog","setOpenDeleteQuestionDialog","currentQuestion","setCurrentQuestion","snackbar","setSnackbar","dialogMode","setDialogMode","questionDialogMode","setQuestionDialogMode","fetchFonctions","fetchThematiques","fetchQuestionnaireById","showSnackbar","handleOpenCreateQuestionnaireDialog","handleOpenEditQuestionnaireDialog","themesResponse","themeIds","handleCloseQuestionnaireDialog","handleSubmitQuestionnaire","newId","handleOpenDeleteDialog","handleCloseDeleteDialog","handleDeleteQuestionnaire","handleSelectQuestionnaire","handleTabChange","newValue","severity","handleCloseSnackbar","Tabs","Tab","DeleteIcon","CardHeader","thematique","themeQuestions","selected","themes","ListSubheader","Checkbox","Snackbar","DatePickerWrapper","onChange","minDate","maxDate","disabled","fullWidth","required","helperText","textFieldProps","LocalizationProvider","AdapterDateFns","fr","DatePicker","initialFormValues","Applications","openDialog","setOpenDialog","currentApplication","setCurrentApplication","formValues","setFormValues","deleteConfirmOpen","setDeleteConfirmOpen","selectedDate","setSelectedDate","fetchApplications","handleOpenCreateDialog","handleOpenEditDialog","application","handleCloseDialog","handleFormChange","handleDateChange","date","formattedDate","handleOpenDeleteConfirm","handleCloseDeleteConfirm","handleDelete","handleCalculateScore","Organisations","organisations","setOrganisations","analyses","setAnalyses","scoresMoyens","setScoresMoyens","selectedOrganisation","setSelectedOrganisation","fetchOrganisations","fetchAnalysesOrganisation","orgs","acteur","organisationsData","org","appCount","sum","analyse","scoreMoyen","orgName","analysesResponse","scoresMoyensResponse","handleOrganisationChange","formatForRadarChart","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","Radar","niveau","percentage","CalculateScore","calculating","setCalculating","setApplication","appResponse","formResponse","formsData","resolve","canCalculateScore","CalculateIcon","Forms","currentTab","setCurrentTab","loadingActeurs","setLoadingActeurs","acteursError","setActeursError","evaluations","setEvaluations","acteurs","setActeurs","statusFilter","setStatusFilter","fonctionFilter","setFonctionFilter","entrepriseFilter","setEntrepriseFilter","order","setOrder","orderBy","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","evalSearchTerm","setEvalSearchTerm","evalStatusFilter","setEvalStatusFilter","evalEntrepriseFilter","setEvalEntrepriseFilter","evalPage","setEvalPage","evalRowsPerPage","setEvalRowsPerPage","createEvalDialog","setCreateEvalDialog","currentStep","setCurrentStep","selectedEntreprise","setSelectedEntreprise","selectedActeurs","setSelectedActeurs","creatingEvaluation","setCreatingEvaluation","fonctionsMaturiteConfig","StorageIcon","CodeIcon","LightbulbIcon","fetchFormulaires","fetchEvaluations","normalizedEvaluations","evaluation","getNiveauFromScore","fetchEntreprises","entreprisesActives","fetchActeurs","entrepriseId","acteursData","acteursValides","fallbackResponse","fallbackData","allActeursResponse","filteredActeurs","refreshActeurs","filteredFormulaires","matchesSearch","matchesStatus","matchesFonction","matchesEntreprise","filteredEvaluations","handleCreateEvaluation","handleEntrepriseSelection","entrepriseNom","validateActeursEndpoint","testEntrepriseId","diagnosis","handleActeurToggle","acteurId","results","r","handleViewEvaluation","formulaire","ViewIcon","TablePagination","newPage","CheckCircleIcon","WarningIcon","key","LinkIcon","StepContent","FormGroup","PersonIcon","SendIcon","FormDetail","saving","setSaving","setFormulaire","reponses","setReponses","openConfirmDialog","setOpenConfirmDialog","formulaireResponse","formulaireData","normalizedFormulaire","questionsPromises","normalizedQuestions","reponsesResponse","normalizedReponses","isFormComplete","useMemo","progression","commentCount","criticalQuestions","questionsByThematique","grouped","findReponse","questionId","updateReponse","existingReponseIndex","updatedReponses","newReponse","updateCommentaire","commentaire","handleConfirmAction","handleCloseConfirmDialog","saveFormulaire","newStatus","savePromises","reponse","successfulSaves","failedSaves","skippedSaves","errorDetails","updatedFormulaire","scoreError","getStatusInfo","statusInfo","Breadcrumbs","HomeIcon","CommentIcon","FunctionIcon","InfoIcon","isHighPriority","isCritical","SaveIcon","CheckIcon","DialogContentText","FormNew","submitting","setSubmitting","validation","setValidation","setFilteredActeurs","acteursResponse","questionnairesResponse","questionnairesData","filtered","handleQuestionnaireChange","newValidation","validateForm","prevActiveStep","DEFAULT_APPLICATION_ID","creationPromises","id_questionnaire","dataToSubmit","successes","failures","formId","getStepContent","ent","quest","renderSummary","selectedQuestionnaires","normalizeAnalyse","score_global","getNiveauColor","StatCard","title","variant","size","subtitle","trend","getVariantClasses","getSizeClasses","variantClasses","sizeClasses","getNiveauLabel","EntrepriseScoresPanel","setEntreprise","historique","setHistorique","updatingScore","setUpdatingScore","fetchEntrepriseData","entrepriseData","historiqueResponse","recalculateScore","prepareChartData","scoreGlobal","niveauLabel","niveauColor","chartData","LineChart","RechartsTooltip","Line","AnalysesInterpretationsUI","selectedApplication","selectedAnalyse","interpretation","filteredHistorique","selectedThematique","newAnalyseData","interpretationsSummary","filters","showFilters","uniqueThematiques","handleApplicationChange","handleEntrepriseChange","handleAnalyseChange","handleThematiqueChange","handleOpenNewAnalyseDialog","addThematique","updateThematique","removeThematique","createNewAnalyse","calculateNewAnalyse","getScoreGlobal","prepareHistoriqueData","handleChangePage","handleChangeRowsPerPage","handleRequestSort","getFilteredData","getUniqueValues","setFilters","setShowFilters","fetchAllInterpretations","fetchAnalysesByApplication","fetchAnalysesByEntreprise","fetchHistoriqueByEntreprise","viewMode","setViewMode","toggleViewMode","appsOfEntreprise","CustomRadarTooltip","ToggleButtonGroup","newMode","ToggleButton","AppsTwoToneIcon","Autocomplete","option","params","FilterListIcon","TableSortLabel","entrepriseName","to","AnalysesInterpretations","setSelectedApplication","setSelectedAnalyse","setInterpretation","setSelectedThematique","setNewAnalyseData","setInterpretationsSummary","interpretationsResponse","appEntrepriseMapResponse","interpretationsData","appToEntrepriseMap","mapping","appId","appsResponse","entrepriseResponse","uniqueThemes","normalizedAnalyses","latestAnalyse","fetchInterpretation","fetchHistorique","analyseId","formattedInterpretation","filteredInterpretations","normalizedAnalyse","updatedThematiques","_","i","property","filteredData","row","searchLower","appNameMatch","niveauMatch","orgMatch","valueA","valueB","strA","strB","benchmarkCache","numScore","ensureValidScore","parsed","fetchBenchmarkData","cacheKey","requestBody","benchmarkData","generateMockBenchmarkData","deriveGlobalLevelAndRecommendations","AnalysesFonctions","selectedFonction","setSelectedFonction","entrepriseDetails","setEntrepriseDetails","fonctionDetails","setFonctionDetails","benchmarkDataLLM","setBenchmarkDataLLM","loadingBenchmark","setLoadingBenchmark","radarData","setRadarData","loadEntreprises","loadEntrepriseDetails","convertToRadarData","getBenchmarkData","thematiqueNames","getBenchmarkScore","themeName","benchmarkThematiques","benchmark","fonctionName","newRadarData","benchmarkScore","formattedEntreprises","derivedData","handleFonctionChange","fonctionId","rec","recIndex","getNiveauColorByScore","AnalysesInterpretationsEntreprises","loadingDetails","setLoadingDetails","mainTabValue","setMainTabValue","functionTabValue","setFunctionTabValue","getFunctionConfig","Security","Computer","Storage","Code","Lightbulb","Assessment","entreprisesAvecEvaluation","detailsData","loadBenchmarkForFunction","handleMainTabChange","handleFunctionSelect","handleRefreshData","Refresh","Timeline","functionsConfig","scaleOptions","useDebounce","delay","debouncedValue","setDebouncedValue","handler","MaturityEvaluation","enterpriseId","evaluationData","setEvaluationData","questionsByFunction","setQuestionsByFunction","currentFunction","setCurrentFunction","responses","setResponses","showConfirmDialog","setShowConfirmDialog","lastSaveTime","setLastSaveTime","autoSaveStatus","setAutoSaveStatus","unsavedChanges","setUnsavedChanges","snackbarMessage","setSnackbarMessage","snackbarOpen","setSnackbarOpen","functionKeys","debouncedResponses","initializeEvaluation","navigationState","evaluationResponse","fonctionsGlobales","func","saveResponses","handleBeforeUnload","handleResponseChange","newResponse","calculateFunctionScores","scores","functionKey","functionQuestions","functionResponses","totalQuestions","answeredQuestions","progress","averageScore","showMessage","responsesArray","submitEvaluation","formattedScores","calculateOverallProgress","isEvaluationComplete","handleConfirmSubmit","handleConfirmDialogSubmit","handleSnackbarClose","functionScores","overallProgress","currentFunctionQuestions","Timer","CloudUpload","CloudDone","Save","HeroIcon","className","Administration","isConsultant","getScope","userRights","scope","getInitialTab","savedTab","roles","setRoles","modules","setModules","rolePermissions","setRolePermissions","openActeurDialog","setOpenActeurDialog","openRoleDialog","setOpenRoleDialog","openEntrepriseDialog","setOpenEntrepriseDialog","editingPermissions","setEditingPermissions","tempRolePermissions","setTempRolePermissions","acteurFormValues","setActeurFormValues","roleFormValues","setRoleFormValues","entrepriseFormValues","setEntrepriseFormValues","selectedItem","setSelectedItem","selectedRole","setSelectedRole","loadInitialData","loadActeurs","loadRoles","loadModules","loadRolePermissions","roleId","handleCreateActeur","handleEditActeur","handleCreateRole","handleEditRole","handleCreateEntreprise","handleEditEntreprise","handleEditPermissions","handleSavePermissions","permissionsData","perm","handleCancelPermissions","updatePermission","moduleId","handleSubmitActeur","apiData","handleSubmitRole","handleSubmitEntreprise","handleDeleteItem","getRoleLabel","nom_role","ShieldExclamationIcon","ShieldCheckIcon","UserGroupIcon","UsersIcon","UserIcon","canManageUser","getEntrepriseName","getAvailableTabs","BuildingOfficeIcon","Cog6ToothIcon","EyeIcon","tab","PlusIcon","roleInfo","canManage","PencilIcon","TrashIcon","XMarkIcon","Switch","MaturityModelAdmin","subTabValue","setSubTabValue","setFonctionsGlobales","selectedFonctionGlobale","setSelectedFonctionGlobale","loadingGlobales","setLoadingGlobales","dialogOpen","setDialogOpen","dialogType","setDialogType","editingItem","setEditingItem","itemToDelete","setItemToDelete","availableIcons","TrendingUpIcon","FunctionsIcon","loadFonctions","loadFonctionsGlobales","loadQuestionsForThematique","resetForm","loadFonctionDetails","id_thematique","type","handleAddQuestion","handleSave","exportModel","dataStr","dataUri","exportFileDefaultName","linkElement","confirmDelete","loadFonctionGlobaleDetails","handleSaveGlobale","handleDeleteGlobale","renderModelStandard","CategoryIcon","DownloadIcon","v","them","renderFonctionsGlobales","icon","SchoolIcon","LayersIcon","renderDetailsFonctionGlobale","recommandation","renderDialogContent","getDialogTitle","ProtectedRoute","adminOnly","fallbackUrl","showDetailedError","permissionLoading","setPermissionLoading","hasAccess","setHasAccess","setErrorDetails","isMounted","hasModulePermission","routeAccess","LockIcon","AlertTitle","Navigate","source","lineno","colno","createTheme","frFR","PermissionRoute","App","loadTime","ThemeProvider","Routes","Route","QuestionnaireIndex","Toast","onClose","isVisible","setIsVisible","timer","bgColorClass","iconMap","ToastContext","ToastProvider","toasts","setToasts","addToast","prevToasts","removeToast","toast","hideSplashScreen","splashScreen","AppWithRouter","BrowserRouter","ReactDOM"],"mappings":"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"}