{"version":3,"file":"index-BoeyOeyK.js","sources":["../../src/utils/logger.ts","../../src/services/api.ts","../../src/contexts/AuthContext.tsx","../../src/components/common/Toast.tsx","../../src/contexts/ToastContext.tsx","../../src/layouts/MainLayout.tsx","../../src/layouts/AuthLayout.tsx","../../src/pages/auth/Login.tsx","../../src/pages/dashboard/index.tsx","../../src/pages/dashboard/questionnaires/index.tsx","../../src/pages/dashboard/questionnaires/[id].tsx","../../src/pages/dashboard/questionnaires/admin.tsx","../../src/components/common/DataPickerWrapper.tsx","../../src/pages/dashboard/applications/index.tsx","../../src/pages/dashboard/organisations/index.tsx","../../src/utils/AnalyseUtils.ts","../../src/components/dashboard/StatsCard.tsx","../../src/components/dashboard/EntrepriseScoresPanel.jsx","../../src/components/dashboard/AnalysesInterpretationsUI.tsx","../../src/pages/dashboard/AnalysesInterpretations.tsx","../../src/pages/dashboard/AnalysesInterpretationfunctions.tsx","../../src/pages/dashboard/CalculateScore.tsx","../../src/pages/dashboard/forms/index.tsx","../../src/pages/dashboard/forms/FormDetail.tsx","../../src/pages/dashboard/forms/FormNew.tsx","../../src/pages/Administration/index.tsx","../../src/pages/MaturityModelAdmin/index.tsx","../../src/components/ProtectedRoute.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["// src/utils/logger.ts\r\n\r\n/**\r\n * Module de logging pour le frontend\r\n * Permet d'envoyer les logs au backend et de les stocker localement\r\n */\r\n\r\n// Types pour le logger\r\nexport type LogLevel = 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';\r\n\r\nexport interface LogEntry {\r\n  level: LogLevel;\r\n  message: string;\r\n  timestamp: string;\r\n  details?: Record<string, any>;\r\n}\r\n\r\nexport interface LogMetadata {\r\n  userId?: string;\r\n  sessionId: string;\r\n  userAgent: string;\r\n  language: string;\r\n  screenSize: string;\r\n  batchId: string;\r\n  [key: string]: any;\r\n}\r\n\r\n// Configuration du logger\r\ninterface LoggerConfig {\r\n  minLevel: LogLevel;\r\n  sendToServer: boolean;\r\n  serverUrl: string;\r\n  batchSize: number;\r\n  sendInterval: number;\r\n  includeUserInfo: boolean;\r\n}\r\n\r\n// Configuration par défaut\r\nconst defaultConfig: LoggerConfig = {\r\n  minLevel: import.meta.env.PROD ? 'INFO' : 'DEBUG',\r\n  sendToServer: import.meta.env.PROD,\r\n  serverUrl: '/api/logs',\r\n  batchSize: 10,\r\n  sendInterval: 30000, // 30s\r\n  includeUserInfo: true,\r\n};\r\n\r\n// Ordre des niveaux de logs pour faciliter les comparaisons\r\nconst LOG_LEVEL_ORDER: Record<LogLevel, number> = {\r\n  'DEBUG': 0,\r\n  'INFO': 1,\r\n  'WARN': 2,\r\n  'ERROR': 3,\r\n};\r\n\r\n// Classe principale du logger\r\nclass Logger {\r\n  private config: LoggerConfig;\r\n  private logBuffer: LogEntry[] = [];\r\n  private sendTimer: number | null = null;\r\n  private sessionId: string;\r\n  \r\n  constructor(customConfig: Partial<LoggerConfig> = {}) {\r\n    // Fusionner la configuration personnalisée avec la configuration par défaut\r\n    this.config = { ...defaultConfig, ...customConfig };\r\n    \r\n    // Initialiser ou récupérer l'ID de session\r\n    this.sessionId = this.getOrCreateSessionId();\r\n    \r\n    // Démarrer le timer d'envoi si nécessaire\r\n    if (this.config.sendToServer) {\r\n      this.startSendTimer();\r\n      this.setupUnloadHandler();\r\n    }\r\n    \r\n    // Capturer les erreurs non gérées\r\n    this.setupErrorCapture();\r\n  }\r\n  \r\n  /**\r\n   * Obtient ou crée un ID de session\r\n   */\r\n  private getOrCreateSessionId(): string {\r\n    let sessionId = sessionStorage.getItem('logSessionId');\r\n    if (!sessionId) {\r\n      sessionId = Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n      sessionStorage.setItem('logSessionId', sessionId);\r\n    }\r\n    return sessionId;\r\n  }\r\n  \r\n  /**\r\n   * Configure le timer d'envoi des logs\r\n   */\r\n  private startSendTimer(): void {\r\n    if (this.sendTimer) {\r\n      window.clearInterval(this.sendTimer);\r\n    }\r\n    \r\n    this.sendTimer = window.setInterval(() => {\r\n      this.sendLogs();\r\n    }, this.config.sendInterval);\r\n  }\r\n  \r\n  /**\r\n   * Capture les erreurs non gérées\r\n   */\r\n  private setupErrorCapture(): void {\r\n    window.addEventListener('error', (event) => {\r\n      this.error('Erreur non gérée', {\r\n        message: event.message,\r\n        filename: event.filename,\r\n        lineno: event.lineno,\r\n        colno: event.colno,\r\n        stack: event.error?.stack,\r\n      });\r\n      return false;\r\n    });\r\n    \r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.error('Promesse rejetée non gérée', {\r\n        reason: event.reason?.message || String(event.reason),\r\n        stack: event.reason?.stack,\r\n      });\r\n      return false;\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Envoie les logs au serveur\r\n   */\r\n  private async sendLogs(force: boolean = false): Promise<void> {\r\n    if (!this.config.sendToServer || (this.logBuffer.length < this.config.batchSize && !force)) {\r\n      return;\r\n    }\r\n    \r\n    if (this.logBuffer.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    const logsToSend = [...this.logBuffer];\r\n    this.logBuffer = [];\r\n    \r\n    try {\r\n      const metadata: LogMetadata = {\r\n        sessionId: this.sessionId,\r\n        batchId: Date.now().toString(36),\r\n        userAgent: navigator.userAgent,\r\n        language: navigator.language,\r\n        screenSize: `${window.innerWidth}x${window.innerHeight}`,\r\n        userId: localStorage.getItem('userId') || undefined,\r\n        url: window.location.href,\r\n        referrer: document.referrer,\r\n      };\r\n      \r\n      const response = await fetch(this.config.serverUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          logs: logsToSend,\r\n          metadata,\r\n        }),\r\n        // Timeout\r\n        signal: AbortSignal.timeout ? AbortSignal.timeout(5000) : undefined,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        console.error(`Échec d'envoi des logs: ${response.status}`);\r\n        // Remettre les logs dans le buffer\r\n        this.logBuffer = [...logsToSend, ...this.logBuffer];\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'envoi des logs:', error);\r\n      // Remettre les logs dans le buffer\r\n      this.logBuffer = [...logsToSend, ...this.logBuffer];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Configure le gestionnaire d'événement unload\r\n   */\r\n  private setupUnloadHandler(): void {\r\n    window.addEventListener('beforeunload', () => {\r\n      this.sendLogs(true);\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Ajoute une entrée de log\r\n   */\r\n  private addLog(level: LogLevel, message: string, details: Record<string, any> = {}): void {\r\n    // Vérifier le niveau de log\r\n    if (LOG_LEVEL_ORDER[level] < LOG_LEVEL_ORDER[this.config.minLevel]) {\r\n      return;\r\n    }\r\n    \r\n    // Créer l'entrée de log\r\n    const logEntry: LogEntry = {\r\n      level,\r\n      message,\r\n      timestamp: new Date().toISOString(),\r\n      details: { ...details },\r\n    };\r\n    \r\n    // Ajouter l'entrée au buffer\r\n    this.logBuffer.push(logEntry);\r\n    \r\n    // Afficher dans la console\r\n    switch (level) {\r\n      case 'DEBUG':\r\n        console.debug(`[${level}] ${message}`, details);\r\n        break;\r\n      case 'INFO':\r\n        console.info(`[${level}] ${message}`, details);\r\n        break;\r\n      case 'WARN':\r\n        console.warn(`[${level}] ${message}`, details);\r\n        break;\r\n      case 'ERROR':\r\n        console.error(`[${level}] ${message}`, details);\r\n        // Envoyer immédiatement les erreurs\r\n        this.sendLogs(true);\r\n        break;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * API publique pour les différents niveaux de logs\r\n   */\r\n  public debug(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('DEBUG', message, details);\r\n  }\r\n  \r\n  public info(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('INFO', message, details);\r\n  }\r\n  \r\n  public warn(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('WARN', message, details);\r\n  }\r\n  \r\n  public error(message: string, details: Record<string, any> = {}): void {\r\n    this.addLog('ERROR', message, details);\r\n  }\r\n  \r\n  /**\r\n   * Force l'envoi des logs au serveur\r\n   */\r\n  public flush(): Promise<void> {\r\n    return this.sendLogs(true);\r\n  }\r\n  \r\n  /**\r\n   * Met à jour la configuration\r\n   */\r\n  public setConfig(newConfig: Partial<LoggerConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    \r\n    // Mettre à jour le timer si nécessaire\r\n    if (this.config.sendToServer) {\r\n      this.startSendTimer();\r\n    } else if (this.sendTimer) {\r\n      window.clearInterval(this.sendTimer);\r\n      this.sendTimer = null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Log d'un événement utilisateur\r\n   */\r\n  public logUserAction(action: string, details: Record<string, any> = {}): void {\r\n    this.info(`Action utilisateur: ${action}`, {\r\n      type: 'user_action',\r\n      action,\r\n      ...details\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Log d'une navigation\r\n   */\r\n  public logNavigation(path: string, details: Record<string, any> = {}): void {\r\n    this.info(`Navigation: ${path}`, {\r\n      type: 'navigation',\r\n      path,\r\n      ...details\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Log de performance\r\n   */\r\n  public logPerformance(operation: string, durationMs: number, details: Record<string, any> = {}): void {\r\n    this.info(`Performance: ${operation} (${durationMs}ms)`, {\r\n      type: 'performance',\r\n      operation,\r\n      durationMs,\r\n      ...details\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Log d'appel API\r\n   */\r\n  public logApiCall(endpoint: string, method: string, status: number, durationMs: number, details: Record<string, any> = {}): void {\r\n    const level = status >= 400 ? 'ERROR' : 'INFO';\r\n    \r\n    this.addLog(level, `API ${method} ${endpoint}: ${status} (${durationMs}ms)`, {\r\n      type: 'api_call',\r\n      endpoint,\r\n      method,\r\n      status,\r\n      durationMs,\r\n      ...details\r\n    });\r\n  }\r\n}\r\n\r\n// Créer et exporter une instance par défaut\r\nconst logger = new Logger();\r\n\r\nexport default logger;","// src/services/api.ts\r\nimport axios, { AxiosInstance, AxiosResponse, AxiosRequestConfig } from 'axios';\r\nimport logger from '../utils/logger';\r\n\r\n// Utiliser import.meta.env pour Vite\r\nconst API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';\r\nconst API_PREFIX = '/api';\r\n\r\n// Créer une instance d'axios avec la configuration de base\r\nconst apiClient: AxiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Intercepteur pour les requêtes\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    // Ajouter un marqueur de temps pour mesurer la durée\r\n    (config as any).metadata = { startTime: Date.now() };\r\n    \r\n    // Récupérer le token d'authentification du localStorage\r\n    const token = localStorage.getItem('auth_token');\r\n    \r\n    // Ajouter le token aux en-têtes si disponible\r\n    if (token && config.headers) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    // Logger la requête en toute sécurité\r\n    const logData = {\r\n      method: config.method?.toUpperCase() || 'GET',\r\n      url: config.url || 'unknown'\r\n    };\r\n    \r\n    // Ajouter les données de manière sécurisée en mode dev uniquement\r\n    if (import.meta.env.DEV && config.data) {\r\n      try {\r\n        const dataString = typeof config.data === 'string' \r\n          ? config.data \r\n          : JSON.stringify(config.data);\r\n        \r\n        logData['data'] = dataString.substring(0, 500);\r\n      } catch (err) {\r\n        // Ignorer les erreurs de sérialisation\r\n      }\r\n    }\r\n    \r\n    logger.debug(`API Request: ${logData.method} ${logData.url}`, logData);\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Logger l'erreur de requête en toute sécurité\r\n    const errorMessage = error?.message || 'Erreur inconnue de requête API';\r\n    const errorStack = error?.stack || '';\r\n    \r\n    logger.error('Erreur de requête API', {\r\n      message: errorMessage,\r\n      stack: errorStack\r\n    });\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Intercepteur pour les réponses\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    // Calculer la durée de la requête de manière sécurisée\r\n    const duration = calculateRequestDuration(response.config);\r\n    const url = response.config?.url || 'unknown';\r\n    const method = response.config?.method?.toUpperCase() || 'GET';\r\n    \r\n    // Logger la réponse réussie\r\n    logger.info(`API Response: ${method} ${url} - ${response.status}`, {\r\n      status: response.status,\r\n      statusText: response.statusText || '',\r\n      duration,\r\n      size: response.data ? JSON.stringify(response.data).length : 0,\r\n      url\r\n    });\r\n    \r\n    // Traitement des réponses réussies\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Préparer les données de l'erreur de manière sécurisée\r\n    const errorData = {\r\n      url: error.config?.url || 'unknown',\r\n      method: error.config?.method?.toUpperCase() || 'UNKNOWN',\r\n      status: error.response?.status,\r\n      statusText: error.response?.statusText || '',\r\n      duration: error.config ? calculateRequestDuration(error.config) : null,\r\n      message: error?.message || 'Erreur inconnue'\r\n    };\r\n    \r\n    // Si token expiré ou non valide (statut 401), redirection vers la page de connexion\r\n    if (error.response && error.response.status === 401) {\r\n      logger.warn('Session expirée ou non authentifiée', errorData);\r\n      // Redirection vers la page de connexion\r\n      localStorage.removeItem('auth_token');\r\n      window.location.href = '/auth/login';\r\n    } else {\r\n      // Logger d'autres erreurs\r\n      logger.error('Erreur de réponse API', {\r\n        ...errorData,\r\n        // Inclure les données de réponse en développement uniquement\r\n        ...(import.meta.env.DEV && error.response?.data && { \r\n          response: JSON.stringify(error.response.data).substring(0, 500),\r\n          stack: error?.stack || ''\r\n        })\r\n      });\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Fonction utilitaire pour normaliser les chemins d'API\r\nconst normalizePath = (url: string): string => {\r\n  // Si l'URL commence déjà par API_PREFIX, ne pas l'ajouter à nouveau\r\n  if (url.startsWith(API_PREFIX)) {\r\n    return url;\r\n  }\r\n  // Sinon, s'assurer que le chemin commence par /\r\n  return `${API_PREFIX}${url.startsWith('/') ? url : `/${url}`}`;\r\n};\r\n\r\n// Fonction pour calculer la durée d'une requête de manière sécurisée\r\nconst calculateRequestDuration = (config: any): number => {\r\n  try {\r\n    if (config?.metadata?.startTime) {\r\n      return Date.now() - config.metadata.startTime;\r\n    }\r\n  } catch (err) {\r\n    // Ignorer les erreurs\r\n  }\r\n  return 0;\r\n};\r\n\r\n// Fonctions de wrapper pour mesurer les performances et gérer les exceptions\r\nconst withPerformanceLogging = async <T>(\r\n  method: string,\r\n  url: string,\r\n  operation: () => Promise<T>,\r\n  extraDetails: Record<string, any> = {}\r\n): Promise<T> => {\r\n  const normalizedUrl = normalizePath(url);\r\n  const startTime = performance.now();\r\n  \r\n  try {\r\n    const result = await operation();\r\n    const duration = performance.now() - startTime;\r\n    \r\n    // Logger le succès uniquement si la durée est anormalement longue\r\n    if (duration > 1000) { // Plus d'une seconde\r\n      logger.info(`API Performance: ${method} ${normalizedUrl} - ${Math.round(duration)}ms`, {\r\n        ...extraDetails,\r\n        duration\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    // L'erreur est déjà loggée dans l'intercepteur de réponse\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Service API\r\nconst api = {\r\n  /**\r\n   * Effectue une requête GET\r\n   * @param url - URL de la requête\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  get: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'GET',\r\n      normalizedUrl,\r\n      () => apiClient.get<T>(normalizedUrl, config).then((response: AxiosResponse<T>) => response.data),\r\n      { params: config?.params }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête POST\r\n   * @param url - URL de la requête\r\n   * @param data - Données à envoyer\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'POST',\r\n      normalizedUrl,\r\n      () => apiClient.post<T>(normalizedUrl, data, config).then((response: AxiosResponse<T>) => response.data),\r\n      { dataSize: data ? JSON.stringify(data).length : 0 }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête PUT\r\n   * @param url - URL de la requête\r\n   * @param data - Données à envoyer\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'PUT',\r\n      normalizedUrl,\r\n      () => apiClient.put<T>(normalizedUrl, data, config).then((response: AxiosResponse<T>) => response.data),\r\n      { dataSize: data ? JSON.stringify(data).length : 0 }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête PATCH\r\n   * @param url - URL de la requête\r\n   * @param data - Données à envoyer\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'PATCH',\r\n      normalizedUrl,\r\n      () => apiClient.patch<T>(normalizedUrl, data, config).then((response: AxiosResponse<T>) => response.data),\r\n      { dataSize: data ? JSON.stringify(data).length : 0 }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête DELETE\r\n   * @param url - URL de la requête\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  delete: <T = any>(url: string, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'DELETE',\r\n      normalizedUrl,\r\n      () => apiClient.delete<T>(normalizedUrl, config).then((response: AxiosResponse<T>) => response.data),\r\n      {}\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue une requête de téléchargement de fichier (en blob)\r\n   * @param url - URL de la requête\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données blob de la réponse\r\n   */\r\n  downloadFile: (url: string, config?: AxiosRequestConfig): Promise<Blob> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<Blob>(\r\n      'GET',\r\n      normalizedUrl,\r\n      () => apiClient.get(normalizedUrl, { \r\n        ...config,\r\n        responseType: 'blob' \r\n      }).then(response => response.data),\r\n      { responseType: 'blob' }\r\n    );\r\n  },\r\n  \r\n  /**\r\n   * Effectue un téléversement de fichier\r\n   * @param url - URL de la requête\r\n   * @param formData - FormData contenant le fichier\r\n   * @param config - Configuration Axios optionnelle\r\n   * @returns Promesse avec les données de la réponse\r\n   */\r\n  uploadFile: <T = any>(url: string, formData: FormData, config?: AxiosRequestConfig): Promise<T> => {\r\n    const normalizedUrl = normalizePath(url);\r\n    return withPerformanceLogging<T>(\r\n      'POST',\r\n      normalizedUrl,\r\n      () => apiClient.post<T>(normalizedUrl, formData, {\r\n        ...config,\r\n        headers: {\r\n          ...config?.headers,\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      }).then(response => response.data),\r\n      { formDataEntries: Array.from(formData.keys()).join(',') }\r\n    );\r\n  }\r\n};\r\n\r\nexport default api;","// src/contexts/AuthContext.tsx - Version adaptée pour votre système de rôles\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport api from '../services/api';\r\n\r\n// === CONFIGURATION DES MODULES (conservée) ===\r\nconst ALL_APP_MODULES = {\r\n  DASHBOARD: {\r\n    nom_module: 'DASHBOARD',\r\n    route_base: '/',\r\n    description: 'Tableau de bord principal',\r\n    icone: 'dashboard',\r\n    ordre: 1\r\n  },\r\n  QUESTIONNAIRES: {\r\n    nom_module: 'QUESTIONNAIRES',\r\n    route_base: '/questionnaires',\r\n    description: 'Gestion des questionnaires',\r\n    icone: 'quiz',\r\n    ordre: 2\r\n  },\r\n  FORMULAIRES: {\r\n    nom_module: 'FORMULAIRES',\r\n    route_base: '/formulaires',\r\n    description: 'Gestion des formulaires',\r\n    icone: 'assignment',\r\n    ordre: 3\r\n  },\r\n  ANALYSES: {\r\n    nom_module: 'ANALYSES',\r\n    route_base: '/analyses-fonctions',\r\n    description: 'Analyses et recommandations',\r\n    icone: 'analytics',\r\n    ordre: 4\r\n  },\r\n  APPLICATIONS: {\r\n    nom_module: 'APPLICATIONS',\r\n    route_base: '/applications',\r\n    description: 'Portfolio applications',\r\n    icone: 'apps',\r\n    ordre: 5\r\n  },\r\n  ENTREPRISES: {\r\n    nom_module: 'ENTREPRISES',\r\n    route_base: '/organisations',\r\n    description: 'Gestion des organisations',\r\n    icone: 'business',\r\n    ordre: 6\r\n  },\r\n  ADMINISTRATION: {\r\n    nom_module: 'ADMINISTRATION',\r\n    route_base: '/admin',\r\n    description: 'Administration système',\r\n    icone: 'admin_panel_settings',\r\n    ordre: 10,\r\n    sous_modules: {\r\n      USERS: {\r\n        nom_module: 'ADMIN_USERS',\r\n        route_base: '/admin/users',\r\n        description: 'Gestion des utilisateurs',\r\n        icone: 'people'\r\n      },\r\n      PERMISSIONS: {\r\n        nom_module: 'ADMIN_PERMISSIONS',\r\n        route_base: '/admin/permissions',\r\n        description: 'Gestion des permissions',\r\n        icone: 'security'\r\n      },\r\n      ROLES: {\r\n        nom_module: 'ADMIN_ROLES',\r\n        route_base: '/admin/roles',\r\n        description: 'Gestion des rôles',\r\n        icone: 'account_circle'\r\n      },\r\n      MATURITY: {\r\n        nom_module: 'ADMIN_MATURITY',\r\n        route_base: '/admin/maturity-model',\r\n        description: 'Modèle de maturité',\r\n        icone: 'model_training'\r\n      },\r\n      SYSTEM: {\r\n        nom_module: 'ADMIN_SYSTEM',\r\n        route_base: '/admin/system',\r\n        description: 'Configuration système',\r\n        icone: 'settings'\r\n      }\r\n    }\r\n  }\r\n} as const;\r\n\r\n// === INTERFACES ADAPTÉES ===\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  email: string;\r\n  organisation: string;\r\n  nom_role: string;\r\n  niveau_acces: 'ENTREPRISE' | 'GLOBAL';\r\n  id_entreprise?: string;\r\n  nom_entreprise?: string;\r\n  anciennete_role?: number;\r\n}\r\n\r\ninterface Permission {\r\n  nom_module: string;\r\n  route_base: string;\r\n  peut_voir: boolean;\r\n  peut_editer: boolean;\r\n  peut_supprimer: boolean;\r\n  peut_administrer: boolean;\r\n  sous_permissions?: Permission[];\r\n}\r\n\r\ninterface AuthContextType {\r\n  currentUser: Acteur | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  register: (userData: RegisterData) => Promise<void>;\r\n  forgotPassword: (email: string) => Promise<void>;\r\n  updateProfile: (userData: Partial<Acteur>) => Promise<void>;\r\n  error: string | null;\r\n  permissions: Permission[];\r\n  hasGlobalAccess: boolean;\r\n  hasPermission: (module: string, action: string) => boolean;\r\n  canAccessRoute: (route: string) => boolean;\r\n  canAccessAdminModule: (subModule: string) => boolean;\r\n  getAccessibleModules: () => Permission[];\r\n  getAdminSubModules: () => Permission[];\r\n  refreshPermissions: () => Promise<void>;\r\n  isAdmin: () => boolean;\r\n  isSuperAdmin: () => boolean;\r\n  getAllAppModules: () => typeof ALL_APP_MODULES;\r\n}\r\n\r\ninterface RegisterData {\r\n  nom_prenom: string;\r\n  email: string;\r\n  password: string;\r\n  organisation: string;\r\n  id_entreprise?: string;\r\n  id_role: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType>({\r\n  currentUser: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n  login: async () => {},\r\n  logout: async () => {},\r\n  register: async () => {},\r\n  forgotPassword: async () => {},\r\n  updateProfile: async () => {},\r\n  error: null,\r\n  permissions: [],\r\n  hasGlobalAccess: false,\r\n  hasPermission: () => false,\r\n  canAccessRoute: () => false,\r\n  canAccessAdminModule: () => false,\r\n  getAccessibleModules: () => [],\r\n  getAdminSubModules: () => [],\r\n  refreshPermissions: async () => {},\r\n  isAdmin: () => false,\r\n  isSuperAdmin: () => false,\r\n  getAllAppModules: () => ALL_APP_MODULES,\r\n});\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\ninterface AuthProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  // États\r\n  const [currentUser, setCurrentUser] = useState<Acteur | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [permissions, setPermissions] = useState<Permission[]>([]);\r\n  const [hasGlobalAccess, setHasGlobalAccess] = useState<boolean>(false);\r\n\r\n  // === FONCTIONS HELPER OPTIMISÉES ===\r\n  const isUserAdmin = useCallback((user: Acteur | null): boolean => {\r\n    if (!user) return false;\r\n    \r\n    return user.nom_role === 'ADMINISTRATEUR' || \r\n           user.nom_role === 'SUPER_ADMINISTRATEUR' ||\r\n           user.niveau_acces === 'GLOBAL';\r\n  }, []);\r\n\r\n  const isUserSuperAdmin = useCallback((user: Acteur | null): boolean => {\r\n    if (!user) return false;\r\n    \r\n    return user.nom_role === 'SUPER_ADMINISTRATEUR';\r\n  }, []);\r\n\r\n  // === GÉNÉRATION AUTOMATIQUE DES PERMISSIONS ADMIN ===\r\n  const generateFullAdminPermissions = useCallback((): Permission[] => {\r\n    const permissions: Permission[] = [];\r\n    \r\n    Object.values(ALL_APP_MODULES).forEach(module => {\r\n      const mainPermission: Permission = {\r\n        nom_module: module.nom_module,\r\n        route_base: module.route_base,\r\n        peut_voir: true,\r\n        peut_editer: true,\r\n        peut_supprimer: true,\r\n        peut_administrer: true\r\n      };\r\n\r\n      if ('sous_modules' in module && module.sous_modules) {\r\n        mainPermission.sous_permissions = Object.values(module.sous_modules).map(sousModule => ({\r\n          nom_module: sousModule.nom_module,\r\n          route_base: sousModule.route_base,\r\n          peut_voir: true,\r\n          peut_editer: true,\r\n          peut_supprimer: true,\r\n          peut_administrer: true\r\n        }));\r\n      }\r\n\r\n      permissions.push(mainPermission);\r\n    });\r\n\r\n    return permissions;\r\n  }, []);\r\n\r\n  // === PERMISSIONS PAR DÉFAUT BASÉES SUR LES RÔLES ===\r\n  const getDefaultPermissionsForRole = useCallback((nomRole: string, niveauAcces: string): Permission[] => {\r\n    const basePermissions: Permission[] = [\r\n      { \r\n        nom_module: 'DASHBOARD', \r\n        route_base: '/', \r\n        peut_voir: true, \r\n        peut_editer: false, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      },\r\n      { \r\n        nom_module: 'QUESTIONNAIRES', \r\n        route_base: '/questionnaires', \r\n        peut_voir: true, \r\n        peut_editer: true, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      },\r\n      { \r\n        nom_module: 'FORMULAIRES', \r\n        route_base: '/formulaires', \r\n        peut_voir: true, \r\n        peut_editer: true, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      },\r\n      { \r\n        nom_module: 'ANALYSES', \r\n        route_base: '/analyses-fonctions', \r\n        peut_voir: true, \r\n        peut_editer: false, \r\n        peut_supprimer: false, \r\n        peut_administrer: false \r\n      }\r\n    ];\r\n\r\n    // === SUPER ADMINISTRATEUR ET ADMINISTRATEUR : TOUTES LES PERMISSIONS ===\r\n    if (nomRole === 'SUPER_ADMINISTRATEUR' || nomRole === 'ADMINISTRATEUR' || niveauAcces === 'GLOBAL') {\r\n      console.log('🔑 Génération permissions Administrateur (TOUTES)');\r\n      return generateFullAdminPermissions();\r\n    }\r\n    \r\n    // === CONSULTANT : PERMISSIONS ÉTENDUES ===\r\n    if (nomRole === 'CONSULTANT') {\r\n      console.log('🔑 Génération permissions Consultant (ÉTENDUES)');\r\n      return basePermissions.map(p => ({\r\n        ...p,\r\n        peut_voir: true,\r\n        peut_editer: true,\r\n        peut_supprimer: true,\r\n        peut_administrer: false\r\n      })).concat([\r\n        { \r\n          nom_module: 'APPLICATIONS', \r\n          route_base: '/applications', \r\n          peut_voir: true, \r\n          peut_editer: true, \r\n          peut_supprimer: false, \r\n          peut_administrer: false \r\n        },\r\n        { \r\n          nom_module: 'ENTREPRISES', \r\n          route_base: '/organisations', \r\n          peut_voir: true, \r\n          peut_editer: true, \r\n          peut_supprimer: false, \r\n          peut_administrer: false \r\n        }\r\n      ]);\r\n    }\r\n\r\n    // === MANAGER : PERMISSIONS MOYENNES ===\r\n    if (nomRole === 'MANAGER') {\r\n      console.log('🔑 Génération permissions Manager (MOYENNES)');\r\n      return basePermissions.map(p => ({\r\n        ...p,\r\n        peut_voir: true,\r\n        peut_editer: p.nom_module !== 'DASHBOARD',\r\n        peut_supprimer: false,\r\n        peut_administrer: false\r\n      })).concat([\r\n        { \r\n          nom_module: 'APPLICATIONS', \r\n          route_base: '/applications', \r\n          peut_voir: true, \r\n          peut_editer: false, \r\n          peut_supprimer: false, \r\n          peut_administrer: false \r\n        }\r\n      ]);\r\n    }\r\n\r\n    // === INTERVENANT : PERMISSIONS DE BASE ===\r\n    console.log('🔑 Génération permissions Intervenant (BASE)');\r\n    return basePermissions;\r\n  }, [generateFullAdminPermissions]);\r\n\r\n  // === VÉRIFICATION AUTH ===\r\n  const checkAuthStatus = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem('auth_token');\r\n      \r\n      if (token) {\r\n        console.log('🔑 Token trouvé, vérification...');\r\n        \r\n        try {\r\n          // Essayer le nouveau endpoint avec permissions si disponible\r\n          const permissionsResponse = await api.get('/user/permissions');\r\n          \r\n          setCurrentUser(permissionsResponse.user);\r\n          setPermissions(permissionsResponse.permissions || []);\r\n          setHasGlobalAccess(permissionsResponse.hasGlobalAccess || isUserAdmin(permissionsResponse.user));\r\n          setIsAuthenticated(true);\r\n          setError(null);\r\n          \r\n          console.log('✅ Utilisateur authentifié avec système de permissions');\r\n          \r\n        } catch (permErr) {\r\n          console.log('⚠️ Endpoint permissions non disponible, utilisation /auth/me...');\r\n          \r\n          // Fallback sur /auth/me\r\n          const response = await api.get('/auth/me');\r\n          const user = response.user || response.data?.user;\r\n          \r\n          if (user) {\r\n            setCurrentUser(user);\r\n            setPermissions(getDefaultPermissionsForRole(user.nom_role, user.niveau_acces));\r\n            setHasGlobalAccess(isUserAdmin(user));\r\n            setIsAuthenticated(true);\r\n            setError(null);\r\n            \r\n            console.log('✅ Utilisateur authentifié (fallback /auth/me)');\r\n          }\r\n        }\r\n      } else {\r\n        console.log('ℹ️ Aucun token trouvé');\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('⚠️ Erreur d\\'authentification:', err.message);\r\n      localStorage.removeItem('auth_token');\r\n      setCurrentUser(null);\r\n      setPermissions([]);\r\n      setHasGlobalAccess(false);\r\n      setIsAuthenticated(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [isUserAdmin, getDefaultPermissionsForRole]);\r\n\r\n  // === FONCTION LOGIN ===\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      setIsLoading(true);\r\n      \r\n      console.log('🔄 === DÉBUT LOGIN ===');\r\n      console.log('📧 Email:', email);\r\n      \r\n      const response = await api.post('/auth/login', { email, password });\r\n      \r\n      if (response.token && response.user) {\r\n        localStorage.setItem('auth_token', response.token);\r\n        \r\n        setCurrentUser(response.user);\r\n        setPermissions(getDefaultPermissionsForRole(response.user.nom_role, response.user.niveau_acces));\r\n        setHasGlobalAccess(isUserAdmin(response.user));\r\n        setIsAuthenticated(true);\r\n        \r\n        console.log('✅ === LOGIN RÉUSSI ===');\r\n        console.log('👤 Utilisateur:', {\r\n          email: response.user.email,\r\n          nom_role: response.user.nom_role,\r\n          niveau_acces: response.user.niveau_acces,\r\n          isAdmin: isUserAdmin(response.user)\r\n        });\r\n      } else {\r\n        throw new Error('Réponse de connexion invalide');\r\n      }\r\n      \r\n    } catch (err: any) {\r\n      console.error('❌ === ERREUR LOGIN ===');\r\n      console.error('Message:', err.response?.data?.message || err.message);\r\n      \r\n      const errorMessage = err.response?.data?.message || err.message || 'Erreur de connexion';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      console.log('🏁 === FIN LOGIN ===');\r\n    }\r\n  };\r\n\r\n  // === AUTRES FONCTIONS (adaptées) ===\r\n  const logout = async () => {\r\n    try {\r\n      await api.post('/auth/logout');\r\n    } catch (err) {\r\n      console.warn('Erreur lors de la déconnexion:', err);\r\n    } finally {\r\n      localStorage.removeItem('auth_token');\r\n      setCurrentUser(null);\r\n      setPermissions([]);\r\n      setHasGlobalAccess(false);\r\n      setIsAuthenticated(false);\r\n      console.log('✅ Déconnexion réussie');\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterData) => {\r\n    try {\r\n      setError(null);\r\n      setIsLoading(true);\r\n      \r\n      const response = await api.post('/auth/register', userData);\r\n      \r\n      if (response.token && response.user) {\r\n        localStorage.setItem('auth_token', response.token);\r\n        \r\n        setCurrentUser(response.user);\r\n        setPermissions(getDefaultPermissionsForRole(response.user.nom_role, response.user.niveau_acces));\r\n        setHasGlobalAccess(isUserAdmin(response.user));\r\n        setIsAuthenticated(true);\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || 'Erreur lors de l\\'inscription';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email: string) => {\r\n    try {\r\n      setError(null);\r\n      await api.post('/auth/forgot-password', { email });\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || 'Erreur lors de la récupération';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (userData: Partial<Acteur>) => {\r\n    try {\r\n      setError(null);\r\n      const response = await api.put('/auth/profile', userData);\r\n      \r\n      if (response.user) {\r\n        setCurrentUser(response.user);\r\n        setHasGlobalAccess(isUserAdmin(response.user));\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || 'Erreur lors de la mise à jour';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // === FONCTIONS PERMISSIONS ===\r\n  const isAdmin = useCallback((): boolean => {\r\n    return isUserAdmin(currentUser);\r\n  }, [currentUser, isUserAdmin]);\r\n\r\n  const isSuperAdmin = useCallback((): boolean => {\r\n    return isUserSuperAdmin(currentUser);\r\n  }, [currentUser, isUserSuperAdmin]);\r\n\r\n  const hasPermission = useCallback((module: string, action: string): boolean => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return true;\r\n    }\r\n\r\n    let permission = permissions.find(p => \r\n      p.nom_module.toUpperCase() === module.toUpperCase()\r\n    );\r\n\r\n    if (!permission) {\r\n      for (const p of permissions) {\r\n        if (p.sous_permissions) {\r\n          permission = p.sous_permissions.find(sp => \r\n            sp.nom_module.toUpperCase() === module.toUpperCase()\r\n          );\r\n          if (permission) break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!permission) return false;\r\n\r\n    switch (action.toLowerCase()) {\r\n      case 'voir':\r\n      case 'view':\r\n        return permission.peut_voir;\r\n      case 'editer':\r\n      case 'edit':\r\n        return permission.peut_editer;\r\n      case 'supprimer':\r\n      case 'delete':\r\n        return permission.peut_supprimer;\r\n      case 'administrer':\r\n      case 'admin':\r\n        return permission.peut_administrer;\r\n      default:\r\n        return false;\r\n    }\r\n  }, [currentUser, permissions, hasGlobalAccess, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const canAccessRoute = useCallback((route: string): boolean => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return true;\r\n    }\r\n\r\n    const cleanRoute = route.startsWith('/') ? route.substring(1) : route;\r\n    \r\n    const routeToModuleMap: { [key: string]: string } = {\r\n      '': 'DASHBOARD',\r\n      'dashboard': 'DASHBOARD',\r\n      'questionnaires': 'QUESTIONNAIRES',\r\n      'formulaires': 'FORMULAIRES',\r\n      'analyses-fonctions': 'ANALYSES',\r\n      'analyses-interpretations': 'ANALYSES',\r\n      'applications': 'APPLICATIONS',\r\n      'organisations': 'ENTREPRISES',\r\n      'admin': 'ADMINISTRATION',\r\n      'admin/users': 'ADMIN_USERS',\r\n      'admin/permissions': 'ADMIN_PERMISSIONS',\r\n      'admin/roles': 'ADMIN_ROLES',\r\n      'admin/maturity-model': 'ADMIN_MATURITY',\r\n      'admin/system': 'ADMIN_SYSTEM',\r\n      'users': 'ADMIN_USERS',\r\n    };\r\n\r\n    let moduleForRoute = null;\r\n    for (const [routePath, moduleName] of Object.entries(routeToModuleMap)) {\r\n      if (cleanRoute.startsWith(routePath)) {\r\n        moduleForRoute = moduleName;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!moduleForRoute) return false;\r\n    \r\n    return hasPermission(moduleForRoute, 'voir');\r\n  }, [currentUser, hasGlobalAccess, hasPermission, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const canAccessAdminModule = useCallback((subModule: string): boolean => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return true;\r\n    }\r\n\r\n    return hasPermission(`ADMIN_${subModule.toUpperCase()}`, 'voir');\r\n  }, [currentUser, hasGlobalAccess, hasPermission, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const getAccessibleModules = useCallback((): Permission[] => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      return generateFullAdminPermissions();\r\n    }\r\n    return permissions.filter(permission => permission.peut_voir);\r\n  }, [currentUser, hasGlobalAccess, permissions, generateFullAdminPermissions, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const getAdminSubModules = useCallback((): Permission[] => {\r\n    if (isUserAdmin(currentUser) || isUserSuperAdmin(currentUser) || hasGlobalAccess) {\r\n      const adminModule = ALL_APP_MODULES.ADMINISTRATION;\r\n      if (adminModule.sous_modules) {\r\n        return Object.values(adminModule.sous_modules).map(sousModule => ({\r\n          nom_module: sousModule.nom_module,\r\n          route_base: sousModule.route_base,\r\n          peut_voir: true,\r\n          peut_editer: true,\r\n          peut_supprimer: true,\r\n          peut_administrer: true\r\n        }));\r\n      }\r\n    }\r\n\r\n    const adminPermission = permissions.find(p => p.nom_module === 'ADMINISTRATION');\r\n    return adminPermission?.sous_permissions?.filter(sp => sp.peut_voir) || [];\r\n  }, [currentUser, hasGlobalAccess, permissions, isUserAdmin, isUserSuperAdmin]);\r\n\r\n  const refreshPermissions = useCallback(async (): Promise<void> => {\r\n    if (isAuthenticated) {\r\n      await checkAuthStatus();\r\n    }\r\n  }, [isAuthenticated, checkAuthStatus]);\r\n\r\n  const getAllAppModules = useCallback(() => ALL_APP_MODULES, []);\r\n\r\n  // === EFFET D'INITIALISATION ===\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, [checkAuthStatus]);\r\n\r\n  // === VALEUR DU CONTEXTE ===\r\n  const value = {\r\n    currentUser,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    register,\r\n    forgotPassword,\r\n    updateProfile,\r\n    error,\r\n    permissions,\r\n    hasGlobalAccess,\r\n    hasPermission,\r\n    canAccessRoute,\r\n    canAccessAdminModule,\r\n    getAccessibleModules,\r\n    getAdminSubModules,\r\n    refreshPermissions,\r\n    isAdmin,\r\n    isSuperAdmin,\r\n    getAllAppModules,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;","// src/components/common/Toast.tsx\r\nimport React, { useState, useEffect } from 'react';\r\n\r\ninterface ToastProps {\r\n  message: string;\r\n  type: 'success' | 'error' | 'info' | 'warning';\r\n  duration?: number;\r\n  onClose?: () => void;\r\n}\r\n\r\nconst Toast: React.FC<ToastProps> = ({ \r\n  message, \r\n  type, \r\n  duration = 3000, \r\n  onClose \r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setIsVisible(false);\r\n      if (onClose) onClose();\r\n    }, duration);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [duration, onClose]);\r\n\r\n  if (!isVisible) return null;\r\n\r\n  const bgColorClass = {\r\n    success: 'bg-success-500',\r\n    error: 'bg-danger-500',\r\n    info: 'bg-primary-500',\r\n    warning: 'bg-warning-500'\r\n  }[type];\r\n\r\n  const iconMap = {\r\n    success: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n      </svg>\r\n    ),\r\n    error: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n      </svg>\r\n    ),\r\n    info: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n      </svg>\r\n    ),\r\n    warning: (\r\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"></path>\r\n      </svg>\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 right-4 z-50 flex items-center p-4 mb-4 rounded-lg shadow-lg text-white animate-slideIn-right min-w-64 max-w-md\">\r\n      <div className={`flex items-center justify-center rounded-full p-2 ${bgColorClass}`}>\r\n        {iconMap[type]}\r\n      </div>\r\n      <div className=\"ml-3 text-sm font-medium\">\r\n        {message}\r\n      </div>\r\n      <button \r\n        onClick={() => {\r\n          setIsVisible(false);\r\n          if (onClose) onClose();\r\n        }}\r\n        className=\"ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 inline-flex h-8 w-8 text-white hover:bg-white hover:bg-opacity-20\"\r\n      >\r\n        <span className=\"sr-only\">Close</span>\r\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toast;","// src/contexts/ToastContext.tsx\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react';\r\nimport Toast from '../components/common/Toast';\r\n\r\ntype ToastType = 'success' | 'error' | 'info' | 'warning';\r\n\r\ninterface ToastMessage {\r\n  id: string;\r\n  message: string;\r\n  type: ToastType;\r\n}\r\n\r\ninterface ToastContextProps {\r\n  toasts: ToastMessage[];\r\n  addToast: (message: string, type: ToastType) => void;\r\n  removeToast: (id: string) => void;\r\n}\r\n\r\nconst ToastContext = createContext<ToastContextProps | undefined>(undefined);\r\n\r\nexport const useToast = () => {\r\n  const context = useContext(ToastContext);\r\n  if (!context) {\r\n    throw new Error('useToast must be used within a ToastProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ToastProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {\r\n  const [toasts, setToasts] = useState<ToastMessage[]>([]);\r\n\r\n  const addToast = (message: string, type: ToastType) => {\r\n    const id = Math.random().toString(36).substring(2, 9);\r\n    setToasts((prevToasts) => [...prevToasts, { id, message, type }]);\r\n  };\r\n\r\n  const removeToast = (id: string) => {\r\n    setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));\r\n  };\r\n\r\n  return (\r\n    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>\r\n      {children}\r\n      <div className=\"toast-container\">\r\n        {toasts.map((toast) => (\r\n          <Toast\r\n            key={toast.id}\r\n            message={toast.message}\r\n            type={toast.type}\r\n            onClose={() => removeToast(toast.id)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </ToastContext.Provider>\r\n  );\r\n};","import React, { useState } from 'react';\r\nimport { \r\n  Box, \r\n  Drawer, \r\n  AppBar, \r\n  Toolbar, \r\n  Typography, \r\n  Divider, \r\n  IconButton, \r\n  List, \r\n  ListItem, \r\n  ListItemButton, \r\n  ListItemIcon, \r\n  ListItemText,\r\n  CssBaseline,\r\n  useTheme,\r\n  useMediaQuery,\r\n  Collapse,\r\n  Badge,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  Menu as MenuIcon,\r\n  Dashboard as DashboardIcon,\r\n  Computer as ComputerIcon,\r\n  Assessment as AssessmentIcon,\r\n  People as PeopleIcon,\r\n  BusinessCenter as BusinessIcon,\r\n  QuestionAnswer as QuestionIcon,\r\n  ChevronLeft as ChevronLeftIcon,\r\n  Assignment as AssignmentIcon,\r\n  AdminPanelSettings as AdminIcon,\r\n  ExpandLess,\r\n  ExpandMore,\r\n  Security as SecurityIcon,\r\n  AccountCircle as RoleIcon,\r\n  Settings as SettingsIcon,\r\n  ModelTraining as MaturityIcon,\r\n  Logout as LogoutIcon\r\n} from '@mui/icons-material';\r\nimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst drawerWidth = 280; // Largeur augmentée pour les sous-menus\r\n\r\n// Configuration des éléments de menu avec permissions\r\ninterface MenuItem {\r\n  text: string;\r\n  icon: React.ReactElement;\r\n  path?: string;\r\n  module?: string;\r\n  action?: string;\r\n  subItems?: MenuItem[];\r\n  adminOnly?: boolean;\r\n  divider?: boolean;\r\n}\r\n\r\nconst MainLayout: React.FC = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\r\n  const [open, setOpen] = useState(!isMobile);\r\n  const [adminMenuOpen, setAdminMenuOpen] = useState(false);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { \r\n    currentUser, \r\n    hasPermission, \r\n    canAccessRoute, \r\n    canAccessAdminModule,\r\n    isAdmin,\r\n    isSuperAdmin,\r\n    logout,\r\n    getAdminSubModules\r\n  } = useAuth();\r\n\r\n  // Configuration des éléments de menu avec la nouvelle structure\r\n  const menuItems: MenuItem[] = [\r\n    {\r\n      text: 'Dashboard',\r\n      icon: <DashboardIcon />,\r\n      path: '/',\r\n      module: 'DASHBOARD',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Analyses & Recommandations',\r\n      icon: <AssessmentIcon />,\r\n      path: '/analyses-fonctions',\r\n      module: 'ANALYSES',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Applications Portfolio',\r\n      icon: <ComputerIcon />,\r\n      path: '/applications',\r\n      module: 'APPLICATIONS',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Formulaires',\r\n      icon: <AssignmentIcon />,\r\n      path: '/formulaires',\r\n      module: 'FORMULAIRES',\r\n      action: 'voir'\r\n    },\r\n    {\r\n      text: 'Questionnaires',\r\n      icon: <QuestionIcon />,\r\n      path: '/questionnaires',\r\n      module: 'QUESTIONNAIRES',\r\n      action: 'voir'\r\n    },\r\n   \r\n    // Divider avant administration\r\n    {\r\n      text: '',\r\n      icon: <></>,\r\n      divider: true\r\n    },\r\n    // === MODULE D'ADMINISTRATION UNIFIÉ ===\r\n    {\r\n      text: 'Administration',\r\n      icon: <AdminIcon />,\r\n      module: 'ADMINISTRATION',\r\n      action: 'voir',\r\n      adminOnly: true,\r\n      subItems: [\r\n        {\r\n          text: 'Gestion des Utilisateurs',\r\n          icon: <PeopleIcon />,\r\n          path: '/admin/users',\r\n          module: 'ADMIN_USERS',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Permissions & Rôles',\r\n          icon: <SecurityIcon />,\r\n          path: '/admin/permissions',\r\n          module: 'ADMIN_PERMISSIONS',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Modèle de Maturité',\r\n          icon: <MaturityIcon />,\r\n          path: '/admin/maturity-model',\r\n          module: 'ADMIN_MATURITY',\r\n          action: 'voir'\r\n        },\r\n        {\r\n          text: 'Configuration Système',\r\n          icon: <SettingsIcon />,\r\n          path: '/admin/system',\r\n          module: 'ADMIN_SYSTEM',\r\n          action: 'voir'\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const handleDrawerToggle = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const handleNavigate = (path: string) => {\r\n    navigate(path);\r\n    if (isMobile) {\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleAdminMenuToggle = () => {\r\n    setAdminMenuOpen(!adminMenuOpen);\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      await logout();\r\n      navigate('/auth/login');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la déconnexion:', error);\r\n    }\r\n  };\r\n\r\n  // Fonction pour vérifier si un élément de menu est accessible\r\n  const isMenuItemAccessible = (item: MenuItem): boolean => {\r\n    // Si l'item est marqué admin seulement et l'utilisateur n'est pas admin\r\n    if (item.adminOnly && !isAdmin() && !isSuperAdmin()) {\r\n      return false;\r\n    }\r\n\r\n    // Si l'item a un module et une action spécifiés\r\n    if (item.module && item.action) {\r\n      return hasPermission(item.module, item.action);\r\n    }\r\n\r\n    // Si l'item a un path, vérifier l'accès via la route\r\n    if (item.path) {\r\n      return canAccessRoute(item.path);\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  // Fonction pour vérifier si un élément de menu est actif\r\n  const isMenuItemActive = (item: MenuItem): boolean => {\r\n    if (item.path) {\r\n      return location.pathname === item.path || location.pathname.startsWith(item.path + '/');\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Fonction pour vérifier si le menu admin contient des éléments actifs\r\n  const isAdminMenuActive = (): boolean => {\r\n    return location.pathname.startsWith('/admin');\r\n  };\r\n\r\n  // Fonction pour rendre un élément de menu\r\n  const renderMenuItem = (item: MenuItem, isSubItem = false) => {\r\n    if (item.divider) {\r\n      return <Divider key=\"divider\" sx={{ my: 1 }} />;\r\n    }\r\n\r\n    if (!isMenuItemAccessible(item)) {\r\n      return null;\r\n    }\r\n\r\n    const isActive = isMenuItemActive(item);\r\n    const hasSubItems = item.subItems && item.subItems.length > 0;\r\n\r\n    return (\r\n      <ListItem key={item.text} disablePadding sx={{ pl: isSubItem ? 4 : 0 }}>\r\n        <ListItemButton \r\n          selected={isActive}\r\n          onClick={() => {\r\n            if (hasSubItems && item.text === 'Administration') {\r\n              handleAdminMenuToggle();\r\n            } else if (item.path) {\r\n              handleNavigate(item.path);\r\n            }\r\n          }}\r\n          sx={{\r\n            borderRadius: 1,\r\n            mx: 1,\r\n            mb: 0.5,\r\n            ...(isActive && {\r\n              backgroundColor: 'primary.main',\r\n              color: 'primary.contrastText',\r\n              '&:hover': {\r\n                backgroundColor: 'primary.dark',\r\n              },\r\n              '& .MuiListItemIcon-root': {\r\n                color: 'primary.contrastText',\r\n              }\r\n            })\r\n          }}\r\n        >\r\n          <ListItemIcon sx={{ minWidth: 40 }}>\r\n            {item.icon}\r\n          </ListItemIcon>\r\n          <ListItemText \r\n            primary={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Typography variant=\"body2\" sx={{ fontWeight: isActive ? 600 : 400 }}>\r\n                  {item.text}\r\n                </Typography>\r\n                {item.adminOnly && (\r\n                  <Chip \r\n                    label=\"Admin\" \r\n                    size=\"small\" \r\n                    color=\"secondary\" \r\n                    sx={{ \r\n                      height: 20, \r\n                      fontSize: '0.7rem',\r\n                      ...(isActive && {\r\n                        backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n                        color: 'inherit'\r\n                      })\r\n                    }} \r\n                  />\r\n                )}\r\n                {hasSubItems && (\r\n                  adminMenuOpen ? <ExpandLess /> : <ExpandMore />\r\n                )}\r\n              </Box>\r\n            }\r\n          />\r\n        </ListItemButton>\r\n      </ListItem>\r\n    );\r\n  };\r\n\r\n  // Fonction pour rendre les sous-éléments d'administration\r\n  const renderAdminSubItems = () => {\r\n    const adminItem = menuItems.find(item => item.text === 'Administration');\r\n    if (!adminItem || !adminItem.subItems) return null;\r\n\r\n    return (\r\n      <Collapse in={adminMenuOpen} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          {adminItem.subItems.map(subItem => {\r\n            if (!isMenuItemAccessible(subItem)) return null;\r\n            \r\n            const isActive = isMenuItemActive(subItem);\r\n            \r\n            return (\r\n              <ListItem key={subItem.text} disablePadding sx={{ pl: 2 }}>\r\n                <ListItemButton \r\n                  selected={isActive}\r\n                  onClick={() => subItem.path && handleNavigate(subItem.path)}\r\n                  sx={{\r\n                    borderRadius: 1,\r\n                    mx: 1,\r\n                    mb: 0.5,\r\n                    backgroundColor: isActive ? 'rgba(0, 0, 0, 0.08)' : 'transparent',\r\n                    '&:hover': {\r\n                      backgroundColor: isActive ? 'rgba(0, 0, 0, 0.12)' : 'rgba(0, 0, 0, 0.04)',\r\n                    }\r\n                  }}\r\n                >\r\n                  <ListItemIcon sx={{ minWidth: 40, ml: 2 }}>\r\n                    {subItem.icon}\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary={\r\n                      <Typography variant=\"body2\" sx={{ fontWeight: isActive ? 600 : 400 }}>\r\n                        {subItem.text}\r\n                      </Typography>\r\n                    }\r\n                  />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      </Collapse>\r\n    );\r\n  };\r\n\r\n  // Auto-ouvrir le menu admin si on est sur une page d'administration\r\n  React.useEffect(() => {\r\n    if (isAdminMenuActive()) {\r\n      setAdminMenuOpen(true);\r\n    }\r\n  }, [location.pathname]);\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex' }}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        sx={{\r\n          zIndex: theme.zIndex.drawer + 1,\r\n          width: { sm: open ? `calc(100% - ${drawerWidth}px)` : '100%' },\r\n          ml: { sm: open ? `${drawerWidth}px` : 0 },\r\n          transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n          }),\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            sx={{ mr: 2 }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Plateforme d'Évaluation de Maturité - DSIN\r\n          </Typography>\r\n          \r\n          {/* Informations utilisateur et déconnexion */}\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n            <Box sx={{ textAlign: 'right', display: { xs: 'none', sm: 'block' } }}>\r\n              <Typography variant=\"body2\" sx={{ opacity: 0.9 }}>\r\n                {currentUser?.nom_prenom}\r\n              </Typography>\r\n              <Typography variant=\"caption\" sx={{ opacity: 0.7 }}>\r\n                {currentUser?.nom_role || currentUser?.role} - {currentUser?.organisation}\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {(isAdmin() || isSuperAdmin()) && (\r\n              <Badge color=\"secondary\" variant=\"dot\">\r\n                <AdminIcon />\r\n              </Badge>\r\n            )}\r\n            \r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={handleLogout}\r\n              title=\"Déconnexion\"\r\n            >\r\n              <LogoutIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n      <Drawer\r\n        variant={isMobile ? \"temporary\" : \"permanent\"}\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        sx={{\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n          [`& .MuiDrawer-paper`]: { \r\n            width: drawerWidth, \r\n            boxSizing: 'border-box',\r\n            ...(isMobile && {\r\n              boxShadow: theme.shadows[8]\r\n            })\r\n          },\r\n        }}\r\n      >\r\n        <Toolbar \r\n          sx={{ \r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between',\r\n            px: 2,\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <img \r\n              src=\"/logo_qwanza.svg\" \r\n              alt=\"Logo\" \r\n              style={{ height: 32, width: 'auto' }}\r\n            />\r\n           </Box>\r\n          <IconButton onClick={handleDrawerToggle}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n        <Divider />\r\n        \r\n        <Box sx={{ overflow: 'auto', flex: 1 }}>\r\n          <List component=\"nav\" sx={{ px: 1, py: 2 }}>\r\n            {menuItems.map((item) => {\r\n              if (item.text === 'Administration') {\r\n                // Traitement spécial pour le menu administration\r\n                return (\r\n                  <React.Fragment key=\"administration\">\r\n                    {renderMenuItem(item)}\r\n                    {renderAdminSubItems()}\r\n                  </React.Fragment>\r\n                );\r\n              }\r\n              return renderMenuItem(item);\r\n            })}\r\n          </List>\r\n        </Box>\r\n\r\n        {/* Footer du drawer avec informations utilisateur */}\r\n        <Box sx={{ p: 2, borderTop: '1px solid', borderColor: 'divider' }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\r\n            <PeopleIcon sx={{ fontSize: 16, color: 'text.secondary' }} />\r\n            <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n              Connecté en tant que:\r\n            </Typography>\r\n          </Box>\r\n          <Typography variant=\"body2\" sx={{ fontWeight: 600, mb: 0.5 }}>\r\n            {currentUser?.nom_prenom}\r\n          </Typography>\r\n          <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n            {currentUser?.nom_role || currentUser?.role}\r\n            {(isAdmin() || isSuperAdmin()) && (\r\n              <Chip \r\n                label=\"Admin\" \r\n                size=\"small\" \r\n                color=\"primary\" \r\n                sx={{ ml: 1, height: 16, fontSize: '0.7rem' }} \r\n              />\r\n            )}\r\n          </Typography>\r\n        </Box>\r\n      </Drawer>\r\n      \r\n      <Box \r\n        component=\"main\" \r\n        sx={{ \r\n          flexGrow: 1, \r\n          p: 3,\r\n          width: { sm: `calc(100% - ${open ? drawerWidth : 0}px)` },\r\n          ml: { sm: open ? `${drawerWidth}px` : 0 },\r\n          transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n          }),\r\n        }}\r\n      >\r\n        <Toolbar /> {/* This creates space for the AppBar */}\r\n        <Outlet />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MainLayout;","// src/layouts/AuthLayout.tsx\r\nimport React from 'react';\r\nimport { Link, Outlet } from 'react-router-dom';\r\n\r\ninterface AuthLayoutProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst AuthLayout: React.FC<AuthLayoutProps> = ({ children }) => {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\r\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <Link to=\"/\">\r\n          <img\r\n            className=\"mx-auto h-12 w-auto\"\r\n            src=\"/logo_qwanza.svg\"\r\n            alt=\"Plateforme Évaluation Maturité DSIN\"\r\n          />\r\n        </Link>\r\n        <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\r\n          Plateforme d'Évaluation Maturité DSIN\r\n        </h2>\r\n      </div>\r\n\r\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\r\n         <Outlet />\r\n        </div>\r\n        \r\n        <div className=\"mt-6 text-center text-sm text-gray-500\">\r\n          <p>© Qwanza 2025 - All right reserved</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthLayout;","// src/pages/auth/Login.tsx - Version corrigée pour éviter les boucles\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Alert,\r\n  CircularProgress,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Paper,\r\n  Container\r\n} from '@mui/material';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\ninterface LocationState {\r\n  from?: {\r\n    pathname: string;\r\n  };\r\n}\r\n\r\nconst Login: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { login, error, isLoading, isAuthenticated } = useAuth();\r\n  \r\n  const [formData, setFormData] = useState({\r\n    email: 'admin@qwanza.fr', // Pré-remplir avec l'admin\r\n    password: 'password', // Mot de passe par défaut\r\n    rememberMe: false\r\n  });\r\n  \r\n  const [localError, setLocalError] = useState<string | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  \r\n  // Corriger la redirection par défaut vers '/' au lieu de '/dashboard'\r\n  const from = (location.state as LocationState)?.from?.pathname || '/';\r\n\r\n  // Rediriger si déjà authentifié - OPTIMISÉ pour éviter les boucles\r\n  useEffect(() => {\r\n    // Attendre que le loading soit terminé avant de rediriger\r\n    if (isAuthenticated && !isLoading) {\r\n      console.log('✅ Utilisateur déjà authentifié, redirection vers:', from);\r\n      navigate(from, { replace: true });\r\n    }\r\n  }, [isAuthenticated, isLoading, navigate, from]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, checked } = event.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: name === 'rememberMe' ? checked : value\r\n    }));\r\n    \r\n    // Clear errors when user starts typing\r\n    if (localError) setLocalError(null);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    setLocalError(null);\r\n\r\n    if (!formData.email || !formData.password) {\r\n      setLocalError('Veuillez remplir tous les champs');\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      console.log('🔄 Tentative de connexion avec:', formData.email);\r\n      await login(formData.email, formData.password);\r\n      \r\n      // La redirection se fera automatiquement via useEffect\r\n      console.log('✅ Connexion réussie');\r\n      \r\n    } catch (err: any) {\r\n      console.error('❌ Erreur de connexion:', err);\r\n      setLocalError(err.message || 'Erreur de connexion. Vérifiez vos identifiants.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Affichage de chargement global\r\n  if (isLoading) {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n          <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n            Vérification de l'authentification...\r\n          </Typography>\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <Box\r\n        sx={{\r\n          marginTop: 8,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Paper elevation={3} sx={{ padding: 4, width: '100%' }}>\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n            {/* En-tête amélioré */}\r\n            <Typography \r\n              component=\"h1\" \r\n              variant=\"h4\" \r\n              gutterBottom\r\n              sx={{ \r\n                color: 'primary.main',\r\n                fontWeight: 'bold'\r\n              }}\r\n            >\r\n              eQwanza\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" paragraph>\r\n              Plateforme d'Évaluation de Maturité - Accédez à votre espace\r\n            </Typography>\r\n            \r\n            {/* Affichage des erreurs */}\r\n            {(error || localError) && (\r\n              <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\r\n                {error || localError}\r\n              </Alert>\r\n            )}\r\n            \r\n            <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1, width: '100%' }}>\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Adresse email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                value={formData.email}\r\n                onChange={handleChange}\r\n                disabled={isSubmitting || isLoading}\r\n              />\r\n              \r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Mot de passe\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={formData.password}\r\n                onChange={handleChange}\r\n                disabled={isSubmitting || isLoading}\r\n              />\r\n              \r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    value=\"remember\"\r\n                    color=\"primary\"\r\n                    name=\"rememberMe\"\r\n                    checked={formData.rememberMe}\r\n                    onChange={handleChange}\r\n                    disabled={isSubmitting || isLoading}\r\n                  />\r\n                }\r\n                label=\"Se souvenir de moi\"\r\n              />\r\n              \r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{ mt: 3, mb: 2, py: 1.5 }}\r\n                disabled={isSubmitting || isLoading}\r\n                startIcon={isSubmitting ? <CircularProgress size={20} /> : null}\r\n              >\r\n                {isSubmitting ? 'Connexion en cours...' : 'Se connecter'}\r\n              </Button>\r\n              \r\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\r\n                <Link to=\"/auth/register\" style={{ textDecoration: 'none' }}>\r\n                  <Typography variant=\"body2\" color=\"primary\">\r\n                    Pas encore de compte ? S'inscrire\r\n                  </Typography>\r\n                </Link>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n        \r\n        {/* Aide pour les développeurs - Mise à jour */}\r\n        {process.env.NODE_ENV === 'development' && (\r\n          <Paper elevation={1} sx={{ mt: 2, p: 2, bgcolor: 'info.light', width: '100%' }}>\r\n            <Typography variant=\"caption\" color=\"info.contrastText\">\r\n              <strong>🧪 Mode Développement</strong><br />\r\n              <strong>Email:</strong> admin@qwanza.fr<br />\r\n              <strong>Mot de passe:</strong> password<br />\r\n              <strong>Rôle:</strong> Administrateur (accès total)<br />\r\n              <em>Ces identifiants sont pré-remplis pour faciliter les tests</em>\r\n            </Typography>\r\n          </Paper>\r\n        )}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../services/api';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Alert,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Tabs,\r\n  Tab,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Avatar,\r\n} from '@mui/material';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n} from 'recharts';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport AssessmentIcon from '@mui/icons-material/Assessment';\r\nimport DomainIcon from '@mui/icons-material/Domain';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport { Chip, List, ListItem, ListItemText, Divider, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\r\n\r\n// Types\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  secteur: string;\r\n  score_global: number;\r\n}\r\n\r\ninterface SecteurData {\r\n  nom: string;\r\n  nombre_entreprises: number;\r\n  score_moyen: number;\r\n}\r\n\r\ninterface Fonction {\r\n  id: string;\r\n  nom: string;\r\n  score_global: number;\r\n}\r\n\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n  score_global: number;\r\n  mode_hebergement: string;\r\n  technologie: string;\r\n}\r\n\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  date_modification: string;\r\n  statut: string;\r\n  acteur_nom: string;\r\n  nom_application: string;\r\n  nom_fonction: string;\r\n  score_global: number;\r\n}\r\n\r\n// Couleurs pour les graphiques\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658', '#8DD1E1', '#A4DE6C', '#D0ED57'];\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // États pour les données\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [secteurs, setSecteurs] = useState<SecteurData[]>([]);\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [formulaires, setFormulaires] = useState<Formulaire[]>([]);\r\n  \r\n  // États pour les filtres\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [hebergementFilter, setHebergementFilter] = useState<string>('all');\r\n  const [technologieFilter, setTechnologieFilter] = useState<string>('all');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Options de filtrage\r\n  const [hebergementOptions, setHebergementOptions] = useState<string[]>([]);\r\n  const [technologieOptions, setTechnologieOptions] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchDashboardData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // Récupérer toutes les données nécessaires\r\n        const [\r\n          entreprisesResponse,\r\n          fonctionsResponse,\r\n          applicationsResponse,\r\n          formulairesResponse\r\n        ] = await Promise.all([\r\n          api.get('entreprises'),\r\n          api.get('fonctions'),\r\n          api.get('applications'),\r\n          api.get('formulaires/recent')\r\n        ]);\r\n      // Imprimer dans la console pour déboguer\r\n      console.log(\"Entreprises response:\", entreprisesResponse);\r\n      console.log(\"Fonctions response:\", fonctionsResponse);\r\n      console.log(\"Applications response:\", applicationsResponse);\r\n      console.log(\"Formulaires response:\", formulairesResponse);\r\n\r\n        // Traiter les données des entreprises\r\n        const entreprisesData = Array.isArray(entreprisesResponse) \r\n          ? entreprisesResponse \r\n          : [];\r\n        \r\n        setEntreprises(entreprisesData);\r\n        \r\n        // Calculer les statistiques par secteur\r\n        const secteursData = calculerStatistiquesSecteur(entreprisesData);\r\n        setSecteurs(secteursData);\r\n        \r\n        // Traiter les données des fonctions\r\n        const fonctionsData = Array.isArray(fonctionsResponse) \r\n          ? fonctionsResponse \r\n          : [];\r\n        \r\n        setFonctions(fonctionsData);\r\n        \r\n        // Traiter les données des applications\r\n        const applicationsData = Array.isArray(applicationsResponse) \r\n          ? applicationsResponse.filter(app => app.score_global !== undefined && app.score_global !== null)\r\n          : [];\r\n        \r\n        setApplications(applicationsData);\r\n        \r\n        // Extraire les options de filtrage\r\n        const hebergements = [...new Set(applicationsData\r\n          .map(app => app.hebergement || app.mode_hebergement)\r\n          .filter(Boolean))];\r\n        \r\n        const technologies = [...new Set(applicationsData\r\n          .map(app => app.technology || app.technologie || app.language)\r\n          .filter(Boolean))];\r\n        \r\n        setHebergementOptions(hebergements);\r\n        setTechnologieOptions(technologies);\r\n        \r\n        // Traiter les données des formulaires\r\n        const formulairesData = Array.isArray(formulairesResponse) \r\n          ? formulairesResponse \r\n          : [];\r\n        \r\n        console.log(\"Formulaire data:\", formulairesData);\r\n\r\n\r\n        setFormulaires(formulairesData);\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n        setError('Impossible de charger les données du tableau de bord.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDashboardData();\r\n  }, []);\r\n\r\n  const calculerStatistiquesSecteur = (entreprises: Entreprise[]): SecteurData[] => {\r\n    // Regrouper par secteur\r\n    const secteursMap = entreprises.reduce((acc, entreprise) => {\r\n      const secteur = entreprise.secteur || 'Non défini';\r\n      \r\n      if (!acc[secteur]) {\r\n        acc[secteur] = { \r\n          scoreTotal: 0, \r\n          count: 0 \r\n        };\r\n      }\r\n      \r\n      // N'ajouter au total que si le score est défini\r\n      if (entreprise.score_global !== undefined && entreprise.score_global !== null) {\r\n        acc[secteur].scoreTotal += entreprise.score_global;\r\n        acc[secteur].count++;\r\n      }\r\n      \r\n      return acc;\r\n    }, {} as Record<string, { scoreTotal: number, count: number }>);\r\n    \r\n    // Convertir en tableau et calculer les moyennes\r\n    return Object.entries(secteursMap).map(([nom, { scoreTotal, count }]) => ({\r\n      nom,\r\n      nombre_entreprises: count,\r\n      score_moyen: count > 0 ? scoreTotal / count : 0\r\n    })).sort((a, b) => b.score_moyen - a.score_moyen);\r\n  };\r\n\r\n  const countFormulairesByFunction = () => {\r\n    // Vérifier si les formulaires existent\r\n    if (!formulaires || !formulaires.length) return [];\r\n    \r\n    // Vérifier dans la console les données reçues pour déboguer\r\n    console.log(\"Formulaires reçus:\", formulaires);\r\n    \r\n    // Compter les formulaires par fonction\r\n    const countByFunction = formulaires.reduce((acc, form) => {\r\n      // Utiliser questionnaire_titre qui est le champ correct provenant du backend\r\n      const fonction = form.nom_fonction || form.thematique || form.titre || 'Non défini';\r\n      acc[fonction] = (acc[fonction] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n    \r\n    // Convertir en format pour graphique\r\n    return Object.entries(countByFunction).map(([name, value]) => ({\r\n      name,\r\n      value\r\n    }));\r\n  };\r\n\r\n  const getFilteredApplications = () => {\r\n    if (!applications || !applications.length) return [];\r\n    \r\n    console.log(\"Applications disponibles:\", applications);\r\n    \r\n    return applications\r\n      .filter(app => \r\n        (hebergementFilter === 'all' || \r\n         app.hebergement === hebergementFilter || \r\n         app.mode_hebergement === hebergementFilter) &&\r\n        (technologieFilter === 'all' || \r\n         app.technologie === technologieFilter || \r\n         app.technology === technologieFilter || \r\n         app.language === technologieFilter)\r\n      )\r\n      .sort((a, b) => {\r\n        // Gestion de undefined/null\r\n        const scoreA = a.score_global !== undefined ? a.score_global : 0;\r\n        const scoreB = b.score_global !== undefined ? b.score_global : 0;\r\n        return scoreB - scoreA;\r\n      })\r\n      .slice(0, 10);\r\n  };\r\n\r\n  const calculateGlobalFunctionScore = () => {\r\n    if (!fonctions || !fonctions.length) return 'N/A';\r\n    \r\n    const validScores = fonctions.filter(f => f.score_global !== undefined && f.score_global !== null);\r\n    if (!validScores.length) return 'N/A';\r\n    \r\n    const total = validScores.reduce((sum, f) => {\r\n      const score = typeof f.score_global === 'string' ? parseFloat(f.score_global) : f.score_global;\r\n      return sum + score;\r\n    }, 0);\r\n    \r\n    return (total / validScores.length).toFixed(2);\r\n  };\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload?.length) {\r\n      return (\r\n        <Paper sx={{ p: 1 }}>\r\n          <Typography variant=\"body2\">{`${label}`}</Typography>\r\n          <Typography variant=\"body2\">{`Score: ${payload[0].value.toFixed(2)}`}</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Fonction pour déterminer la couleur basée sur le score\r\n  const getScoreColor = (score: number) => {\r\n    if (score >= 3.5) return \"success\";\r\n    if (score >= 2) return \"warning\";\r\n    return \"error\";\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* Titre du tableau de bord */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, mb: 2 }}>\r\n            <Typography component=\"h1\" variant=\"h4\" color=\"primary\" gutterBottom>\r\n              Tableau de bord de maturité\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              Vue d'ensemble des scores de maturité par secteur, fonction et application.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Statistiques globales en format carte */}\r\n        <Grid xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#0B4E87', mr: 2 }}>\r\n                  <BusinessIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Entreprises</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {entreprises?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                évaluées dans la plateforme\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#4CAF50', mr: 2 }}>\r\n                  <AssessmentIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Fonctions</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {fonctions?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                analysées au total\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid xs={12} md={3}>\r\n          <Card sx={{ height: '100%', bgcolor: '#f5f5f5', boxShadow: 3 }}>\r\n            <CardContent>\r\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n                <Avatar sx={{ bgcolor: '#F44336', mr: 2 }}>\r\n                  <DescriptionIcon />\r\n                </Avatar>\r\n                <Typography variant=\"h6\">Formulaires</Typography>\r\n              </Box>\r\n              <Typography variant=\"h3\" color=\"primary\" align=\"center\" sx={{ my: 2 }}>\r\n                {formulaires?.length || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n                renseignés au total\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        {/* Synthèse des entreprises par secteur */}\r\n        <Grid xs={12} md={6}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Maturité par Secteur d'Activité\r\n            </Typography>\r\n            {secteurs && secteurs.length > 0 ? (\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart data={secteurs}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"nom\" />\r\n                  <YAxis domain={[0, 5]} />\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Legend />\r\n                  <Bar \r\n                    dataKey=\"score_moyen\" \r\n                    fill=\"#0B4E87\" \r\n                    name=\"Score moyen\"\r\n                    barSize={40}\r\n                  >\r\n                    {secteurs.map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                    ))}\r\n                  </Bar>\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            ) : (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={300}>\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                  Aucune donnée disponible\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n            <Typography variant=\"caption\" sx={{ display: 'block', mt: 1 }}>\r\n              Nombre d'entreprises par secteur indiqué entre parenthèses\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Nombre de formulaires par fonction */}\r\n        <Grid xs={12} md={6}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Formulaires par Fonction\r\n            </Typography>\r\n            {formulaires && formulaires.length > 0 && countFormulairesByFunction().length > 0 ? (\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <PieChart>\r\n                  <Pie\r\n                    data={countFormulairesByFunction()}\r\n                    dataKey=\"value\"\r\n                    nameKey=\"name\"\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    outerRadius={80}\r\n                    fill=\"#8884d8\"\r\n                    label\r\n                  >\r\n                    {countFormulairesByFunction().map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                    ))}\r\n                  </Pie>\r\n                  <Tooltip />\r\n                  <Legend />\r\n                </PieChart>\r\n              </ResponsiveContainer>\r\n            ) : (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={300}>\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                  Aucune donnée disponible\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des 10 derniers formulaires */}\r\n        <Grid xs={12} md={6}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              10 Derniers Formulaires\r\n            </Typography>\r\n            <Box display=\"flex\" mb={2}>\r\n              <TextField\r\n                size=\"small\"\r\n                placeholder=\"Rechercher un formulaire...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                fullWidth\r\n                InputProps={{ \r\n                  startAdornment: <InputAdornment position=\"start\"><SearchIcon /></InputAdornment> \r\n                }}\r\n              />\r\n            </Box>\r\n            {formulaires\r\n              .filter(form => \r\n                (form.nom_application && form.nom_application.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n                (form.nom_fonction && form.nom_fonction.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n                (form.acteur_nom && form.acteur_nom.toLowerCase().includes(searchTerm.toLowerCase()))\r\n              )\r\n              .slice(0, 10)\r\n              .map((form, index) => (\r\n                <React.Fragment key={form.id_formulaire || `form-${index}`}>\r\n                  <ListItem\r\n                    button \r\n                    onClick={() => navigate(`/formulaires/${form.id_formulaire}`)}\r\n                    sx={{ \r\n                      borderLeft: '4px solid', \r\n                      borderColor: form.score_global ? \r\n                        (form.score_global >= 3.5 ? '#4CAF50' : form.score_global >= 2 ? '#FF9800' : '#F44336') : \r\n                        '#9E9E9E',\r\n                      mb: 1,\r\n                      bgcolor: '#f9f9f9',\r\n                      '&:hover': {\r\n                        bgcolor: '#f0f0f0',\r\n                      }\r\n                    }}\r\n                  >\r\n                    <ListItemText\r\n                      primary={\r\n                        <Box>\r\n                          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', color: '#0B4E87' }}>\r\n                            Fonction: {form.nom_fonction || form.thematique || 'Non spécifiée'}\r\n                          </Typography>\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={0.5}>\r\n                            <Typography variant=\"body2\" component=\"span\">\r\n                              Application: {form.nom_application || 'Application inconnue'}\r\n                            </Typography>\r\n                            <Chip \r\n                              label={`Score: ${typeof form.score_actuel === 'number' ? form.score_actuel.toFixed(1) : form.score_actuel || '0'} / ${typeof form.score_maximum === 'number' ? form.score_maximum.toFixed(1) : form.score_maximum || '0'}`} \r\n                              size=\"small\" \r\n                              color={getScoreColor(form.score_maximum > 0 ? (form.score_actuel / form.score_maximum) * 5 : 0)}\r\n                              sx={{ fontWeight: 'bold' }}\r\n                            />\r\n                          </Box>\r\n                        </Box>\r\n                      }\r\n                      secondary={\r\n                        <Box mt={1}>\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Typography variant=\"body2\" component=\"span\" sx={{ fontWeight: 'medium' }}>\r\n                              Acteur: {form.acteur_nom || 'Utilisateur inconnu'}\r\n                            </Typography>\r\n                          </Box>\r\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={0.5}>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                              Créé le: {form.date_creation ? new Date(form.date_creation).toLocaleDateString() : 'Date inconnue'}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                              Modifié le: {form.date_modification ? new Date(form.date_modification).toLocaleDateString() : 'Date inconnue'}\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                  {index < Math.min(formulaires.length, 10) - 1 && <Divider />}\r\n                </React.Fragment>\r\n              ))}\r\n            {formulaires.filter(form => \r\n              (form.nom_application && form.nom_application.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n              (form.nom_fonction && form.nom_fonction.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n              (form.acteur_nom && form.acteur_nom.toLowerCase().includes(searchTerm.toLowerCase()))\r\n            ).length === 0 && (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={150}>\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                  Aucun formulaire ne correspond à votre recherche\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Top 10 applications par score avec filtres */}\r\n        <Grid xs={12}>\r\n          <Card>\r\n            <CardHeader \r\n              title=\"Top 10 Applications par Score de Maturité\" \r\n              action={\r\n                <Box display=\"flex\" gap={2}>\r\n                  <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r\n                    <InputLabel id=\"hebergement-filter-label\">Hébergement</InputLabel>\r\n                    <Select\r\n                      labelId=\"hebergement-filter-label\"\r\n                      value={hebergementFilter}\r\n                      onChange={(e) => setHebergementFilter(e.target.value as string)}\r\n                      label=\"Hébergement\"\r\n                    >\r\n                      <MenuItem value=\"all\">Tous</MenuItem>\r\n                      {hebergementOptions && hebergementOptions.map(option => (\r\n                        <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  \r\n                  <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r\n                    <InputLabel id=\"technologie-filter-label\">Technologie</InputLabel>\r\n                    <Select\r\n                      labelId=\"technologie-filter-label\"\r\n                      value={technologieFilter}\r\n                      onChange={(e) => setTechnologieFilter(e.target.value as string)}\r\n                      label=\"Technologie\"\r\n                    >\r\n                      <MenuItem value=\"all\">Toutes</MenuItem>\r\n                      {technologieOptions && technologieOptions.map(option => (\r\n                        <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Box>\r\n              }\r\n            />\r\n            <CardContent>\r\n              <Tabs\r\n                value={tabValue}\r\n                onChange={handleTabChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                variant=\"fullWidth\"\r\n                sx={{ mb: 2 }}\r\n              >\r\n                <Tab label=\"Graphique\" />\r\n                <Tab label=\"Tableau\" />\r\n              </Tabs>\r\n              \r\n              {tabValue === 0 ? (\r\n                getFilteredApplications().length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={400}>\r\n                    <BarChart data={getFilteredApplications()}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"nom_application\" />\r\n                      <YAxis domain={[0, 5]} />\r\n                      <Tooltip content={<CustomTooltip />} />\r\n                      <Legend />\r\n                      <Bar \r\n                        dataKey=\"score_global\" \r\n                        fill=\"#0B4E87\" \r\n                        name=\"Score de maturité\"\r\n                        barSize={40}\r\n                      >\r\n                        {getFilteredApplications().map((entry, index) => (\r\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                        ))}\r\n                      </Bar>\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={300}>\r\n                    <Typography variant=\"body1\" color=\"textSecondary\">\r\n                      Aucune application ne correspond aux filtres sélectionnés\r\n                    </Typography>\r\n                  </Box>\r\n                )\r\n              ) : (\r\n                <Box sx={{ overflowX: 'auto' }}>\r\n                  {getFilteredApplications().length > 0 ? (\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Application</TableCell>\r\n                          <TableCell>Score</TableCell>\r\n                          <TableCell>Hébergement</TableCell>\r\n                          <TableCell>Technologie</TableCell>\r\n                          <TableCell>Actions</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {getFilteredApplications().map((app) => (\r\n                          <TableRow key={app.id_application}>\r\n                            <TableCell>{app.nom_application}</TableCell>\r\n                            <TableCell>\r\n                              <Chip \r\n                                label={typeof app.score_global === 'number' ? app.score_global.toFixed(2) : app.score_global} \r\n                                color={getScoreColor(parseFloat(String(app.score_global)))}\r\n                                size=\"small\"\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>{app.mode_hebergement || 'Non spécifié'}</TableCell>\r\n                            <TableCell>{app.technologie || 'Non spécifiée'}</TableCell>\r\n                            <TableCell>\r\n                              <Button \r\n                                size=\"small\" \r\n                                onClick={() => navigate(`/applications/${app.id_application}`)}\r\n                              >\r\n                                Détails\r\n                              </Button>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  ) : (\r\n                    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={200}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucune application ne correspond aux filtres sélectionnés\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Tooltip,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  FileCopy as CloneIcon,\r\n  QuestionAnswer as QuestionIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  fonction: string;\r\n  thematique: string;\r\n  description?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface QuestionnaireStat {\r\n  numQuestions: number;\r\n  numReponses: number;\r\n  numUtilisateurs: number;\r\n}\r\n\r\nconst QuestionnairesIndex: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\r\n  const [questionnaireStats, setQuestionnaireStats] = useState<{ [key: string]: QuestionnaireStat }>({});\r\n  \r\n  // Récupérer tous les questionnaires au chargement\r\n  useEffect(() => {\r\n    fetchQuestionnaires();\r\n  }, []);\r\n\r\n  // Récupérer tous les questionnaires\r\n  const fetchQuestionnaires = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Retirer le préfixe '/api' car il est ajouté par le service api\r\n      const response = await api.get('questionnaires');\r\n      \r\n      // Vérifier et adapter la réponse en fonction de sa structure\r\n      let questionnaireData: Questionnaire[] = [];\r\n      if (Array.isArray(response)) {\r\n        questionnaireData = response;\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        questionnaireData = response.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour questionnaires:', response);\r\n        setError('Format de données inattendu pour les questionnaires');\r\n      }\r\n      \r\n      // Normaliser les données des questionnaires\r\n      const normalizedQuestionnaires = questionnaireData.map((q: any) => ({\r\n        id_questionnaire: q.id_questionnaire,\r\n        fonction: q.fonction || q.titre || 'Sans nom',\r\n        thematique: q.thematique || 'Non catégorisé',\r\n        description: q.description || '',\r\n        date_creation: q.date_creation || new Date().toISOString(),\r\n        date_modification: q.date_modification || q.date_creation || new Date().toISOString()\r\n      }));\r\n      \r\n      setQuestionnaires(normalizedQuestionnaires);\r\n      \r\n      // Récupérer les statistiques pour chaque questionnaire\r\n      // Adapter le chemin pour correspondre à la route backend\r\n      const statsResponse = await api.get('questionnaires/stats');\r\n      \r\n      let statsData = [];\r\n      if (Array.isArray(statsResponse)) {\r\n        statsData = statsResponse;\r\n      } else if (statsResponse && statsResponse.data && Array.isArray(statsResponse.data)) {\r\n        statsData = statsResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les statistiques:', statsResponse);\r\n        // Ne pas mettre d'erreur ici, car les statistiques ne sont pas critiques\r\n      }\r\n      \r\n      // Convertir le tableau en objet pour faciliter l'accès\r\n      // Gérer différents formats possibles dans la réponse\r\n      const statsObj = statsData.reduce((acc: { [key: string]: QuestionnaireStat }, stat: any) => {\r\n        acc[stat.id_questionnaire] = {\r\n          numQuestions: stat.numQuestions || 0,\r\n          numReponses: stat.numReponses || stat.num_evaluations || 0,\r\n          numUtilisateurs: stat.numUtilisateurs || 0\r\n        };\r\n        return acc;\r\n      }, {});\r\n      \r\n      setQuestionnaireStats(statsObj);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des questionnaires:', error);\r\n      setError('Impossible de charger les questionnaires. Veuillez réessayer.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Navigation vers la vue détaillée d'un questionnaire\r\n  const handleViewQuestionnaire = (questionnaire: Questionnaire) => {\r\n    navigate(`/questionnaires/${questionnaire.id_questionnaire}`);\r\n  };\r\n\r\n  // Navigation vers la page d'administration\r\n  const handleGoToAdmin = () => {\r\n    navigate('/questionnaires/admin');\r\n  };\r\n\r\n  // Formater la date en gérant les erreurs potentielles\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        day: '2-digit',\r\n        month: 'short',\r\n        year: 'numeric'\r\n      });\r\n    } catch (e) {\r\n      console.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n\r\n  // Récupérer les statistiques avec une gestion robuste des erreurs\r\n  const getStats = (questionnaireId: string, statType: keyof QuestionnaireStat) => {\r\n    try {\r\n      return questionnaireStats[questionnaireId]?.[statType] || 0;\r\n    } catch (e) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Questionnaires d'Évaluation\r\n              </Typography>\r\n              <Box>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  onClick={handleGoToAdmin}\r\n                  sx={{ mr: 1 }}\r\n                >\r\n                  Administration\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={handleGoToAdmin}\r\n                >\r\n                  Nouveau Questionnaire\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des questionnaires */}\r\n        <Grid xs={12}>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Fonction</TableCell>\r\n                  <TableCell>Thématique</TableCell>\r\n                  <TableCell>Description</TableCell>\r\n                  <TableCell>Questions</TableCell>\r\n                  <TableCell>Réponses</TableCell>\r\n                  <TableCell>Utilisateurs</TableCell>\r\n                  <TableCell>Dernière modification</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {questionnaires.length > 0 ? (\r\n                  questionnaires.map((questionnaire) => (\r\n                    <TableRow key={questionnaire.id_questionnaire} hover>\r\n                      <TableCell>{questionnaire.fonction}</TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={questionnaire.thematique} \r\n                          color=\"primary\" \r\n                          variant=\"outlined\" \r\n                          size=\"small\" \r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {questionnaire.description && questionnaire.description.length > 50\r\n                          ? `${questionnaire.description.substring(0, 50)}...`\r\n                          : questionnaire.description || 'Aucune description'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          icon={<QuestionIcon />}\r\n                          label={getStats(questionnaire.id_questionnaire, 'numQuestions')}\r\n                          color={\r\n                            getStats(questionnaire.id_questionnaire, 'numQuestions') > 0 \r\n                              ? 'success' \r\n                              : 'default'\r\n                          }\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {getStats(questionnaire.id_questionnaire, 'numReponses')}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {getStats(questionnaire.id_questionnaire, 'numUtilisateurs')}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {formatDate(questionnaire.date_modification)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Tooltip title=\"Voir les détails\">\r\n                          <IconButton \r\n                            color=\"info\" \r\n                            onClick={() => handleViewQuestionnaire(questionnaire)}\r\n                          >\r\n                            <ExpandMoreIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                ) : (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} align=\"center\">\r\n                      <Typography variant=\"body1\" sx={{ py: 2 }}>\r\n                        Aucun questionnaire disponible\r\n                      </Typography>\r\n                      <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\" \r\n                        startIcon={<AddIcon />}\r\n                        onClick={handleGoToAdmin}\r\n                      >\r\n                        Créer le premier questionnaire\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionnairesIndex;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\n\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Badge,\r\n  IconButton,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Divider,\r\n  Tooltip,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Edit as EditIcon,\r\n  Assessment as AssessmentIcon,\r\n  QuestionAnswer as QuestionIcon,\r\n  People as PeopleIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  fonction: string;\r\n  thematique: string;\r\n  description?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  id_questionnaire: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre: number;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface QuestionnaireStat {\r\n  numQuestions: number;\r\n  numReponses: number;\r\n  numUtilisateurs: number;\r\n}\r\n\r\nconst QuestionnaireDetail: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [questionnaire, setQuestionnaire] = useState<Questionnaire | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [stats, setStats] = useState<QuestionnaireStat | null>(null);\r\n  \r\n  // Charger les données du questionnaire au chargement\r\n  useEffect(() => {\r\n    if (id) {\r\n      fetchQuestionnaireData(id);\r\n    } else {\r\n      setError(\"Identifiant de questionnaire manquant\");\r\n      setLoading(false);\r\n    }\r\n  }, [id]);\r\n  \r\n  // Récupérer les données du questionnaire\r\n  const fetchQuestionnaireData = async (questionnaireId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Récupérer les informations du questionnaire\r\n      const questionnaireResponse = await api.get(`questionnaires/${questionnaireId}`);\r\n      \r\n      // Normaliser la réponse\r\n      let questionnaireData = null;\r\n      if (questionnaireResponse && typeof questionnaireResponse === 'object') {\r\n        if (Array.isArray(questionnaireResponse)) {\r\n          questionnaireData = questionnaireResponse[0]; // Prendre le premier si c'est un tableau\r\n        } else if (questionnaireResponse.data) {\r\n          questionnaireData = questionnaireResponse.data;\r\n        } else {\r\n          questionnaireData = questionnaireResponse;\r\n        }\r\n      }\r\n      \r\n      if (questionnaireData && questionnaireData.id_questionnaire) {\r\n        setQuestionnaire(questionnaireData);\r\n      } else {\r\n        setError(\"Format de réponse inattendu pour le questionnaire\");\r\n        console.warn(\"Format de réponse inattendu pour le questionnaire:\", questionnaireResponse);\r\n      }\r\n      \r\n      // Récupérer les questions\r\n      try {\r\n        const questionsResponse = await api.get(`questionnaires/${questionnaireId}/questions`);\r\n        \r\n        let questionsData = [];\r\n        if (Array.isArray(questionsResponse)) {\r\n          questionsData = questionsResponse;\r\n        } else if (questionsResponse && questionsResponse.data && Array.isArray(questionsResponse.data)) {\r\n          questionsData = questionsResponse.data;\r\n        } else {\r\n          console.warn(\"Format de réponse inattendu pour les questions:\", questionsResponse);\r\n        }\r\n        \r\n        setQuestions(questionsData);\r\n      } catch (questionsError) {\r\n        console.error('Erreur lors du chargement des questions:', questionsError);\r\n        setQuestions([]);\r\n      }\r\n      \r\n      // Récupérer les statistiques\r\n      try {\r\n        let statsResponse;\r\n        try {\r\n          // Essayer d'abord avec le singulier\r\n          statsResponse = await api.get(`questionnaire/stats/${questionnaireId}`);\r\n        } catch (statsSingularError) {\r\n          // Ensuite avec le pluriel\r\n          statsResponse = await api.get(`questionnaires/stats/${questionnaireId}`);\r\n        }\r\n        \r\n        let statsData = null;\r\n        if (statsResponse && typeof statsResponse === 'object') {\r\n          if (statsResponse.data) {\r\n            statsData = statsResponse.data;\r\n          } else {\r\n            statsData = statsResponse;\r\n          }\r\n        }\r\n        \r\n        if (statsData) {\r\n          setStats({\r\n            numQuestions: statsData.numQuestions || statsData.num_questions || 0,\r\n            numReponses: statsData.numReponses || statsData.num_evaluations || 0,\r\n            numUtilisateurs: statsData.numUtilisateurs || statsData.num_utilisateurs || 0\r\n          });\r\n        } else {\r\n          // Statistiques par défaut si aucune donnée n'est disponible\r\n          setStats({\r\n            numQuestions: questions.length,\r\n            numReponses: 0,\r\n            numUtilisateurs: 0\r\n          });\r\n        }\r\n      } catch (statsError) {\r\n        console.error('Erreur lors du chargement des statistiques:', statsError);\r\n        // Statistiques par défaut en cas d'erreur\r\n        setStats({\r\n          numQuestions: questions.length,\r\n          numReponses: 0,\r\n          numUtilisateurs: 0\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des données du questionnaire:', error);\r\n      setError(\"Impossible de charger les données du questionnaire\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Retour à la liste des questionnaires\r\n  const handleBackToList = () => {\r\n    navigate('/questionnaires');\r\n  };\r\n  \r\n  // Navigation vers la page d'administration\r\n  const handleGoToAdmin = () => {\r\n    navigate(`/questionnaires/admin?id=${id}`);\r\n  };\r\n  \r\n  // Formater la date de manière sécurisée\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR', {\r\n        day: '2-digit',\r\n        month: 'short',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    } catch (e) {\r\n      console.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  if (error) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            onClick={handleBackToList}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Retour à la liste\r\n          </Button>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n  if (!questionnaire) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\r\n          <Typography variant=\"h5\" color=\"error\" gutterBottom>\r\n            Questionnaire non trouvé\r\n          </Typography>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            onClick={handleBackToList}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Retour à la liste\r\n          </Button>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n  // Trier les questions par ordre\r\n  const sortedQuestions = [...questions].sort((a, b) => \r\n    (a.ordre || 0) - (b.ordre || 0)\r\n  );\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <IconButton color=\"primary\" onClick={handleBackToList} sx={{ mr: 1 }}>\r\n                  <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                  {questionnaire.fonction || 'Questionnaire'} - {questionnaire.thematique || 'Sans description'}\r\n                </Typography>\r\n              </Box>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<EditIcon />}\r\n                onClick={handleGoToAdmin}\r\n              >\r\n                Modifier\r\n              </Button>\r\n            </Box>\r\n            \r\n            <Typography variant=\"body1\" paragraph>\r\n              {questionnaire.description || 'Aucune description détaillée disponible.'}\r\n            </Typography>\r\n            \r\n            <Box sx={{ mt: 2, mb: 1 }}>\r\n              <Chip \r\n                label={`Créé le ${formatDate(questionnaire.date_creation || new Date().toISOString())}`} \r\n                variant=\"outlined\" \r\n                size=\"small\" \r\n                sx={{ mr: 1 }}\r\n              />\r\n              <Chip \r\n                label={`Dernière modification: ${formatDate(questionnaire.date_modification || questionnaire.date_creation || new Date().toISOString())}`} \r\n                variant=\"outlined\" \r\n                size=\"small\" \r\n                color=\"info\"\r\n              />\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Statistiques */}\r\n        <Grid xs={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid xs={12} md={4}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Badge \r\n                      badgeContent={stats?.numQuestions || 0} \r\n                      color=\"primary\"\r\n                      max={999}\r\n                      sx={{ mb: 1 }}\r\n                    >\r\n                      <QuestionIcon fontSize=\"large\" />\r\n                    </Badge>\r\n                    <Typography variant=\"body1\" align=\"center\" fontWeight=\"bold\">\r\n                      Questions\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid xs={12} md={4}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Badge \r\n                      badgeContent={stats?.numReponses || 0} \r\n                      color=\"success\"\r\n                      max={999}\r\n                      sx={{ mb: 1 }}\r\n                    >\r\n                      <AssessmentIcon fontSize=\"large\" />\r\n                    </Badge>\r\n                    <Typography variant=\"body1\" align=\"center\" fontWeight=\"bold\">\r\n                      Réponses\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid xs={12} md={4}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n                    <Badge \r\n                      badgeContent={stats?.numUtilisateurs || 0} \r\n                      color=\"info\"\r\n                      max={999}\r\n                      sx={{ mb: 1 }}\r\n                    >\r\n                      <PeopleIcon fontSize=\"large\" />\r\n                    </Badge>\r\n                    <Typography variant=\"body1\" align=\"center\" fontWeight=\"bold\">\r\n                      Utilisateurs\r\n                    </Typography>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        \r\n        {/* Liste des questions */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Questions ({sortedQuestions.length})\r\n            </Typography>\r\n            \r\n            <Divider sx={{ mb: 2 }} />\r\n            \r\n            {sortedQuestions.length > 0 ? (\r\n              sortedQuestions.map((question) => (\r\n                <Accordion key={question.id_question}>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Grid container spacing={1} alignItems=\"center\">\r\n                      <Grid xs={1}>\r\n                        <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                          {question.ordre || '?'}.\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid xs={10}>\r\n                        <Typography variant=\"body1\">\r\n                          {question.texte || 'Question sans texte'}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid xs={1}>\r\n                        <Tooltip title={`Pondération: ${question.ponderation || 0}`}>\r\n                          <Chip \r\n                            label={question.ponderation || 0} \r\n                            color={\r\n                              question.ponderation >= 4 ? 'error' :\r\n                              question.ponderation >= 3 ? 'warning' :\r\n                              question.ponderation >= 2 ? 'info' : 'default'\r\n                            }\r\n                            size=\"small\"\r\n                          />\r\n                        </Tooltip>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Grid container spacing={2}>\r\n                      <Grid xs={12}>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          <strong>Pondération:</strong> {question.ponderation || 0} \r\n                          {question.ponderation >= 4 ? ' (Critique)' : \r\n                           question.ponderation >= 3 ? ' (Important)' : \r\n                           question.ponderation >= 2 ? ' (Significatif)' : ' (Mineur)'}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          <strong>Ajouté le:</strong> {formatDate(question.date_creation || new Date().toISOString())}\r\n                        </Typography>\r\n                        {question.date_modification && question.date_creation && \r\n                         question.date_modification !== question.date_creation && (\r\n                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n                            <strong>Dernière modification:</strong> {formatDate(question.date_modification)}\r\n                          </Typography>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              ))\r\n            ) : (\r\n              <Box textAlign=\"center\" py={4}>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  Ce questionnaire ne contient aucune question.\r\n                </Typography>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  onClick={handleGoToAdmin}\r\n                  sx={{ mt: 2 }}\r\n                >\r\n                  Ajouter des questions\r\n                </Button>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionnaireDetail;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\n\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  TextField,\r\n  IconButton,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Tabs,\r\n  Tab,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Tooltip,\r\n  Alert,\r\n  Snackbar,\r\n  ListItemButton,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  FormHelperText\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Save as SaveIcon,\r\n  Close as CloseIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  FileCopy as CloneIcon,\r\n  DragIndicator as DragIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  fonction: string;\r\n  thematique: string;\r\n  description?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  id_questionnaire: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre: number;\r\n  date_creation: string;\r\n  date_modification: string;\r\n}\r\n\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n  description?: string;\r\n  nombre_thematiques?: number;\r\n}\r\n\r\ninterface QuestionnaireFormValues {\r\n  fonction: string;\r\n  thematique: string;\r\n  description?: string;\r\n}\r\n\r\ninterface QuestionFormValues {\r\n  id_questionnaire: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre?: number | string;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`admin-tabpanel-${index}`}\r\n      aria-labelledby={`admin-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst initialQuestionnaireFormValues: QuestionnaireFormValues = {\r\n  fonction: '',\r\n  thematique: 'Evaluation Complète',\r\n  description: ''\r\n};\r\n\r\nconst initialQuestionFormValues: QuestionFormValues = {\r\n  id_questionnaire: '',\r\n  texte: '',\r\n  ponderation: 1,\r\n  ordre: 0\r\n};\r\n\r\nconst QuestionnaireAdmin: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const questionnaireId = searchParams.get('id');\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\r\n  const [selectedQuestionnaire, setSelectedQuestionnaire] = useState<Questionnaire | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [loadingFonctions, setLoadingFonctions] = useState<boolean>(false);\r\n  \r\n  // États pour les formulaires\r\n  const [questionnaireFormValues, setQuestionnaireFormValues] = useState<QuestionnaireFormValues>(initialQuestionnaireFormValues);\r\n  const [questionFormValues, setQuestionFormValues] = useState<QuestionFormValues>(initialQuestionFormValues);\r\n  \r\n  // États pour les dialogues\r\n  const [openQuestionnaireDialog, setOpenQuestionnaireDialog] = useState<boolean>(false);\r\n  const [openQuestionDialog, setOpenQuestionDialog] = useState<boolean>(false);\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState<boolean>(false);\r\n  const [openDeleteQuestionDialog, setOpenDeleteQuestionDialog] = useState<boolean>(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState<Question | null>(null);\r\n  \r\n  // État pour les notifications\r\n  const [snackbar, setSnackbar] = useState<{\r\n    open: boolean;\r\n    message: string;\r\n    severity: 'success' | 'info' | 'warning' | 'error';\r\n  }>({\r\n    open: false,\r\n    message: '',\r\n    severity: 'info'\r\n  });\r\n  \r\n  // États pour le mode d'édition\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [questionDialogMode, setQuestionDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Chargement initial\r\n  useEffect(() => {\r\n    fetchQuestionnaires().then(() => {\r\n      if (questionnaireId) {\r\n        fetchQuestionnaireById(questionnaireId);\r\n        setTabValue(1); // Aller à l'onglet des questions\r\n      }\r\n    });\r\n    fetchFonctions(); // Charger les fonctions\r\n  }, [questionnaireId]);\r\n  \r\n  // Récupérer tous les questionnaires\r\n  const fetchQuestionnaires = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.get('questionnaires');\r\n      \r\n      let questionnaireData = [];\r\n      if (Array.isArray(response)) {\r\n        questionnaireData = response;\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        questionnaireData = response.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour questionnaires:', response);\r\n        setError('Format de données inattendu pour les questionnaires');\r\n        questionnaireData = [];\r\n      }\r\n      \r\n      setQuestionnaires(questionnaireData);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des questionnaires:', error);\r\n      showSnackbar('Erreur lors du chargement des questionnaires.', 'error');\r\n      setError('Impossible de charger les questionnaires');\r\n      setQuestionnaires([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Récupérer toutes les fonctions\r\n  const fetchFonctions = async () => {\r\n    setLoadingFonctions(true);\r\n    \r\n    try {\r\n      const response = await api.get('fonctions');\r\n      \r\n      let fonctionsData = [];\r\n      if (Array.isArray(response)) {\r\n        fonctionsData = response;\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        fonctionsData = response.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour fonctions:', response);\r\n        fonctionsData = [];\r\n      }\r\n      \r\n      setFonctions(fonctionsData);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des fonctions:', error);\r\n      showSnackbar('Erreur lors du chargement des fonctions.', 'warning');\r\n      setFonctions([]);\r\n    } finally {\r\n      setLoadingFonctions(false);\r\n    }\r\n  };\r\n  \r\n  // Récupérer un questionnaire par son ID\r\n  const fetchQuestionnaireById = async (id: string) => {\r\n    try {\r\n      const questionnaireResponse = await api.get(`questionnaires/${id}`);\r\n      \r\n      let questionnaireData = null;\r\n      if (questionnaireResponse && typeof questionnaireResponse === 'object') {\r\n        if (Array.isArray(questionnaireResponse)) {\r\n          questionnaireData = questionnaireResponse[0];\r\n        } else if (questionnaireResponse.data) {\r\n          questionnaireData = questionnaireResponse.data;\r\n        } else {\r\n          questionnaireData = questionnaireResponse;\r\n        }\r\n      }\r\n      \r\n      if (questionnaireData && questionnaireData.id_questionnaire) {\r\n        setSelectedQuestionnaire(questionnaireData);\r\n      } else {\r\n        showSnackbar('Format de réponse inattendu pour le questionnaire', 'warning');\r\n        console.warn('Format de réponse inattendu pour questionnaire:', questionnaireResponse);\r\n      }\r\n      \r\n      // Récupérer les questions\r\n      try {\r\n        const questionsResponse = await api.get(`questionnaires/${id}/questions`);\r\n        \r\n        let questionsData = [];\r\n        if (Array.isArray(questionsResponse)) {\r\n          questionsData = questionsResponse;\r\n        } else if (questionsResponse && questionsResponse.data && Array.isArray(questionsResponse.data)) {\r\n          questionsData = questionsResponse.data;\r\n        } else {\r\n          console.warn('Format de réponse inattendu pour les questions:', questionsResponse);\r\n          questionsData = [];\r\n        }\r\n        \r\n        // Trier les questions par ordre\r\n        setQuestions(questionsData.sort((a: Question, b: Question) => (a.ordre || 0) - (b.ordre || 0)));\r\n      } catch (questionsError) {\r\n        console.error('Erreur lors du chargement des questions:', questionsError);\r\n        showSnackbar('Erreur lors du chargement des questions.', 'error');\r\n        setQuestions([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement du questionnaire:', error);\r\n      showSnackbar('Erreur lors du chargement du questionnaire.', 'error');\r\n    }\r\n  };\r\n  \r\n  // Gérer l'ouverture du dialogue de création de questionnaire\r\n  const handleOpenCreateQuestionnaireDialog = () => {\r\n    setDialogMode('create');\r\n    setQuestionnaireFormValues(initialQuestionnaireFormValues);\r\n    setOpenQuestionnaireDialog(true);\r\n    // Charger les fonctions si pas encore fait\r\n    if (fonctions.length === 0) {\r\n      fetchFonctions();\r\n    }\r\n  };\r\n  \r\n  // Gérer l'ouverture du dialogue d'édition de questionnaire\r\n  const handleOpenEditQuestionnaireDialog = (questionnaire: Questionnaire) => {\r\n    setDialogMode('edit');\r\n    setQuestionnaireFormValues({\r\n      fonction: questionnaire.fonction || '',\r\n      thematique: questionnaire.thematique || 'Evaluation Complète',\r\n      description: questionnaire.description || ''\r\n    });\r\n    setOpenQuestionnaireDialog(true);\r\n    // Charger les fonctions si pas encore fait\r\n    if (fonctions.length === 0) {\r\n      fetchFonctions();\r\n    }\r\n  };\r\n  \r\n  // Fermer le dialogue de questionnaire\r\n  const handleCloseQuestionnaireDialog = () => {\r\n    setOpenQuestionnaireDialog(false);\r\n  };\r\n  \r\n  // Gérer les changements dans le formulaire de questionnaire\r\n  const handleQuestionnaireFormChange = (event: React.ChangeEvent<HTMLInputElement> | { target: { name: string; value: unknown } }) => {\r\n    const { name, value } = event.target;\r\n    setQuestionnaireFormValues({\r\n      ...questionnaireFormValues,\r\n      [name]: value as string\r\n    });\r\n  };\r\n  \r\n  // Soumettre le formulaire de questionnaire\r\n  const handleSubmitQuestionnaire = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        const response = await api.post('questionnaires', questionnaireFormValues);\r\n        await fetchQuestionnaires();\r\n        showSnackbar('Questionnaire créé avec succès.', 'success');\r\n        \r\n        // Sélectionner le nouveau questionnaire\r\n        let newId = '';\r\n        if (response && response.data && response.data.id_questionnaire) {\r\n          newId = response.data.id_questionnaire;\r\n        } else if (response && response.id_questionnaire) {\r\n          newId = response.id_questionnaire;\r\n        }\r\n        \r\n        if (newId) {\r\n          await fetchQuestionnaireById(newId);\r\n          setTabValue(1); // Aller à l'onglet des questions\r\n        }\r\n      } else if (dialogMode === 'edit' && selectedQuestionnaire) {\r\n        await api.put(\r\n          `questionnaires/${selectedQuestionnaire.id_questionnaire}`, \r\n          questionnaireFormValues\r\n        );\r\n        await fetchQuestionnaires();\r\n        await fetchQuestionnaireById(selectedQuestionnaire.id_questionnaire);\r\n        showSnackbar('Questionnaire mis à jour avec succès.', 'success');\r\n      }\r\n      \r\n      handleCloseQuestionnaireDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde du questionnaire:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde du questionnaire.', 'error');\r\n    }\r\n  };\r\n  \r\n  // Gérer l'ouverture du dialogue de confirmation de suppression\r\n  const handleOpenDeleteDialog = (questionnaire: Questionnaire) => {\r\n    setSelectedQuestionnaire(questionnaire);\r\n    setOpenDeleteDialog(true);\r\n  };\r\n  \r\n  // Fermer le dialogue de confirmation de suppression\r\n  const handleCloseDeleteDialog = () => {\r\n    setOpenDeleteDialog(false);\r\n  };\r\n  \r\n  // Supprimer un questionnaire\r\n  const handleDeleteQuestionnaire = async () => {\r\n    if (!selectedQuestionnaire) return;\r\n    \r\n    try {\r\n      await api.delete(`questionnaires/${selectedQuestionnaire.id_questionnaire}`);\r\n      await fetchQuestionnaires();\r\n      setSelectedQuestionnaire(null);\r\n      setQuestions([]);\r\n      setTabValue(0); // Retour à la liste\r\n      handleCloseDeleteDialog();\r\n      showSnackbar('Questionnaire supprimé avec succès.', 'success');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression du questionnaire:', error);\r\n      showSnackbar('Erreur lors de la suppression du questionnaire.', 'error');\r\n    }\r\n  };\r\n\r\n  // Sélectionner un questionnaire pour l'édition\r\n  const handleSelectQuestionnaire = async (questionnaire: Questionnaire) => {\r\n    setSelectedQuestionnaire(questionnaire);\r\n    await fetchQuestionnaireById(questionnaire.id_questionnaire);\r\n    setTabValue(1); // Aller à l'onglet des questions\r\n    \r\n    // Mettre à jour l'URL pour faciliter le partage\r\n    navigate(`/questionnaires/admin?id=${questionnaire.id_questionnaire}`, { replace: true });\r\n  };\r\n\r\n  // Gérer le changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Gérer l'ouverture du dialogue de création de question\r\n  const handleOpenCreateQuestionDialog = () => {\r\n    if (!selectedQuestionnaire) {\r\n      showSnackbar('Veuillez d\\'abord sélectionner un questionnaire.', 'warning');\r\n      return;\r\n    }\r\n    \r\n    setQuestionDialogMode('create');\r\n    setQuestionFormValues({\r\n      ...initialQuestionFormValues,\r\n      id_questionnaire: selectedQuestionnaire.id_questionnaire,\r\n      ordre: questions.length + 1 // Définir l'ordre automatiquement\r\n    });\r\n    setOpenQuestionDialog(true);\r\n  };\r\n\r\n  // Gérer l'ouverture du dialogue d'édition de question\r\n  const handleOpenEditQuestionDialog = (question: Question) => {\r\n    setQuestionDialogMode('edit');\r\n    setCurrentQuestion(question);\r\n    setQuestionFormValues({\r\n      id_questionnaire: question.id_questionnaire,\r\n      texte: question.texte || '',\r\n      ponderation: question.ponderation || 1,\r\n      ordre: question.ordre\r\n    });\r\n    setOpenQuestionDialog(true);\r\n  };\r\n\r\n  // Fermer le dialogue de question\r\n  const handleCloseQuestionDialog = () => {\r\n    setOpenQuestionDialog(false);\r\n    setCurrentQuestion(null);\r\n  };\r\n\r\n  // Gérer les changements dans le formulaire de question\r\n  const handleQuestionFormChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    \r\n    // Convertir en nombre si nécessaire\r\n    if (name === 'ponderation' || name === 'ordre') {\r\n      setQuestionFormValues({\r\n        ...questionFormValues,\r\n        [name]: value === '' ? '' : parseFloat(value)\r\n      });\r\n    } else {\r\n      setQuestionFormValues({\r\n        ...questionFormValues,\r\n        [name]: value\r\n      });\r\n    }\r\n  };\r\n\r\n  // Soumettre le formulaire de question\r\n  const handleSubmitQuestion = async () => {\r\n    try {\r\n      // Préparer les données avec la bonne conversion des types\r\n      const questionData = {\r\n        ...questionFormValues,\r\n        ponderation: Number(questionFormValues.ponderation) || 1,\r\n        ordre: Number(questionFormValues.ordre) || (questions.length + 1)\r\n      };\r\n\r\n      if (questionDialogMode === 'create') {\r\n        await api.post('questions', questionData);\r\n        showSnackbar('Question ajoutée avec succès.', 'success');\r\n      } else if (questionDialogMode === 'edit' && currentQuestion) {\r\n        await api.put(`questions/${currentQuestion.id_question}`, questionData);\r\n        showSnackbar('Question mise à jour avec succès.', 'success');\r\n      }\r\n      \r\n      if (selectedQuestionnaire) {\r\n        await fetchQuestionnaireById(selectedQuestionnaire.id_questionnaire);\r\n      }\r\n      \r\n      handleCloseQuestionDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde de la question:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde de la question.', 'error');\r\n    }\r\n  };\r\n\r\n  // Gérer l'ouverture du dialogue de confirmation de suppression de question\r\n  const handleOpenDeleteQuestionDialog = (question: Question) => {\r\n    setCurrentQuestion(question);\r\n    setOpenDeleteQuestionDialog(true);\r\n  };\r\n\r\n  // Fermer le dialogue de confirmation de suppression de question\r\n  const handleCloseDeleteQuestionDialog = () => {\r\n    setOpenDeleteQuestionDialog(false);\r\n    setCurrentQuestion(null);\r\n  };\r\n\r\n  // Supprimer une question\r\n  const handleDeleteQuestion = async () => {\r\n    if (!currentQuestion) return;\r\n    \r\n    try {\r\n      await api.delete(`questions/${currentQuestion.id_question}`);\r\n      \r\n      if (selectedQuestionnaire) {\r\n        await fetchQuestionnaireById(selectedQuestionnaire.id_questionnaire);\r\n      }\r\n      \r\n      handleCloseDeleteQuestionDialog();\r\n      showSnackbar('Question supprimée avec succès.', 'success');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de la question:', error);\r\n      showSnackbar('Erreur lors de la suppression de la question.', 'error');\r\n    }\r\n  };\r\n\r\n  // Cloner un questionnaire existant\r\n  const handleCloneQuestionnaire = async (questionnaire: Questionnaire) => {\r\n    try {\r\n      // Créer un nouveau questionnaire\r\n      const newQuestionnaireData = {\r\n        fonction: `${questionnaire.fonction || 'Questionnaire'} (copie)`,\r\n        thematique: questionnaire.thematique || '',\r\n        description: questionnaire.description || ''\r\n      };\r\n      \r\n      const newQuestionnaireResponse = await api.post('questionnaires', newQuestionnaireData);\r\n      \r\n      // Extraire l'ID du nouveau questionnaire\r\n      let newQuestionnaireId = '';\r\n      if (newQuestionnaireResponse && newQuestionnaireResponse.data && newQuestionnaireResponse.data.id_questionnaire) {\r\n        newQuestionnaireId = newQuestionnaireResponse.data.id_questionnaire;\r\n      } else if (newQuestionnaireResponse && newQuestionnaireResponse.id_questionnaire) {\r\n        newQuestionnaireId = newQuestionnaireResponse.id_questionnaire;\r\n      } else {\r\n        console.warn('Format de réponse inattendu lors de la création du questionnaire cloné:', newQuestionnaireResponse);\r\n        showSnackbar('Questionnaire créé mais impossible de cloner les questions.', 'warning');\r\n        await fetchQuestionnaires();\r\n        return;\r\n      }\r\n      \r\n      // Récupérer toutes les questions de l'ancien questionnaire\r\n      const questionsResponse = await api.get(`questionnaires/${questionnaire.id_questionnaire}/questions`);\r\n      \r\n      let questionsToClone = [];\r\n      if (Array.isArray(questionsResponse)) {\r\n        questionsToClone = questionsResponse;\r\n      } else if (questionsResponse && questionsResponse.data && Array.isArray(questionsResponse.data)) {\r\n        questionsToClone = questionsResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les questions à cloner:', questionsResponse);\r\n        questionsToClone = [];\r\n      }\r\n      \r\n      // Créer les questions dans le nouveau questionnaire\r\n      for (const question of questionsToClone) {\r\n        try {\r\n          await api.post('questions', {\r\n            id_questionnaire: newQuestionnaireId,\r\n            texte: question.texte || '',\r\n            ponderation: question.ponderation || 1,\r\n            ordre: question.ordre || 0\r\n          });\r\n        } catch (questionError) {\r\n          console.error('Erreur lors du clonage de la question:', questionError);\r\n        }\r\n      }\r\n      \r\n      // Rafraîchir la liste des questionnaires\r\n      await fetchQuestionnaires();\r\n      \r\n      // Sélectionner le nouveau questionnaire\r\n      await fetchQuestionnaireById(newQuestionnaireId);\r\n      setTabValue(1); // Aller à l'onglet des questions\r\n      \r\n      showSnackbar('Questionnaire cloné avec succès.', 'success');\r\n    } catch (error) {\r\n      console.error('Erreur lors du clonage du questionnaire:', error);\r\n      showSnackbar('Erreur lors du clonage du questionnaire.', 'error');\r\n    }\r\n  };\r\n\r\n  // Réordonner les questions\r\n  const handleReorderQuestion = async (question: Question, newOrder: number) => {\r\n    if (!question || newOrder < 1 || newOrder > questions.length) return;\r\n    \r\n    try {\r\n      await api.put(`questions/${question.id_question}`, {\r\n        id_questionnaire: question.id_questionnaire,\r\n        texte: question.texte,\r\n        ponderation: question.ponderation,\r\n        ordre: newOrder\r\n      });\r\n      \r\n      if (selectedQuestionnaire) {\r\n        await fetchQuestionnaireById(selectedQuestionnaire.id_questionnaire);\r\n      }\r\n      \r\n      showSnackbar('Question réordonnée avec succès.', 'success');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la réorganisation des questions:', error);\r\n      showSnackbar('Erreur lors de la réorganisation des questions.', 'error');\r\n    }\r\n  };\r\n\r\n  // Afficher une notification\r\n  const showSnackbar = (message: string, severity: 'success' | 'info' | 'warning' | 'error') => {\r\n    setSnackbar({\r\n      open: true,\r\n      message,\r\n      severity\r\n    });\r\n  };\r\n\r\n  // Fermer la notification\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({ ...snackbar, open: false });\r\n  };\r\n\r\n  // Navigation vers la liste des questionnaires\r\n  const handleBackToList = () => {\r\n    navigate('/questionnaires');\r\n  };\r\n\r\n  if (loading && questionnaires.length === 0) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <IconButton color=\"primary\" onClick={handleBackToList} sx={{ mr: 1 }}>\r\n                  <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                  Administration des Questionnaires\r\n                </Typography>\r\n              </Box>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleOpenCreateQuestionnaireDialog}\r\n              >\r\n                Nouveau Questionnaire\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Onglets */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ width: '100%' }}>\r\n            <Tabs\r\n              value={tabValue}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"Liste des Questionnaires\" />\r\n              <Tab label=\"Gestion des Questions\" disabled={!selectedQuestionnaire} />\r\n            </Tabs>\r\n\r\n            {/* Onglet Liste des Questionnaires */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Questionnaires disponibles\r\n                </Typography>\r\n                <Divider />\r\n              </Box>\r\n              \r\n              {questionnaires.length > 0 ? (\r\n                <List>\r\n                  {questionnaires.map((questionnaire) => (\r\n                    <ListItemButton\r\n                      key={questionnaire.id_questionnaire}\r\n                      onClick={() => handleSelectQuestionnaire(questionnaire)}\r\n                      selected={selectedQuestionnaire?.id_questionnaire === questionnaire.id_questionnaire}\r\n                      sx={{ \r\n                        borderRadius: 1, \r\n                        mb: 1,\r\n                        border: '1px solid',\r\n                        borderColor: 'divider'\r\n                      }}\r\n                    >\r\n                      <ListItemText\r\n                        primary={\r\n                          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                            {questionnaire.fonction || 'Sans titre'} - {questionnaire.thematique || 'Sans description'}\r\n                          </Typography>\r\n                        }\r\n                        secondary={\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {questionnaire.description ? \r\n                              (questionnaire.description.length > 100 ? \r\n                                questionnaire.description.substring(0, 100) + '...' : \r\n                                questionnaire.description) : \r\n                              'Aucune description détaillée'\r\n                            }\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <Tooltip title=\"Éditer\">\r\n                          <IconButton \r\n                            edge=\"end\" \r\n                            color=\"primary\" \r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleOpenEditQuestionnaireDialog(questionnaire);\r\n                            }}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Cloner\">\r\n                          <IconButton \r\n                            edge=\"end\" \r\n                            color=\"secondary\" \r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleCloneQuestionnaire(questionnaire);\r\n                            }}\r\n                          >\r\n                            <CloneIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Supprimer\">\r\n                          <IconButton \r\n                            edge=\"end\" \r\n                            color=\"error\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleOpenDeleteDialog(questionnaire);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                  ))}\r\n                </List>\r\n              ) : (\r\n                <Box textAlign=\"center\" py={4}>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    Aucun questionnaire disponible.\r\n                  </Typography>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\" \r\n                    startIcon={<AddIcon />}\r\n                    onClick={handleOpenCreateQuestionnaireDialog}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Créer un questionnaire\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </TabPanel>\r\n\r\n            {/* Onglet Gestion des Questions */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              {selectedQuestionnaire ? (\r\n                <>\r\n                  <Card sx={{ mb: 3 }}>\r\n                    <CardHeader \r\n                      title={`${selectedQuestionnaire.fonction || 'Sans titre'} - ${selectedQuestionnaire.thematique || 'Sans description'}`}\r\n                      action={\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          startIcon={<EditIcon />}\r\n                          onClick={() => handleOpenEditQuestionnaireDialog(selectedQuestionnaire)}\r\n                        >\r\n                          Modifier\r\n                        </Button>\r\n                      }\r\n                    />\r\n                    <CardContent>\r\n                      <Typography variant=\"body1\" paragraph>\r\n                        {selectedQuestionnaire.description || 'Aucune description détaillée disponible.'}\r\n                      </Typography>\r\n                      \r\n                      <Box display=\"flex\" justifyContent=\"flex-end\" sx={{ mt: 2 }}>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          startIcon={<AddIcon />}\r\n                          onClick={handleOpenCreateQuestionDialog}\r\n                        >\r\n                          Ajouter une Question\r\n                        </Button>\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Questions ({questions.length})\r\n                  </Typography>\r\n                  <Divider sx={{ mb: 2 }} />\r\n                  \r\n                  {questions.length > 0 ? (\r\n                    questions\r\n                      .sort((a, b) => (a.ordre || 0) - (b.ordre || 0))\r\n                      .map((question) => (\r\n                        <Accordion key={question.id_question}>\r\n                          <AccordionSummary \r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            sx={{ \r\n                              '&:hover': { bgcolor: 'action.hover' },\r\n                              bgcolor: 'background.default'\r\n                            }}\r\n                          >\r\n                            <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\r\n                              <Tooltip title=\"Glisser pour réorganiser\">\r\n                                <DragIcon color=\"action\" sx={{ mr: 1, cursor: 'grab' }} />\r\n                              </Tooltip>\r\n                              <Typography sx={{ width: '5%', mr: 1 }}>\r\n                                <strong>{question.ordre || '?'}.</strong>\r\n                              </Typography>\r\n                              <Typography sx={{ width: '80%' }}>\r\n                                {question.texte || 'Question sans texte'}\r\n                              </Typography>\r\n                              <Typography sx={{ width: '15%', textAlign: 'right' }}>\r\n                                Pond.: {question.ponderation || 0}\r\n                              </Typography>\r\n                            </Box>\r\n                          </AccordionSummary>\r\n                          <AccordionDetails>\r\n                            <Grid container spacing={2}>\r\n                              <Grid xs={12} md={8}>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                  <strong>Pondération:</strong> {question.ponderation || 0}\r\n                                </Typography>\r\n                                <Typography variant=\"caption\" color=\"textSecondary\">\r\n                                  Dernière modification: {question.date_modification ? \r\n                                    new Date(question.date_modification).toLocaleDateString() : \r\n                                    'Date inconnue'}\r\n                                </Typography>\r\n                              </Grid>\r\n                              <Grid xs={12} md={4}>\r\n                                <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                                  <Tooltip title=\"Monter\">\r\n                                    <span>\r\n                                      <IconButton \r\n                                        color=\"primary\" \r\n                                        onClick={() => handleReorderQuestion(question, (question.ordre || 0) - 1)}\r\n                                        disabled={(question.ordre || 0) <= 1}\r\n                                      >\r\n                                        <ArrowBackIcon sx={{ transform: 'rotate(90deg)' }} />\r\n                                      </IconButton>\r\n                                    </span>\r\n                                  </Tooltip>\r\n                                  <Tooltip title=\"Descendre\">\r\n                                    <span>\r\n                                      <IconButton \r\n                                        color=\"primary\" \r\n                                        onClick={() => handleReorderQuestion(question, (question.ordre || 0) + 1)}\r\n                                        disabled={(question.ordre || 0) >= questions.length}\r\n                                      >\r\n                                        <ArrowBackIcon sx={{ transform: 'rotate(-90deg)' }} />\r\n                                      </IconButton>\r\n                                    </span>\r\n                                  </Tooltip>\r\n                                  <Tooltip title=\"Modifier la question\">\r\n                                    <IconButton \r\n                                      color=\"primary\" \r\n                                      onClick={() => handleOpenEditQuestionDialog(question)}\r\n                                    >\r\n                                      <EditIcon />\r\n                                    </IconButton>\r\n                                  </Tooltip>\r\n                                  <Tooltip title=\"Supprimer la question\">\r\n                                    <IconButton \r\n                                      color=\"error\" \r\n                                      onClick={() => handleOpenDeleteQuestionDialog(question)}\r\n                                    >\r\n                                      <DeleteIcon />\r\n                                    </IconButton>\r\n                                  </Tooltip>\r\n                                </Box>\r\n                              </Grid>\r\n                            </Grid>\r\n                          </AccordionDetails>\r\n                        </Accordion>\r\n                      ))\r\n                  ) : (\r\n                    <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                      Aucune question définie pour ce questionnaire. Utilisez le bouton \"Ajouter une Question\" pour commencer.\r\n                    </Alert>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <Box textAlign=\"center\" py={4}>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    Veuillez sélectionner un questionnaire dans l'onglet précédent.\r\n                  </Typography>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => setTabValue(0)}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Retour à la liste\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialog pour créer/modifier un questionnaire */}\r\n      <Dialog open={openQuestionnaireDialog} onClose={handleCloseQuestionnaireDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer un nouveau questionnaire' : 'Modifier le questionnaire'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth required>\r\n                  <InputLabel id=\"fonction-select-label\">Fonction</InputLabel>\r\n                  <Select\r\n                    labelId=\"fonction-select-label\"\r\n                    id=\"fonction\"\r\n                    name=\"fonction\"\r\n                    value={questionnaireFormValues.fonction}\r\n                    label=\"Fonction\"\r\n                    onChange={(e) => handleQuestionnaireFormChange(e as any)}\r\n                    disabled={loadingFonctions}\r\n                  >\r\n                    {fonctions.map((fonction) => (\r\n                      <MenuItem key={fonction.id_fonction} value={fonction.nom}>\r\n                        {fonction.nom}\r\n                        {fonction.nombre_thematiques ? ` (${fonction.nombre_thematiques} thématiques)` : ''}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  <FormHelperText>\r\n                    {loadingFonctions ? 'Chargement des fonctions...' : 'Sélectionnez la fonction d\\'évaluation'}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"thematique\"\r\n                  name=\"thematique\"\r\n                  label=\"Description\"\r\n                  value={questionnaireFormValues.thematique}\r\n                  onChange={handleQuestionnaireFormChange}\r\n                  helperText=\"Ex: Evaluation Complète, Infrastructure, CI/CD\"\r\n                />\r\n              </Grid>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  label=\"Description détaillée\"\r\n                  multiline\r\n                  rows={4}\r\n                  value={questionnaireFormValues.description}\r\n                  onChange={handleQuestionnaireFormChange}\r\n                  helperText=\"Description détaillée du questionnaire et de son objectif\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseQuestionnaireDialog}>Annuler</Button>\r\n          <Button \r\n            onClick={handleSubmitQuestionnaire} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            startIcon={<SaveIcon />}\r\n            disabled={!questionnaireFormValues.fonction || !questionnaireFormValues.thematique}\r\n          >\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog pour créer/modifier une question */}\r\n      <Dialog open={openQuestionDialog} onClose={handleCloseQuestionDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {questionDialogMode === 'create' ? 'Ajouter une nouvelle question' : 'Modifier la question'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"texte\"\r\n                  name=\"texte\"\r\n                  label=\"Texte de la question\"\r\n                  multiline\r\n                  rows={2}\r\n                  value={questionFormValues.texte}\r\n                  onChange={handleQuestionFormChange}\r\n                  helperText=\"Formulez une question claire et concise\"\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"ponderation\"\r\n                  name=\"ponderation\"\r\n                  label=\"Pondération\"\r\n                  type=\"number\"\r\n                  inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                  value={questionFormValues.ponderation}\r\n                  onChange={handleQuestionFormChange}\r\n                  helperText=\"Importance de la question (0 à 5)\"\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"ordre\"\r\n                  name=\"ordre\"\r\n                  label=\"Ordre\"\r\n                  type=\"number\"\r\n                  inputProps={{ min: 1, step: 1 }}\r\n                  value={questionFormValues.ordre}\r\n                  onChange={handleQuestionFormChange}\r\n                  helperText=\"Position dans le questionnaire\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseQuestionDialog}>Annuler</Button>\r\n          <Button \r\n            onClick={handleSubmitQuestion} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            startIcon={<SaveIcon />}\r\n            disabled={!questionFormValues.texte}\r\n          >\r\n            {questionDialogMode === 'create' ? 'Ajouter' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression de questionnaire */}\r\n      <Dialog open={openDeleteDialog} onClose={handleCloseDeleteDialog}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer le questionnaire \"{selectedQuestionnaire?.fonction || 'Sans titre'} - {selectedQuestionnaire?.thematique || 'Sans description'}\" ?\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDeleteDialog}>Annuler</Button>\r\n          <Button onClick={handleDeleteQuestionnaire} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression de question */}\r\n      <Dialog open={openDeleteQuestionDialog} onClose={handleCloseDeleteQuestionDialog}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer la question \"{currentQuestion?.texte || 'Sans texte'}\" ?\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDeleteQuestionDialog}>Annuler</Button>\r\n          <Button onClick={handleDeleteQuestion} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Notification */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n        message={snackbar.message}\r\n        action={\r\n          <IconButton\r\n            size=\"small\"\r\n            color=\"inherit\"\r\n            onClick={handleCloseSnackbar}\r\n          >\r\n            <CloseIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        }\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionnaireAdmin;","import React from 'react';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { fr } from 'date-fns/locale';\r\nimport { TextField, TextFieldProps } from '@mui/material';\r\n\r\ninterface DatePickerWrapperProps {\r\n  label: string;\r\n  value: Date | null;\r\n  onChange: (date: Date | null) => void;\r\n  minDate?: Date;\r\n  maxDate?: Date;\r\n  disabled?: boolean;\r\n  fullWidth?: boolean;\r\n  required?: boolean;\r\n  helperText?: string;\r\n  textFieldProps?: Partial<TextFieldProps>;\r\n}\r\n\r\n/**\r\n * Composant wrapper pour le DatePicker de MUI qui gère la configuration de l'adaptateur\r\n * Ceci facilite l'utilisation cohérente des DatePickers dans l'application\r\n */\r\nconst DatePickerWrapper: React.FC<DatePickerWrapperProps> = ({\r\n  label,\r\n  value,\r\n  onChange,\r\n  minDate,\r\n  maxDate,\r\n  disabled = false,\r\n  fullWidth = true,\r\n  required = false,\r\n  helperText,\r\n  textFieldProps = {}\r\n}) => {\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={fr}>\r\n      <DatePicker\r\n        label={label}\r\n        value={value}\r\n        onChange={onChange}\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        disabled={disabled}\r\n        slotProps={{\r\n          textField: {\r\n            fullWidth,\r\n            required,\r\n            helperText,\r\n            ...textFieldProps\r\n          }\r\n        }}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default DatePickerWrapper;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\nimport { \r\n  Container, \r\n  Grid, \r\n  Paper, \r\n  Typography, \r\n  Box, \r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport { \r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Assessment as AssessmentIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DatePickerWrapper from '../../../components/common/DataPickerWrapper';\r\n\r\n// Types\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n  statut: string;\r\n  type: string;\r\n  hebergement: string;\r\n  architecture_logicielle: string;\r\n  date_mise_en_prod?: string;\r\n  editeur?: string;\r\n  language?: string;\r\n  description?: string;\r\n}\r\n\r\ninterface FormValues {\r\n  nom_application: string;\r\n  statut: string;\r\n  type: string;\r\n  hebergement: string;\r\n  architecture_logicielle: string;\r\n  date_mise_en_prod?: string;\r\n  editeur?: string;\r\n  language?: string;\r\n  description?: string;\r\n}\r\n\r\nconst initialFormValues: FormValues = {\r\n  nom_application: '',\r\n  statut: 'Projet',\r\n  type: 'Build',\r\n  hebergement: 'Cloud',\r\n  architecture_logicielle: 'MVC',\r\n  date_mise_en_prod: undefined,\r\n  editeur: '',\r\n  language: '',\r\n  description: ''\r\n};\r\n\r\nconst Applications: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n  const [currentApplication, setCurrentApplication] = useState<Application | null>(null);\r\n  const [formValues, setFormValues] = useState<FormValues>(initialFormValues);\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState<boolean>(false);\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchApplications();\r\n  }, []);\r\n\r\n  const fetchApplications = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n      const response = await api.get('applications');\r\n      \r\n      // Vérifier si la réponse est un tableau ou si elle a une propriété data qui est un tableau\r\n      if (Array.isArray(response)) {\r\n        setApplications(response);\r\n      } else if (response && response.data && Array.isArray(response.data)) {\r\n        setApplications(response.data);\r\n      } else {\r\n        console.warn('Format de réponse inattendu:', response);\r\n        setApplications([]);\r\n        setError('Format de données inattendu. Impossible de charger les applications.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des applications:', error);\r\n      setError('Impossible de charger les applications. Veuillez réessayer plus tard.');\r\n      setApplications([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleOpenCreateDialog = () => {\r\n    setDialogMode('create');\r\n    setFormValues(initialFormValues);\r\n    setSelectedDate(null);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleOpenEditDialog = (application: Application) => {\r\n    setDialogMode('edit');\r\n    setCurrentApplication(application);\r\n    setFormValues({\r\n      nom_application: application.nom_application,\r\n      statut: application.statut,\r\n      type: application.type,\r\n      hebergement: application.hebergement,\r\n      architecture_logicielle: application.architecture_logicielle,\r\n      date_mise_en_prod: application.date_mise_en_prod,\r\n      editeur: application.editeur || '',\r\n      language: application.language || '',\r\n      description: application.description || ''\r\n    });\r\n    \r\n    // Convertir la date si elle existe\r\n    if (application.date_mise_en_prod) {\r\n      setSelectedDate(new Date(application.date_mise_en_prod));\r\n    } else {\r\n      setSelectedDate(null);\r\n    }\r\n    \r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setCurrentApplication(null);\r\n  };\r\n\r\n  const handleFormChange = (event: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const name = event.target.name as keyof FormValues;\r\n    const value = event.target.value as string;\r\n    \r\n    setFormValues({\r\n      ...formValues,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    setSelectedDate(date);\r\n    if (date) {\r\n      const formattedDate = date.toISOString().split('T')[0];\r\n      setFormValues({\r\n        ...formValues,\r\n        date_mise_en_prod: formattedDate\r\n      });\r\n    } else {\r\n      setFormValues({\r\n        ...formValues,\r\n        date_mise_en_prod: undefined\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n        await api.post('applications', formValues);\r\n      } else if (dialogMode === 'edit' && currentApplication) {\r\n        // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n        await api.put(`applications/${currentApplication.id_application}`, formValues);\r\n      }\r\n      \r\n      fetchApplications();\r\n      handleCloseDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde de l\\'application:', error);\r\n      setError('Erreur lors de la sauvegarde de l\\'application. Veuillez réessayer.');\r\n    }\r\n  };\r\n\r\n  const handleOpenDeleteConfirm = (application: Application) => {\r\n    setCurrentApplication(application);\r\n    setDeleteConfirmOpen(true);\r\n  };\r\n\r\n  const handleCloseDeleteConfirm = () => {\r\n    setDeleteConfirmOpen(false);\r\n    setCurrentApplication(null);\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!currentApplication) return;\r\n    \r\n    try {\r\n      // Supprimer le \"/api\" du début car votre service api.ts l'ajoute déjà\r\n      await api.delete(`applications/${currentApplication.id_application}`);\r\n      fetchApplications();\r\n      handleCloseDeleteConfirm();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de l\\'application:', error);\r\n      setError('Erreur lors de la suppression de l\\'application. Veuillez réessayer.');\r\n    }\r\n  };\r\n\r\n  const handleCalculateScore = (application: Application) => {\r\n    navigate(`/analyses/calculer/${application.id_application}`);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Gestion des applications\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleOpenCreateDialog}\r\n              >\r\n                Nouvelle Application\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des applications */}\r\n        <Grid xs={12}>\r\n          {applications.length === 0 ? (\r\n            <Alert severity=\"info\">\r\n              Aucune application trouvée. Créez votre première application en cliquant sur le bouton ci-dessus.\r\n            </Alert>\r\n          ) : (\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Nom</TableCell>\r\n                    <TableCell>Statut</TableCell>\r\n                    <TableCell>Type</TableCell>\r\n                    <TableCell>Hébergement</TableCell>\r\n                    <TableCell>Architecture</TableCell>\r\n                    <TableCell>Date mise en prod.</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {applications.map((app) => (\r\n                    <TableRow key={app.id_application} hover>\r\n                      <TableCell>{app.nom_application}</TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={app.statut} \r\n                          color={app.statut === 'Projet' ? 'info' : 'success'} \r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={app.type} \r\n                          color={app.type === 'Build' ? 'primary' : 'secondary'} \r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>{app.hebergement}</TableCell>\r\n                      <TableCell>{app.architecture_logicielle}</TableCell>\r\n                      <TableCell>\r\n                        {app.date_mise_en_prod \r\n                          ? new Date(app.date_mise_en_prod).toLocaleDateString('fr-FR') \r\n                          : 'Non définie'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <IconButton \r\n                          color=\"primary\" \r\n                          onClick={() => handleOpenEditDialog(app)}\r\n                          title=\"Modifier l'application\"\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton \r\n                          color=\"error\" \r\n                          onClick={() => handleOpenDeleteConfirm(app)}\r\n                          title=\"Supprimer l'application\"\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                        <IconButton \r\n                          color=\"info\" \r\n                          onClick={() => handleCalculateScore(app)}\r\n                          title=\"Calculer le score de maturité\"\r\n                        >\r\n                          <AssessmentIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialog pour créer/modifier */}\r\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer une nouvelle application' : 'Modifier l\\'application'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"nom_application\"\r\n                  name=\"nom_application\"\r\n                  label=\"Nom de l'application\"\r\n                  value={formValues.nom_application}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"statut-label\">Statut</InputLabel>\r\n                  <Select\r\n                    labelId=\"statut-label\"\r\n                    id=\"statut\"\r\n                    name=\"statut\"\r\n                    value={formValues.statut}\r\n                    label=\"Statut\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"Projet\">Projet</MenuItem>\r\n                    <MenuItem value=\"Run\">Run</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"type-label\">Type</InputLabel>\r\n                  <Select\r\n                    labelId=\"type-label\"\r\n                    id=\"type\"\r\n                    name=\"type\"\r\n                    value={formValues.type}\r\n                    label=\"Type\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"Build\">Build</MenuItem>\r\n                    <MenuItem value=\"Buy\">Buy</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"hebergement-label\">Hébergement</InputLabel>\r\n                  <Select\r\n                    labelId=\"hebergement-label\"\r\n                    id=\"hebergement\"\r\n                    name=\"hebergement\"\r\n                    value={formValues.hebergement}\r\n                    label=\"Hébergement\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"Cloud\">Cloud</MenuItem>\r\n                    <MenuItem value=\"Prem\">Prem</MenuItem>\r\n                    <MenuItem value=\"Hybrid\">Hybrid</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"architecture-label\">Architecture</InputLabel>\r\n                  <Select\r\n                    labelId=\"architecture-label\"\r\n                    id=\"architecture_logicielle\"\r\n                    name=\"architecture_logicielle\"\r\n                    value={formValues.architecture_logicielle}\r\n                    label=\"Architecture\"\r\n                    onChange={handleFormChange}\r\n                  >\r\n                    <MenuItem value=\"ERP\">ERP</MenuItem>\r\n                    <MenuItem value=\"Multitenant SAAS\">Multitenant SAAS</MenuItem>\r\n                    <MenuItem value=\"MVC\">MVC</MenuItem>\r\n                    <MenuItem value=\"Monolithique\">Monolithique</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <DatePickerWrapper\r\n                  label=\"Date de mise en production\"\r\n                  value={selectedDate}\r\n                  onChange={handleDateChange}\r\n                  textFieldProps={{\r\n                    variant: 'outlined'\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"editeur\"\r\n                  name=\"editeur\"\r\n                  label=\"Éditeur\"\r\n                  value={formValues.editeur}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"language\"\r\n                  name=\"language\"\r\n                  label=\"Langage principal\"\r\n                  value={formValues.language}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  label=\"Description\"\r\n                  multiline\r\n                  rows={4}\r\n                  value={formValues.description}\r\n                  onChange={handleFormChange}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Annuler</Button>\r\n          <Button \r\n            onClick={handleSubmit} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={!formValues.nom_application}\r\n          >\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression */}\r\n      <Dialog open={deleteConfirmOpen} onClose={handleCloseDeleteConfirm}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer l'application \"{currentApplication?.nom_application}\" ?\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDeleteConfirm}>Annuler</Button>\r\n          <Button onClick={handleDelete} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Applications;","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../services/api';\r\n\r\n  import {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Tabs,\r\n  Tab,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  Radar,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  BarChart,\r\n  Bar,\r\n  Cell\r\n} from 'recharts';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\n// Types\r\ninterface Organisation {\r\n  nom: string;\r\n  nombre_applications: number;\r\n  nombre_analyses: number;\r\n  score_moyen: number;\r\n}\r\n\r\ninterface Analyse {\r\n  idAnalyse: string;\r\n  idApplication: string;\r\n  nomApplication: string;\r\n  scoreGlobal: number;\r\n  interpretation: {\r\n    niveau: string;\r\n    description: string;\r\n    recommandations: string;\r\n  };\r\n  thematiques: {\r\n    thematique: string;\r\n    score: number;\r\n  }[];\r\n  dateAnalyse: string;\r\n}\r\n\r\ninterface ScoreMoyen {\r\n  thematique: string;\r\n  score: number;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`organization-tabpanel-${index}`}\r\n      aria-labelledby={`organization-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Générer des couleurs pour les graphiques\r\nconst COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042', '#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#a4de6c', '#d0ed57'];\r\n\r\n// Composant principal\r\nconst Organisations: React.FC = () => {\r\n  const { name } = useParams<{ name?: string }>();\r\n  const navigate = useNavigate();\r\n  \r\n  // États pour les données\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [organisations, setOrganisations] = useState<Organisation[]>([]);\r\n  const [analyses, setAnalyses] = useState<Analyse[]>([]);\r\n  const [scoresMoyens, setScoresMoyens] = useState<ScoreMoyen[]>([]);\r\n  const [selectedOrganisation, setSelectedOrganisation] = useState<string>('');\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  \r\n  // Charger les organisations et analyses\r\n  useEffect(() => {\r\n    fetchOrganisations().then(() => {\r\n      if (name) {\r\n        setSelectedOrganisation(name);\r\n        fetchAnalysesOrganisation(name);\r\n      }\r\n    });\r\n  }, [name]);\r\n\r\n  // Récupérer toutes les organisations uniques (extraites des acteurs)\r\n  const fetchOrganisations = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await api.get('acteurs');\r\n      \r\n      // Extraire les organisations uniques\r\n      const orgs = [...new Set(response.data.map((acteur: any) => acteur.organisation))].filter(Boolean);\r\n      \r\n      // Préparer les données statistiques des organisations\r\n      const organisationsData: Organisation[] = [];\r\n      \r\n      for (const org of orgs) {\r\n        // Pour chaque organisation, récupérer les statistiques\r\n        try {\r\n          const appCount = await api.get(`acteurs/organisation/${org}/applications/count`);\r\n          const analyses = await api.get(`interpretation/organisation/${org}`);\r\n          \r\n          const scoreTotal = analyses.data.reduce((sum: number, analyse: Analyse) => sum + analyse.scoreGlobal, 0);\r\n          const scoreMoyen = analyses.data.length > 0 ? scoreTotal / analyses.data.length : 0;\r\n          \r\n          organisationsData.push({\r\n            nom: org,\r\n            nombre_applications: appCount.data.count,\r\n            nombre_analyses: analyses.data.length,\r\n            score_moyen: scoreMoyen\r\n          });\r\n        } catch (error) {\r\n          console.error(`Erreur lors de la récupération des statistiques pour ${org}:`, error);\r\n        }\r\n      }\r\n      \r\n      setOrganisations(organisationsData);\r\n      \r\n      if (!name && organisationsData.length > 0) {\r\n        setSelectedOrganisation(organisationsData[0].nom);\r\n        fetchAnalysesOrganisation(organisationsData[0].nom);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des organisations:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Récupérer les analyses d'une organisation\r\n  const fetchAnalysesOrganisation = async (orgName: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const analysesResponse = await api.get(`interpretation/organisation/${orgName}`);\r\n      setAnalyses(analysesResponse.data);\r\n      \r\n      const scoresMoyensResponse = await api.get(`interpretation/organisation/${orgName}/scores-moyens`);\r\n      setScoresMoyens(scoresMoyensResponse.data);\r\n      \r\n      setTabValue(0);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des analyses:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Gérer le changement d'organisation\r\n  const handleOrganisationChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const orgName = event.target.value as string;\r\n    setSelectedOrganisation(orgName);\r\n    navigate(`/organisations/${orgName}`);\r\n  };\r\n\r\n  // Gérer le changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Formater les données pour le radar chart\r\n  const formatForRadarChart = (data: ScoreMoyen[]) => {\r\n    return data.map(item => ({\r\n      thematique: item.thematique,\r\n      score: item.score,\r\n      fullMark: 5\r\n    }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Analyse par Organisation\r\n              </Typography>\r\n              <FormControl sx={{ minWidth: 200 }}>\r\n                <InputLabel id=\"organisation-select-label\">Organisation</InputLabel>\r\n                <Select\r\n                  labelId=\"organisation-select-label\"\r\n                  id=\"organisation-select\"\r\n                  value={selectedOrganisation}\r\n                  onChange={handleOrganisationChange}\r\n                  label=\"Organisation\"\r\n                >\r\n                  {organisations.map((org) => (\r\n                    <MenuItem key={org.nom} value={org.nom}>\r\n                      {org.nom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Box>\r\n            \r\n            {/* Statistiques de l'organisation sélectionnée */}\r\n            {selectedOrganisation && (\r\n              <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                <Grid xs={12} md={4}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" align=\"center\">\r\n                        {organisations.find(org => org.nom === selectedOrganisation)?.nombre_applications || 0}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" align=\"center\">\r\n                        Applications\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid xs={12} md={4}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" align=\"center\">\r\n                        {organisations.find(org => org.nom === selectedOrganisation)?.nombre_analyses || 0}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" align=\"center\">\r\n                        Analyses\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid xs={12} md={4}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" align=\"center\">\r\n                        {(organisations.find(org => org.nom === selectedOrganisation)?.score_moyen || 0).toFixed(2)}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" align=\"center\">\r\n                        Score Moyen\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Onglets */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ width: '100%' }}>\r\n            <Tabs\r\n              value={tabValue}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"Vue d'ensemble\" />\r\n              <Tab label=\"Scores par Thématique\" />\r\n              <Tab label=\"Applications\" />\r\n            </Tabs>\r\n\r\n            {/* Onglet Vue d'ensemble */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Grid container spacing={3}>\r\n                {/* Radar Chart pour les scores par thématique */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Scores moyens par thématique\" />\r\n                    <CardContent>\r\n                      {scoresMoyens.length > 0 ? (\r\n                        <ResponsiveContainer width=\"100%\" height={400}>\r\n                          <RadarChart outerRadius={150} data={formatForRadarChart(scoresMoyens)}>\r\n                            <PolarGrid />\r\n                            <PolarAngleAxis dataKey=\"thematique\" />\r\n                            <PolarRadiusAxis domain={[0, 5]} />\r\n                            <Radar\r\n                              name=\"Score\"\r\n                              dataKey=\"score\"\r\n                              stroke=\"#8884d8\"\r\n                              fill=\"#8884d8\"\r\n                              fillOpacity={0.6}\r\n                            />\r\n                            <Legend />\r\n                          </RadarChart>\r\n                        </ResponsiveContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                {/* Bar Chart pour les scores globaux par application */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Scores globaux par application\" />\r\n                    <CardContent>\r\n                      {analyses.length > 0 ? (\r\n                        <ResponsiveContainer width=\"100%\" height={400}>\r\n                          <BarChart\r\n                            data={analyses.map(analyse => ({\r\n                              name: analyse.nomApplication,\r\n                              score: analyse.scoreGlobal\r\n                            }))}\r\n                            margin={{ top: 5, right: 30, left: 20, bottom: 100 }}\r\n                          >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis \r\n                              dataKey=\"name\" \r\n                              tick={{ angle: -45, textAnchor: 'end' }}\r\n                              height={100}\r\n                            />\r\n                            <YAxis domain={[0, 5]} />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"score\" name=\"Score Global\">\r\n                              {analyses.map((entry, index) => (\r\n                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                              ))}\r\n                            </Bar>\r\n                          </BarChart>\r\n                        </ResponsiveContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                {/* Statistiques par niveau de maturité */}\r\n                <Grid xs={12}>\r\n                  <Card>\r\n                    <CardHeader title=\"Répartition par niveau de maturité\" />\r\n                    <CardContent>\r\n                      {analyses.length > 0 ? (\r\n                        <>\r\n                          <Grid container spacing={2}>\r\n                            {Array.from(new Set(analyses.map(a => a.interpretation.niveau))).map((niveau, index) => {\r\n                              const count = analyses.filter(a => a.interpretation.niveau === niveau).length;\r\n                              const percentage = (count / analyses.length * 100).toFixed(1);\r\n                              \r\n                              return (\r\n                                <Grid xs={6} md={3} key={niveau}>\r\n                                  <Card variant=\"outlined\">\r\n                                    <CardContent sx={{ textAlign: 'center' }}>\r\n                                      <Typography variant=\"h6\" gutterBottom>\r\n                                        {niveau}\r\n                                      </Typography>\r\n                                      <Typography variant=\"h4\" color={COLORS[index % COLORS.length]}>\r\n                                        {count}\r\n                                      </Typography>\r\n                                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                        {percentage}% des applications\r\n                                      </Typography>\r\n                                    </CardContent>\r\n                                  </Card>\r\n                                </Grid>\r\n                              );\r\n                            })}\r\n                          </Grid>\r\n                        </>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Scores par Thématique */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Grid container spacing={3}>\r\n                {/* Tableau des scores moyens par thématique */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Scores moyens par thématique\" />\r\n                    <CardContent>\r\n                      {scoresMoyens.length > 0 ? (\r\n                        <TableContainer>\r\n                          <Table>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>Thématique</TableCell>\r\n                                <TableCell>Score Moyen</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {scoresMoyens.map((score) => (\r\n                                <TableRow key={score.thematique}>\r\n                                  <TableCell>{score.thematique}</TableCell>\r\n                                  <TableCell>\r\n                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                      <Box width=\"50px\" mr={1}>\r\n                                        {score.score.toFixed(2)}\r\n                                      </Box>\r\n                                      <Box flex={1} mr={1}>\r\n                                        <div style={{ \r\n                                          height: '10px', \r\n                                          width: `${score.score / 5 * 100}%`, \r\n                                          backgroundColor: '#8884d8',\r\n                                          borderRadius: '5px'\r\n                                        }} />\r\n                                      </Box>\r\n                                      <Box width=\"30px\">\r\n                                        <Chip \r\n                                          label={score.score >= 4 ? 'A' : \r\n                                                score.score >= 3 ? 'B' : \r\n                                                score.score >= 2 ? 'C' : \r\n                                                score.score >= 1 ? 'D' : 'E'}\r\n                                          size=\"small\"\r\n                                          color={score.score >= 4 ? 'success' : \r\n                                                 score.score >= 3 ? 'info' : \r\n                                                 score.score >= 2 ? 'warning' : \r\n                                                 'error'}\r\n                                        />\r\n                                      </Box>\r\n                                    </Box>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                \r\n                {/* Détail des applications par thématique */}\r\n                <Grid xs={12} md={6}>\r\n                  <Card>\r\n                    <CardHeader title=\"Détail par application et thématique\" />\r\n                    <CardContent>\r\n                      {scoresMoyens.length > 0 ? (\r\n                        <TableContainer sx={{ maxHeight: 440 }}>\r\n                          <Table stickyHeader>\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell>Application</TableCell>\r\n                                <TableCell>Thématique</TableCell>\r\n                                <TableCell>Score</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {analyses.flatMap((analyse) => \r\n                                analyse.thematiques.map((theme) => (\r\n                                  <TableRow key={`${analyse.idAnalyse}-${theme.thematique}`}>\r\n                                    <TableCell>{analyse.nomApplication}</TableCell>\r\n                                    <TableCell>{theme.thematique}</TableCell>\r\n                                    <TableCell>\r\n                                      <Box display=\"flex\" alignItems=\"center\">\r\n                                        <Box width=\"30px\" mr={1}>\r\n                                          {theme.score.toFixed(1)}\r\n                                        </Box>\r\n                                        <Box flex={1}>\r\n                                          <div style={{ \r\n                                            height: '8px', \r\n                                            width: `${theme.score / 5 * 100}%`, \r\n                                            backgroundColor: '#82ca9d',\r\n                                            borderRadius: '4px'\r\n                                          }} />\r\n                                        </Box>\r\n                                      </Box>\r\n                                    </TableCell>\r\n                                  </TableRow>\r\n                                ))\r\n                              )}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                          Aucune donnée disponible\r\n                        </Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Applications */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Grid container spacing={3}>\r\n                {/* Liste des applications */}\r\n                <Grid xs={12}>\r\n                  <TableContainer component={Paper}>\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Application</TableCell>\r\n                          <TableCell>Score Global</TableCell>\r\n                          <TableCell>Niveau de Maturité</TableCell>\r\n                          <TableCell>Date d'Analyse</TableCell>\r\n                          <TableCell>Actions</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {analyses.map((analyse) => (\r\n                          <TableRow key={analyse.idAnalyse} hover>\r\n                            <TableCell>{analyse.nomApplication}</TableCell>\r\n                            <TableCell>\r\n                              <Box display=\"flex\" alignItems=\"center\">\r\n                                <Box width=\"50px\" mr={1}>\r\n                                  {analyse.scoreGlobal.toFixed(2)}\r\n                                </Box>\r\n                                <Box flex={1}>\r\n                                  <div style={{ \r\n                                    height: '10px', \r\n                                    width: `${analyse.scoreGlobal / 5 * 100}%`,\r\n                                    backgroundColor: COLORS[analyses.indexOf(analyse) % COLORS.length],\r\n                                    borderRadius: '5px'\r\n                                  }} />\r\n                                </Box>\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Chip \r\n                                label={analyse.interpretation.niveau} \r\n                                color={\r\n                                  analyse.scoreGlobal >= 4 ? 'success' : \r\n                                  analyse.scoreGlobal >= 3 ? 'info' : \r\n                                  analyse.scoreGlobal >= 2 ? 'warning' : \r\n                                  'error'\r\n                                }\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              {new Date(analyse.dateAnalyse).toLocaleDateString('fr-FR')}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Button \r\n                                variant=\"outlined\" \r\n                                size=\"small\"\r\n                                onClick={() => navigate(`/analyses-interpretations/${analyse.idAnalyse}`)}\r\n                              >\r\n                                Détails\r\n                              </Button>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Organisations;","// src/pages/dashboard/utils/AnalysesUtils.ts\r\nimport { Analyse, Thematique } from '../types/AnalysesTypes';\r\n\r\n// Fonction pour convertir les thématiques en format pour le RadarChart\r\nexport const convertToRadarData = (thematiques: Thematique[] = []) => {\r\n  // Préparer les données pour le radar chart\r\n  return thematiques.map(theme => ({\r\n    thematique: theme.thematique,\r\n    score: theme.score,\r\n    fullMark: 5 // Score maximum possible\r\n  }));\r\n};\r\n\r\n// Normaliser l'objet analyse pour gérer les différents formats possibles (camelCase vs snake_case)\r\nexport const normalizeAnalyse = (analyse: Analyse): Analyse => {\r\n    // S'assurer que les scores globaux sont des nombres\r\n    const score_global = \r\n      typeof analyse.score_global === 'number' ? analyse.score_global :\r\n      typeof analyse.score_global === 'string' ? parseFloat(analyse.score_global) :\r\n      typeof analyse.scoreGlobal === 'number' ? analyse.scoreGlobal :\r\n      typeof analyse.scoreGlobal === 'string' ? parseFloat(analyse.scoreGlobal) : \r\n      null;\r\n    \r\n    // Normaliser les thématiques s'il y en a\r\n    const thematiques = Array.isArray(analyse.thematiques) \r\n      ? analyse.thematiques.map(theme => ({\r\n          ...theme,\r\n          // S'assurer que le score de la thématique est un nombre\r\n          score: typeof theme.score === 'number' ? theme.score :\r\n                 typeof theme.score === 'string' ? parseFloat(theme.score) : 0,\r\n          // S'assurer que le nombre de réponses est un nombre\r\n          nombre_reponses: typeof theme.nombre_reponses === 'number' ? theme.nombre_reponses :\r\n                          typeof theme.nombre_reponses === 'string' ? parseInt(theme.nombre_reponses, 10) : 0\r\n        }))\r\n      : [];\r\n  \r\n    return {\r\n      ...analyse,\r\n      nom_application: analyse.nom_application || analyse.nom || 'Application inconnue',\r\n      nom: analyse.nom || analyse.nom_application || 'Application inconnue',\r\n      score_global: score_global,\r\n      scoreGlobal: score_global,\r\n      thematiques\r\n    };\r\n  };\r\n\r\n// Fonction pour formater la date\r\nexport const formatDate = (dateString: string) => {\r\n  try {\r\n    return new Date(dateString).toLocaleDateString('fr-FR');\r\n  } catch (e) {\r\n    return 'Date inconnue';\r\n  }\r\n};\r\n\r\n// src/utils/AnalyseUtils.ts\r\n\r\n/**\r\n * Fonction pour obtenir la couleur MUI en fonction du niveau de maturité\r\n */\r\nexport const getNiveauColor = (niveau: string): \"success\" | \"info\" | \"warning\" | \"error\" | \"default\" => {\r\n  // Niveaux numériques\r\n  if (niveau.includes('5') || niveau.includes('Optimisé') || niveau.includes('Avancé')) return 'success';\r\n  if (niveau.includes('4') || niveau.includes('Géré')) return 'success';\r\n  if (niveau.includes('3') || niveau.includes('Mesuré') || niveau.includes('Intermédiaire')) return 'info';\r\n  if (niveau.includes('2') || niveau.includes('Défini')) return 'warning';\r\n  if (niveau.includes('1') || niveau.includes('Initial') || niveau.includes('Faible')) return 'error';\r\n  \r\n  // Niveaux qualitatifs\r\n  if (niveau.includes('Excellent')) return 'success';\r\n  if (niveau.includes('Bon')) return 'info';\r\n  if (niveau.includes('Moyen')) return 'warning';\r\n  if (niveau.includes('Faible')) return 'error';\r\n  \r\n  return 'default';\r\n};\r\n\r\n\r\n/**\r\n * Fonction pour calculer le score moyen d'une liste de scores\r\n */\r\nexport const calculateAverageScore = (scores: number[]): number => {\r\n  if (!scores || scores.length === 0) return 0;\r\n  const sum = scores.reduce((a, b) => a + b, 0);\r\n  return sum / scores.length;\r\n};\r\n\r\n/**\r\n * Fonction pour déterminer le niveau global en fonction du score\r\n */\r\nexport const determineNiveauGlobal = (score: number, fonction?: string): string => {\r\n  // Niveaux par défaut\r\n  if (score >= 4.5) return 'Niveau 5 - Optimisé';\r\n  if (score >= 3.5) return 'Niveau 4 - Géré';\r\n  if (score >= 2.5) return 'Niveau 3 - Mesuré';\r\n  if (score >= 1.5) return 'Niveau 2 - Défini';\r\n  return 'Niveau 1 - Initial';\r\n};\r\n\r\n/**\r\n * Fonction pour générer une recommandation basique en fonction du niveau\r\n */\r\nexport const generateBasicRecommendation = (score: number, fonction?: string): string => {\r\n  if (score >= 4.5) {\r\n    return \"Maintenir l'excellence par l'innovation continue et le partage des bonnes pratiques avec l'écosystème.\";\r\n  }\r\n  if (score >= 3.5) {\r\n    return \"Optimiser les processus existants et développer des mécanismes prédictifs.\";\r\n  }\r\n  if (score >= 2.5) {\r\n    return \"Automatiser davantage les contrôles et améliorer la mesure des performances.\";\r\n  }\r\n  if (score >= 1.5) {\r\n    return \"Standardiser les processus et renforcer le partage de connaissances entre équipes.\";\r\n  }\r\n  return \"Établir les fondations avec une sensibilisation et une formation des équipes.\";\r\n};","import React from 'react';\r\n\r\ninterface StatCardProps {\r\n  title: string;\r\n  value: string | number;\r\n  variant?: 'primary' | 'secondary' | 'accent1' | 'accent2' | 'accent3' | 'accent4';\r\n  size?: 'sm' | 'md' | 'lg';\r\n  subtitle?: string;\r\n  trend?: {\r\n    value: number;\r\n    label?: string;\r\n    isPositive?: boolean;\r\n  };\r\n}\r\n\r\nconst StatCard: React.FC<StatCardProps> = ({\r\n  title,\r\n  value,\r\n  variant = 'primary',\r\n  size = 'md',\r\n  subtitle,\r\n  trend\r\n}) => {\r\n  // Définir les classes basées sur la variante\r\n  const getVariantClasses = () => {\r\n    switch (variant) {\r\n      case 'primary':\r\n        return {\r\n          bg: 'bg-primary-50',\r\n          text: 'text-primary-900',\r\n          border: 'border-primary-200'\r\n        };\r\n      case 'secondary':\r\n        return {\r\n          bg: 'bg-secondary-50',\r\n          text: 'text-secondary-900',\r\n          border: 'border-secondary-200'\r\n        };\r\n      case 'accent1':\r\n        return {\r\n          bg: 'bg-accent1-light bg-opacity-30',\r\n          text: 'text-accent1',\r\n          border: 'border-accent1-light'\r\n        };\r\n      case 'accent2':\r\n        return {\r\n          bg: 'bg-accent2-light bg-opacity-30',\r\n          text: 'text-accent2',\r\n          border: 'border-accent2-light'\r\n        };\r\n      case 'accent3':\r\n        return {\r\n          bg: 'bg-accent3-light bg-opacity-30',\r\n          text: 'text-accent3',\r\n          border: 'border-accent3-light'\r\n        };\r\n      case 'accent4':\r\n        return {\r\n          bg: 'bg-accent4-light bg-opacity-30',\r\n          text: 'text-accent4',\r\n          border: 'border-accent4-light'\r\n        };\r\n      default:\r\n        return {\r\n          bg: 'bg-gray-50',\r\n          text: 'text-gray-900',\r\n          border: 'border-gray-200'\r\n        };\r\n    }\r\n  };\r\n\r\n  // Taille du composant\r\n  const getSizeClasses = () => {\r\n    switch (size) {\r\n      case 'sm':\r\n        return 'p-3';\r\n      case 'lg':\r\n        return 'p-5';\r\n      default:\r\n        return 'p-4';\r\n    }\r\n  };\r\n\r\n  const variantClasses = getVariantClasses();\r\n  const sizeClasses = getSizeClasses();\r\n\r\n  return (\r\n    <div className={`rounded-lg border ${variantClasses.bg} ${variantClasses.border} ${sizeClasses} shadow-card`}>\r\n      <div>\r\n        <p className=\"text-sm font-medium text-gray-500 mb-1\">{title}</p>\r\n        <div className=\"flex items-baseline\">\r\n          <h3 className={`text-2xl font-bold ${variantClasses.text}`}>{value}</h3>\r\n          {subtitle && <p className=\"ml-2 text-sm text-gray-500\">{subtitle}</p>}\r\n        </div>\r\n        \r\n        {trend && (\r\n          <p className=\"mt-1 flex items-center text-sm\">\r\n            <span className={trend.isPositive ? 'text-success-500' : 'text-danger-500'}>\r\n              {trend.isPositive ? '↑' : '↓'} {Math.abs(trend.value)}%\r\n            </span>\r\n            {trend.label && <span className=\"text-gray-500 ml-1\">{trend.label}</span>}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant pour afficher un ensemble de cartes statistiques\r\ninterface StatsGridProps {\r\n  stats: StatCardProps[];\r\n  columns?: 1 | 2 | 3 | 4 | 5 | 6;\r\n  className?: string;\r\n}\r\n\r\nconst StatsGrid: React.FC<StatsGridProps> = ({\r\n  stats,\r\n  columns = 4,\r\n  className = ''\r\n}) => {\r\n  const gridClasses = `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-${columns} gap-4 ${className}`;\r\n  \r\n  return (\r\n    <div className={gridClasses}>\r\n      {stats.map((stat, index) => (\r\n        <StatCard key={index} {...stat} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { StatCard, StatsGrid };","//\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  Box,\r\n  Grid,\r\n  Divider,\r\n  Chip,\r\n  CircularProgress,\r\n  Alert,\r\n  Button,\r\n  Tooltip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from '@mui/material';\r\nimport {\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip as RechartsTooltip,\r\n  Legend,\r\n} from 'recharts';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { StatCard } from '../../components/dashboard/StatsCard';\r\nimport api from '../../services/api';\r\n\r\nconst getNiveauColor = (score) => {\r\n  if (score >= 4) return 'success';\r\n  if (score >= 3) return 'info';\r\n  if (score >= 2) return 'warning';\r\n  return 'error';\r\n};\r\n\r\nconst getNiveauLabel = (score) => {\r\n  if (score >= 4) return 'Optimisé';\r\n  if (score >= 3) return 'Mesuré';\r\n  if (score >= 2) return 'Défini';\r\n  if (score >= 1) return 'Initial';\r\n  return 'Non défini';\r\n};\r\n\r\nconst EntrepriseScoresPanel = ({ entrepriseId }) => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [entreprise, setEntreprise] = useState(null);\r\n  const [analyses, setAnalyses] = useState([]);\r\n  const [historique, setHistorique] = useState([]);\r\n  const [updatingScore, setUpdatingScore] = useState(false);\r\n\r\n  const fetchEntrepriseData = async () => {\r\n    if (!entrepriseId) return;\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const [entrepriseData, analysesResponse, historiqueResponse] = await Promise.all([\r\n        api.get(`/entreprises/${entrepriseId}`),\r\n        api.get(`/analyses/entreprise/${entrepriseId}`),\r\n        api.get(`/historique/entreprise/${entrepriseId}`)\r\n      ]);\r\n      setEntreprise(entrepriseData);\r\n      setAnalyses(Array.isArray(analysesResponse) ? analysesResponse : analysesResponse.data || []);\r\n      setHistorique(historiqueResponse.historique_global || []);\r\n    } catch (err) {\r\n      console.error('Erreur lors de la récupération des données:', err);\r\n      setError('Impossible de charger les données.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const recalculateScore = async () => {\r\n    if (!entrepriseId) return;\r\n    setUpdatingScore(true);\r\n    setError(null);\r\n    try {\r\n      await api.post(`/entreprises/${entrepriseId}/calculer`);\r\n      await fetchEntrepriseData();\r\n    } catch (err) {\r\n      console.error('Erreur lors du recalcul:', err);\r\n      setError('Impossible de recalculer le score.');\r\n    } finally {\r\n      setUpdatingScore(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEntrepriseData();\r\n  }, [entrepriseId]);\r\n\r\n  const prepareChartData = () => {\r\n    if (!historique.length) return [];\r\n    return [...historique]\r\n      .sort((a, b) => new Date(a.date_mesure) - new Date(b.date_mesure))\r\n      .map(item => ({\r\n        date: new Date(item.date_mesure).toLocaleDateString('fr-FR'),\r\n        score: item.score_global || 0,\r\n      }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>;\r\n  }\r\n\r\n  if (!entreprise) {\r\n    return <Alert severity=\"info\">Aucune entreprise sélectionnée.</Alert>;\r\n  }\r\n\r\n  const scoreGlobal = entreprise.score_global || 0;\r\n  const niveauLabel = getNiveauLabel(scoreGlobal);\r\n  const niveauColor = getNiveauColor(scoreGlobal);\r\n  const chartData = prepareChartData();\r\n\r\n  return (\r\n    <Card variant=\"outlined\" sx={{ mb: 3 }}>\r\n      <CardHeader\r\n        title={\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Typography variant=\"h6\">Scores de maturité - {entreprise.nom_entreprise}</Typography>\r\n            <Tooltip title=\"Recalculer le score\">\r\n              <Button\r\n                size=\"small\"\r\n                startIcon={<RefreshIcon />}\r\n                onClick={recalculateScore}\r\n                disabled={updatingScore}\r\n              >\r\n                {updatingScore ? 'Calcul en cours...' : 'Recalculer'}\r\n              </Button>\r\n            </Tooltip>\r\n          </Box>\r\n        }\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={4}>\r\n            <StatCard\r\n              title=\"Score Global\"\r\n              value={typeof scoreGlobal === 'number' ? scoreGlobal.toFixed(2) : '0.00'}\r\n              variant=\"primary\"\r\n              subtitle={<Chip label={niveauLabel} color={niveauColor} />}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8}>\r\n            {chartData.length > 1 ? (\r\n              <Box height={250}>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <LineChart data={chartData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"date\" />\r\n                    <YAxis domain={[0, 5]} />\r\n                    <RechartsTooltip />\r\n                    <Legend />\r\n                    <Line\r\n                      type=\"monotone\"\r\n                      dataKey=\"score\"\r\n                      stroke=\"#0B4E87\"\r\n                      name=\"Score global\"\r\n                      activeDot={{ r: 8, fill: '#0B4E87' }}\r\n                    />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </Box>\r\n            ) : (\r\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height={250}>\r\n                <Typography color=\"text.secondary\">\r\n                  Pas assez de données historiques.\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Divider sx={{ my: 2 }} />\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Analyses des applications ({analyses.length})\r\n            </Typography>\r\n            {analyses.length > 0 ? (\r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Application</TableCell>\r\n                      <TableCell>Score Global</TableCell>\r\n                      <TableCell>Date d'analyse</TableCell>\r\n                      <TableCell>Actions</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {analyses.map((analyse) => (\r\n                      <TableRow key={analyse.id_analyse}>\r\n                        <TableCell>{analyse.nom_application || 'Non spécifié'}</TableCell>\r\n                        <TableCell>\r\n                          {typeof analyse.score_global === 'number' ? analyse.score_global.toFixed(2) : '0.00'}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {new Date(analyse.date_analyse).toLocaleDateString('fr-FR')}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Button\r\n                            size=\"small\"\r\n                            onClick={() => navigate(`/analyses-interpretations/${analyse.id_application}`)}\r\n                          >\r\n                            Détails\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            ) : (\r\n              <Alert severity=\"info\">Aucune analyse disponible pour cette entreprise.</Alert>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EntrepriseScoresPanel;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Autocomplete,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Drawer,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Chip,\r\n  IconButton,\r\n  TableSortLabel,\r\n  TablePagination,\r\n  InputAdornment,\r\n  ToggleButtonGroup,\r\n  ToggleButton,\r\n  Snackbar,\r\n} from '@mui/material';\r\nimport {\r\n  Radar,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  ResponsiveContainer,\r\n  Legend,\r\n} from 'recharts';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { fr } from 'date-fns/locale';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CalculateIcon from '@mui/icons-material/Calculate';\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport AppsTwoToneIcon from '@mui/icons-material/AppsTwoTone';\r\nimport EntrepriseScoresPanel from './EntrepriseScoresPanel';\r\nimport { StatCard } from '../dashboard/StatsCard';\r\nimport { AnalysesInterpretationsUIProps, TabPanelProps } from '../../types/AnalysesTypes';\r\nimport { getNiveauColor, formatDate } from '../../utils/AnalyseUtils';\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`analysis-tabpanel-${index}`}\r\n      aria-labelledby={`analysis-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const AnalysesInterpretationsUI: React.FC<AnalysesInterpretationsUIProps> = ({\r\n  loading,\r\n  error,\r\n  applications,\r\n  entreprises,\r\n  selectedApplication,\r\n  selectedEntreprise,\r\n  analyses,\r\n  selectedAnalyse,\r\n  interpretation,\r\n  historique,\r\n  filteredHistorique,\r\n  tabValue,\r\n  selectedThematique,\r\n  openDialog,\r\n  newAnalyseData,\r\n  interpretationsSummary,\r\n  page,\r\n  rowsPerPage,\r\n  order,\r\n  orderBy,\r\n  searchTerm,\r\n  filters,\r\n  showFilters,\r\n  uniqueThematiques,\r\n  handleApplicationChange,\r\n  handleEntrepriseChange,\r\n  handleAnalyseChange,\r\n  handleThematiqueChange,\r\n  handleTabChange,\r\n  handleOpenNewAnalyseDialog,\r\n  handleCloseDialog,\r\n  addThematique,\r\n  updateThematique,\r\n  removeThematique,\r\n  createNewAnalyse,\r\n  calculateNewAnalyse,\r\n  getScoreGlobal,\r\n  prepareHistoriqueData,\r\n  handleChangePage,\r\n  handleChangeRowsPerPage,\r\n  handleRequestSort,\r\n  getFilteredData,\r\n  getUniqueValues,\r\n  setSearchTerm,\r\n  setFilters,\r\n  setShowFilters,\r\n  fetchAllInterpretations,\r\n  fetchAnalysesByApplication,\r\n  fetchAnalysesByEntreprise,\r\n  fetchHistoriqueByEntreprise,\r\n}) => {\r\n  const [viewMode, setViewMode] = useState<'application' | 'entreprise'>(\r\n    selectedApplication ? 'application' : selectedEntreprise ? 'entreprise' : 'application'\r\n  );\r\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });\r\n\r\n  useEffect(() => {\r\n    if (selectedApplication && !selectedEntreprise) setViewMode('application');\r\n    else if (selectedEntreprise && !selectedApplication) setViewMode('entreprise');\r\n  }, [selectedApplication, selectedEntreprise]);\r\n\r\n  const toggleViewMode = () => {\r\n    if (viewMode === 'application') {\r\n      setViewMode('entreprise');\r\n      if (selectedApplication) {\r\n        const app = applications.find(a => a.id_application === selectedApplication);\r\n        if (app?.id_entreprise) {\r\n          handleEntrepriseChange({ target: { value: app.id_entreprise } } as any);\r\n        }\r\n      }\r\n    } else {\r\n      setViewMode('application');\r\n      if (selectedEntreprise && !selectedApplication) {\r\n        const appsOfEntreprise = applications.filter(a => a.id_entreprise === selectedEntreprise);\r\n        if (appsOfEntreprise.length > 0) {\r\n          handleApplicationChange({ target: { value: appsOfEntreprise[0].id_application } } as any);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const CustomRadarTooltip = ({ active, payload }: any) => {\r\n    if (active && payload?.length) {\r\n      return (\r\n        <Paper sx={{ p: 1 }}>\r\n          <Typography>{`Thématique: ${payload[0].payload.thematique}`}</Typography>\r\n          <Typography>{`Score: ${payload[0].value}`}</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n      >\r\n        <Alert severity={snackbar.severity}>{snackbar.message}</Alert>\r\n      </Snackbar>\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Analyses et Interprétations de Maturité\r\n              </Typography>\r\n              <Box>\r\n                <ToggleButtonGroup\r\n                  value={viewMode}\r\n                  exclusive\r\n                  onChange={(e, newMode) => newMode && toggleViewMode()}\r\n                  color=\"primary\"\r\n                  sx={{ mr: 2 }}\r\n                >\r\n                  <ToggleButton value=\"application\" startIcon={<AppsTwoToneIcon />}>\r\n                    Vue Application\r\n                  </ToggleButton>\r\n                  <ToggleButton value=\"entreprise\" startIcon={<BusinessIcon />}>\r\n                    Vue Entreprise\r\n                  </ToggleButton>\r\n                </ToggleButtonGroup>\r\n                {viewMode === 'application' && (\r\n                  <>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      onClick={handleOpenNewAnalyseDialog}\r\n                      sx={{ mr: 1 }}\r\n                    >\r\n                      Nouvelle Analyse\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={calculateNewAnalyse}\r\n                      startIcon={<CalculateIcon />}\r\n                    >\r\n                      Calculer Analyse\r\n                    </Button>\r\n                  </>\r\n                )}\r\n                {viewMode === 'entreprise' && selectedEntreprise && (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => fetchAnalysesByEntreprise(selectedEntreprise)}\r\n                    startIcon={<CalculateIcon />}\r\n                  >\r\n                    Calculer Scores\r\n                  </Button>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n\r\n            <Autocomplete\r\n              options={entreprises}\r\n              getOptionLabel={(option) => option.nom_entreprise}\r\n              value={entreprises.find(e => e.id_entreprise === selectedEntreprise) || null}\r\n              onChange={(e, newValue) => handleEntrepriseChange({ target: { value: newValue?.id_entreprise || '' } } as any)}\r\n              renderInput={(params) => <TextField {...params} label=\"Entreprise\" />}\r\n              sx={{ mb: 2 }}\r\n            />\r\n\r\n            {(viewMode === 'application' || selectedEntreprise) && (\r\n              <Autocomplete\r\n                options={applications.filter(app => !selectedEntreprise || app.id_entreprise === selectedEntreprise)}\r\n                getOptionLabel={(option) => option.nom_application}\r\n                value={applications.find(a => a.id_application === selectedApplication) || null}\r\n                onChange={(e, newValue) => handleApplicationChange({ target: { value: newValue?.id_application || '' } } as any)}\r\n                renderInput={(params) => <TextField {...params} label=\"Application\" />}\r\n                disabled={loading}\r\n              />\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {viewMode === 'entreprise' && selectedEntreprise ? (\r\n          <Grid xs={12}>\r\n            <EntrepriseScoresPanel entrepriseId={selectedEntreprise} />\r\n          </Grid>\r\n        ) : (\r\n          <>\r\n            {selectedAnalyse && (\r\n              <Grid xs={12} md={4}>\r\n                <StatCard\r\n                  title=\"Score Global\"\r\n                  value={getScoreGlobal()}\r\n                  variant=\"primary\"\r\n                  subtitle=\"Maturité\"\r\n                />\r\n              </Grid>\r\n            )}\r\n\r\n            <Grid xs={12}>\r\n              <Paper sx={{ width: '100%', mb: 2 }}>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" p={2}>\r\n                  <Typography variant=\"h6\">Récapitulatif des analyses</Typography>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <TextField\r\n                      size=\"small\"\r\n                      placeholder=\"Rechercher...\"\r\n                      value={searchTerm}\r\n                      onChange={(e) => setSearchTerm(e.target.value)}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <SearchIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      sx={{ mr: 2 }}\r\n                    />\r\n                    <Button startIcon={<FilterListIcon />} onClick={() => setShowFilters(true)}>\r\n                      Filtres\r\n                    </Button>\r\n                    <IconButton onClick={fetchAllInterpretations}>\r\n                      <RefreshIcon />\r\n                    </IconButton>\r\n                  </Box>\r\n                </Box>\r\n\r\n                <Drawer anchor=\"right\" open={showFilters} onClose={() => setShowFilters(false)}>\r\n                  <Box sx={{ width: 300, p: 2 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>Filtres</Typography>\r\n                    <Autocomplete\r\n                      options={getUniqueValues('nom_application')}\r\n                      value={filters.application}\r\n                      onChange={(e, newValue) => setFilters({ ...filters, application: newValue || '' })}\r\n                      renderInput={(params) => <TextField {...params} label=\"Application\" />}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <Autocomplete\r\n                      options={getUniqueValues('niveau_global')}\r\n                      value={filters.niveau}\r\n                      onChange={(e, newValue) => setFilters({ ...filters, niveau: newValue || '' })}\r\n                      renderInput={(params) => <TextField {...params} label=\"Niveau\" />}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Score min\"\r\n                      type=\"number\"\r\n                      value={filters.scoreMin}\r\n                      onChange={(e) => setFilters({ ...filters, scoreMin: e.target.value })}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Score max\"\r\n                      type=\"number\"\r\n                      value={filters.scoreMax}\r\n                      onChange={(e) => setFilters({ ...filters, scoreMax: e.target.value })}\r\n                      sx={{ mb: 2 }}\r\n                    />\r\n                    <Button\r\n                      onClick={() => setFilters({ application: '', niveau: '', organisation: '', scoreMin: '', scoreMax: '' })}\r\n                    >\r\n                      Réinitialiser\r\n                    </Button>\r\n                  </Box>\r\n                </Drawer>\r\n\r\n                <TableContainer sx={{ maxHeight: 440 }}>\r\n                  <Table stickyHeader>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'nom_application'}\r\n                            direction={orderBy === 'nom_application' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('nom_application')}\r\n                          >\r\n                            Application\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'id_entreprise'}\r\n                            direction={orderBy === 'id_entreprise' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('id_entreprise')}\r\n                          >\r\n                            Entreprise\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'score_global'}\r\n                            direction={orderBy === 'score_global' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('score_global')}\r\n                          >\r\n                            Score\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'niveau_global'}\r\n                            direction={orderBy === 'niveau_global' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('niveau_global')}\r\n                          >\r\n                            Niveau\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'date_analyse'}\r\n                            direction={orderBy === 'date_analyse' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('date_analyse')}\r\n                          >\r\n                            Date\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>Actions</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {getFilteredData().map((interpretation) => {\r\n                        const entreprise = entreprises.find(e => e.id_entreprise === interpretation.id_entreprise);\r\n                        const entrepriseName = entreprise ? entreprise.nom_entreprise : 'Non spécifiée';\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            key={interpretation.id_analyse}\r\n                            selected={selectedApplication === interpretation.id_application}\r\n                            onClick={() => fetchAnalysesByApplication(interpretation.id_application)}\r\n                            sx={{ cursor: 'pointer' }}\r\n                          >\r\n                            <TableCell>{interpretation.nom_application}</TableCell>\r\n                            <TableCell>{entrepriseName}</TableCell>\r\n                            <TableCell>\r\n                              {typeof interpretation.score_global === 'number'\r\n                                ? interpretation.score_global.toFixed(2)\r\n                                : '0.00'}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Chip\r\n                                label={interpretation.niveau_global}\r\n                                color={getNiveauColor(interpretation.niveau_global)}\r\n                                size=\"small\"\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell>{formatDate(interpretation.date_analyse)}</TableCell>\r\n                            <TableCell>\r\n                              <Button\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                color={selectedApplication === interpretation.id_application ? 'secondary' : 'primary'}\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                  fetchAnalysesByApplication(interpretation.id_application);\r\n                                }}\r\n                              >\r\n                                {selectedApplication === interpretation.id_application ? 'Sélectionnée' : 'Sélectionner'}\r\n                              </Button>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                      {getFilteredData().length === 0 && (\r\n                        <TableRow>\r\n                          <TableCell colSpan={6} align=\"center\">\r\n                            Aucune analyse trouvée\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n\r\n                <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25, 50]}\r\n                  component=\"div\"\r\n                  count={interpretationsSummary.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                  labelRowsPerPage=\"Lignes par page:\"\r\n                  labelDisplayedRows={({ from, to, count }) => `${from}-${to} sur ${count}`}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n\r\n            {selectedAnalyse && (\r\n              <>\r\n                <Grid xs={12}>\r\n                  <Card>\r\n                    <CardHeader title=\"Répartition par Thématique\" />\r\n                    <CardContent>\r\n                      {selectedAnalyse.thematiques?.length > 0 ? (\r\n                        <ResponsiveContainer width=\"100%\" height={350}>\r\n                          <RadarChart\r\n                            outerRadius={150}\r\n                            data={selectedAnalyse.thematiques.map(theme => ({\r\n                              thematique: theme.thematique,\r\n                              score: theme.score || 0,\r\n                              fullMark: 5,\r\n                            }))}\r\n                          >\r\n                            <PolarGrid />\r\n                            <PolarAngleAxis dataKey=\"thematique\" />\r\n                            <PolarRadiusAxis angle={30} domain={[0, 5]} />\r\n                            <Radar\r\n                              name=\"Score\"\r\n                              dataKey=\"score\"\r\n                              stroke=\"#0B4E87\"\r\n                              fill=\"#0B4E87\"\r\n                              fillOpacity={0.6}\r\n                            />\r\n                            <Legend />\r\n                            <RechartsTooltip content={<CustomRadarTooltip />} />\r\n                          </RadarChart>\r\n                        </ResponsiveContainer>\r\n                      ) : (\r\n                        <Typography align=\"center\">Aucune donnée de thématique disponible</Typography>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                <Grid xs={12}>\r\n                  <Paper sx={{ width: '100%' }}>\r\n                    <Tabs\r\n                      value={tabValue}\r\n                      onChange={handleTabChange}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      variant=\"fullWidth\"\r\n                    >\r\n                      <Tab label=\"Interprétation\" />\r\n                      <Tab label=\"Détails par Thématique\" />\r\n                      <Tab label=\"Historique\" />\r\n                      <Tab label=\"Analyses Précédentes\" />\r\n                    </Tabs>\r\n\r\n                    <TabPanel value={tabValue} index={0}>\r\n                      {interpretation ? (\r\n                        <Grid container spacing={2}>\r\n                          <Grid xs={12}>\r\n                            <Card>\r\n                              <CardHeader\r\n                                title=\"Niveau de Maturité\"\r\n                                subheader={interpretation.niveau}\r\n                                action={\r\n                                  <Chip\r\n                                    label={interpretation.niveau}\r\n                                    color={getNiveauColor(interpretation.niveau)}\r\n                                    size=\"medium\"\r\n                                  />\r\n                                }\r\n                              />\r\n                              <CardContent>\r\n                                <Typography variant=\"body1\" paragraph>\r\n                                  {interpretation.description}\r\n                                </Typography>\r\n                              </CardContent>\r\n                            </Card>\r\n                          </Grid>\r\n                          <Grid xs={12}>\r\n                            <Card>\r\n                              <CardHeader title=\"Recommandations\" />\r\n                              <CardContent>\r\n                                <Typography variant=\"body1\" paragraph>\r\n                                  {interpretation.recommandations}\r\n                                </Typography>\r\n                              </CardContent>\r\n                            </Card>\r\n                          </Grid>\r\n                        </Grid>\r\n                      ) : (\r\n                        <Alert severity=\"info\">\r\n                          Aucune interprétation disponible.\r\n                        </Alert>\r\n                      )}\r\n                    </TabPanel>\r\n                    {/* Autres onglets inchangés */}\r\n                  </Paper>\r\n                </Grid>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </Grid>\r\n\r\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Créer une nouvelle analyse</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle1\" gutterBottom>\r\n            Application: {applications.find(app => app.id_application === selectedApplication)?.nom_application || 'Non sélectionnée'}\r\n          </Typography>\r\n          <Box sx={{ mt: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>Thématiques et Scores</Typography>\r\n            {newAnalyseData.thematiques.map((theme, index) => (\r\n              <Grid container spacing={2} key={index} sx={{ mb: 2 }}>\r\n                <Grid xs={5}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Thématique\"\r\n                    value={theme.thematique}\r\n                    onChange={(e) => updateThematique(index, 'thematique', e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"number\"\r\n                    label=\"Score\"\r\n                    value={theme.score}\r\n                    inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                    onChange={(e) => updateThematique(index, 'score', parseFloat(e.target.value))}\r\n                  />\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"number\"\r\n                    label=\"Nombre de réponses\"\r\n                    value={theme.nombre_reponses}\r\n                    inputProps={{ min: 0, step: 1 }}\r\n                    onChange={(e) => updateThematique(index, 'nombre_reponses', parseInt(e.target.value))}\r\n                  />\r\n                </Grid>\r\n                <Grid xs={1}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"error\"\r\n                    onClick={() => removeThematique(index)}\r\n                    sx={{ height: '100%' }}\r\n                  >\r\n                    X\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            ))}\r\n            <Button variant=\"outlined\" onClick={addThematique} sx={{ mt: 1 }}>\r\n              Ajouter une thématique\r\n            </Button>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Annuler</Button>\r\n          <Button\r\n            onClick={() => {\r\n              createNewAnalyse().then(() =>\r\n                setSnackbar({ open: true, message: 'Analyse créée avec succès', severity: 'success' })\r\n              ).catch(() =>\r\n                setSnackbar({ open: true, message: 'Erreur lors de la création', severity: 'error' })\r\n              );\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={newAnalyseData.thematiques.length === 0}\r\n          >\r\n            Créer l'analyse\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AnalysesInterpretationsUI;","// src/pages/dashboard/AnalysesInterpretations.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport api from '../../services/api';\r\nimport {\r\n  Application,\r\n  Analyse,\r\n  Interpretation,\r\n  HistoriqueScore,\r\n  Thematique,\r\n  Entreprise,\r\n  InterpretationSummary,\r\n  FilterState\r\n} from '../../types/AnalysesTypes';\r\nimport { normalizeAnalyse } from '../../utils/AnalyseUtils';\r\nimport { AnalysesInterpretationsUI } from '../../components/dashboard/AnalysesInterpretationsUI';\r\n\r\nconst AnalysesInterpretations: React.FC = () => {\r\n  const { id } = useParams<{ id?: string }>();\r\n  const navigate = useNavigate();\r\n  \r\n  // États de chargement et erreurs\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // États principaux liés aux données\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [selectedApplication, setSelectedApplication] = useState<string>('');\r\n  const [analyses, setAnalyses] = useState<Analyse[]>([]);\r\n  const [selectedAnalyse, setSelectedAnalyse] = useState<Analyse | null>(null);\r\n  const [interpretation, setInterpretation] = useState<Interpretation | null>(null);\r\n  const [historique, setHistorique] = useState<HistoriqueScore[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [selectedEntreprise, setSelectedEntreprise] = useState<string>('');\r\n\r\n  // États d'interface utilisateur\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n  const [selectedThematique, setSelectedThematique] = useState<string>('');\r\n  const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n  const [newAnalyseData, setNewAnalyseData] = useState<{ id_application: string, thematiques: Thematique[] }>({\r\n    id_application: '',\r\n    thematiques: []\r\n  });\r\n  const [interpretationsSummary, setInterpretationsSummary] = useState<InterpretationSummary[]>([]);\r\n  \r\n  // États pour la pagination et le tri du tableau\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [order, setOrder] = useState<'asc' | 'desc'>('desc');\r\n  const [orderBy, setOrderBy] = useState<keyof InterpretationSummary>('date_analyse');\r\n  \r\n  // États pour le filtrage\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filters, setFilters] = useState<FilterState>({\r\n    application: '',\r\n    niveau: '',\r\n    organisation: '',\r\n    scoreMin: '',\r\n    scoreMax: ''\r\n  });\r\n  const [showFilters, setShowFilters] = useState(false);\r\n\r\n  // Préparation des données dérivées\r\n  const filteredHistorique = selectedThematique\r\n    ? historique.filter(item => item.thematique === selectedThematique)\r\n    : historique;\r\n  \r\n  const uniqueThematiques = [...new Set(historique.map(item => item.thematique))];\r\n\r\n  // Fonctions de chargement des données\r\n  \r\n  // Charger toutes les interprétations\r\n  const fetchAllInterpretations = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Récupérer toutes les interprétations\r\n      const interpretationsResponse = await api.get('interpretations');\r\n      \r\n      // Récupérer tous les mappings application-entreprise\r\n      // si l'API ne fournit pas directement cette relation\r\n      const appEntrepriseMapResponse = await api.get('applications/entreprise-mapping');\r\n      \r\n      if (Array.isArray(interpretationsResponse)) {\r\n        let interpretationsData = interpretationsResponse;\r\n        \r\n        // Si nous avons un mapping application-entreprise, l'utiliser pour enrichir les données\r\n        if (appEntrepriseMapResponse && typeof appEntrepriseMapResponse === 'object') {\r\n          // Créer un mapping d'ID d'application à ID d'entreprise\r\n          const appToEntrepriseMap = {};\r\n          \r\n          // Si le mapping est un tableau d'objets avec id_application et id_entreprise\r\n          if (Array.isArray(appEntrepriseMapResponse)) {\r\n            appEntrepriseMapResponse.forEach(mapping => {\r\n              appToEntrepriseMap[mapping.id_application] = mapping.id_entreprise;\r\n            });\r\n          } \r\n          // Si le mapping est un objet avec des clés d'application et des valeurs d'entreprise\r\n          else {\r\n            Object.keys(appEntrepriseMapResponse).forEach(appId => {\r\n              appToEntrepriseMap[appId] = appEntrepriseMapResponse[appId];\r\n            });\r\n          }\r\n          \r\n          // Enrichir les interprétations avec l'ID d'entreprise\r\n          interpretationsData = interpretationsData.map(interpretation => ({\r\n            ...interpretation,\r\n            id_entreprise: \r\n              // Utiliser l'ID d'entreprise s'il existe déjà\r\n              interpretation.id_entreprise || \r\n              // Sinon, le récupérer depuis le mapping\r\n              (appToEntrepriseMap[interpretation.id_application] || ''),\r\n            // Ajouter une organisation par défaut si elle n'existe pas\r\n            organisation: interpretation.organisation || 'DSIN'\r\n          }));\r\n        } else {\r\n          // Si nous n'avons pas de mapping, juste s'assurer que les champs requis existent\r\n          interpretationsData = interpretationsData.map(interpretation => ({\r\n            ...interpretation,\r\n            id_entreprise: interpretation.id_entreprise || '',\r\n            organisation: interpretation.organisation || 'DSIN'\r\n          }));\r\n        }\r\n        \r\n        // Mettre à jour l'état\r\n        setInterpretationsSummary(interpretationsData);\r\n        console.log(`Chargement de ${interpretationsData.length} interprétations`);\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les interprétations:', interpretationsResponse);\r\n        setInterpretationsSummary([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des interprétations:', error);\r\n      setError('Impossible de charger les interprétations');\r\n      setInterpretationsSummary([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Charger les applications au démarrage\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const [appsResponse, entrepriseResponse] = await Promise.all([\r\n          api.get('applications'),\r\n          api.get('entreprises')\r\n        ]);\r\n  \r\n        if (Array.isArray(appsResponse)) {\r\n          setApplications(appsResponse);\r\n        } else {\r\n          setError('Format de réponse inattendu pour les applications');\r\n          setApplications([]);\r\n        }\r\n  \r\n        if (Array.isArray(entrepriseResponse)) {\r\n          setEntreprises(entrepriseResponse);\r\n        } else {\r\n          setError('Format de réponse inattendu pour les entreprises');\r\n          setEntreprises([]);\r\n        }\r\n  \r\n        // Charger toutes les interprétations sans filtre d'entreprise par défaut\r\n        await fetchAllInterpretations();\r\n        \r\n        // Ne pas définir d'entreprise ou d'application par défaut\r\n        // pour éviter des erreurs de sélection\r\n        setSelectedEntreprise('');\r\n        setSelectedApplication('');\r\n        \r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données initiales:', error);\r\n        setError('Impossible de charger les données initiales');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n\r\n  // Gérer le changement d'application sélectionnée\r\n  const handleApplicationChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const appId = event.target.value as string;\r\n    setSelectedApplication(appId);\r\n    fetchAnalysesByApplication(appId);\r\n  };\r\n\r\n  // Charger l'historique des scores pour une entreprise\r\n  const fetchHistoriqueByEntreprise = async (entrepriseId: string) => {\r\n    try {\r\n      const response = await api.get(`historique/entreprise/${entrepriseId}`);\r\n      \r\n      if (Array.isArray(response)) {\r\n        setHistorique(response);\r\n        \r\n        // Mettre à jour la liste des thématiques uniques\r\n        const uniqueThemes = [...new Set(response.map(item => item.thematique))];\r\n        console.log(`${uniqueThemes.length} thématiques uniques trouvées dans l'historique de l'entreprise ${entrepriseId}`);\r\n        \r\n        // Si une thématique était déjà sélectionnée mais n'existe pas dans le nouvel ensemble, la réinitialiser\r\n        if (selectedThematique && !uniqueThemes.includes(selectedThematique)) {\r\n          setSelectedThematique('');\r\n        }\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour l\\'historique:', response);\r\n        setHistorique([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'historique pour l\\'entreprise:', error);\r\n      setHistorique([]);\r\n    }\r\n  };\r\n  // Charger les analyses par entreprise\r\n  // Fonction fetchAnalysesByEntreprise à ajouter dans AnalysesInterpretations.tsx\r\n  const fetchAnalysesByEntreprise = async (entrepriseId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.get(`analyses/entreprise/${entrepriseId}`);\r\n      \r\n      // Vérifier le format de la réponse\r\n      if (response && typeof response === 'object') {\r\n        console.log('Données d\\'entreprise reçues:', response);\r\n        \r\n        // Vérifier si l'objet contient un tableau d'analyses\r\n        if (response.analyses && Array.isArray(response.analyses)) {\r\n          const normalizedAnalyses = response.analyses.map(normalizeAnalyse);\r\n          setAnalyses(normalizedAnalyses);\r\n          \r\n          if (normalizedAnalyses.length > 0) {\r\n            const latestAnalyse = normalizedAnalyses[0];\r\n            setSelectedAnalyse(latestAnalyse);\r\n            fetchInterpretation(latestAnalyse.id_analyse);\r\n          } else {\r\n            setSelectedAnalyse(null);\r\n            setInterpretation(null);\r\n          }\r\n        } else {\r\n          // Si l'objet ne contient pas d'analyses, créer un tableau vide\r\n          console.warn('Aucune analyse trouvée dans la réponse de l\\'API pour l\\'entreprise:', entrepriseId);\r\n          setAnalyses([]);\r\n          setSelectedAnalyse(null);\r\n          setInterpretation(null);\r\n        }\r\n        \r\n        // Mettre à jour les applications disponibles pour cette entreprise\r\n        if (response.applications && Array.isArray(response.applications)) {\r\n          // Si vous voulez limiter la liste des applications à celles de l'entreprise sélectionnée\r\n          // setApplications(response.applications);\r\n          console.log(`${response.applications.length} applications trouvées pour l'entreprise ${entrepriseId}`);\r\n        }\r\n      } else if (Array.isArray(response)) {\r\n        // Si la réponse est un tableau (format alternatif)\r\n        const normalizedAnalyses = response.map(normalizeAnalyse);\r\n        setAnalyses(normalizedAnalyses);\r\n        \r\n        if (normalizedAnalyses.length > 0) {\r\n          const latestAnalyse = normalizedAnalyses[0];\r\n          setSelectedAnalyse(latestAnalyse);\r\n          fetchInterpretation(latestAnalyse.id_analyse);\r\n        } else {\r\n          setSelectedAnalyse(null);\r\n          setInterpretation(null);\r\n        }\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les analyses:', response);\r\n        setAnalyses([]);\r\n        setSelectedAnalyse(null);\r\n        setInterpretation(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des analyses pour l\\'entreprise:', error);\r\n      setError('Impossible de charger les analyses pour cette entreprise');\r\n      setAnalyses([]);\r\n      setSelectedAnalyse(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Charger les analyses quand une application est sélectionnée\r\n  const fetchAnalysesByApplication = async (appId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await api.get(`analyses/application/${appId}`);\r\n      \r\n      if (Array.isArray(response)) {\r\n        const normalizedAnalyses = response.map(normalizeAnalyse);\r\n        setAnalyses(normalizedAnalyses);\r\n        \r\n        if (normalizedAnalyses.length > 0) {\r\n          const latestAnalyse = normalizedAnalyses[0];\r\n          setSelectedAnalyse(latestAnalyse);\r\n          fetchInterpretation(latestAnalyse.id_analyse);\r\n          fetchHistorique(appId);\r\n        } else {\r\n          setSelectedAnalyse(null);\r\n          setInterpretation(null);\r\n          setHistorique([]);\r\n        }\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour les analyses:', response);\r\n        setAnalyses([]);\r\n        setSelectedAnalyse(null);\r\n        setInterpretation(null);\r\n        setHistorique([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des analyses:', error);\r\n      setError('Impossible de charger les analyses');\r\n      setAnalyses([]);\r\n      setSelectedAnalyse(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Charger l'interprétation pour une analyse\r\n  const fetchInterpretation = async (analyseId: string) => {\r\n    try {\r\n      const response = await api.get(`interpretations/analyse/${analyseId}`);\r\n      \r\n      if (response && typeof response === 'object') {\r\n        const formattedInterpretation: Interpretation = {\r\n          niveau: response.niveau || 'Non évalué',\r\n          description: response.description || 'Aucune description disponible',\r\n          recommandations: response.recommandations || 'Aucune recommandation disponible',\r\n          score: response.score || 0\r\n        };\r\n        \r\n        setInterpretation(formattedInterpretation);\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour l\\'interprétation:', response);\r\n        setInterpretation(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'interprétation:', error);\r\n      setInterpretation(null);\r\n    }\r\n  };\r\n\r\n  // Charger l'historique des scores pour une application\r\n  const fetchHistorique = async (appId: string) => {\r\n    try {\r\n      const response = await api.get(`historique/application/${appId}`);\r\n      if (Array.isArray(response)) {\r\n        setHistorique(response);\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour l\\'historique:', response);\r\n        setHistorique([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'historique:', error);\r\n      setHistorique([]);\r\n    }\r\n  };\r\n\r\n   // Gestionnaires d'événements pour l'interface utilisateur\r\n  \r\n  // Gérer le changement d'entreprise sélectionnée\r\n  const handleEntrepriseChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n  const entrepriseId = event.target.value as string;\r\n  setSelectedEntreprise(entrepriseId || '');\r\n  \r\n  // Réinitialiser les données actuelles\r\n  setSelectedAnalyse(null);\r\n  setInterpretation(null);\r\n  \r\n  if (entrepriseId) {\r\n    // Si une entreprise est sélectionnée, charger les données pour cette entreprise\r\n    setLoading(true);\r\n    \r\n    // Récupérer les analyses pour cette entreprise\r\n    fetchAnalysesByEntreprise(entrepriseId);\r\n    \r\n    // Récupérer l'historique pour cette entreprise\r\n    fetchHistoriqueByEntreprise(entrepriseId);\r\n    \r\n    // Filtrer les interprétations pour cette entreprise\r\n    // Cette étape est importante pour mettre à jour le tableau récapitulatif\r\n    const filteredInterpretations = interpretationsSummary.filter(\r\n      item => item.id_entreprise === entrepriseId\r\n    );\r\n    \r\n    console.log(`Filtre entreprise appliqué: ${entrepriseId}, ${filteredInterpretations.length} résultats trouvés`);\r\n    \r\n    // Réinitialiser la pagination\r\n    setPage(0);\r\n  } else {\r\n    // Si \"Toutes les entreprises\" est sélectionné, charger toutes les analyses\r\n    fetchAllInterpretations();\r\n    setHistorique([]);\r\n    \r\n    // Réinitialiser l'application sélectionnée\r\n    setSelectedApplication('');\r\n  }\r\n  \r\n  // Réinitialiser les filtres supplémentaires\r\n  setFilters({\r\n    application: '',\r\n    niveau: '',\r\n    organisation: '',\r\n    scoreMin: '',\r\n    scoreMax: ''\r\n  });\r\n};\r\n\r\n  // Gérer le changement d'analyse sélectionnée\r\n  const handleAnalyseChange = (analyse: Analyse) => {\r\n    const normalizedAnalyse = normalizeAnalyse(analyse);\r\n    setSelectedAnalyse(normalizedAnalyse);\r\n    fetchInterpretation(normalizedAnalyse.id_analyse);\r\n  };\r\n\r\n  // Gérer le changement de thématique pour l'historique\r\n  const handleThematiqueChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setSelectedThematique(event.target.value as string);\r\n  };\r\n\r\n  // Gérer le changement d'onglet\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Ouvrir le dialogue pour créer une nouvelle analyse\r\n  const handleOpenNewAnalyseDialog = () => {\r\n    setNewAnalyseData({\r\n      id_application: selectedApplication,\r\n      thematiques: []\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  // Fermer le dialogue\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  // Ajouter une thématique à la nouvelle analyse\r\n  const addThematique = () => {\r\n    setNewAnalyseData({\r\n      ...newAnalyseData,\r\n      thematiques: [\r\n        ...newAnalyseData.thematiques,\r\n        {\r\n          thematique: '',\r\n          score: 0,\r\n          nombre_reponses: 0\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  // Mettre à jour une thématique\r\n  const updateThematique = (index: number, field: keyof Thematique, value: any) => {\r\n    const updatedThematiques = [...newAnalyseData.thematiques];\r\n    updatedThematiques[index] = {\r\n      ...updatedThematiques[index],\r\n      [field]: value\r\n    };\r\n    \r\n    setNewAnalyseData({\r\n      ...newAnalyseData,\r\n      thematiques: updatedThematiques\r\n    });\r\n  };\r\n\r\n  // Supprimer une thématique\r\n  const removeThematique = (index: number) => {\r\n    const updatedThematiques = newAnalyseData.thematiques.filter((_, i) => i !== index);\r\n    setNewAnalyseData({\r\n      ...newAnalyseData,\r\n      thematiques: updatedThematiques\r\n    });\r\n  };\r\n\r\n  // Créer une nouvelle analyse\r\n  const createNewAnalyse = async () => {\r\n    try {\r\n      await api.post(`analyses`, newAnalyseData);\r\n      fetchAnalysesByApplication(selectedApplication);\r\n      fetchAllInterpretations();\r\n      handleCloseDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création de l\\'analyse:', error);\r\n      setError('Erreur lors de la création de l\\'analyse');\r\n    }\r\n  };\r\n\r\n  // Calculer une nouvelle analyse\r\n  const calculateNewAnalyse = async () => {\r\n    try {\r\n      await api.post(`analyses/calculer/${selectedApplication}`);\r\n      fetchAnalysesByApplication(selectedApplication);\r\n      fetchAllInterpretations();\r\n    } catch (error) {\r\n      console.error('Erreur lors du calcul de l\\'analyse:', error);\r\n      setError('Erreur lors du calcul de l\\'analyse');\r\n    }\r\n  };\r\n\r\n  // Fonctions utilitaires pour le traitement des données\r\n  \r\n  // Préparer les données pour le graphique d'historique\r\n  const prepareHistoriqueData = () => {\r\n    if (filteredHistorique.length === 0) return [];\r\n    \r\n    const sortedData = [...filteredHistorique].sort((a, b) => {\r\n      try {\r\n        return new Date(a.date_mesure).getTime() - new Date(b.date_mesure).getTime();\r\n      } catch (error) {\r\n        console.error('Erreur lors du tri des données historiques:', error);\r\n        return 0;\r\n      }\r\n    });\r\n    \r\n    return sortedData.map(item => {\r\n      try {\r\n        return {\r\n          date: new Date(item.date_mesure).toLocaleDateString('fr-FR'),\r\n          score: item.score,\r\n          thematique: item.thematique\r\n        };\r\n      } catch (error) {\r\n        console.error('Erreur lors de la préparation des données historiques:', error);\r\n        return {\r\n          date: 'Date inconnue',\r\n          score: item.score || 0,\r\n          thematique: item.thematique || 'Inconnue'\r\n        };\r\n      }\r\n    });\r\n  };\r\n\r\n  // Calculer le score global à afficher\r\n  const getScoreGlobal = () => {\r\n    if (!selectedAnalyse) return 'N/A';\r\n    \r\n    const score = selectedAnalyse.score_global !== undefined ? selectedAnalyse.score_global :\r\n                 selectedAnalyse.scoreGlobal !== undefined ? selectedAnalyse.scoreGlobal : null;\r\n    \r\n    return score !== null ? score.toFixed(2) : 'N/A';\r\n  };\r\n\r\n  // Fonctions de pagination et de tri pour le tableau\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleRequestSort = (property: keyof InterpretationSummary) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  // Filtrer les données du tableau récapitulatif\r\n  const getFilteredData = () => {\r\n    // Commencer avec toutes les interprétations\r\n    let filteredData = [...interpretationsSummary];\r\n    \r\n    // Filtrer par entreprise si une entreprise est sélectionnée\r\n    if (selectedEntreprise) {\r\n      filteredData = filteredData.filter(row => {\r\n        // Vérifier si l'ID d'entreprise correspond\r\n        // Si l'ID d'entreprise n'est pas disponible directement dans l'objet, nous pouvons\r\n        // utiliser une relation entre applications et entreprises\r\n        return row.id_entreprise === selectedEntreprise;\r\n      });\r\n      \r\n      console.log(`Filtré par entreprise ${selectedEntreprise}: ${filteredData.length} résultats`);\r\n    }\r\n    \r\n    // Appliquer les autres filtres\r\n    filteredData = filteredData.filter(row => {\r\n      // Filtre de recherche\r\n      const searchLower = searchTerm.toLowerCase();\r\n      const appNameMatch = row.nom_application?.toLowerCase().includes(searchLower) || false;\r\n      const niveauMatch = row.niveau_global?.toLowerCase().includes(searchLower) || false;\r\n      const orgMatch = row.organisation?.toLowerCase().includes(searchLower) || false;\r\n      \r\n      if (searchTerm && !appNameMatch && !niveauMatch && !orgMatch) {\r\n        return false;\r\n      }\r\n      \r\n      // Filtres avancés\r\n      if (filters.application && row.nom_application !== filters.application) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.niveau && row.niveau_global !== filters.niveau) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.organisation && row.organisation !== filters.organisation) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.scoreMin && typeof row.score_global === 'number' && \r\n          row.score_global < parseFloat(filters.scoreMin)) {\r\n        return false;\r\n      }\r\n      \r\n      if (filters.scoreMax && typeof row.score_global === 'number' && \r\n          row.score_global > parseFloat(filters.scoreMax)) {\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    });\r\n    \r\n    // Trier les données\r\n    filteredData.sort((a, b) => {\r\n      const valueA = a[orderBy];\r\n      const valueB = b[orderBy];\r\n      \r\n      if (typeof valueA === 'number' && typeof valueB === 'number') {\r\n        return order === 'asc' ? valueA - valueB : valueB - valueA;\r\n      }\r\n      \r\n      // Conversion en chaînes pour la comparaison\r\n      const strA = String(valueA || '');\r\n      const strB = String(valueB || '');\r\n      \r\n      return order === 'asc' \r\n        ? strA.localeCompare(strB)\r\n        : strB.localeCompare(strA);\r\n    });\r\n    \r\n    // Appliquer la pagination\r\n    return filteredData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\r\n  };\r\n\r\n  // Obtenir les options uniques pour les filtres déroulants\r\n  const getUniqueValues = (field: keyof InterpretationSummary) => {\r\n    return [...new Set(interpretationsSummary.map(item => item[field]))].filter(Boolean);\r\n  };\r\n\r\n  // Rendu du composant avec AnalysesInterpretationsUI\r\n  return (\r\n    <AnalysesInterpretationsUI\r\n    loading={loading}\r\n    error={error}\r\n    applications={applications}\r\n    entreprises={entreprises}\r\n    selectedApplication={selectedApplication}\r\n    selectedEntreprise={selectedEntreprise}\r\n    analyses={analyses}\r\n    selectedAnalyse={selectedAnalyse}\r\n    interpretation={interpretation}\r\n    historique={historique}\r\n    filteredHistorique={filteredHistorique}\r\n    tabValue={tabValue}\r\n    selectedThematique={selectedThematique}\r\n    openDialog={openDialog}\r\n    newAnalyseData={newAnalyseData}\r\n    interpretationsSummary={interpretationsSummary}\r\n    page={page}\r\n    rowsPerPage={rowsPerPage}\r\n    order={order}\r\n    orderBy={orderBy}\r\n    searchTerm={searchTerm}\r\n    filters={filters}\r\n    showFilters={showFilters}\r\n    uniqueThematiques={uniqueThematiques}\r\n    handleApplicationChange={handleApplicationChange}\r\n    handleEntrepriseChange={handleEntrepriseChange}\r\n    handleAnalyseChange={handleAnalyseChange}\r\n    handleThematiqueChange={handleThematiqueChange}\r\n    handleTabChange={handleTabChange}\r\n    handleOpenNewAnalyseDialog={handleOpenNewAnalyseDialog}\r\n    handleCloseDialog={handleCloseDialog}\r\n    addThematique={addThematique}\r\n    updateThematique={updateThematique}\r\n    removeThematique={removeThematique}\r\n    createNewAnalyse={createNewAnalyse}\r\n    calculateNewAnalyse={calculateNewAnalyse}\r\n    getScoreGlobal={getScoreGlobal}\r\n    prepareHistoriqueData={prepareHistoriqueData}\r\n    handleChangePage={handleChangePage}\r\n    handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n    handleRequestSort={handleRequestSort}\r\n    getFilteredData={getFilteredData}\r\n    getUniqueValues={getUniqueValues}\r\n    setSearchTerm={setSearchTerm}\r\n    setFilters={setFilters}\r\n    setShowFilters={setShowFilters}\r\n    fetchAllInterpretations={fetchAllInterpretations}\r\n    fetchAnalysesByApplication={fetchAnalysesByApplication}\r\n    fetchAnalysesByEntreprise={fetchAnalysesByEntreprise}   \r\n    fetchHistoriqueByEntreprise={fetchHistoriqueByEntreprise} \r\n  />\r\n  );\r\n};\r\n\r\nexport default AnalysesInterpretations;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  Alert,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Chip,\r\n} from '@mui/material';\r\nimport {\r\n  Radar,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  ResponsiveContainer,\r\n  Legend,\r\n} from 'recharts';\r\nimport { getNiveauColor } from '../../utils/AnalyseUtils';\r\nimport api from '../../services/api';\r\n\r\n// Types\r\ninterface Thematique {\r\n  id: string;\r\n  nom: string;\r\n  score: string;\r\n  niveau: string;\r\n  recommandations: string;\r\n}\r\n\r\ninterface Fonction {\r\n  id: string;\r\n  nom: string;\r\n  score_global: string;\r\n  niveau: string;\r\n  recommandations: string;\r\n  thematiques: Thematique[];\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n  score_global: string;\r\n  niveau_global: string;\r\n  recommandations_globales: string;\r\n  fonctions: Fonction[];\r\n}\r\n\r\n// Helper function to ensure a value is a number and format it\r\nconst formatScore = (score: string | undefined | null): string => {\r\n  if (score === undefined || score === null) return 'N/A';\r\n  return parseFloat(score).toFixed(1);\r\n};\r\n\r\nconst AnalysesFonctions: React.FC = () => {\r\n  // States\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [selectedEntreprise, setSelectedEntreprise] = useState<string>('');\r\n  const [entrepriseDetails, setEntrepriseDetails] = useState<Entreprise | null>(null);\r\n  const [selectedFonction, setSelectedFonction] = useState<string>('');\r\n  const [fonctionDetails, setFonctionDetails] = useState<Fonction | null>(null);\r\n  const [tabValue, setTabValue] = useState<number>(0);\r\n\r\n  // Fetch enterprises on mount\r\n  useEffect(() => {\r\n    fetchEntreprises();\r\n  }, []);\r\n\r\n  // Fetch enterprise details when selected\r\n  useEffect(() => {\r\n    if (selectedEntreprise) {\r\n      fetchEntrepriseDetails(selectedEntreprise);\r\n    }\r\n  }, [selectedEntreprise]);\r\n\r\n  // Update function details when selected\r\n  useEffect(() => {\r\n    if (selectedFonction && entrepriseDetails?.fonctions) {\r\n      const fonction = entrepriseDetails.fonctions.find((f) => f.id === selectedFonction) || null;\r\n      setFonctionDetails(fonction);\r\n    } else {\r\n      setFonctionDetails(null);\r\n    }\r\n  }, [selectedFonction, entrepriseDetails]);\r\n\r\n  // Fetch enterprises\r\n  const fetchEntreprises = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('entreprises');\r\n      if (Array.isArray(response)) {\r\n        const uniqueEntreprises = Array.from(\r\n          new Map(response.map((item) => [item.id_entreprise, item])).values(),\r\n        );\r\n        const sortedEntreprises = uniqueEntreprises.sort((a, b) =>\r\n          a.nom_entreprise.localeCompare(b.nom_entreprise),\r\n        );\r\n        setEntreprises(sortedEntreprises);\r\n        if (sortedEntreprises.length > 0) {\r\n          setSelectedEntreprise(sortedEntreprises[0].id_entreprise);\r\n        }\r\n      }\r\n    } catch (error: unknown) {\r\n      const err = error as Error;\r\n      console.error('Erreur lors du chargement des entreprises:', err.message);\r\n      setError('Impossible de charger les entreprises');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch enterprise maturity details\r\n  const fetchEntrepriseDetails = async (entrepriseId: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get(`entreprises/${entrepriseId}/maturity-analysis`);\r\n     \r\n              // LOG COMPLET DE LA RÉPONSE\r\n            console.log('=== RÉPONSE API COMPLÈTE ===');\r\n            console.log(JSON.stringify(response, null, 2));\r\n            \r\n            // LOG SPÉCIFIQUE DES FONCTIONS\r\n            if (response && response.fonctions) {\r\n              console.log('=== FONCTIONS REÇUES ===');\r\n              response.fonctions.forEach((f: any, index: number) => {\r\n                console.log(`Fonction ${index}:`, {\r\n                  id: f.id,\r\n                  nom: f.nom,\r\n                  score_global: f.score_global,\r\n                  niveau: f.niveau,\r\n                  // Vérifier si le niveau est sous un autre nom\r\n                  level: f.level,\r\n                  maturity_level: f.maturity_level,\r\n                  niveau_global: f.niveau_global,\r\n                  // Afficher toutes les clés de l'objet\r\n                  toutes_les_cles: Object.keys(f)\r\n                });\r\n              });\r\n            }\r\n                \r\n     \r\n      if (response) {\r\n        setEntrepriseDetails(response);\r\n        if (response.fonctions.length > 0) {\r\n          setSelectedFonction(response.fonctions[0].id);\r\n        } else {\r\n          setError(\"Aucune fonction évaluée pour cette entreprise.\");\r\n        }\r\n      }\r\n    } catch (error: unknown) {\r\n      const err = error as Error;\r\n      console.error('Erreur lors du chargement des détails de l\\'entreprise:', err.message);\r\n      setError(\"Impossible de charger les détails de l'entreprise.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle enterprise selection\r\n  const handleEntrepriseChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const entrepriseId = event.target.value as string;\r\n    setSelectedEntreprise(entrepriseId);\r\n  };\r\n\r\n  // Handle function selection\r\n  const handleFonctionChange = (fonctionId: string) => {\r\n    setSelectedFonction(fonctionId);\r\n  };\r\n\r\n  // Handle tab change\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Convert thematiques to radar chart data\r\n  const convertToRadarData = (thematiques: Thematique[] = []) => {\r\n    return thematiques.map((theme) => ({\r\n      thematique: theme.nom,\r\n      score: theme.score \r\n      ? parseFloat(theme.score) \r\n      : (theme.score_moyen ? parseFloat(theme.score_moyen.toString()) : 0),\r\n      fullMark: 5,\r\n    }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '80vh' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Enterprise selection */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Analyses de maturité par Fonctions évaluées\r\n              </Typography>\r\n            </Box>\r\n\r\n            <FormControl fullWidth variant=\"outlined\" sx={{ mb: 2 }}>\r\n              <InputLabel id=\"entreprise-select-label\">Entreprise</InputLabel>\r\n              <Select\r\n                labelId=\"entreprise-select-label\"\r\n                id=\"entreprise-select\"\r\n                value={selectedEntreprise}\r\n                onChange={handleEntrepriseChange}\r\n                label=\"Entreprise\"\r\n              >\r\n                {entreprises.map((entreprise, index) => (\r\n                  <MenuItem key={`${entreprise.id_entreprise}-${index}`} value={entreprise.id_entreprise}>\r\n                    {entreprise.nom_entreprise}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Global maturity score */}\r\n        {entrepriseDetails && (\r\n          <Grid xs={12}>\r\n            <Card sx={{ bgcolor: '#f8f9fa', borderLeft: '5px solid #0B4E87' }}>\r\n              <CardContent>\r\n                <Grid container spacing={3} alignItems=\"center\">\r\n                  <Grid xs={12} md={4}>\r\n                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                      <Typography variant=\"h6\" gutterBottom>\r\n                        Score Global de Maturité\r\n                      </Typography>\r\n                      <Typography variant=\"h2\" color=\"primary\" sx={{ fontWeight: 'bold', my: 1 }}>\r\n                        {formatScore(entrepriseDetails.score_global)}\r\n                      </Typography>\r\n                      {entrepriseDetails.niveau_global && (\r\n                        <Chip\r\n                          label={entrepriseDetails.niveau_global}\r\n                          color={getNiveauColor(entrepriseDetails.niveau_global)}\r\n                          size=\"medium\"\r\n                          sx={{ fontSize: '1rem', px: 2 }}\r\n                        />\r\n                      )}\r\n                    </Box>\r\n                  </Grid>\r\n                  <Grid xs={12} md={8}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom fontWeight=\"bold\">\r\n                      Recommandations:\r\n                    </Typography>\r\n                    <Typography variant=\"body1\">\r\n                      {entrepriseDetails.recommandations_globales ||\r\n                        'Aucune recommandation disponible pour cette entreprise.'}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Function list */}\r\n        <Grid xs={12} md={4}>\r\n          <Card sx={{ height: '100%' }}>\r\n            <CardHeader title=\"Fonctions Évaluées\" />\r\n            <CardContent>\r\n              {entrepriseDetails?.fonctions.length > 0 ? (\r\n                <List>\r\n                  {entrepriseDetails.fonctions.map((fonction, index) => (\r\n                    <React.Fragment key={`fonction-${fonction.id}-${index}`}>\r\n                      <ListItem\r\n                        onClick={() => handleFonctionChange(fonction.id)}\r\n                        sx={{\r\n                          borderLeft:\r\n                            selectedFonction === fonction.id ? '4px solid #0B4E87' : '4px solid transparent',\r\n                          bgcolor: selectedFonction === fonction.id ? 'rgba(11, 78, 135, 0.05)' : 'transparent',\r\n                          cursor: 'pointer',\r\n                        }}\r\n                      >\r\n                        <ListItemText\r\n                          primary={\r\n                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                              <Typography variant=\"subtitle1\">{fonction.nom}</Typography>\r\n                              <Chip\r\n                                label={formatScore(fonction.score_global)}\r\n                                color={getNiveauColor(fonction.niveau || '')}\r\n                                size=\"small\"\r\n                              />\r\n                            </Box>\r\n                          }\r\n                          secondary={\r\n                            <Typography variant=\"body2\" sx={{ mt: 0.5 }}>\r\n                              {fonction.niveau || 'Niveau non défini'}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </ListItem>\r\n                      {index < entrepriseDetails.fonctions.length - 1 && <Divider />}\r\n                    </React.Fragment>\r\n                  ))}\r\n                </List>\r\n              ) : (\r\n                <Alert severity=\"info\">Aucune fonction évaluée pour cette entreprise.</Alert>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Selected function analysis */}\r\n        <Grid xs={12} md={8}>\r\n          {fonctionDetails ? (\r\n            <Card>\r\n              <CardHeader\r\n                title={`Analyse de la fonction: ${fonctionDetails.nom}`}\r\n                action={\r\n                  <Chip\r\n                    label={`Score: ${formatScore(fonctionDetails.score_global)}`}\r\n                    color={getNiveauColor(fonctionDetails.niveau || '')}\r\n                  />\r\n                }\r\n              />\r\n              <CardContent>\r\n                <Tabs\r\n                  value={tabValue}\r\n                  onChange={handleTabChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"fullWidth\"\r\n                  sx={{ mb: 2 }}\r\n                >\r\n                  <Tab label=\"Vue d'ensemble\" />\r\n                  <Tab label=\"Recommandations Qwanza\" />\r\n                  <Tab label=\"Recommandations LLM Publics\" />\r\n                </Tabs>\r\n\r\n                {/* Overview tab */}\r\n                {tabValue === 0 && (\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Score par Thématique\r\n                    </Typography>\r\n\r\n                    {fonctionDetails.thematiques && fonctionDetails.thematiques.length > 0 ? (\r\n                      <ResponsiveContainer width=\"100%\" height={350}>\r\n                        <RadarChart\r\n                          outerRadius={150}\r\n                          width={500}\r\n                          height={350}\r\n                          data={convertToRadarData(fonctionDetails.thematiques)}\r\n                        >\r\n                          <PolarGrid />\r\n                          <PolarAngleAxis dataKey=\"thematique\" />\r\n                          <PolarRadiusAxis angle={30} domain={[0, 5]} />\r\n                          <Radar\r\n                            name=\"Score\"\r\n                            dataKey=\"score\"\r\n                            stroke=\"#0B4E87\"\r\n                            fill=\"#0B4E87\"\r\n                            fillOpacity={0.6}\r\n                          />\r\n                          <Legend />\r\n                        </RadarChart>\r\n                      </ResponsiveContainer>\r\n                    ) : (\r\n                      <Alert severity=\"info\">Aucune donnée de thématique disponible pour cette fonction.</Alert>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n\r\n                {/* Recommendations tab */}\r\n                {tabValue === 1 && (\r\n                  <Box>\r\n                    <Typography variant=\"subtitle1\" gutterBottom fontWeight=\"bold\">\r\n                      Recommandation globale pour la fonction:\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" paragraph>\r\n                      {fonctionDetails.recommandations || 'Aucune recommandation globale disponible.'}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\" gutterBottom fontWeight=\"bold\">\r\n                      Recommandations par thématique:\r\n                    </Typography>\r\n                    {fonctionDetails.thematiques.length > 0 ? (\r\n                      <List>\r\n                        {fonctionDetails.thematiques.map((theme, index) => (\r\n                          <React.Fragment key={`theme-${theme.id}-${index}`}>\r\n                            <ListItem>\r\n                              <ListItemText\r\n                                primary={\r\n                                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                    <Typography variant=\"subtitle2\">{theme.nom}</Typography>\r\n                                    <Chip\r\n                                      label={theme.niveau}\r\n                                      color={getNiveauColor(theme.niveau || '')}\r\n                                      size=\"small\"\r\n                                    />\r\n                                  </Box>\r\n                                }\r\n                                secondary={\r\n                                  <Typography variant=\"body2\">\r\n                                    <strong>Score:</strong> {formatScore(theme.score)}\r\n                                    <br />\r\n                                    <strong>Recommandations:</strong> {theme.recommandations}\r\n                                  </Typography>\r\n                                }\r\n                              />\r\n                            </ListItem>\r\n                            {index < fonctionDetails.thematiques.length - 1 && <Divider />}\r\n                          </React.Fragment>\r\n                        ))}\r\n                      </List>\r\n                    ) : (\r\n                      <Alert severity=\"info\">Aucune recommandation thématique disponible pour cette fonction.</Alert>\r\n                    )}\r\n                  </Box>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            <Alert severity=\"info\">Veuillez sélectionner une fonction pour voir son analyse détaillée.</Alert>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AnalysesFonctions;","// src/pages/dashboard/CalculateScore.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Alert,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Calculate as CalculateIcon,\r\n} from '@mui/icons-material';\r\nimport api from '../../services/api';\r\n\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n  statut: string;\r\n  type: string;\r\n  hebergement: string;\r\n  architecture_logicielle: string;\r\n}\r\n\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_application: string;\r\n  id_questionnaire: string;\r\n  id_acteur: string;\r\n  statut: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n  titre?: string;\r\n  questionnaire_titre?: string;\r\n  acteur_nom?: string;\r\n}\r\n\r\nconst CalculateScore: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [calculating, setCalculating] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [application, setApplication] = useState<Application | null>(null);\r\n  const [formulaires, setFormulaires] = useState<Formulaire[]>([]);\r\n  const [activeStep, setActiveStep] = useState<number>(0);\r\n\r\n  // Étapes du processus\r\n  const steps = [\r\n    'Vérification des formulaires',\r\n    'Calcul des scores',\r\n    'Génération de l\\'analyse'\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchApplicationData = async () => {\r\n      if (!id) {\r\n        setError(\"Identifiant de l'application manquant\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // Récupérer les informations de l'application\r\n        const appResponse = await api.get(`applications/${id}`);\r\n        if (appResponse) {\r\n          setApplication(appResponse);\r\n        }\r\n\r\n        // Récupérer tous les formulaires puis filtrer par id_application\r\n        // Puisque la route formulaires/application/:id n'existe pas\r\n        const formResponse = await api.get(`formulaires`);\r\n        \r\n        let formsData: Formulaire[] = [];\r\n        if (Array.isArray(formResponse)) {\r\n          formsData = formResponse.filter(form => form.id_application === id);\r\n        } else if (formResponse && formResponse.data && Array.isArray(formResponse.data)) {\r\n          formsData = formResponse.data.filter(form => form.id_application === id);\r\n        }\r\n        \r\n        setFormulaires(formsData);\r\n        setActiveStep(0);\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n        setError('Erreur lors du chargement des données. Veuillez réessayer plus tard.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchApplicationData();\r\n  }, [id]);\r\n\r\n  const handleCalculateScore = async () => {\r\n    if (!id) return;\r\n\r\n    setCalculating(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n\r\n    try {\r\n      // Première étape - Vérification des formulaires\r\n      setActiveStep(0);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulation de traitement\r\n\r\n      // Deuxième étape - Calcul des scores\r\n      setActiveStep(1);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulation de traitement\r\n\r\n      // Appel à l'API pour calculer le score\r\n      // D'après le schéma SQL, on doit appeler un endpoint qui invoquera la procédure stockée\r\n      // calculer_scores_maturite avec le paramètre id_application\r\n      const response = await api.post('analyses', { id_application: id });\r\n\r\n      // Troisième étape - Génération de l'analyse\r\n      setActiveStep(2);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulation de traitement\r\n\r\n      setSuccess('Le score de maturité a été calculé avec succès!');\r\n      \r\n      // Rediriger vers la page d'analyse après 2 secondes\r\n      setTimeout(() => {\r\n        navigate(`/analyses-interpretations/${id}`);\r\n      }, 2000);\r\n    } catch (error) {\r\n      console.error('Erreur lors du calcul du score:', error);\r\n      setError('Une erreur est survenue lors du calcul du score. Veuillez réessayer plus tard.');\r\n    } finally {\r\n      setCalculating(false);\r\n    }\r\n  };\r\n\r\n  // Vérifier si l'application a des formulaires avec des réponses\r\n  const canCalculateScore = formulaires.length > 0;\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n              <Button\r\n                color=\"primary\"\r\n                startIcon={<ArrowBackIcon />}\r\n                onClick={() => navigate('/applications')}\r\n                sx={{ mr: 2 }}\r\n              >\r\n                Retour aux applications\r\n              </Button>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Calcul du Score de Maturité\r\n              </Typography>\r\n            </Box>\r\n            \r\n            {application && (\r\n              <Typography variant=\"subtitle1\">\r\n                Application: <strong>{application.nom_application}</strong> | \r\n                Type: <strong>{application.type}</strong> | \r\n                Statut: <strong>{application.statut}</strong>\r\n              </Typography>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Messages d'erreur ou de succès */}\r\n        {error && (\r\n          <Grid xs={12}>\r\n            <Alert severity=\"error\">{error}</Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        {success && (\r\n          <Grid xs={12}>\r\n            <Alert severity=\"success\">{success}</Alert>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Stepper */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Stepper activeStep={activeStep} alternativeLabel>\r\n              {steps.map((label) => (\r\n                <Step key={label}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Vérification des formulaires */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Formulaires disponibles pour l'analyse\r\n            </Typography>\r\n            <Divider sx={{ mb: 2 }} />\r\n\r\n            {formulaires.length > 0 ? (\r\n              <Box>\r\n                <Typography variant=\"body1\" mb={2}>\r\n                  {formulaires.length} formulaire(s) trouvé(s) pour cette application.\r\n                </Typography>\r\n                \r\n                <List>\r\n                  {formulaires.map((form, index) => (\r\n                    <ListItem key={form.id_formulaire || index} divider>\r\n                      <ListItemText\r\n                        primary={form.titre || form.questionnaire_titre || `Formulaire ${index + 1}`}\r\n                        secondary={`Statut: ${form.statut || 'Non défini'} | Dernière modification: ${\r\n                          form.date_modification ? \r\n                          new Date(form.date_modification).toLocaleDateString('fr-FR') : \r\n                          'Non disponible'\r\n                        }`}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Box>\r\n            ) : (\r\n              <Alert severity=\"warning\">\r\n                Aucun formulaire n'est disponible pour cette application. Le calcul du score de maturité nécessite au moins un formulaire complété.\r\n              </Alert>\r\n            )}\r\n            \r\n            <Box display=\"flex\" justifyContent=\"center\" mt={3}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<CalculateIcon />}\r\n                onClick={handleCalculateScore}\r\n                disabled={calculating || !canCalculateScore}\r\n                size=\"large\"\r\n              >\r\n                {calculating ? 'Calcul en cours...' : 'Calculer le Score de Maturité'}\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Explication */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Comment se déroule le calcul ?\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n              Le score de maturité est calculé à partir des réponses aux questionnaires liés à cette application. \r\n              Le processus évalue plusieurs thématiques et fournit un score global ainsi que des scores par domaine.\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              <strong>Note :</strong> Pour obtenir un score pertinent, assurez-vous que les formulaires ont été \r\n              complétés avec soin et reflètent fidèlement la maturité DevSecOps de l'application.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CalculateScore;","import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  LinearProgress,\r\n  Alert,\r\n  Tooltip,\r\n  TablePagination,\r\n  TableSortLabel\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Visibility as VisibilityIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterListIcon,\r\n  Refresh as RefreshIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../../services/api';\r\n\r\ninterface Formulaire {\r\n  id_formulaire: string;\r\n  id_acteur: string;\r\n  acteur_nom?: string;\r\n  id_application?: string;\r\n  nom_application?: string;\r\n  id_entreprise: string;\r\n  nom_entreprise?: string;\r\n  id_questionnaire?: string;\r\n  questionnaire_titre?: string;\r\n  fonction?: string;\r\n  thematique?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n  statut: 'Brouillon' | 'Soumis' | 'Validé';\r\n  progression?: number;\r\n}\r\n\r\ninterface Fonction {\r\n  id: string;\r\n  nom: string;\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n}\r\n\r\n// Propriétés de tri\r\ntype Order = 'asc' | 'desc';\r\ntype OrderBy = 'fonction' | 'nom_entreprise' | 'acteur_nom' | 'date_modification' | 'statut' | 'progression';\r\n\r\nconst Forms: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [fonctionFilter, setFonctionFilter] = useState('');\r\n  const [entrepriseFilter, setEntrepriseFilter] = useState('');\r\n  const [formulaires, setFormulaires] = useState<Formulaire[]>([]);\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // Pagination\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  \r\n  // Tri\r\n  const [order, setOrder] = useState<Order>('desc');\r\n  const [orderBy, setOrderBy] = useState<OrderBy>('date_modification');\r\n  \r\n  // Récupérer les données des formulaires, fonctions et entreprises\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Récupérer les formulaires\r\n      const formulairesResponse = await api.get('formulaires');\r\n      \r\n      // Normaliser la réponse des formulaires\r\n      let formulairesData: Formulaire[] = [];\r\n      if (Array.isArray(formulairesResponse)) {\r\n        formulairesData = formulairesResponse;\r\n      } else if (formulairesResponse && formulairesResponse.data && Array.isArray(formulairesResponse.data)) {\r\n        formulairesData = formulairesResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour formulaires:', formulairesResponse);\r\n        formulairesData = [];\r\n      }\r\n      \r\n      // Récupérer les fonctions\r\n      const fonctionsResponse = await api.get('fonctions');\r\n      \r\n      let fonctionsData: Fonction[] = [];\r\n      if (Array.isArray(fonctionsResponse)) {\r\n        fonctionsData = fonctionsResponse;\r\n      } else if (fonctionsResponse && fonctionsResponse.data && Array.isArray(fonctionsResponse.data)) {\r\n        fonctionsData = fonctionsResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour fonctions:', fonctionsResponse);\r\n        fonctionsData = [];\r\n      }\r\n      \r\n      // Récupérer les entreprises\r\n      const entreprisesResponse = await api.get('entreprises');\r\n      \r\n      let entreprisesData: Entreprise[] = [];\r\n      if (Array.isArray(entreprisesResponse)) {\r\n        entreprisesData = entreprisesResponse;\r\n      } else if (entreprisesResponse && entreprisesResponse.data && Array.isArray(entreprisesResponse.data)) {\r\n        entreprisesData = entreprisesResponse.data;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour entreprises:', entreprisesResponse);\r\n        entreprisesData = [];\r\n      }\r\n      \r\n      // Normaliser les propriétés des formulaires\r\n      const normalizedFormulaires = formulairesData.map(form => ({\r\n        id_formulaire: form.id_formulaire,\r\n        id_acteur: form.id_acteur || '',\r\n        acteur_nom: form.acteur_nom || 'Utilisateur inconnu',\r\n        id_application: form.id_application || '',\r\n        nom_application: form.nom_application || 'Application inconnue',\r\n        id_entreprise: form.id_entreprise || '',\r\n        nom_entreprise: form.nom_entreprise || 'Entreprise inconnue',\r\n        id_questionnaire: form.id_questionnaire || '',\r\n        questionnaire_titre: form.questionnaire_titre || '',\r\n        fonction: form.fonction || form.questionnaire_titre || 'Fonction inconnue',\r\n        thematique: form.thematique || 'Non catégorisé',\r\n        date_creation: form.date_creation || new Date().toISOString(),\r\n        date_modification: form.date_modification || form.date_creation || new Date().toISOString(),\r\n        statut: form.statut || 'Brouillon',\r\n        progression: form.progression ?? 0\r\n      }));\r\n      \r\n      setFormulaires(normalizedFormulaires);\r\n      setFonctions(fonctionsData);\r\n      setEntreprises(entreprisesData);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des données:', error);\r\n      setError('Impossible de charger les formulaires. Veuillez réessayer plus tard.');\r\n      setFormulaires([]);\r\n    } finally {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n  \r\n  // Rafraîchir les données\r\n  const handleRefresh = () => {\r\n    setRefreshing(true);\r\n    fetchData();\r\n  };\r\n  \r\n  // Filtrer les formulaires en fonction des critères\r\n  const filteredFormulaires = formulaires.filter(form => {\r\n    const matchesSearch = searchTerm === '' || \r\n      (form.fonction && form.fonction.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (form.nom_entreprise && form.nom_entreprise.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (form.acteur_nom && form.acteur_nom.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (form.thematique && form.thematique.toLowerCase().includes(searchTerm.toLowerCase()));\r\n    \r\n    const matchesStatus = statusFilter === '' || form.statut === statusFilter;\r\n    const matchesFonction = fonctionFilter === '' || form.fonction === fonctionFilter;\r\n    const matchesEntreprise = entrepriseFilter === '' || form.id_entreprise === entrepriseFilter;\r\n    \r\n    return matchesSearch && matchesStatus && matchesFonction && matchesEntreprise;\r\n  });\r\n  \r\n  // Trier les formulaires\r\n  const sortedFormulaires = [...filteredFormulaires].sort((a, b) => {\r\n    let comparison = 0;\r\n    \r\n    switch (orderBy) {\r\n      case 'fonction':\r\n        comparison = (a.fonction || '').localeCompare(b.fonction || '');\r\n        break;\r\n      case 'nom_entreprise':\r\n        comparison = (a.nom_entreprise || '').localeCompare(b.nom_entreprise || '');\r\n        break;\r\n      case 'acteur_nom':\r\n        comparison = (a.acteur_nom || '').localeCompare(b.acteur_nom || '');\r\n        break;\r\n      case 'date_modification':\r\n        comparison = new Date(a.date_modification).getTime() - new Date(b.date_modification).getTime();\r\n        break;\r\n      case 'statut':\r\n        comparison = a.statut.localeCompare(b.statut);\r\n        break;\r\n      case 'progression':\r\n        comparison = (a.progression || 0) - (b.progression || 0);\r\n        break;\r\n      default:\r\n        comparison = 0;\r\n    }\r\n    \r\n    return order === 'asc' ? comparison : -comparison;\r\n  });\r\n  \r\n  // Paginer les formulaires\r\n  const paginatedFormulaires = sortedFormulaires.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  \r\n  // Gérer le changement de page\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n  \r\n  // Gérer le changement de nombre de lignes par page\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  \r\n  // Gérer le tri\r\n  const handleRequestSort = (property: OrderBy) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n  \r\n  // Helper pour obtenir la couleur selon le statut\r\n  const getStatusColor = (status: 'Brouillon' | 'Soumis' | 'Validé') => {\r\n    switch (status) {\r\n      case 'Validé': return 'success';\r\n      case 'Soumis': return 'primary';\r\n      case 'Brouillon': return 'warning';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  // Helper pour obtenir la couleur de progression\r\n  const getProgressColor = (progress: number = 0) => {\r\n    if (progress < 30) return 'error';\r\n    if (progress < 70) return 'warning';\r\n    return 'success';\r\n  };\r\n  \r\n  // Formater la date\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return new Date(dateString).toLocaleDateString('fr-FR');\r\n    } catch (e) {\r\n      console.warn('Erreur lors du formatage de la date:', e);\r\n      return 'Date invalide';\r\n    }\r\n  };\r\n  \r\n  // Obtenir les fonctions uniques pour le filtre\r\n  const uniqueFonctions = [...new Set(formulaires.map(form => form.fonction))].filter(Boolean);\r\n  \r\n  // Statistiques par entreprise\r\n  const statsByEntreprise = entreprises.map(entreprise => {\r\n    const formsByEntreprise = formulaires.filter(form => form.id_entreprise === entreprise.id_entreprise);\r\n    const validatedCount = formsByEntreprise.filter(form => form.statut === 'Validé').length;\r\n    \r\n    return {\r\n      id: entreprise.id_entreprise,\r\n      name: entreprise.nom_entreprise,\r\n      total: formsByEntreprise.length,\r\n      validated: validatedCount,\r\n      avgProgression: formsByEntreprise.length \r\n        ? Math.round(formsByEntreprise.reduce((acc, form) => acc + (form.progression || 0), 0) / formsByEntreprise.length) \r\n        : 0\r\n    };\r\n  }).filter(stat => stat.total > 0);\r\n  \r\n  // Statistiques par fonction\r\n  const statsByFonction = uniqueFonctions.map(fonction => {\r\n    const formsByFonction = formulaires.filter(form => form.fonction === fonction);\r\n    const validatedCount = formsByFonction.filter(form => form.statut === 'Validé').length;\r\n    \r\n    return {\r\n      name: fonction,\r\n      total: formsByFonction.length,\r\n      validated: validatedCount,\r\n      avgProgression: formsByFonction.length \r\n        ? Math.round(formsByFonction.reduce((acc, form) => acc + (form.progression || 0), 0) / formsByFonction.length) \r\n        : 0\r\n    };\r\n  }).filter(stat => stat.total > 0);\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\" gutterBottom>\r\n                  Formulaires d'évaluation\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Suivez les différentes évaluations de maturité par fonction et par entreprise\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Tooltip title=\"Rafraîchir les données\">\r\n                  <IconButton \r\n                    color=\"primary\" \r\n                    onClick={handleRefresh} \r\n                    disabled={refreshing}\r\n                    sx={{ mr: 1 }}\r\n                  >\r\n                    <RefreshIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => navigate('/formulaires/new')}\r\n                >\r\n                  Nouveau formulaire\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Statistiques des formulaires */}\r\n        <Grid xs={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid xs={12} sm={6} lg={3}>\r\n              <Card>\r\n                <CardContent sx={{ textAlign: 'center' }}>\r\n                  <Typography variant=\"h4\" color=\"text.primary\">\r\n                    {formulaires.length}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Total formulaires\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid xs={12} sm={6} lg={3}>\r\n              <Card>\r\n                <CardContent sx={{ textAlign: 'center' }}>\r\n                  <Typography variant=\"h4\" color=\"success.main\">\r\n                    {formulaires.filter(f => f.statut === 'Validé').length}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Formulaires validés\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid xs={12} sm={6} lg={3}>\r\n              <Card>\r\n                <CardContent sx={{ textAlign: 'center' }}>\r\n                  <Typography variant=\"h4\" color=\"primary.main\">\r\n                    {formulaires.filter(f => f.statut === 'Soumis').length}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Formulaires soumis\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid xs={12} sm={6} lg={3}>\r\n              <Card>\r\n                <CardContent sx={{ textAlign: 'center' }}>\r\n                  <Typography variant=\"h4\" color=\"warning.main\">\r\n                    {formulaires.filter(f => f.statut === 'Brouillon').length}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Brouillons\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        \r\n        {/* Filtres */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n              <Grid xs={12} sm={6} md={3}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Rechercher\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  placeholder=\"Fonction, entreprise ou acteur...\"\r\n                  InputProps={{\r\n                    startAdornment: <SearchIcon color=\"action\" sx={{ mr: 1 }} />\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} sm={6} md={3}>\r\n                <FormControl fullWidth size=\"small\">\r\n                  <InputLabel id=\"status-filter-label\">Statut</InputLabel>\r\n                  <Select\r\n                    labelId=\"status-filter-label\"\r\n                    id=\"status-filter\"\r\n                    value={statusFilter}\r\n                    label=\"Statut\"\r\n                    onChange={(e) => setStatusFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Tous les statuts</MenuItem>\r\n                    <MenuItem value=\"Brouillon\">Brouillon</MenuItem>\r\n                    <MenuItem value=\"Soumis\">Soumis</MenuItem>\r\n                    <MenuItem value=\"Validé\">Validé</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} sm={6} md={3}>\r\n                <FormControl fullWidth size=\"small\">\r\n                  <InputLabel id=\"fonction-filter-label\">Fonction</InputLabel>\r\n                  <Select\r\n                    labelId=\"fonction-filter-label\"\r\n                    id=\"fonction-filter\"\r\n                    value={fonctionFilter}\r\n                    label=\"Fonction\"\r\n                    onChange={(e) => setFonctionFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Toutes les fonctions</MenuItem>\r\n                    {uniqueFonctions.map(fonction => (\r\n                      <MenuItem key={fonction} value={fonction}>{fonction}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid xs={12} sm={6} md={3}>\r\n                <FormControl fullWidth size=\"small\">\r\n                  <InputLabel id=\"entreprise-filter-label\">Entreprise</InputLabel>\r\n                  <Select\r\n                    labelId=\"entreprise-filter-label\"\r\n                    id=\"entreprise-filter\"\r\n                    value={entrepriseFilter}\r\n                    label=\"Entreprise\"\r\n                    onChange={(e) => setEntrepriseFilter(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">Toutes les entreprises</MenuItem>\r\n                    {entreprises.map(ent => (\r\n                      <MenuItem key={ent.id_entreprise} value={ent.id_entreprise}>{ent.nom_entreprise}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Tableau des formulaires */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n            {loading ? (\r\n              <Box sx={{ width: '100%', p: 4, textAlign: 'center' }}>\r\n                <CircularProgress />\r\n                <Typography sx={{ mt: 2 }}>Chargement des formulaires...</Typography>\r\n              </Box>\r\n            ) : (\r\n              <>\r\n                <TableContainer>\r\n                  <Table sx={{ minWidth: 650 }} aria-label=\"tableau des formulaires\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'fonction'}\r\n                            direction={orderBy === 'fonction' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('fonction')}\r\n                          >\r\n                            Fonction\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'nom_entreprise'}\r\n                            direction={orderBy === 'nom_entreprise' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('nom_entreprise')}\r\n                          >\r\n                            Entreprise\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'acteur_nom'}\r\n                            direction={orderBy === 'acteur_nom' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('acteur_nom')}\r\n                          >\r\n                            Acteur\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'date_modification'}\r\n                            direction={orderBy === 'date_modification' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('date_modification')}\r\n                          >\r\n                            Dates\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'statut'}\r\n                            direction={orderBy === 'statut' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('statut')}\r\n                          >\r\n                            Statut\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TableSortLabel\r\n                            active={orderBy === 'progression'}\r\n                            direction={orderBy === 'progression' ? order : 'asc'}\r\n                            onClick={() => handleRequestSort('progression')}\r\n                          >\r\n                            Progression\r\n                          </TableSortLabel>\r\n                        </TableCell>\r\n                        <TableCell>Actions</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {paginatedFormulaires.length > 0 ? (\r\n                        paginatedFormulaires.map((form) => (\r\n                          <TableRow\r\n                            key={form.id_formulaire}\r\n                            sx={{ \r\n                              '&:last-child td, &:last-child th': { border: 0 },\r\n                              '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.04)' }\r\n                            }}\r\n                          >\r\n                            <TableCell>\r\n                              <Typography variant=\"body2\" fontWeight=\"medium\">{form.fonction}</Typography>\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">{form.thematique}</Typography>\r\n                            </TableCell>\r\n                            <TableCell>{form.nom_entreprise}</TableCell>\r\n                            <TableCell>{form.acteur_nom}</TableCell>\r\n                            <TableCell>\r\n                              <Typography variant=\"caption\" display=\"block\">\r\n                                Création: {formatDate(form.date_creation)}\r\n                              </Typography>\r\n                              <Typography variant=\"caption\" display=\"block\">\r\n                                Modif: {formatDate(form.date_modification)}\r\n                              </Typography>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Chip \r\n                                label={form.statut} \r\n                                color={getStatusColor(form.statut)} \r\n                                size=\"small\" \r\n                              />\r\n                            </TableCell>\r\n                            <TableCell sx={{ width: 150 }}>\r\n                              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                <Box sx={{ width: '100%', mr: 1 }}>\r\n                                  <LinearProgress \r\n                                    variant=\"determinate\" \r\n                                    value={form.progression || 0} \r\n                                    color={getProgressColor(form.progression)}\r\n                                  />\r\n                                </Box>\r\n                                <Box sx={{ minWidth: 35 }}>\r\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    {form.progression || 0}%\r\n                                  </Typography>\r\n                                </Box>\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Tooltip title=\"Voir le détail\">\r\n                                <IconButton\r\n                                  color=\"primary\"\r\n                                  onClick={() => navigate(`/formulaires/${form.id_formulaire}`)}\r\n                                >\r\n                                  <VisibilityIcon />\r\n                                </IconButton>\r\n                              </Tooltip>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))\r\n                      ) : (\r\n                        <TableRow>\r\n                          <TableCell colSpan={7} align=\"center\">\r\n                            <Typography sx={{ py: 2 }}>\r\n                              Aucun formulaire trouvé\r\n                            </Typography>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25, 50]}\r\n                  component=\"div\"\r\n                  count={filteredFormulaires.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                  labelRowsPerPage=\"Lignes par page\"\r\n                  labelDisplayedRows={({ from, to, count }) => `${from}-${to} sur ${count}`}\r\n                />\r\n              </>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Statistiques par entreprise et fonction */}\r\n        {!loading && filteredFormulaires.length > 0 && (\r\n          <Grid xs={12}>\r\n            <Grid container spacing={2}>\r\n              {/* Statistiques par entreprise */}\r\n              <Grid xs={12} md={6}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Statistiques par Entreprise\r\n                  </Typography>\r\n                  <TableContainer>\r\n                    <Table size=\"small\">\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Entreprise</TableCell>\r\n                          <TableCell align=\"right\">Total</TableCell>\r\n                          <TableCell align=\"right\">Validés</TableCell>\r\n                          <TableCell align=\"right\">Progression moyenne</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {statsByEntreprise.map((stat) => (\r\n                          <TableRow key={stat.id}>\r\n                            <TableCell>{stat.name}</TableCell>\r\n                            <TableCell align=\"right\">{stat.total}</TableCell>\r\n                            <TableCell align=\"right\">{stat.validated}</TableCell>\r\n                            <TableCell align=\"right\">{stat.avgProgression}%</TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Paper>\r\n              </Grid>\r\n              \r\n              {/* Statistiques par fonction */}\r\n              <Grid xs={12} md={6}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Statistiques par Fonction\r\n                  </Typography>\r\n                  <TableContainer>\r\n                    <Table size=\"small\">\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Fonction</TableCell>\r\n                          <TableCell align=\"right\">Total</TableCell>\r\n                          <TableCell align=\"right\">Validés</TableCell>\r\n                          <TableCell align=\"right\">Progression moyenne</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {statsByFonction.map((stat) => (\r\n                          <TableRow key={stat.name}>\r\n                            <TableCell>{stat.name}</TableCell>\r\n                            <TableCell align=\"right\">{stat.total}</TableCell>\r\n                            <TableCell align=\"right\">{stat.validated}</TableCell>\r\n                            <TableCell align=\"right\">{stat.avgProgression}%</TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        \r\n        {/* Pied de page */}\r\n        <Grid xs={12} sx={{ mt: 4, textAlign: 'center' }}>\r\n          <Typography variant=\"caption\" color=\"text.secondary\">\r\n            © 2025 - Plateforme d'Évaluation de la Maturité des DSIN\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Forms;","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  TextField,\r\n  FormControl,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n  Radio,\r\n  IconButton,\r\n  Chip,\r\n  Alert,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Tooltip,\r\n  Badge,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Breadcrumbs,\r\n  Link\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Save as SaveIcon,\r\n  Send as SendIcon,\r\n  Check as CheckIcon,\r\n  Edit as EditIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  HomeOutlined as HomeIcon,\r\n  Business as BusinessIcon,\r\n  AccountTree as FunctionIcon,\r\n  Person as PersonIcon,\r\n  Warning as WarningIcon,\r\n  Comment as CommentIcon,\r\n  InfoOutlined as InfoIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../../services/api';\r\n\r\nimport { Formulaire, Reponse } from '../../../types/Formulaire';\r\n\r\ninterface Question {\r\n  id_question: string;\r\n  texte: string;\r\n  ponderation: number;\r\n  ordre: number;\r\n}\r\n\r\nconst FormDetail: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [saving, setSaving] = useState<boolean>(false);\r\n  const [formulaire, setFormulaire] = useState<Formulaire | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [reponses, setReponses] = useState<Reponse[]>([]);\r\n  const [currentStep, setCurrentStep] = useState<number>(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [openConfirmDialog, setOpenConfirmDialog] = useState<{ open: boolean, action: 'Soumis' | 'Validé' | null }>({ open: false, action: null });\r\n\r\n  // Nombre de questions par étape\r\n  const questionsPerStep = 5;\r\n\r\n  // Charger les données du formulaire\r\n  useEffect(() => {\r\n    const fetchFormulaire = async () => {\r\n      if (!id) {\r\n        setError(\"Identifiant du formulaire manquant\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // Récupérer les informations du formulaire\r\n        const formulaireResponse = await api.get(`formulaires/${id}`);\r\n        \r\n        let formulaireData = null;\r\n        if (formulaireResponse && typeof formulaireResponse === 'object') {\r\n          if (Array.isArray(formulaireResponse)) {\r\n            formulaireData = formulaireResponse[0]; // Prendre le premier si c'est un tableau\r\n          } else if (formulaireResponse.data) {\r\n            formulaireData = formulaireResponse.data;\r\n          } else {\r\n            formulaireData = formulaireResponse;\r\n          }\r\n        }\r\n        \r\n        if (!formulaireData) {\r\n          setError(\"Format de données du formulaire inattendu\");\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        \r\n        // Normaliser les données du formulaire\r\n        const normalizedFormulaire: Formulaire = {\r\n            id_formulaire: formulaireData.id_formulaire,\r\n            id_acteur: formulaireData.id_acteur || '',\r\n            acteur_nom: formulaireData.acteur_nom || 'Utilisateur inconnu',\r\n            id_application: formulaireData.id_application || '',\r\n            nom_application: formulaireData.nom_application || 'Application inconnue',\r\n            id_entreprise: formulaireData.id_entreprise || '',\r\n            nom_entreprise: formulaireData.nom_entreprise || 'Entreprise inconnue',\r\n            id_questionnaire: formulaireData.id_questionnaire || '',\r\n            questionnaire_titre: formulaireData.questionnaire_titre || 'Questionnaire inconnu',\r\n            fonction: formulaireData.fonction || 'Fonction inconnue',\r\n            thematique: formulaireData.thematique || 'Non catégorisé',\r\n            date_creation: formulaireData.date_creation || new Date().toISOString(),\r\n            date_modification: formulaireData.date_modification || formulaireData.date_creation || new Date().toISOString(),\r\n            statut: formulaireData.statut || 'Brouillon',\r\n            progression: formulaireData.progression || 0\r\n          };\r\n          \r\n          setFormulaire(normalizedFormulaire);\r\n          \r\n          // Récupérer les questions du questionnaire\r\n          const questionsResponse = await api.get(`questionnaires/${normalizedFormulaire.id_questionnaire}/questions`);\r\n          \r\n          let questionsData: Question[] = [];\r\n          if (Array.isArray(questionsResponse)) {\r\n            questionsData = questionsResponse;\r\n          } else if (questionsResponse && questionsResponse.data && Array.isArray(questionsResponse.data)) {\r\n            questionsData = questionsResponse.data;\r\n          } else {\r\n            console.warn('Format de réponse inattendu pour les questions:', questionsResponse);\r\n          }\r\n          \r\n          // Normaliser et trier les questions par ordre\r\n          const normalizedQuestions = questionsData\r\n            .map(q => ({\r\n              id_question: q.id_question,\r\n              texte: q.texte || `Question ${q.ordre || '?'}`,\r\n              ponderation: q.ponderation || 1,\r\n              ordre: q.ordre || 0\r\n            }))\r\n            .sort((a, b) => a.ordre - b.ordre);\r\n          \r\n          setQuestions(normalizedQuestions);\r\n          \r\n          // Récupérer les réponses existantes\r\n          const reponsesResponse = await api.get(`formulaires/${id}/reponses`);\r\n          \r\n          let reponsesData: Reponse[] = [];\r\n          if (Array.isArray(reponsesResponse)) {\r\n            reponsesData = reponsesResponse;\r\n          } else if (reponsesResponse && reponsesResponse.data && Array.isArray(reponsesResponse.data)) {\r\n            reponsesData = reponsesResponse.data;\r\n          } else {\r\n            console.warn('Format de réponse inattendu pour les réponses:', reponsesResponse);\r\n          }\r\n          \r\n          // Normaliser les réponses\r\n          const normalizedReponses = reponsesData.map(r => ({\r\n            id_reponse: r.id_reponse,\r\n            id_formulaire: r.id_formulaire || id,\r\n            id_question: r.id_question,\r\n            question_texte: r.question_texte || '',\r\n            valeur_reponse: r.valeur_reponse || '',\r\n            score: r.score || 0,\r\n            commentaire: r.commentaire\r\n          }));\r\n          \r\n          setReponses(normalizedReponses);\r\n        } catch (error) {\r\n          console.error('Erreur lors du chargement du formulaire:', error);\r\n          setError('Erreur lors du chargement du formulaire. Veuillez réessayer plus tard.');\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      \r\n      fetchFormulaire();\r\n    }, [id]);\r\n   \r\n    // Calculer le nombre total d'étapes\r\n    const totalSteps = Math.ceil((questions.length || 0) / questionsPerStep);\r\n    \r\n    // Questions pour l'étape actuelle\r\n    const currentStepQuestions = questions.slice(\r\n      currentStep * questionsPerStep,\r\n      (currentStep + 1) * questionsPerStep\r\n    );\r\n    \r\n    // Vérifier si toutes les questions de l'étape actuelle ont des réponses\r\n    const isCurrentStepComplete = currentStepQuestions.every(question => \r\n      reponses.some(reponse => reponse.id_question === question.id_question)\r\n    );\r\n    \r\n    // Vérifier si le formulaire est complet\r\n    const isFormComplete = questions.length > 0 && questions.every(question => \r\n      reponses.some(reponse => reponse.id_question === question.id_question)\r\n    );\r\n    \r\n    // Calculer la progression\r\n    const progression = questions.length > 0\r\n      ? (reponses.length / questions.length) * 100\r\n      : 0;\r\n    \r\n    // Gérer la navigation entre les étapes\r\n    const handleNextStep = () => {\r\n      if (currentStep < totalSteps - 1) {\r\n        setCurrentStep(currentStep + 1);\r\n        // Faire défiler la page vers le haut\r\n        window.scrollTo(0, 0);\r\n      }\r\n    };\r\n    \r\n    const handlePrevStep = () => {\r\n      if (currentStep > 0) {\r\n        setCurrentStep(currentStep - 1);\r\n        // Faire défiler la page vers le haut\r\n        window.scrollTo(0, 0);\r\n      }\r\n    };\r\n    \r\n    // Trouver la réponse pour une question\r\n    const findReponse = (questionId: string) => {\r\n      return reponses.find(reponse => reponse.id_question === questionId);\r\n    };\r\n    \r\n    // Mettre à jour une réponse\r\n    const updateReponse = (questionId: string, value: string) => {\r\n      const existingReponseIndex = reponses.findIndex(r => r.id_question === questionId);\r\n      \r\n      if (existingReponseIndex >= 0) {\r\n        // Mise à jour d'une réponse existante\r\n        const updatedReponses = [...reponses];\r\n        updatedReponses[existingReponseIndex] = {\r\n          ...updatedReponses[existingReponseIndex],\r\n          valeur_reponse: value,\r\n          // Dans un cas réel, le score pourrait être calculé autrement\r\n          score: parseInt(value) || 0\r\n        };\r\n        setReponses(updatedReponses);\r\n      } else {\r\n        // Création d'une nouvelle réponse\r\n        const question = questions.find(q => q.id_question === questionId);\r\n        if (!question) return;\r\n        \r\n        const newReponse: Reponse = {\r\n          id_reponse: `temp_${Date.now()}`, // Sera remplacé par l'ID généré côté serveur\r\n          id_formulaire: id || '',\r\n          id_question: questionId,\r\n          question_texte: question.texte,\r\n          valeur_reponse: value,\r\n          // Dans un cas réel, le score pourrait être calculé autrement\r\n          score: parseInt(value) || 0\r\n        };\r\n        setReponses([...reponses, newReponse]);\r\n      }\r\n    };\r\n    \r\n    // Mettre à jour un commentaire\r\n    const updateCommentaire = (questionId: string, commentaire: string) => {\r\n      const existingReponseIndex = reponses.findIndex(r => r.id_question === questionId);\r\n      \r\n      if (existingReponseIndex >= 0) {\r\n        const updatedReponses = [...reponses];\r\n        updatedReponses[existingReponseIndex] = {\r\n          ...updatedReponses[existingReponseIndex],\r\n          commentaire: commentaire || undefined\r\n        };\r\n        setReponses(updatedReponses);\r\n      }\r\n    };\r\n    \r\n    // Ouvrir la boîte de dialogue de confirmation\r\n    const handleConfirmAction = (action: 'Soumis' | 'Validé') => {\r\n      setOpenConfirmDialog({ open: true, action });\r\n    };\r\n    \r\n    // Fermer la boîte de dialogue de confirmation\r\n    const handleCloseConfirmDialog = () => {\r\n      setOpenConfirmDialog({ open: false, action: null });\r\n    };\r\n    \r\n    // Sauvegarder le formulaire\r\n    const saveFormulaire = async (newStatus?: 'Brouillon' | 'Soumis' | 'Validé') => {\r\n      if (!formulaire) return;\r\n      \r\n      setSaving(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // Update form status if needed\r\n        if (newStatus && newStatus !== formulaire.statut) {\r\n          try {\r\n            await api.put(`formulaires/${id}`, { \r\n              statut: newStatus,\r\n              progression: Math.round(progression)\r\n            });\r\n            \r\n            setFormulaire({\r\n              ...formulaire,\r\n              statut: newStatus,\r\n              progression: Math.round(progression)\r\n            });\r\n          } catch (error) {\r\n            console.error('Erreur lors de la mise à jour du statut:', error);\r\n            setError('Erreur lors de la mise à jour du statut. Veuillez réessayer.');\r\n            setSaving(false);\r\n            return;\r\n          }\r\n        }\r\n        \r\n        // OPTIMIZATION: Fetch all existing responses once at the beginning\r\n        let existingResponses = [];\r\n        try {\r\n          const existingResponsesResult = await api.get(`formulaires/${id}/reponses`);\r\n          console.log(\"Récupération des réponses existantes...\");\r\n          \r\n          // Normalize the response data\r\n          if (Array.isArray(existingResponsesResult)) {\r\n            existingResponses = existingResponsesResult;\r\n          } else if (existingResponsesResult && existingResponsesResult.data && Array.isArray(existingResponsesResult.data)) {\r\n            existingResponses = existingResponsesResult.data;\r\n          } else {\r\n            console.warn(\"Format de réponse inattendu:\", existingResponsesResult);\r\n            existingResponses = [];\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur lors de la récupération des réponses existantes:', error);\r\n          existingResponses = [];\r\n        }\r\n        \r\n        // Process all responses\r\n        const savePromises = reponses.map(async (reponse) => {\r\n          try {\r\n            // First check if this response already exists in our fetched data\r\n            const existingReponse = existingResponses.find(r => r.id_question === reponse.id_question);\r\n            \r\n            if (existingReponse && existingReponse.id_reponse) {\r\n              // Response exists - update it\r\n              console.log(`Mise à jour de la réponse existante: ${existingReponse.id_reponse}`);\r\n              try {\r\n                const updateResponse = await api.put(`reponses/${existingReponse.id_reponse}`, {\r\n                  valeur_reponse: reponse.valeur_reponse,\r\n                  score: reponse.score,\r\n                  commentaire: reponse.commentaire || ''\r\n                });\r\n                \r\n                console.log(\"Mise à jour réussie:\", updateResponse);\r\n                return true;\r\n              } catch (putError) {\r\n                console.error(\"Erreur lors de la mise à jour:\", putError);\r\n                return false;\r\n              }\r\n            } else {\r\n              // Response doesn't exist - create it\r\n              try {\r\n                console.log(`Création d'une nouvelle réponse pour la question: ${reponse.id_question}`);\r\n                const createResponse = await api.post('reponses', {\r\n                  id_formulaire: reponse.id_formulaire,\r\n                  id_question: reponse.id_question,\r\n                  valeur_reponse: reponse.valeur_reponse,\r\n                  score: reponse.score,\r\n                  commentaire: reponse.commentaire || ''\r\n                });\r\n                \r\n                console.log(\"Création réussie:\", createResponse);\r\n                return true;\r\n              } catch (postError) {\r\n                // If error 400 (response already exists), try update as fallback\r\n                if (postError.response && postError.response.status === 400) {\r\n                  console.log(\"Bascule vers le PUT - La réponse existe déjà\");\r\n                  \r\n                  // Fetch the latest responses to find the ID\r\n                  try {\r\n                    const refreshedResponsesResult = await api.get(`formulaires/${reponse.id_formulaire}/reponses`);\r\n                    \r\n                    // Normalize the refreshed response data\r\n                    let refreshedResponses = [];\r\n                    if (Array.isArray(refreshedResponsesResult)) {\r\n                      refreshedResponses = refreshedResponsesResult;\r\n                    } else if (refreshedResponsesResult && refreshedResponsesResult.data && Array.isArray(refreshedResponsesResult.data)) {\r\n                      refreshedResponses = refreshedResponsesResult.data;\r\n                    } else {\r\n                      console.warn(\"Format de réponse rafraîchie inattendu:\", refreshedResponsesResult);\r\n                      refreshedResponses = [];\r\n                    }\r\n                    \r\n                    // Find the response by question ID\r\n                    const refreshedReponse = refreshedResponses.find(r => r.id_question === reponse.id_question);\r\n                    \r\n                    if (refreshedReponse && refreshedReponse.id_reponse) {\r\n                      console.log(\"Réponse existante trouvée:\", refreshedReponse.id_reponse);\r\n                      \r\n                      // Update with the found ID\r\n                      const fallbackUpdateResponse = await api.put(`reponses/${refreshedReponse.id_reponse}`, {\r\n                        valeur_reponse: reponse.valeur_reponse,\r\n                        score: reponse.score,\r\n                        commentaire: reponse.commentaire || ''\r\n                      });\r\n                      \r\n                      console.log(\"Mise à jour réussie:\", fallbackUpdateResponse);\r\n                      return true;\r\n                    } else {\r\n                      console.error(\"Pas de réponse existante trouvée pour cette question\");\r\n                      return false;\r\n                    }\r\n                  } catch (refreshError) {\r\n                    console.error(\"Erreur lors de la récupération des réponses rafraîchies:\", refreshError);\r\n                    return false;\r\n                  }\r\n                } else {\r\n                  // Other type of error\r\n                  console.error('Erreur lors de la création de la réponse:', postError);\r\n                  return false;\r\n                }\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error('Erreur générale lors de la sauvegarde d\\'une réponse:', error);\r\n            return false;\r\n          }\r\n        });\r\n        \r\n        // Wait for all responses to be saved\r\n        const results = await Promise.allSettled(savePromises);\r\n        const failedSaves = results.filter(r => r.status === 'rejected' || (r.status === 'fulfilled' && !r.value));\r\n        \r\n        if (failedSaves.length > 0) {\r\n          setError(`${failedSaves.length} réponses n'ont pas pu être sauvegardées. Veuillez réessayer.`);\r\n        } else {\r\n          setSuccess(newStatus === 'Soumis' \r\n            ? 'Formulaire soumis avec succès !' \r\n            : newStatus === 'Validé' \r\n              ? 'Formulaire validé avec succès !'\r\n              : 'Formulaire enregistré avec succès !');\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la sauvegarde du formulaire:', error);\r\n        setError('Erreur lors de la sauvegarde. Veuillez réessayer plus tard.');\r\n      } finally {\r\n        setSaving(false);\r\n      }\r\n    };\r\n    \r\n    // Obtenir le label et la couleur pour l'état du formulaire\r\n    const getStatusInfo = (status: string) => {\r\n      switch (status) {\r\n        case 'Validé':\r\n          return { label: 'Validé', color: 'success' as const };\r\n        case 'Soumis':\r\n          return { label: 'Soumis', color: 'primary' as const };\r\n        case 'Brouillon':\r\n        default:\r\n          return { label: 'Brouillon', color: 'warning' as const };\r\n      }\r\n    };\r\n    \r\n    // Formater la date de manière sécurisée\r\n    const formatDate = (dateString: string) => {\r\n      try {\r\n        return new Date(dateString).toLocaleDateString('fr-FR');\r\n      } catch (e) {\r\n        console.warn('Erreur lors du formatage de la date:', e);\r\n        return 'Date invalide';\r\n      }\r\n    };\r\n    \r\n    // Compter le nombre de commentaires\r\n    const commentCount = reponses.filter(r => r.commentaire && r.commentaire.trim() !== '').length;\r\n    \r\n    // Nombre de questions avec un score critique (1 ou 2) avec une pondération élevée (≥ 3)\r\n    const criticalQuestions = reponses.filter(r => {\r\n      const score = parseInt(r.valeur_reponse) || 0;\r\n      const question = questions.find(q => q.id_question === r.id_question);\r\n      return score <= 2 && question && question.ponderation >= 3;\r\n    }).length;\r\n    \r\n    if (loading) {\r\n      return (\r\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n          <CircularProgress />\r\n        </Box>\r\n      );\r\n    }\r\n    \r\n    if (!formulaire) {\r\n      return (\r\n        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n          <Alert severity=\"error\">\r\n            {error || 'Formulaire non trouvé. Le formulaire demandé n\\'existe pas ou a été supprimé.'}\r\n          </Alert>\r\n          <Button\r\n            startIcon={<ArrowBackIcon />}\r\n            onClick={() => navigate('/formulaires')}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Retour à la liste des formulaires\r\n          </Button>\r\n        </Container>\r\n      );\r\n    }\r\n    \r\n    // Informations sur le statut\r\n    const statusInfo = getStatusInfo(formulaire.statut);\r\n    \r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        {/* Breadcrumbs de navigation */}\r\n        <Breadcrumbs aria-label=\"breadcrumb\" sx={{ mb: 2 }}>\r\n          <Link\r\n            underline=\"hover\"\r\n            color=\"inherit\"\r\n            sx={{ display: 'flex', alignItems: 'center' }}\r\n            href=\"/\"\r\n          >\r\n            <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\r\n            Accueil\r\n          </Link>\r\n          <Link\r\n            underline=\"hover\"\r\n            color=\"inherit\"\r\n            sx={{ display: 'flex', alignItems: 'center' }}\r\n            href=\"/formulaires\"\r\n          >\r\n            Formulaires\r\n          </Link>\r\n          <Typography color=\"text.primary\" sx={{ display: 'flex', alignItems: 'center' }}>\r\n            {formulaire.fonction} - {formulaire.nom_entreprise}\r\n          </Typography>\r\n        </Breadcrumbs>\r\n        \r\n        <Grid container spacing={3}>\r\n          {/* En-tête */}\r\n          <Grid xs={12}>\r\n            <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <IconButton color=\"primary\" onClick={() => navigate('/formulaires')} sx={{ mr: 1 }}>\r\n                    <ArrowBackIcon />\r\n                  </IconButton>\r\n                  <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                    {formulaire.fonction || 'Formulaire'} - {formulaire.questionnaire_titre}\r\n                  </Typography>\r\n                </Box>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  {criticalQuestions > 0 && (\r\n                    <Tooltip title={`${criticalQuestions} question(s) critique(s) à traiter`}>\r\n                      <Badge badgeContent={criticalQuestions} color=\"error\" sx={{ mr: 2 }}>\r\n                        <WarningIcon color=\"error\" />\r\n                      </Badge>\r\n                    </Tooltip>\r\n                  )}\r\n                  \r\n                  {commentCount > 0 && (\r\n                    <Tooltip title={`${commentCount} commentaire(s)`}>\r\n                      <Badge badgeContent={commentCount} color=\"info\" sx={{ mr: 2 }}>\r\n                        <CommentIcon color=\"info\" />\r\n                      </Badge>\r\n                    </Tooltip>\r\n                  )}\r\n                  \r\n                  <Chip \r\n                    label={statusInfo.label}\r\n                    color={statusInfo.color}\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Grid container spacing={2}>\r\n                <Grid xs={12} md={4}>\r\n                  <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                    <BusinessIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                    <Typography variant=\"subtitle1\">\r\n                      <strong>Entreprise:</strong> {formulaire.nom_entreprise}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <FunctionIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                    <Typography variant=\"subtitle1\">\r\n                      <strong>Fonction:</strong> {formulaire.fonction}\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n                <Grid xs={12} md={4}>\r\n                  <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                    <InfoIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                    <Typography variant=\"subtitle1\">\r\n                      <strong>Thématique:</strong> {formulaire.thematique}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <Typography variant=\"subtitle1\">\r\n                      <strong>Statut:</strong> {formulaire.statut}\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n                <Grid xs={12} md={4}>\r\n                  <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                    <PersonIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                    <Typography variant=\"subtitle1\">\r\n                      <strong>Acteur:</strong> {formulaire.acteur_nom}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Typography variant=\"subtitle1\">\r\n                    <strong>Date de création:</strong> {formatDate(formulaire.date_creation)}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n          \r\n          {/* Barre de progression */}\r\n          <Grid xs={12}>\r\n            <Paper sx={{ p: 2 }}>\r\n              <Box sx={{ width: '100%' }}>\r\n                <Box display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>Progression: {Math.round(progression)}%</Typography>\r\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    {reponses.length} / {questions.length} questions répondues\r\n                  </Typography>\r\n                </Box>\r\n                <Box sx={{ width: '100%', backgroundColor: '#e0e0e0', borderRadius: 1, height: 8, position: 'relative' }}>\r\n                  <Box\r\n                    sx={{\r\n                      width: `${progression}%`,\r\n                      backgroundColor: progression < 30 ? '#f44336' : progression < 70 ? '#ff9800' : '#4caf50',\r\n                      borderRadius: 1,\r\n                      height: '100%',\r\n                      transition: 'width 0.5s ease-in-out',\r\n                    }}\r\n                  />\r\n                </Box>\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n          \r\n          {/* Messages d'erreur ou de succès */}\r\n          {error && (\r\n            <Grid xs={12}>\r\n              <Alert severity=\"error\" onClose={() => setError(null)}>{error}</Alert>\r\n            </Grid>\r\n          )}\r\n          \r\n          {success && (\r\n            <Grid xs={12}>\r\n              <Alert severity=\"success\" onClose={() => setSuccess(null)}>{success}</Alert>\r\n            </Grid>\r\n          )}\r\n          \r\n          {/* Stepper */}\r\n          <Grid xs={12}>\r\n            <Paper sx={{ p: 2 }}>\r\n              <Stepper activeStep={currentStep} alternativeLabel>\r\n                {Array.from({ length: totalSteps }, (_, i) => (\r\n                  <Step key={i} completed={i < currentStep || (i === currentStep && isCurrentStepComplete)}>\r\n                    <StepLabel>Étape {i + 1}</StepLabel>\r\n                  </Step>\r\n                ))}\r\n              </Stepper>\r\n            </Paper>\r\n          </Grid>\r\n          \r\n          {/* Questions de l'étape actuelle */}\r\n          <Grid xs={12}>\r\n            <Paper sx={{ p: 3 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Questions - Étape {currentStep + 1} / {totalSteps}\r\n              </Typography>\r\n              <Divider sx={{ mb: 3 }} />\r\n              \r\n              {currentStepQuestions.length > 0 ? (\r\n                <Box sx={{ mb: 3 }}>\r\n                  {currentStepQuestions.map((question, index) => {\r\n                    const reponse = findReponse(question.id_question);\r\n                    const isHighPriority = question.ponderation >= 3;\r\n                    const isCritical = reponse && (parseInt(reponse.valeur_reponse) || 0) <= 2 && isHighPriority;\r\n                    \r\n                    return (\r\n                      <Card \r\n                        key={question.id_question} \r\n                        sx={{ \r\n                          mb: 3, \r\n                          position: 'relative', \r\n                          overflow: 'visible',\r\n                          border: isCritical ? '1px solid #f44336' : isHighPriority ? '1px solid #ff9800' : 'none',\r\n                        }}\r\n                      >\r\n                        <CardContent>\r\n                          <Box sx={{ \r\n                            position: 'absolute', \r\n                            top: -10, \r\n                            left: -10, \r\n                            width: 30, \r\n                            height: 30, \r\n                            borderRadius: '50%', \r\n                            backgroundColor: isHighPriority ? 'warning.main' : 'primary.main', \r\n                            color: 'white',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            fontWeight: 'bold'\r\n                          }}>\r\n                            {question.ordre}\r\n                          </Box>\r\n                          \r\n                          <Box sx={{ ml: 3 }}>\r\n                            <Typography variant=\"subtitle1\" gutterBottom fontWeight={isHighPriority ? 'bold' : 'normal'}>\r\n                              {question.texte}\r\n                              {isHighPriority && (\r\n                                <Tooltip title=\"Question à forte pondération\">\r\n                                  <InfoIcon color=\"warning\" fontSize=\"small\" sx={{ ml: 1 }} />\r\n                                </Tooltip>\r\n                              )}\r\n                            </Typography>\r\n                            \r\n                            <Typography variant=\"caption\" color={isHighPriority ? 'warning.main' : 'text.secondary'} sx={{ display: 'block', mb: 2 }}>\r\n                              Pondération: {question.ponderation} {isHighPriority ? '(Question importante)' : ''}\r\n                            </Typography>\r\n                            \r\n                            <FormControl component=\"fieldset\" sx={{ width: '100%' }}>\r\n                              <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                                Évaluation (1 = Niveau initial, 5 = Niveau optimisé)\r\n                              </Typography>\r\n                              <RadioGroup\r\n                                row\r\n                                name={`question-${question.id_question}`}\r\n                                value={reponse?.valeur_reponse || ''}\r\n                                onChange={(e) => updateReponse(question.id_question, e.target.value)}\r\n                              >\r\n                                {[1, 2, 3, 4, 5].map((value) => (\r\n                                  <FormControlLabel\r\n                                    key={value}\r\n                                    value={String(value)}\r\n                                    control={\r\n                                      <Radio \r\n                                        sx={{\r\n                                          color: value <= 2 && isHighPriority ? 'error.main' : undefined,\r\n                                          '&.Mui-checked': {\r\n                                            color: value <= 2 && isHighPriority ? 'error.main' : undefined\r\n                                          }\r\n                                        }}\r\n                                      />\r\n                                    }\r\n                                    label={String(value)}\r\n                                    disabled={formulaire.statut === 'Validé'}\r\n                                  />\r\n                                ))}\r\n                              </RadioGroup>\r\n                            </FormControl>\r\n                            \r\n                            <TextField\r\n                              fullWidth\r\n                              label=\"Commentaire (optionnel)\"\r\n                              multiline\r\n                              rows={2}\r\n                              margin=\"normal\"\r\n                              value={reponse?.commentaire || ''}\r\n                              onChange={(e) => updateCommentaire(question.id_question, e.target.value)}\r\n                              disabled={formulaire.statut === 'Validé'}\r\n                              helperText={isCritical ? \"Un commentaire est fortement recommandé pour cette question critique\" : \"\"}\r\n                              error={isCritical && (!reponse?.commentaire || reponse.commentaire.trim() === '')}\r\n                            />\r\n                            \r\n                            {isCritical && (!reponse?.commentaire || reponse.commentaire.trim() === '') && (\r\n                              <Alert severity=\"warning\" sx={{ mt: 1 }}>\r\n                                Cette question a une note faible et une forte pondération. Veuillez ajouter un commentaire pour justifier cette évaluation.\r\n                              </Alert>\r\n                            )}\r\n                          </Box>\r\n                        </CardContent>\r\n                      </Card>\r\n                    );\r\n                  })}\r\n                </Box>\r\n              ) : (\r\n                <Typography variant=\"body1\" align=\"center\" sx={{ py: 3 }}>\r\n                  Aucune question pour cette étape.\r\n                </Typography>\r\n              )}\r\n              \r\n              {/* Navigation entre les étapes */}\r\n              <Box display=\"flex\" justifyContent=\"space-between\" mt={3}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  onClick={handlePrevStep}\r\n                  disabled={currentStep === 0}\r\n                  startIcon={<ArrowBackIcon />}\r\n                >\r\n                  Précédent\r\n                </Button>\r\n                \r\n                <Box>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={() => saveFormulaire('Brouillon')}\r\n                    disabled={saving || formulaire.statut === 'Validé'}\r\n                    startIcon={<SaveIcon />}\r\n                    sx={{ mr: 1 }}\r\n                  >\r\n                    Enregistrer\r\n                  </Button>\r\n                  \r\n                  {formulaire.statut === 'Brouillon' && (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => handleConfirmAction('Soumis')}\r\n                      disabled={saving || !isFormComplete}\r\n                      startIcon={<SendIcon />}\r\n                      sx={{ mr: 1 }}\r\n                    >\r\n                      Soumettre\r\n                    </Button>\r\n                  )}\r\n                  \r\n                  {formulaire.statut === 'Soumis' && (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"success\"\r\n                      onClick={() => handleConfirmAction('Validé')}\r\n                      disabled={saving || !isFormComplete}\r\n                      startIcon={<CheckIcon />}\r\n                      sx={{ mr: 1 }}\r\n                    >\r\n                      Valider\r\n                    </Button>\r\n                  )}\r\n                </Box>\r\n                \r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={handleNextStep}\r\n                  disabled={currentStep === totalSteps - 1}\r\n                  endIcon={<EditIcon />}\r\n                >\r\n                  Suivant\r\n                </Button>\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n          \r\n          {/* Aperçu de toutes les réponses */}\r\n          <Grid xs={12}>\r\n            <Accordion>\r\n              <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"reponses-content\"\r\n                id=\"reponses-header\"\r\n              >\r\n                <Typography>Aperçu de toutes les réponses</Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <Box sx={{ width: '100%' }}>\r\n                  {questions.map((question) => {\r\n                    const reponse = findReponse(question.id_question);\r\n                    const isHighPriority = question.ponderation >= 3;\r\n                    const isCritical = reponse && (parseInt(reponse.valeur_reponse) || 0) <= 2 && isHighPriority;\r\n                    \r\n                    return (\r\n                      <Box \r\n                        key={question.id_question} \r\n                        sx={{ \r\n                          mb: 2, \r\n                          p: 2, \r\n                          border: isCritical ? '1px solid #f44336' : isHighPriority ? '1px solid #ff9800' : '1px solid #eee', \r\n                          borderRadius: 1,\r\n                          bgcolor: isCritical ? 'rgba(244, 67, 54, 0.05)' : isHighPriority ? 'rgba(255, 152, 0, 0.05)' : 'transparent'\r\n                        }}\r\n                      >\r\n                        <Typography variant=\"subtitle2\" fontWeight={isHighPriority ? 'bold' : 'normal'}>\r\n                          {question.ordre}. {question.texte}\r\n                          {isHighPriority && (\r\n                            <Tooltip title=\"Question à forte pondération\">\r\n                              <InfoIcon color=\"warning\" fontSize=\"small\" sx={{ ml: 1 }} />\r\n                            </Tooltip>\r\n                          )}\r\n                        </Typography>\r\n                        \r\n                        {reponse ? (\r\n                          <>\r\n                            <Typography \r\n                              variant=\"body2\" \r\n                              sx={{ mt: 1 }}\r\n                              color={isCritical ? 'error' : 'inherit'}\r\n                            >\r\n                              <strong>Réponse:</strong> {reponse.valeur_reponse} / 5\r\n                            </Typography>\r\n                            \r\n                            {reponse.commentaire ? (\r\n                              <Typography variant=\"body2\">\r\n                                <strong>Commentaire:</strong> {reponse.commentaire}\r\n                              </Typography>\r\n                            ) : (\r\n                              isCritical && (\r\n                                <Typography variant=\"body2\" color=\"error\">\r\n                                  <strong>Commentaire manquant</strong> pour une question critique\r\n                                </Typography>\r\n                              )\r\n                            )}\r\n                          </>\r\n                        ) : (\r\n                          <Typography variant=\"body2\" color=\"error\" sx={{ mt: 1 }}>\r\n                            Pas encore de réponse\r\n                          </Typography>\r\n                        )}\r\n                      </Box>\r\n                    );\r\n                  })}\r\n                </Box>\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          </Grid>\r\n        </Grid>\r\n        \r\n        {/* Boîte de dialogue de confirmation */}\r\n        <Dialog\r\n          open={openConfirmDialog.open}\r\n          onClose={handleCloseConfirmDialog}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">\r\n            {openConfirmDialog.action === 'Soumis' ? 'Soumettre le formulaire ?' : 'Valider le formulaire ?'}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {openConfirmDialog.action === 'Soumis' \r\n                ? 'Êtes-vous sûr de vouloir soumettre ce formulaire ? Après soumission, il sera en attente de validation.'\r\n                : 'Êtes-vous sûr de vouloir valider ce formulaire ? Cette action est définitive et le formulaire ne pourra plus être modifié.'}\r\n            </DialogContentText>\r\n            \r\n            {criticalQuestions > 0 && (\r\n              <Alert severity=\"warning\" sx={{ mt: 2 }}>\r\n                Attention : {criticalQuestions} question(s) critique(s) ont une note faible (1 ou 2). Assurez-vous que tous les commentaires explicatifs sont bien renseignés.\r\n              </Alert>\r\n            )}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseConfirmDialog} color=\"inherit\">Annuler</Button>\r\n            <Button \r\n              onClick={() => {\r\n                if (openConfirmDialog.action) {\r\n                  saveFormulaire(openConfirmDialog.action);\r\n                  handleCloseConfirmDialog();\r\n                }\r\n              }} \r\n              color={openConfirmDialog.action === 'Validé' ? 'success' : 'primary'}\r\n              variant=\"contained\"\r\n              autoFocus\r\n            >\r\n              Confirmer\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Container>\r\n    );\r\n   };\r\n   \r\n   export default FormDetail;","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  FormHelperText,\r\n  IconButton,\r\n  Divider,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Card,\r\n  CardContent\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Save as SaveIcon,\r\n  Business as BusinessIcon,\r\n  Person as PersonIcon,\r\n  Assignment as AssignmentIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../../services/api';\r\nimport { CreateFormulaireRequest } from '../../../types/Formulaire';\r\n\r\ninterface Application {\r\n  id_application: string;\r\n  nom_application: string;\r\n}\r\n\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  id_entreprise: string;\r\n  entreprise_nom?: string;\r\n}\r\n\r\ninterface Questionnaire {\r\n  id_questionnaire: string;\r\n  fonction: string;\r\n  thematique: string;\r\n}\r\n\r\ninterface Entreprise {\r\n  id_entreprise: string;\r\n  nom_entreprise: string;\r\n}\r\n\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n}\r\n\r\nconst FormNew: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [submitting, setSubmitting] = useState<boolean>(false);\r\n  const [applications, setApplications] = useState<Application[]>([]);\r\n  const [acteurs, setActeurs] = useState<Acteur[]>([]);\r\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\r\n  const [entreprises, setEntreprises] = useState<Entreprise[]>([]);\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  \r\n  // Valeurs du formulaire\r\n  const [formValues, setFormValues] = useState<CreateFormulaireRequest & { id_entreprise?: string, id_fonction?: string }>({\r\n    id_acteur: '',\r\n    id_questionnaire: '',\r\n    id_entreprise: '',\r\n    id_fonction: '',\r\n    statut: 'Brouillon'\r\n  });\r\n  \r\n  // États de validation\r\n  const [validation, setValidation] = useState({\r\n    id_acteur: true,\r\n    id_questionnaire: true,\r\n    id_entreprise: true,\r\n    id_fonction: true\r\n  });\r\n  \r\n  // Étapes du stepper\r\n  const steps = [\r\n    { label: 'Entreprise', icon: <BusinessIcon /> },\r\n    { label: 'Fonction', icon: <AssignmentIcon /> },\r\n    { label: 'Acteur', icon: <PersonIcon /> }\r\n  ];\r\n  \r\n  // Filtres pour limiter les options basés sur les sélections précédentes\r\n  const [filteredActeurs, setFilteredActeurs] = useState<Acteur[]>([]);\r\n  const [filteredQuestionnaires, setFilteredQuestionnaires] = useState<Questionnaire[]>([]);\r\n  \r\n  // Charger les données nécessaires\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // Récupérer les entreprises\r\n        const entreprisesResponse = await api.get('entreprises');\r\n        let entreprisesData: Entreprise[] = [];\r\n        if (Array.isArray(entreprisesResponse)) {\r\n          entreprisesData = entreprisesResponse;\r\n        } else if (entreprisesResponse && entreprisesResponse.data && Array.isArray(entreprisesResponse.data)) {\r\n          entreprisesData = entreprisesResponse.data;\r\n        } else {\r\n          console.warn('Format de réponse inattendu pour entreprises:', entreprisesResponse);\r\n        }\r\n        setEntreprises(entreprisesData);\r\n        \r\n        // Récupérer les fonctions\r\n        const fonctionsResponse = await api.get('fonctions');\r\n        let fonctionsData: Fonction[] = [];\r\n        if (Array.isArray(fonctionsResponse)) {\r\n          fonctionsData = fonctionsResponse;\r\n        } else if (fonctionsResponse && fonctionsResponse.data && Array.isArray(fonctionsResponse.data)) {\r\n          fonctionsData = fonctionsResponse.data;\r\n        } else {\r\n          console.warn('Format de réponse inattendu pour fonctions:', fonctionsResponse);\r\n        }\r\n        setFonctions(fonctionsData);\r\n        \r\n        // Récupérer les acteurs\r\n        const acteursResponse = await api.get('acteurs');\r\n        let acteursData: Acteur[] = [];\r\n        if (Array.isArray(acteursResponse)) {\r\n          acteursData = acteursResponse;\r\n        } else if (acteursResponse && acteursResponse.data && Array.isArray(acteursResponse.data)) {\r\n          acteursData = acteursResponse.data;\r\n        } else {\r\n          console.warn('Format de réponse inattendu pour acteurs:', acteursResponse);\r\n        }\r\n        setActeurs(acteursData);\r\n        \r\n        // Récupérer les questionnaires\r\n        const questionnairesResponse = await api.get('questionnaires');\r\n        let questionnairesData: Questionnaire[] = [];\r\n        if (Array.isArray(questionnairesResponse)) {\r\n          questionnairesData = questionnairesResponse;\r\n        } else if (questionnairesResponse && questionnairesResponse.data && Array.isArray(questionnairesResponse.data)) {\r\n          questionnairesData = questionnairesResponse.data;\r\n        } else {\r\n          console.warn('Format de réponse inattendu pour questionnaires:', questionnairesResponse);\r\n        }\r\n        setQuestionnaires(questionnairesData);\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n        setError('Erreur lors du chargement des données. Veuillez réessayer plus tard.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n  \r\n  // Mettre à jour les acteurs filtrés lorsque l'entreprise change\r\n  useEffect(() => {\r\n    if (formValues.id_entreprise) {\r\n      const filtered = acteurs.filter(acteur => acteur.id_entreprise === formValues.id_entreprise);\r\n      setFilteredActeurs(filtered);\r\n      \r\n      // Si l'acteur sélectionné ne fait pas partie de l'entreprise sélectionnée, réinitialiser la sélection\r\n      if (formValues.id_acteur && !filtered.some(acteur => acteur.id_acteur === formValues.id_acteur)) {\r\n        setFormValues(prev => ({ ...prev, id_acteur: '' }));\r\n      }\r\n    } else {\r\n      setFilteredActeurs(acteurs);\r\n    }\r\n  }, [formValues.id_entreprise, acteurs]);\r\n  \r\n  // Mettre à jour les questionnaires filtrés lorsque la fonction change\r\n  useEffect(() => {\r\n    if (formValues.id_fonction) {\r\n      const fonction = fonctions.find(f => f.id_fonction === formValues.id_fonction);\r\n      if (fonction) {\r\n        const filtered = questionnaires.filter(q => q.fonction === fonction.nom);\r\n        setFilteredQuestionnaires(filtered);\r\n        \r\n        // Si le questionnaire sélectionné ne correspond pas à la fonction sélectionnée, réinitialiser la sélection\r\n        if (formValues.id_questionnaire && !filtered.some(q => q.id_questionnaire === formValues.id_questionnaire)) {\r\n          setFormValues(prev => ({ ...prev, id_questionnaire: '' }));\r\n        }\r\n      }\r\n    } else {\r\n      setFilteredQuestionnaires(questionnaires);\r\n    }\r\n  }, [formValues.id_fonction, fonctions, questionnaires]);\r\n  \r\n  // Gérer les changements dans le formulaire\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const name = event.target.name as keyof (CreateFormulaireRequest & { id_entreprise?: string, id_fonction?: string });\r\n    const value = event.target.value;\r\n    \r\n    if (name) {\r\n      setFormValues({\r\n        ...formValues,\r\n        [name]: value\r\n      });\r\n      \r\n      // Réinitialiser l'état de validation pour ce champ\r\n      if (name in validation) {\r\n        setValidation({\r\n          ...validation,\r\n          [name]: true\r\n        });\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Valider l'étape actuelle\r\n  const validateCurrentStep = () => {\r\n    let isValid = true;\r\n    const newValidation = { ...validation };\r\n    \r\n    switch(activeStep) {\r\n      case 0: // Entreprise\r\n        newValidation.id_entreprise = Boolean(formValues.id_entreprise);\r\n        isValid = newValidation.id_entreprise;\r\n        break;\r\n      case 1: // Fonction\r\n        newValidation.id_fonction = Boolean(formValues.id_fonction);\r\n        isValid = newValidation.id_fonction;\r\n        break;\r\n      case 2: // Acteur\r\n        newValidation.id_acteur = Boolean(formValues.id_acteur);\r\n        isValid = newValidation.id_acteur;\r\n        break;\r\n    }\r\n    \r\n    setValidation(newValidation);\r\n    return isValid;\r\n  };\r\n  \r\n  // Valider tout le formulaire\r\n  const validateForm = () => {\r\n    const newValidation = {\r\n      id_acteur: Boolean(formValues.id_acteur),\r\n      id_questionnaire: Boolean(formValues.id_questionnaire),\r\n      id_entreprise: Boolean(formValues.id_entreprise),\r\n      id_fonction: Boolean(formValues.id_fonction)\r\n    };\r\n    \r\n    setValidation(newValidation);\r\n    \r\n    // Retourner true si tous les champs sont valides\r\n    return Object.values(newValidation).every(Boolean);\r\n  };\r\n  \r\n  // Gérer le changement d'étape\r\n  const handleNext = () => {\r\n    if (validateCurrentStep()) {\r\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    } else {\r\n      setError('Veuillez remplir tous les champs obligatoires avant de continuer.');\r\n    }\r\n  };\r\n  \r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    setError(null);\r\n  };\r\n  \r\n  // Soumettre le formulaire\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    \r\n    // Trouver le questionnaire correspondant à la fonction sélectionnée\r\n    if (!formValues.id_questionnaire && formValues.id_fonction) {\r\n      const fonction = fonctions.find(f => f.id_fonction === formValues.id_fonction);\r\n      if (fonction) {\r\n        const matchingQuestionnaire = questionnaires.find(q => q.fonction === fonction.nom);\r\n        if (matchingQuestionnaire) {\r\n          formValues.id_questionnaire = matchingQuestionnaire.id_questionnaire;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (!validateForm()) {\r\n      setError('Veuillez remplir tous les champs obligatoires.');\r\n      return;\r\n    }\r\n    \r\n    setSubmitting(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Préparer les données à envoyer\r\n      // Note: Le backend exige toujours id_application même si ce n'est plus utilisé dans l'interface\r\n      const { id_entreprise, id_fonction, ...submitData } = formValues;\r\n      \r\n      const DEFAULT_APPLICATION_ID = \"892daedf-3423-11f0-9f03-04bf1ba7bd1e\";\r\n      // Ajouter un id_application \"factice\" ou par défaut pour satisfaire l'API\r\n      const dataToSubmit = {\r\n        ...submitData,\r\n        id_application: DEFAULT_APPLICATION_ID // Valeur factice pour satisfaire l'AP\r\n      };\r\n      \r\n      // Supprimer le préfixe '/api/' car api.ts l'ajoute déjà\r\n      const response = await api.post('formulaires', dataToSubmit);\r\n      \r\n      // Rediriger vers le détail du formulaire\r\n      let formId = '';\r\n      if (response && response.data && response.data.id_formulaire) {\r\n        formId = response.data.id_formulaire;\r\n      } else if (response && response.id_formulaire) {\r\n        formId = response.id_formulaire;\r\n      } else {\r\n        console.warn('Format de réponse inattendu pour la création du formulaire:', response);\r\n        // Rediriger quand même vers la liste si on ne peut pas récupérer l'ID\r\n        navigate('/formulaires');\r\n        return;\r\n      }\r\n      \r\n      navigate(`/formulaires/${formId}`);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création du formulaire:', error);\r\n      setError('Erreur lors de la création du formulaire. Veuillez réessayer plus tard.');\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n  \r\n  // Obtenir le contenu de l'étape actuelle\r\n  const getStepContent = (step: number) => {\r\n    switch (step) {\r\n      case 0: // Entreprise\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid xs={12}>\r\n              <FormControl fullWidth error={!validation.id_entreprise}>\r\n                <InputLabel id=\"entreprise-label\">Entreprise</InputLabel>\r\n                <Select\r\n                  labelId=\"entreprise-label\"\r\n                  id=\"id_entreprise\"\r\n                  name=\"id_entreprise\"\r\n                  value={formValues.id_entreprise}\r\n                  onChange={handleChange}\r\n                  label=\"Entreprise\"\r\n                  required\r\n                >\r\n                  {entreprises.map((ent) => (\r\n                    <MenuItem key={ent.id_entreprise} value={ent.id_entreprise}>\r\n                      {ent.nom_entreprise}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {!validation.id_entreprise && (\r\n                  <FormHelperText>L'entreprise est requise</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      case 1: // Fonction\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid xs={12}>\r\n              <FormControl fullWidth error={!validation.id_fonction}>\r\n                <InputLabel id=\"fonction-label\">Fonction</InputLabel>\r\n                <Select\r\n                  labelId=\"fonction-label\"\r\n                  id=\"id_fonction\"\r\n                  name=\"id_fonction\"\r\n                  value={formValues.id_fonction}\r\n                  onChange={handleChange}\r\n                  label=\"Fonction\"\r\n                  required\r\n                >\r\n                  {fonctions.map((fonction) => (\r\n                    <MenuItem key={fonction.id_fonction} value={fonction.id_fonction}>\r\n                      {fonction.nom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {!validation.id_fonction && (\r\n                  <FormHelperText>La fonction est requise</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            {formValues.id_fonction && filteredQuestionnaires.length > 0 && (\r\n              <Grid xs={12}>\r\n                <FormControl fullWidth error={!validation.id_questionnaire}>\r\n                  <InputLabel id=\"questionnaire-label\">Questionnaire</InputLabel>\r\n                  <Select\r\n                    labelId=\"questionnaire-label\"\r\n                    id=\"id_questionnaire\"\r\n                    name=\"id_questionnaire\"\r\n                    value={formValues.id_questionnaire}\r\n                    onChange={handleChange}\r\n                    label=\"Questionnaire\"\r\n                    required\r\n                  >\r\n                    {filteredQuestionnaires.map((q) => (\r\n                      <MenuItem key={q.id_questionnaire} value={q.id_questionnaire}>\r\n                        {q.fonction} ({q.thematique})\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  {!validation.id_questionnaire && (\r\n                    <FormHelperText>Le questionnaire est requis</FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        );\r\n      case 2: // Acteur\r\n        return (\r\n          <Grid container spacing={3}>\r\n            <Grid xs={12}>\r\n              <FormControl fullWidth error={!validation.id_acteur}>\r\n                <InputLabel id=\"acteur-label\">Acteur</InputLabel>\r\n                <Select\r\n                  labelId=\"acteur-label\"\r\n                  id=\"id_acteur\"\r\n                  name=\"id_acteur\"\r\n                  value={formValues.id_acteur}\r\n                  onChange={handleChange}\r\n                  label=\"Acteur\"\r\n                  required\r\n                >\r\n                  {filteredActeurs.map((acteur) => (\r\n                    <MenuItem key={acteur.id_acteur} value={acteur.id_acteur}>\r\n                      {acteur.nom_prenom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {!validation.id_acteur && (\r\n                  <FormHelperText>L'acteur est requis</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n              {filteredActeurs.length === 0 && formValues.id_entreprise && (\r\n                <Alert severity=\"warning\" sx={{ mt: 2 }}>\r\n                  Aucun acteur n'est associé à cette entreprise. Veuillez en ajouter ou sélectionner une autre entreprise.\r\n                </Alert>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      default:\r\n        return 'Étape inconnue';\r\n    }\r\n  };\r\n  \r\n  // Résumé avant soumission\r\n  const renderSummary = () => {\r\n    const entreprise = entreprises.find(e => e.id_entreprise === formValues.id_entreprise);\r\n    const fonction = fonctions.find(f => f.id_fonction === formValues.id_fonction);\r\n    const acteur = acteurs.find(a => a.id_acteur === formValues.id_acteur);\r\n    const questionnaire = questionnaires.find(q => q.id_questionnaire === formValues.id_questionnaire) || \r\n                          questionnaires.find(q => q.fonction === fonction?.nom);\r\n    \r\n    return (\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Résumé du formulaire\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid xs={12} sm={6}>\r\n              <Typography variant=\"subtitle2\">Entreprise:</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                {entreprise?.nom_entreprise || 'Non sélectionnée'}\r\n              </Typography>\r\n              \r\n              <Typography variant=\"subtitle2\">Fonction:</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                {fonction?.nom || 'Non sélectionnée'}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid xs={12} sm={6}>\r\n              <Typography variant=\"subtitle2\">Acteur:</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                {acteur?.nom_prenom || 'Non sélectionné'}\r\n              </Typography>\r\n              \r\n              {questionnaire && (\r\n                <>\r\n                  <Typography variant=\"subtitle2\">Questionnaire:</Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {questionnaire.fonction} ({questionnaire.thematique})\r\n                  </Typography>\r\n                </>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n  \r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n              <IconButton color=\"primary\" onClick={() => navigate('/formulaires')} sx={{ mr: 1 }}>\r\n                <ArrowBackIcon />\r\n              </IconButton>\r\n              <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                Nouveau Formulaire d'Évaluation\r\n              </Typography>\r\n            </Box>\r\n            \r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Créez un nouveau formulaire d'évaluation en suivant les étapes ci-dessous.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Stepper */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Stepper activeStep={activeStep} alternativeLabel>\r\n              {steps.map((step, index) => (\r\n                <Step key={index}>\r\n                  <StepLabel\r\n                    StepIconProps={{\r\n                      icon: index === activeStep ? (\r\n                        <Box \r\n                          sx={{ \r\n                            display: 'flex', \r\n                            alignItems: 'center', \r\n                            justifyContent: 'center',\r\n                            width: 24,\r\n                            height: 24\r\n                          }}\r\n                        >\r\n                          {step.icon}\r\n                        </Box>\r\n                      ) : (\r\n                        index + 1\r\n                      )\r\n                    }}\r\n                  >\r\n                    {step.label}\r\n                  </StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Formulaire */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box component=\"form\" noValidate onSubmit={handleSubmit}>\r\n              {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>\r\n              )}\r\n              \r\n              {activeStep === steps.length ? (\r\n                <Box>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Toutes les étapes sont complétées\r\n                  </Typography>\r\n                  \r\n                  {renderSummary()}\r\n                  \r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={() => setActiveStep(activeStep - 1)}\r\n                      startIcon={<ArrowBackIcon />}\r\n                    >\r\n                      Retour\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      disabled={submitting}\r\n                      startIcon={<SaveIcon />}\r\n                    >\r\n                      {submitting ? 'Création en cours...' : 'Créer le formulaire'}\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              ) : (\r\n                <Box>\r\n                  <Box sx={{ mb: 3 }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      {steps[activeStep].label}\r\n                    </Typography>\r\n                    <Divider />\r\n                  </Box>\r\n                  \r\n                  {getStepContent(activeStep)}\r\n                  \r\n                  <Box display=\"flex\" justifyContent=\"space-between\" mt={3}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={activeStep === 0 ? () => navigate('/formulaires') : handleBack}\r\n                      startIcon={<ArrowBackIcon />}\r\n                    >\r\n                      {activeStep === 0 ? 'Annuler' : 'Précédent'}\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={activeStep === steps.length - 1 ? () => handleNext() : handleNext}\r\n                    >\r\n                      {activeStep === steps.length - 1 ? 'Finaliser' : 'Suivant'}\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormNew;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Switch,\r\n  Alert,\r\n  Badge,\r\n  Tooltip,\r\n  ListItemIcon\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Lock as LockIcon,\r\n  Security as SecurityIcon,\r\n  Person as PersonIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n  SupervisorAccount as AdminIcon,\r\n  Group as GroupIcon,\r\n  Shield as ShieldIcon,\r\n  Settings as SettingsIcon,\r\n  Visibility as VisibilityIcon,\r\n  VisibilityOff as VisibilityOffIcon,\r\n  AdminPanelSettings as SuperAdminIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport api from '../../services/api';\r\n\r\n// Types\r\ninterface Acteur {\r\n  id_acteur: string;\r\n  nom_prenom: string;\r\n  email: string;\r\n  fonction: string;\r\n  organisation: string;\r\n  role: string;\r\n  nom_role?: string;\r\n  date_creation: string;\r\n  date_modification: string;\r\n  est_admin?: boolean;\r\n  id_entreprise?: string;\r\n  nom_entreprise?: string;\r\n}\r\n\r\ninterface Role {\r\n  id_role: string;\r\n  nom_role: string;\r\n  description: string;\r\n  niveau_acces: 'GLOBAL' | 'ENTREPRISE';\r\n  nombre_utilisateurs?: number;\r\n}\r\n\r\ninterface Module {\r\n  id_module: string;\r\n  nom_module: string;\r\n  description: string;\r\n  route_base: string;\r\n  icone?: string;\r\n  ordre_affichage: number;\r\n  actif: boolean;\r\n}\r\n\r\ninterface Permission {\r\n  id_permission: string;\r\n  id_acteur: string;\r\n  acteur_nom?: string;\r\n  type_ressource: 'APPLICATION' | 'QUESTIONNAIRE' | 'FORMULAIRE' | 'RAPPORT';\r\n  id_ressource: string | null;\r\n  peut_voir: boolean;\r\n  peut_editer: boolean;\r\n  peut_supprimer: boolean;\r\n  peut_administrer: boolean;\r\n}\r\n\r\ninterface RolePermission {\r\n  id_role_permission: string;\r\n  id_role: string;\r\n  id_module: string;\r\n  nom_module: string;\r\n  peut_voir: boolean;\r\n  peut_editer: boolean;\r\n  peut_supprimer: boolean;\r\n  peut_administrer: boolean;\r\n}\r\n\r\ninterface ActeurFormValues {\r\n  nom_prenom: string;\r\n  email: string;\r\n  fonction: string;\r\n  organisation: string;\r\n  mot_de_passe?: string;\r\n  id_role: string;\r\n  id_entreprise?: string;\r\n}\r\n\r\ninterface RoleFormValues {\r\n  nom_role: string;\r\n  description: string;\r\n  niveau_acces: 'GLOBAL' | 'ENTREPRISE';\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`admin-tabpanel-${index}`}\r\n      aria-labelledby={`admin-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Administration: React.FC = () => {\r\n  const { hasPermission, canAccessAdminModule, isAdmin, isSuperAdmin, currentUser } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Déterminer l'onglet initial basé sur l'URL\r\n  const getInitialTab = () => {\r\n    const path = location.pathname;\r\n    if (path.includes('/admin/users')) return 0;\r\n    if (path.includes('/admin/roles')) return 1;\r\n    if (path.includes('/admin/permissions')) return 2;\r\n    if (path.includes('/admin/modules')) return 3;\r\n    return 0; // Par défaut, onglet utilisateurs\r\n  };\r\n\r\n  // États principaux\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [tabValue, setTabValue] = useState<number>(getInitialTab());\r\n  \r\n  // États pour les données\r\n  const [acteurs, setActeurs] = useState<Acteur[]>([]);\r\n  const [roles, setRoles] = useState<Role[]>([]);\r\n  const [modules, setModules] = useState<Module[]>([]);\r\n  const [permissions, setPermissions] = useState<Permission[]>([]);\r\n  const [rolePermissions, setRolePermissions] = useState<RolePermission[]>([]);\r\n  \r\n  // États pour les dialogues\r\n  const [openActeurDialog, setOpenActeurDialog] = useState<boolean>(false);\r\n  const [openRoleDialog, setOpenRoleDialog] = useState<boolean>(false);\r\n  const [openPermissionDialog, setOpenPermissionDialog] = useState<boolean>(false);\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState<boolean>(false);\r\n  \r\n  // États pour les formulaires\r\n  const [acteurFormValues, setActeurFormValues] = useState<ActeurFormValues>({\r\n    nom_prenom: '',\r\n    email: '',\r\n    fonction: '',\r\n    organisation: '',\r\n    mot_de_passe: '',\r\n    id_role: '',\r\n    id_entreprise: ''\r\n  });\r\n  \r\n  const [roleFormValues, setRoleFormValues] = useState<RoleFormValues>({\r\n    nom_role: '',\r\n    description: '',\r\n    niveau_acces: 'ENTREPRISE'\r\n  });\r\n  \r\n  // États pour les modes d'édition\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');\r\n  const [selectedItem, setSelectedItem] = useState<any>(null);\r\n  const [selectedRole, setSelectedRole] = useState<string>('');\r\n\r\n  // Vérifier les permissions d'accès\r\n  useEffect(() => {\r\n    if (!isAdmin() && !isSuperAdmin()) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n    \r\n    // Charger les données initiales\r\n    loadInitialData();\r\n  }, []);\r\n\r\n  // Mettre à jour l'URL quand l'onglet change\r\n  useEffect(() => {\r\n    const paths = ['/admin/users', '/admin/roles', '/admin/permissions', '/admin/modules'];\r\n    const currentPath = paths[tabValue];\r\n    if (location.pathname !== currentPath) {\r\n      navigate(currentPath, { replace: true });\r\n    }\r\n  }, [tabValue, navigate, location.pathname]);\r\n\r\n  const loadInitialData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await Promise.all([\r\n        loadActeurs(),\r\n        loadRoles(),\r\n        loadModules()\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des données:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadActeurs = async () => {\r\n    try {\r\n      const response = await api.get('permissions-management/users');\r\n      setActeurs(response || []);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des utilisateurs:', error);\r\n    }\r\n  };\r\n\r\n  const loadRoles = async () => {\r\n    try {\r\n      const response = await api.get('permissions-management/roles');\r\n      setRoles(response || []);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des rôles:', error);\r\n    }\r\n  };\r\n\r\n  const loadModules = async () => {\r\n    try {\r\n      const response = await api.get('permissions-management/modules');\r\n      setModules(response || []);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des modules:', error);\r\n    }\r\n  };\r\n\r\n  const loadRolePermissions = async (roleId: string) => {\r\n    try {\r\n      const response = await api.get(`permissions-management/roles/${roleId}/permissions`);\r\n      setRolePermissions(response || []);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des permissions du rôle:', error);\r\n    }\r\n  };\r\n\r\n  // Gestionnaires d'événements\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleCreateActeur = () => {\r\n    setDialogMode('create');\r\n    setActeurFormValues({\r\n      nom_prenom: '',\r\n      email: '',\r\n      fonction: '',\r\n      organisation: '',\r\n      mot_de_passe: '',\r\n      id_role: '',\r\n      id_entreprise: currentUser?.id_entreprise || ''\r\n    });\r\n    setOpenActeurDialog(true);\r\n  };\r\n\r\n  const handleEditActeur = (acteur: Acteur) => {\r\n    setDialogMode('edit');\r\n    setSelectedItem(acteur);\r\n    setActeurFormValues({\r\n      nom_prenom: acteur.nom_prenom,\r\n      email: acteur.email,\r\n      fonction: acteur.fonction,\r\n      organisation: acteur.organisation,\r\n      id_role: acteur.id_acteur, // A adapter selon votre schéma\r\n      id_entreprise: acteur.id_entreprise || ''\r\n    });\r\n    setOpenActeurDialog(true);\r\n  };\r\n\r\n  const handleCreateRole = () => {\r\n    setDialogMode('create');\r\n    setRoleFormValues({\r\n      nom_role: '',\r\n      description: '',\r\n      niveau_acces: 'ENTREPRISE'\r\n    });\r\n    setOpenRoleDialog(true);\r\n  };\r\n\r\n  const handleEditRole = (role: Role) => {\r\n    setDialogMode('edit');\r\n    setSelectedItem(role);\r\n    setRoleFormValues({\r\n      nom_role: role.nom_role,\r\n      description: role.description,\r\n      niveau_acces: role.niveau_acces\r\n    });\r\n    setOpenRoleDialog(true);\r\n  };\r\n\r\n  const handleSubmitActeur = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        await api.post('permissions-management/users', acteurFormValues);\r\n      } else if (selectedItem) {\r\n        await api.put(`acteurs/${selectedItem.id_acteur}`, acteurFormValues);\r\n      }\r\n      \r\n      await loadActeurs();\r\n      setOpenActeurDialog(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde de l\\'utilisateur:', error);\r\n    }\r\n  };\r\n\r\n  const handleSubmitRole = async () => {\r\n    try {\r\n      if (dialogMode === 'create') {\r\n        await api.post('permissions-management/roles', roleFormValues);\r\n      } else if (selectedItem) {\r\n        await api.put(`permissions-management/roles/${selectedItem.id_role}`, roleFormValues);\r\n      }\r\n      \r\n      await loadRoles();\r\n      setOpenRoleDialog(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde du rôle:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteItem = async () => {\r\n    try {\r\n      if (!selectedItem) return;\r\n      \r\n      if (tabValue === 0) { // Utilisateurs\r\n        await api.delete(`acteurs/${selectedItem.id_acteur}`);\r\n        await loadActeurs();\r\n      } else if (tabValue === 1) { // Rôles\r\n        await api.delete(`permissions-management/roles/${selectedItem.id_role}`);\r\n        await loadRoles();\r\n      }\r\n      \r\n      setOpenDeleteDialog(false);\r\n      setSelectedItem(null);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression:', error);\r\n    }\r\n  };\r\n\r\n  const getRoleLabel = (role: string, nom_role?: string) => {\r\n    const displayRole = nom_role || role;\r\n    \r\n    switch (displayRole) {\r\n      case 'SUPER_ADMINISTRATEUR':\r\n      case 'SuperAdmin':\r\n        return { label: 'Super Admin', color: 'error' as const, icon: <SuperAdminIcon /> };\r\n      case 'ADMINISTRATEUR':\r\n      case 'Admin':\r\n        return { label: 'Admin', color: 'primary' as const, icon: <AdminIcon /> };\r\n      case 'CONSULTANT':\r\n        return { label: 'Consultant', color: 'secondary' as const, icon: <ShieldIcon /> };\r\n      case 'MANAGER':\r\n        return { label: 'Manager', color: 'info' as const, icon: <GroupIcon /> };\r\n      case 'INTERVENANT':\r\n      default:\r\n        return { label: 'Intervenant', color: 'default' as const, icon: <PersonIcon /> };\r\n    }\r\n  };\r\n\r\n  const canManageUser = (acteur: Acteur): boolean => {\r\n    // Super admin peut tout gérer\r\n    if (isSuperAdmin()) return true;\r\n    \r\n    // Admin ne peut pas gérer les super admins\r\n    if (isAdmin()) {\r\n      const userRole = getRoleLabel(acteur.role, acteur.nom_role);\r\n      return userRole.label !== 'Super Admin';\r\n    }\r\n    \r\n    return false;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (!isAdmin() && !isSuperAdmin()) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Alert severity=\"error\">\r\n          Accès non autorisé. Vous devez être administrateur pour accéder à cette page.\r\n        </Alert>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* En-tête */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                <SecurityIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n                <Box>\r\n                  <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                    Administration Système\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n                    Gestion des utilisateurs, rôles et permissions\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              \r\n              {(isAdmin() || isSuperAdmin()) && (\r\n                <Box display=\"flex\" gap={1}>\r\n                  <Chip \r\n                    icon={<SuperAdminIcon />}\r\n                    label={isSuperAdmin() ? \"Super Administrateur\" : \"Administrateur\"}\r\n                    color={isSuperAdmin() ? \"error\" : \"primary\"}\r\n                    variant=\"filled\"\r\n                  />\r\n                </Box>\r\n              )}\r\n            </Box>\r\n\r\n            {/* Statistiques rapides */}\r\n            <Grid container spacing={2} sx={{ mt: 1 }}>\r\n              <Grid xs={12} sm={3}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"primary\">\r\n                      {acteurs.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Utilisateurs\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid xs={12} sm={3}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"secondary\">\r\n                      {roles.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Rôles\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid xs={12} sm={3}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"info\">\r\n                      {modules.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Modules\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid xs={12} sm={3}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n                    <Typography variant=\"h4\" color=\"success\">\r\n                      {acteurs.filter(a => getRoleLabel(a.role, a.nom_role).label === 'Admin').length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Administrateurs\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Onglets principaux */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ width: '100%' }}>\r\n            <Tabs\r\n              value={tabValue}\r\n              onChange={handleTabChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n              sx={{ borderBottom: 1, borderColor: 'divider' }}\r\n            >\r\n              <Tab \r\n                label=\"Utilisateurs\" \r\n                icon={<PersonIcon />}\r\n                iconPosition=\"start\"\r\n                disabled={!canAccessAdminModule('USERS')}\r\n              />\r\n              <Tab \r\n                label=\"Rôles\" \r\n                icon={<GroupIcon />}\r\n                iconPosition=\"start\"\r\n                disabled={!canAccessAdminModule('ROLES')}\r\n              />\r\n              <Tab \r\n                label=\"Permissions\" \r\n                icon={<SecurityIcon />}\r\n                iconPosition=\"start\"\r\n                disabled={!canAccessAdminModule('PERMISSIONS')}\r\n              />\r\n              <Tab \r\n                label=\"Modules\" \r\n                icon={<SettingsIcon />}\r\n                iconPosition=\"start\"\r\n                disabled={!canAccessAdminModule('SYSTEM')}\r\n              />\r\n            </Tabs>\r\n\r\n            {/* Onglet Utilisateurs */}\r\n            <TabPanel value={tabValue} index={0}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Utilisateurs</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={handleCreateActeur}\r\n                  disabled={!hasPermission('ADMIN_USERS', 'editer')}\r\n                >\r\n                  Nouvel Utilisateur\r\n                </Button>\r\n              </Box>\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Nom</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell>Fonction</TableCell>\r\n                      <TableCell>Organisation</TableCell>\r\n                      <TableCell>Rôle</TableCell>\r\n                      <TableCell>Entreprise</TableCell>\r\n                      <TableCell>Actions</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {acteurs.map((acteur) => {\r\n                      const roleInfo = getRoleLabel(acteur.role, acteur.nom_role);\r\n                      const canManage = canManageUser(acteur);\r\n                      \r\n                      return (\r\n                        <TableRow key={acteur.id_acteur} hover>\r\n                          <TableCell>{acteur.nom_prenom}</TableCell>\r\n                          <TableCell>{acteur.email}</TableCell>\r\n                          <TableCell>{acteur.fonction}</TableCell>\r\n                          <TableCell>{acteur.organisation}</TableCell>\r\n                          <TableCell>\r\n                            <Chip \r\n                              label={roleInfo.label} \r\n                              color={roleInfo.color} \r\n                              icon={roleInfo.icon}\r\n                              size=\"small\"\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>{acteur.nom_entreprise || 'Non spécifiée'}</TableCell>\r\n                          <TableCell>\r\n                            <Tooltip title={canManage ? \"Modifier l'utilisateur\" : \"Droits insuffisants\"}>\r\n                              <span>\r\n                                <IconButton \r\n                                  color=\"primary\" \r\n                                  onClick={() => handleEditActeur(acteur)}\r\n                                  disabled={!canManage || !hasPermission('ADMIN_USERS', 'editer')}\r\n                                >\r\n                                  <EditIcon />\r\n                                </IconButton>\r\n                              </span>\r\n                            </Tooltip>\r\n                            <Tooltip title={canManage ? \"Supprimer l'utilisateur\" : \"Droits insuffisants\"}>\r\n                              <span>\r\n                                <IconButton \r\n                                  color=\"error\" \r\n                                  onClick={() => {\r\n                                    setSelectedItem(acteur);\r\n                                    setOpenDeleteDialog(true);\r\n                                  }}\r\n                                  disabled={!canManage || !hasPermission('ADMIN_USERS', 'supprimer')}\r\n                                >\r\n                                  <DeleteIcon />\r\n                                </IconButton>\r\n                              </span>\r\n                            </Tooltip>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Rôles */}\r\n            <TabPanel value={tabValue} index={1}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"h6\">Gestion des Rôles</Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={handleCreateRole}\r\n                  disabled={!isSuperAdmin() || !hasPermission('ADMIN_ROLES', 'editer')}\r\n                >\r\n                  Nouveau Rôle\r\n                </Button>\r\n              </Box>\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Nom du Rôle</TableCell>\r\n                      <TableCell>Description</TableCell>\r\n                      <TableCell>Niveau d'Accès</TableCell>\r\n                      <TableCell>Utilisateurs</TableCell>\r\n                      <TableCell>Actions</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {roles.map((role) => (\r\n                      <TableRow key={role.id_role} hover>\r\n                        <TableCell>\r\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                            {role.nom_role === 'SUPER_ADMINISTRATEUR' && <SuperAdminIcon color=\"error\" />}\r\n                            {role.nom_role === 'ADMINISTRATEUR' && <AdminIcon color=\"primary\" />}\r\n                            {role.nom_role === 'CONSULTANT' && <ShieldIcon color=\"secondary\" />}\r\n                            {role.nom_role === 'MANAGER' && <GroupIcon color=\"info\" />}\r\n                            {role.nom_role === 'INTERVENANT' && <PersonIcon />}\r\n                            <Typography variant=\"body2\">{role.nom_role}</Typography>\r\n                          </Box>\r\n                        </TableCell>\r\n                        <TableCell>{role.description}</TableCell>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={role.niveau_acces} \r\n                            color={role.niveau_acces === 'GLOBAL' ? 'primary' : 'default'} \r\n                            size=\"small\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge badgeContent={role.nombre_utilisateurs || 0} color=\"primary\">\r\n                            <GroupIcon />\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <IconButton \r\n                            color=\"primary\" \r\n                            onClick={() => handleEditRole(role)}\r\n                            disabled={!isSuperAdmin() || !hasPermission('ADMIN_ROLES', 'editer')}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                          <IconButton \r\n                            color=\"error\" \r\n                            onClick={() => {\r\n                              setSelectedItem(role);\r\n                              setOpenDeleteDialog(true);\r\n                            }}\r\n                            disabled={!isSuperAdmin() || !hasPermission('ADMIN_ROLES', 'supprimer') || (role.nombre_utilisateurs || 0) > 0}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n\r\n            {/* Onglet Permissions */}\r\n            <TabPanel value={tabValue} index={2}>\r\n              <Typography variant=\"h6\" gutterBottom>Gestion des Permissions par Rôle</Typography>\r\n              \r\n              <FormControl fullWidth sx={{ mb: 3 }}>\r\n                <InputLabel>Sélectionner un rôle</InputLabel>\r\n                <Select\r\n                  value={selectedRole}\r\n                  onChange={(e) => {\r\n                    setSelectedRole(e.target.value);\r\n                    if (e.target.value) {\r\n                      loadRolePermissions(e.target.value);\r\n                    }\r\n                  }}\r\n                >\r\n                  {roles.map((role) => (\r\n                    <MenuItem key={role.id_role} value={role.id_role}>\r\n                      {role.nom_role} - {role.description}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {selectedRole && rolePermissions.length > 0 && (\r\n                <TableContainer>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Module</TableCell>\r\n                        <TableCell align=\"center\">Voir</TableCell>\r\n                        <TableCell align=\"center\">Éditer</TableCell>\r\n                        <TableCell align=\"center\">Supprimer</TableCell>\r\n                        <TableCell align=\"center\">Administrer</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {rolePermissions.map((perm) => (\r\n                        <TableRow key={perm.id_role_permission}>\r\n                          <TableCell>{perm.nom_module}</TableCell>\r\n                          <TableCell align=\"center\">\r\n                            <Checkbox checked={perm.peut_voir} disabled />\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            <Checkbox checked={perm.peut_editer} disabled />\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            <Checkbox checked={perm.peut_supprimer} disabled />\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">\r\n                            <Checkbox checked={perm.peut_administrer} disabled />\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              )}\r\n            </TabPanel>\r\n\r\n            {/* Onglet Modules */}\r\n            <TabPanel value={tabValue} index={3}>\r\n              <Typography variant=\"h6\" gutterBottom>Configuration des Modules</Typography>\r\n              \r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Module</TableCell>\r\n                      <TableCell>Description</TableCell>\r\n                      <TableCell>Route</TableCell>\r\n                      <TableCell>Ordre</TableCell>\r\n                      <TableCell>Statut</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {modules.map((module) => (\r\n                      <TableRow key={module.id_module}>\r\n                        <TableCell>{module.nom_module}</TableCell>\r\n                        <TableCell>{module.description}</TableCell>\r\n                        <TableCell>\r\n                          <code>{module.route_base}</code>\r\n                        </TableCell>\r\n                        <TableCell>{module.ordre_affichage}</TableCell>\r\n                        <TableCell>\r\n                          <Chip \r\n                            label={module.actif ? 'Actif' : 'Inactif'} \r\n                            color={module.actif ? 'success' : 'default'} \r\n                            size=\"small\"\r\n                          />\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialogues */}\r\n      {/* Dialog pour créer/modifier un utilisateur */}\r\n      <Dialog open={openActeurDialog} onClose={() => setOpenActeurDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer un nouvel utilisateur' : 'Modifier l\\'utilisateur'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Nom et prénom\"\r\n                  value={acteurFormValues.nom_prenom}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, nom_prenom: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  type=\"email\"\r\n                  label=\"Email\"\r\n                  value={acteurFormValues.email}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, email: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} sm={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Fonction\"\r\n                  value={acteurFormValues.fonction}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, fonction: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} sm={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Organisation\"\r\n                  value={acteurFormValues.organisation}\r\n                  onChange={(e) => setActeurFormValues({...acteurFormValues, organisation: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12} sm={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Rôle</InputLabel>\r\n                  <Select\r\n                    value={acteurFormValues.id_role}\r\n                    onChange={(e) => setActeurFormValues({...acteurFormValues, id_role: e.target.value})}\r\n                  >\r\n                    {roles.map((role) => (\r\n                      <MenuItem key={role.id_role} value={role.id_role}>\r\n                        {role.nom_role}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              {dialogMode === 'create' && (\r\n                <Grid xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"password\"\r\n                    label=\"Mot de passe\"\r\n                    value={acteurFormValues.mot_de_passe}\r\n                    onChange={(e) => setActeurFormValues({...acteurFormValues, mot_de_passe: e.target.value})}\r\n                  />\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenActeurDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleSubmitActeur} variant=\"contained\" color=\"primary\">\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog pour créer/modifier un rôle */}\r\n      <Dialog open={openRoleDialog} onClose={() => setOpenRoleDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Créer un nouveau rôle' : 'Modifier le rôle'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" noValidate sx={{ mt: 2 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  label=\"Nom du rôle\"\r\n                  value={roleFormValues.nom_role}\r\n                  onChange={(e) => setRoleFormValues({...roleFormValues, nom_role: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  rows={3}\r\n                  label=\"Description\"\r\n                  value={roleFormValues.description}\r\n                  onChange={(e) => setRoleFormValues({...roleFormValues, description: e.target.value})}\r\n                />\r\n              </Grid>\r\n              <Grid xs={12}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Niveau d'accès</InputLabel>\r\n                  <Select\r\n                    value={roleFormValues.niveau_acces}\r\n                    onChange={(e) => setRoleFormValues({...roleFormValues, niveau_acces: e.target.value as 'GLOBAL' | 'ENTREPRISE'})}\r\n                  >\r\n                    <MenuItem value=\"ENTREPRISE\">Entreprise</MenuItem>\r\n                    <MenuItem value=\"GLOBAL\">Global</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenRoleDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleSubmitRole} variant=\"contained\" color=\"primary\">\r\n            {dialogMode === 'create' ? 'Créer' : 'Mettre à jour'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Dialog de confirmation de suppression */}\r\n      <Dialog open={openDeleteDialog} onClose={() => setOpenDeleteDialog(false)}>\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer cet élément ? Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDeleteDialog(false)}>Annuler</Button>\r\n          <Button onClick={handleDeleteItem} variant=\"contained\" color=\"error\">\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Administration;","// src/pages/MaturityModelAdmin/index.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Tabs,\r\n  Tab,\r\n  Card,\r\n  CardContent,\r\n  Chip,\r\n  Alert,\r\n  Snackbar,\r\n  CircularProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Fab,\r\n  Divider,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  List,\r\n  ListItem\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Download as DownloadIcon,\r\n  Upload as UploadIcon,\r\n  School as SchoolIcon,\r\n  Category as CategoryIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon\r\n} from '@mui/icons-material';\r\nimport api from '../../services/api';\r\n\r\n// Types\r\ninterface Fonction {\r\n  id_fonction: string;\r\n  nom: string;\r\n  description: string;\r\n  ordre: number;\r\n  actif: boolean;\r\n  nb_thematiques?: number;\r\n  nb_niveaux_globaux?: number;\r\n  thematiques?: Thematique[];\r\n  niveauxGlobaux?: NiveauGlobal[];\r\n}\r\n\r\ninterface Thematique {\r\n  id_thematique: string;\r\n  nom: string;\r\n  description: string;\r\n  id_fonction: string;\r\n  nombre_questions: number;\r\n  ordre: number;\r\n  actif: boolean;\r\n  nb_niveaux?: number;\r\n  niveauxThematiques?: NiveauThematique[];\r\n}\r\n\r\ninterface NiveauGlobal {\r\n  id_niveau: string;\r\n  id_fonction: string;\r\n  score_min: number;\r\n  score_max: number;\r\n  niveau: string;\r\n  description: string;\r\n  recommandations: string;\r\n  ordre: number;\r\n}\r\n\r\ninterface NiveauThematique {\r\n  id_niveau: string;\r\n  id_fonction: string;\r\n  id_thematique: string;\r\n  score_min: number;\r\n  score_max: number;\r\n  niveau: string;\r\n  description: string;\r\n  recommandations: string;\r\n}\r\n\r\ninterface FormData {\r\n  [key: string]: any;\r\n}\r\n\r\ntype DialogType = 'fonction' | 'thematique' | 'niveau-global' | 'niveau-thematique' | '';\r\n\r\nconst MaturityModelAdmin: React.FC = () => {\r\n  // États\r\n  const [fonctions, setFonctions] = useState<Fonction[]>([]);\r\n  const [selectedFonction, setSelectedFonction] = useState<Fonction | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success' as 'success' | 'error' | 'warning' | 'info'\r\n  });\r\n  \r\n  // États pour les dialogues\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [dialogType, setDialogType] = useState<DialogType>('');\r\n  const [editingItem, setEditingItem] = useState<any>(null);\r\n  const [formData, setFormData] = useState<FormData>({});\r\n  \r\n  // États pour les confirmations\r\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\r\n  const [itemToDelete, setItemToDelete] = useState<{ type: string; id: string; name: string } | null>(null);\r\n\r\n  // Charger les fonctions au montage\r\n  useEffect(() => {\r\n    loadFonctions();\r\n  }, []);\r\n\r\n  // Fonctions de chargement\r\n  const loadFonctions = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await api.get('/maturity-model/fonctions');\r\n      setFonctions(response.data || response);\r\n      if ((response.data || response).length > 0 && !selectedFonction) {\r\n        loadFonctionDetails((response.data || response)[0].id_fonction);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des fonctions:', error);\r\n      showSnackbar('Erreur lors du chargement des fonctions', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadFonctionDetails = async (fonctionId: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await api.get(`/maturity-model/fonctions/${fonctionId}`);\r\n      setSelectedFonction(response.data || response);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des détails:', error);\r\n      showSnackbar('Erreur lors du chargement des détails', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fonctions utilitaires\r\n  const showSnackbar = (message: string, severity: 'success' | 'error' | 'warning' | 'info' = 'success') => {\r\n    setSnackbar({ open: true, message, severity });\r\n  };\r\n\r\n  const openDialog = (type: DialogType, item: any = null) => {\r\n    setDialogType(type);\r\n    setEditingItem(item);\r\n    setFormData(item || {});\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setDialogOpen(false);\r\n    setEditingItem(null);\r\n    setFormData({});\r\n    setDialogType('');\r\n  };\r\n\r\n  const confirmDelete = (type: string, id: string, name: string) => {\r\n    setItemToDelete({ type, id, name });\r\n    setDeleteConfirmOpen(true);\r\n  };\r\n\r\n  // Fonction de sauvegarde\r\n  const handleSave = async () => {\r\n    try {\r\n      let response;\r\n      \r\n      switch (dialogType) {\r\n        case 'fonction':\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/fonctions/${editingItem.id_fonction}`, formData);\r\n            showSnackbar('Fonction mise à jour avec succès');\r\n          } else {\r\n            response = await api.post('/maturity-model/fonctions', formData);\r\n            showSnackbar('Fonction créée avec succès');\r\n          }\r\n          await loadFonctions();\r\n          break;\r\n        \r\n        case 'thematique':\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/thematiques/${editingItem.id_thematique}`, formData);\r\n            showSnackbar('Thématique mise à jour avec succès');\r\n          } else {\r\n            response = await api.post(`/maturity-model/fonctions/${selectedFonction?.id_fonction}/thematiques`, formData);\r\n            showSnackbar('Thématique créée avec succès');\r\n          }\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-global':\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/niveaux-globaux/${editingItem.id_niveau}`, formData);\r\n            showSnackbar('Niveau global mis à jour avec succès');\r\n          } else {\r\n            response = await api.post(`/maturity-model/fonctions/${selectedFonction?.id_fonction}/niveaux-globaux`, formData);\r\n            showSnackbar('Niveau global créé avec succès');\r\n          }\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-thematique':\r\n          const { id_thematique } = formData;\r\n          if (editingItem) {\r\n            response = await api.put(`/maturity-model/niveaux-thematiques/${editingItem.id_niveau}`, formData);\r\n            showSnackbar('Niveau thématique mis à jour avec succès');\r\n          } else {\r\n            response = await api.post(`/maturity-model/thematiques/${id_thematique}/niveaux`, {\r\n              ...formData,\r\n              id_fonction: selectedFonction?.id_fonction\r\n            });\r\n            showSnackbar('Niveau thématique créé avec succès');\r\n          }\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n      }\r\n      \r\n      closeDialog();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde:', error);\r\n      showSnackbar('Erreur lors de la sauvegarde', 'error');\r\n    }\r\n  };\r\n\r\n  // Fonction de suppression\r\n  const handleDelete = async () => {\r\n    if (!itemToDelete) return;\r\n    \r\n    try {\r\n      switch (itemToDelete.type) {\r\n        case 'fonction':\r\n          await api.delete(`/maturity-model/fonctions/${itemToDelete.id}`);\r\n          showSnackbar('Fonction supprimée avec succès');\r\n          await loadFonctions();\r\n          if (selectedFonction?.id_fonction === itemToDelete.id) {\r\n            setSelectedFonction(null);\r\n          }\r\n          break;\r\n        \r\n        case 'thematique':\r\n          await api.delete(`/maturity-model/thematiques/${itemToDelete.id}`);\r\n          showSnackbar('Thématique supprimée avec succès');\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-global':\r\n          await api.delete(`/maturity-model/niveaux-globaux/${itemToDelete.id}`);\r\n          showSnackbar('Niveau global supprimé avec succès');\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n        \r\n        case 'niveau-thematique':\r\n          await api.delete(`/maturity-model/niveaux-thematiques/${itemToDelete.id}`);\r\n          showSnackbar('Niveau thématique supprimé avec succès');\r\n          if (selectedFonction) {\r\n            await loadFonctionDetails(selectedFonction.id_fonction);\r\n          }\r\n          break;\r\n      }\r\n      \r\n      setDeleteConfirmOpen(false);\r\n      setItemToDelete(null);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression:', error);\r\n      showSnackbar('Erreur lors de la suppression', 'error');\r\n    }\r\n  };\r\n\r\n  // Fonction d'export\r\n  const exportModel = async () => {\r\n    try {\r\n      const response = await api.get('/maturity-model/export');\r\n      const dataStr = JSON.stringify(response.data || response, null, 2);\r\n      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n      \r\n      const exportFileDefaultName = `maturity-model-${new Date().toISOString().split('T')[0]}.json`;\r\n      \r\n      const linkElement = document.createElement('a');\r\n      linkElement.setAttribute('href', dataUri);\r\n      linkElement.setAttribute('download', exportFileDefaultName);\r\n      linkElement.click();\r\n      \r\n      showSnackbar('Modèle exporté avec succès');\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'export:', error);\r\n      showSnackbar('Erreur lors de l\\'export', 'error');\r\n    }\r\n  };\r\n\r\n  // Fonction utilitaire pour la couleur des scores\r\n  const getScoreColor = (score: number): string => {\r\n    if (score >= 4) return '#4CAF50';\r\n    if (score >= 3) return '#FF9800';\r\n    if (score >= 2) return '#F44336';\r\n    return '#9E9E9E';\r\n  };\r\n\r\n  // Composant de dialogue\r\n  const renderDialog = () => {\r\n    const getDialogTitle = () => {\r\n      const action = editingItem ? 'Modifier' : 'Créer';\r\n      switch (dialogType) {\r\n        case 'fonction': return `${action} une fonction`;\r\n        case 'thematique': return `${action} une thématique`;\r\n        case 'niveau-global': return `${action} un niveau global`;\r\n        case 'niveau-thematique': return `${action} un niveau thématique`;\r\n        default: return '';\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Dialog open={dialogOpen} onClose={closeDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>{getDialogTitle()}</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            {(dialogType === 'fonction' || dialogType === 'thematique') && (\r\n              <>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Nom\"\r\n                  value={formData.nom || ''}\r\n                  onChange={(e) => setFormData({ ...formData, nom: e.target.value })}\r\n                  required\r\n                />\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Description\"\r\n                  multiline\r\n                  rows={3}\r\n                  value={formData.description || ''}\r\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                  required\r\n                />\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Ordre\"\r\n                  type=\"number\"\r\n                  value={formData.ordre || 999}\r\n                  onChange={(e) => setFormData({ ...formData, ordre: parseInt(e.target.value) || 999 })}\r\n                />\r\n              </>\r\n            )}\r\n            \r\n            {dialogType === 'thematique' && (\r\n              <TextField\r\n                fullWidth\r\n                label=\"Nombre de questions\"\r\n                type=\"number\"\r\n                value={formData.nombre_questions || 0}\r\n                onChange={(e) => setFormData({ ...formData, nombre_questions: parseInt(e.target.value) || 0 })}\r\n              />\r\n            )}\r\n            \r\n            {(dialogType === 'niveau-global' || dialogType === 'niveau-thematique') && (\r\n              <>\r\n                <Box>\r\n                  <Typography gutterBottom>Plage de scores</Typography>\r\n                  <Box sx={{ display: 'flex', gap: 2 }}>\r\n                    <TextField\r\n                      label=\"Score min\"\r\n                      type=\"number\"\r\n                      inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                      value={formData.score_min ?? ''}\r\n                      onChange={(e) => setFormData({ ...formData, score_min: parseFloat(e.target.value) || 0 })}\r\n                      required\r\n                    />\r\n                    <TextField\r\n                      label=\"Score max\"\r\n                      type=\"number\"\r\n                      inputProps={{ min: 0, max: 5, step: 0.1 }}\r\n                      value={formData.score_max ?? ''}\r\n                      onChange={(e) => setFormData({ ...formData, score_max: parseFloat(e.target.value) || 0 })}\r\n                      required\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Niveau\"\r\n                  value={formData.niveau || ''}\r\n                  onChange={(e) => setFormData({ ...formData, niveau: e.target.value })}\r\n                  required\r\n                />\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Description\"\r\n                  multiline\r\n                  rows={3}\r\n                  value={formData.description || ''}\r\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                  required\r\n                />\r\n                \r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Recommandations\"\r\n                  multiline\r\n                  rows={3}\r\n                  value={formData.recommandations || ''}\r\n                  onChange={(e) => setFormData({ ...formData, recommandations: e.target.value })}\r\n                />\r\n                \r\n                {dialogType === 'niveau-global' && (\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Ordre\"\r\n                    type=\"number\"\r\n                    value={formData.ordre || 999}\r\n                    onChange={(e) => setFormData({ ...formData, ordre: parseInt(e.target.value) || 999 })}\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n            \r\n            {dialogType === 'niveau-thematique' && !editingItem && (\r\n              <FormControl fullWidth required>\r\n                <InputLabel>Thématique</InputLabel>\r\n                <Select\r\n                  value={formData.id_thematique || ''}\r\n                  onChange={(e) => setFormData({ ...formData, id_thematique: e.target.value })}\r\n                  label=\"Thématique\"\r\n                >\r\n                  {selectedFonction?.thematiques?.map(them => (\r\n                    <MenuItem key={them.id_thematique} value={them.id_thematique}>\r\n                      {them.nom}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeDialog}>Annuler</Button>\r\n          <Button\r\n            onClick={handleSave}\r\n            variant=\"contained\"\r\n            startIcon={<SaveIcon />}\r\n            disabled={\r\n              !formData.nom && (dialogType === 'fonction' || dialogType === 'thematique') ||\r\n              !formData.niveau && (dialogType === 'niveau-global' || dialogType === 'niveau-thematique')\r\n            }\r\n          >\r\n            Enregistrer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  };\r\n\r\n  // Rendu principal\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        {/* Header */}\r\n        <Grid xs={12}>\r\n          <Paper sx={{ p: 3 }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                <SettingsIcon color=\"primary\" fontSize=\"large\" />\r\n                <Typography component=\"h1\" variant=\"h4\" color=\"primary\">\r\n                  Administration du Modèle de Maturité\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<DownloadIcon />}\r\n                  onClick={exportModel}\r\n                  sx={{ mr: 2 }}\r\n                >\r\n                  Exporter\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => openDialog('fonction')}\r\n                >\r\n                  Nouvelle Fonction\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Liste des fonctions */}\r\n        <Grid xs={12} md={4}>\r\n          <Paper sx={{ p: 2, height: 'calc(100vh - 200px)', overflow: 'auto' }}>\r\n            <Typography variant=\"h6\" gutterBottom sx={{ mb: 3 }}>\r\n              Fonctions d'évaluation\r\n            </Typography>\r\n            \r\n            {loading && <CircularProgress />}\r\n            \r\n            <List>\r\n              {fonctions.map((fonction) => (\r\n                <Card\r\n                  key={fonction.id_fonction}\r\n                  sx={{\r\n                    mb: 2,\r\n                    cursor: 'pointer',\r\n                    border: selectedFonction?.id_fonction === fonction.id_fonction ? '2px solid #0B4E87' : '1px solid #e0e0e0',\r\n                    transition: 'all 0.3s',\r\n                    '&:hover': { \r\n                      boxShadow: 3,\r\n                      transform: 'translateY(-2px)'\r\n                    }\r\n                  }}\r\n                  onClick={() => loadFonctionDetails(fonction.id_fonction)}\r\n                >\r\n                  <CardContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                      <Typography variant=\"h6\" color=\"primary\">\r\n                        {fonction.nom}\r\n                      </Typography>\r\n                      <Box>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            openDialog('fonction', fonction);\r\n                          }}\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          color=\"error\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            confirmDelete('fonction', fonction.id_fonction, fonction.nom);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </Box>\r\n                    \r\n                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1, mb: 2 }}>\r\n                      {fonction.description}\r\n                    </Typography>\r\n                    \r\n                    <Box display=\"flex\" gap={1}>\r\n                      <Chip\r\n                        size=\"small\"\r\n                        icon={<CategoryIcon />}\r\n                        label={`${fonction.nb_thematiques || 0} thématiques`}\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                      <Chip\r\n                        size=\"small\"\r\n                        icon={<TrendingUpIcon />}\r\n                        label={`${fonction.nb_niveaux_globaux || 0} niveaux`}\r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </List>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Détails de la fonction sélectionnée */}\r\n        <Grid xs={12} md={8}>\r\n          {selectedFonction ? (\r\n            <Paper sx={{ p: 2, height: 'calc(100vh - 200px)', overflow: 'auto' }}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                <Box>\r\n                  <Typography variant=\"h5\" gutterBottom>\r\n                    {selectedFonction.nom}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {selectedFonction.description}\r\n                  </Typography>\r\n                </Box>\r\n                <Box>\r\n                  <Chip\r\n                    label={selectedFonction.actif ? 'Actif' : 'Inactif'}\r\n                    color={selectedFonction.actif ? 'success' : 'default'}\r\n                    sx={{ mr: 2 }}\r\n                  />\r\n                  <Tooltip title=\"Modifier\">\r\n                    <IconButton\r\n                      onClick={() => openDialog('fonction', selectedFonction)}\r\n                    >\r\n                      <EditIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Tabs value={tabValue} onChange={(e, v) => setTabValue(v)} sx={{ mb: 3 }}>\r\n                <Tab label=\"Thématiques\" />\r\n                <Tab label=\"Niveaux Globaux\" />\r\n                <Tab label=\"Niveaux Thématiques\" />\r\n              </Tabs>\r\n\r\n              {/* Tab Thématiques */}\r\n              {tabValue === 0 && (\r\n                <Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h6\">Thématiques ({selectedFonction.thematiques?.length || 0})</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => openDialog('thematique')}\r\n                    >\r\n                      Ajouter une thématique\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  {selectedFonction.thematiques?.map((them) => (\r\n                    <Accordion key={them.id_thematique} sx={{ mb: 1 }}>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\r\n                          <Box>\r\n                            <Typography variant=\"subtitle1\" sx={{ fontWeight: 500 }}>\r\n                              {them.nom}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                              {them.nombre_questions} questions • {them.niveauxThematiques?.length || 0} niveaux définis\r\n                            </Typography>\r\n                          </Box>\r\n                          <Box onClick={(e) => e.stopPropagation()}>\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => openDialog('thematique', them)}\r\n                            >\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              color=\"error\"\r\n                              onClick={() => confirmDelete('thematique', them.id_thematique, them.nom)}\r\n                            >\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </Box>\r\n                        </Box>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\r\n                          {them.description}\r\n                        </Typography>\r\n                        \r\n                        {them.niveauxThematiques && them.niveauxThematiques.length > 0 && (\r\n                          <Box>\r\n                            <Typography variant=\"subtitle2\" gutterBottom>\r\n                              Niveaux définis:\r\n                            </Typography>\r\n                            <Box display=\"flex\" flexWrap=\"wrap\" gap={1}>\r\n                              {them.niveauxThematiques.map(niveau => (\r\n                                <Chip\r\n                                  key={niveau.id_niveau}\r\n                                  label={`${niveau.score_min}-${niveau.score_max}: ${niveau.niveau}`}\r\n                                  size=\"small\"\r\n                                  sx={{\r\n                                    bgcolor: getScoreColor((niveau.score_min + niveau.score_max) / 2),\r\n                                    color: 'white'\r\n                                  }}\r\n                                />\r\n                              ))}\r\n                            </Box>\r\n                          </Box>\r\n                        )}\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  ))}\r\n                  \r\n                  {(!selectedFonction.thematiques || selectedFonction.thematiques.length === 0) && (\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucune thématique définie pour cette fonction\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n\r\n              {/* Tab Niveaux Globaux */}\r\n              {tabValue === 1 && (\r\n                <Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h6\">Niveaux Globaux ({selectedFonction.niveauxGlobaux?.length || 0})</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => openDialog('niveau-global')}\r\n                    >\r\n                      Ajouter un niveau\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  <TableContainer>\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell width=\"120\">Score</TableCell>\r\n                          <TableCell width=\"200\">Niveau</TableCell>\r\n                          <TableCell>Description</TableCell>\r\n                          <TableCell width=\"100\">Actions</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {selectedFonction.niveauxGlobaux?.map((niveau) => (\r\n                          <TableRow key={niveau.id_niveau}>\r\n                            <TableCell>\r\n                              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                                <Box\r\n                                  sx={{\r\n                                    width: 16,\r\n                                    height: 16,\r\n                                    borderRadius: '50%',\r\n                                    bgcolor: getScoreColor((niveau.score_min + niveau.score_max) / 2)\r\n                                  }}\r\n                                />\r\n                                {niveau.score_min} - {niveau.score_max}\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Typography variant=\"subtitle2\">\r\n                                {niveau.niveau}\r\n                              </Typography>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Box>\r\n                                <Typography variant=\"body2\">\r\n                                  {niveau.description}\r\n                                </Typography>\r\n                                {niveau.recommandations && (\r\n                                  <Typography variant=\"caption\" color=\"textSecondary\" sx={{ mt: 1, display: 'block' }}>\r\n                                    <strong>Recommandations:</strong> {niveau.recommandations}\r\n                                  </Typography>\r\n                                )}\r\n                              </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Box>\r\n                                <IconButton\r\n                                  size=\"small\"\r\n                                  onClick={() => openDialog('niveau-global', niveau)}\r\n                                >\r\n                                  <EditIcon />\r\n                                </IconButton>\r\n                                <IconButton\r\n                                  size=\"small\"\r\n                                  color=\"error\"\r\n                                  onClick={() => confirmDelete('niveau-global', niveau.id_niveau, niveau.niveau)}\r\n                                >\r\n                                  <DeleteIcon />\r\n                                </IconButton>\r\n                              </Box>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  \r\n                  {(!selectedFonction.niveauxGlobaux || selectedFonction.niveauxGlobaux.length === 0) && (\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucun niveau global défini pour cette fonction\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n\r\n              {/* Tab Niveaux Thématiques */}\r\n              {tabValue === 2 && (\r\n                <Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h6\">Niveaux Thématiques</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => openDialog('niveau-thematique')}\r\n                      disabled={!selectedFonction.thematiques || selectedFonction.thematiques.length === 0}\r\n                    >\r\n                      Ajouter un niveau\r\n                    </Button>\r\n                  </Box>\r\n                  \r\n                  {selectedFonction.thematiques?.map((them) => (\r\n                    <Box key={them.id_thematique} mb={3}>\r\n                      <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 500, color: '#0B4E87' }}>\r\n                        {them.nom}\r\n                      </Typography>\r\n                      \r\n                      {them.niveauxThematiques && them.niveauxThematiques.length > 0 ? (\r\n                        <TableContainer sx={{ mb: 2 }}>\r\n                          <Table size=\"small\">\r\n                            <TableHead>\r\n                              <TableRow>\r\n                                <TableCell width=\"100\">Score</TableCell>\r\n                                <TableCell width=\"200\">Niveau</TableCell>\r\n                                <TableCell>Description</TableCell>\r\n                                <TableCell width=\"80\">Actions</TableCell>\r\n                              </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                              {them.niveauxThematiques.map((niveau) => (\r\n                                <TableRow key={niveau.id_niveau}>\r\n                                  <TableCell>\r\n                                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                                      <Box\r\n                                        sx={{\r\n                                          width: 12,\r\n                                          height: 12,\r\n                                          borderRadius: '50%',\r\n                                          bgcolor: getScoreColor((niveau.score_min + niveau.score_max) / 2)\r\n                                        }}\r\n                                      />\r\n                                      {niveau.score_min} - {niveau.score_max}\r\n                                    </Box>\r\n                                  </TableCell>\r\n                                  <TableCell>{niveau.niveau}</TableCell>\r\n                                  <TableCell>\r\n                                    <Typography variant=\"body2\" sx={{ fontSize: '0.875rem' }}>\r\n                                      {niveau.description}\r\n                                    </Typography>\r\n                                  </TableCell>\r\n                                  <TableCell>\r\n                                    <Box>\r\n                                      <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => openDialog('niveau-thematique', niveau)}\r\n                                      >\r\n                                        <EditIcon fontSize=\"small\" />\r\n                                      </IconButton>\r\n                                      <IconButton\r\n                                        size=\"small\"\r\n                                        color=\"error\"\r\n                                        onClick={() => confirmDelete('niveau-thematique', niveau.id_niveau, niveau.niveau)}\r\n                                      >\r\n                                        <DeleteIcon fontSize=\"small\" />\r\n                                      </IconButton>\r\n                                    </Box>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              ))}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      ) : (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ ml: 2, mb: 2 }}>\r\n                          Aucun niveau défini pour cette thématique\r\n                        </Typography>\r\n                      )}\r\n                      \r\n                      <Divider />\r\n                    </Box>\r\n                  ))}\r\n                  \r\n                  {(!selectedFonction.thematiques || selectedFonction.thematiques.length === 0) && (\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <Typography variant=\"body1\" color=\"textSecondary\">\r\n                        Aucune thématique définie. Créez d'abord des thématiques pour définir leurs niveaux.\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n            </Paper>\r\n          ) : (\r\n            <Paper sx={{ p: 6, textAlign: 'center', height: 'calc(100vh - 200px)', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              <Box>\r\n                <AssessmentIcon sx={{ fontSize: 80, color: '#e0e0e0', mb: 2 }} />\r\n                <Typography variant=\"h6\" color=\"textSecondary\">\r\n                  Sélectionnez une fonction pour voir les détails\r\n                </Typography>\r\n              </Box>\r\n            </Paper>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Dialogues */}\r\n      {renderDialog()}\r\n\r\n      {/* Dialogue de confirmation de suppression */}\r\n      <Dialog\r\n        open={deleteConfirmOpen}\r\n        onClose={() => setDeleteConfirmOpen(false)}\r\n      >\r\n        <DialogTitle>Confirmer la suppression</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Êtes-vous sûr de vouloir supprimer \"{itemToDelete?.name}\" ?\r\n          </Typography>\r\n          <Typography variant=\"caption\" color=\"error\" sx={{ mt: 1, display: 'block' }}>\r\n            Cette action est irréversible.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteConfirmOpen(false)}>\r\n            Annuler\r\n          </Button>\r\n          <Button\r\n            onClick={handleDelete}\r\n            color=\"error\"\r\n            variant=\"contained\"\r\n            startIcon={<DeleteIcon />}\r\n          >\r\n            Supprimer\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert\r\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MaturityModelAdmin;","// src/components/ProtectedRoute.tsx - Version corrigée\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { \r\n  Box, \r\n  CircularProgress, \r\n  Alert, \r\n  AlertTitle, \r\n  Button, \r\n  Typography,\r\n  Paper,\r\n  Container\r\n} from '@mui/material';\r\nimport { \r\n  Lock as LockIcon, \r\n  AdminPanelSettings as AdminIcon,\r\n  Warning as WarningIcon \r\n} from '@mui/icons-material';\r\n\r\ninterface ProtectedRouteProps {\r\n  children: React.ReactNode;\r\n  module?: string;\r\n  action?: string;\r\n  adminOnly?: boolean;\r\n  fallbackUrl?: string;\r\n  showDetailedError?: boolean;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \r\n  children,\r\n  module,\r\n  action = 'voir',\r\n  adminOnly = false,\r\n  fallbackUrl = '/auth/login',\r\n  showDetailedError = true\r\n}) => {\r\n  const { \r\n    isAuthenticated, \r\n    isLoading, \r\n    currentUser, \r\n    hasPermission, \r\n    canAccessRoute,\r\n    isAdmin, \r\n    isSuperAdmin\r\n  } = useAuth();\r\n  \r\n  const location = useLocation();\r\n  const [permissionLoading, setPermissionLoading] = useState(true);\r\n  const [hasAccess, setHasAccess] = useState(false);\r\n  const [errorDetails, setErrorDetails] = useState<{\r\n    type: 'auth' | 'permission' | 'admin';\r\n    message: string;\r\n    suggestion?: string;\r\n  } | null>(null);\r\n\r\n  // Mémoriser les valeurs pour éviter les re-renders\r\n  const isUserAdmin = useCallback(() => isAdmin(), [isAdmin]);\r\n  const isUserSuperAdmin = useCallback(() => isSuperAdmin(), [isSuperAdmin]);\r\n\r\n  // Vérification des permissions - UNIQUEMENT basée sur les valeurs primitives\r\n  useEffect(() => {\r\n    let isMounted = true; // Pour éviter les setState sur composants démontés\r\n\r\n    const checkPermissions = async () => {\r\n      console.log('🔍 ProtectedRoute - Vérification permissions pour:', location.pathname);\r\n      \r\n      try {\r\n        if (!isMounted) return;\r\n        \r\n        setPermissionLoading(true);\r\n        setErrorDetails(null);\r\n\r\n        // 1. Vérifier l'authentification\r\n        if (!isAuthenticated) {\r\n          console.log('❌ Utilisateur non authentifié');\r\n          if (isMounted) {\r\n            setErrorDetails({\r\n              type: 'auth',\r\n              message: 'Vous devez être connecté pour accéder à cette page.',\r\n              suggestion: 'Veuillez vous connecter avec vos identifiants.'\r\n            });\r\n            setHasAccess(false);\r\n            setPermissionLoading(false);\r\n          }\r\n          return;\r\n        }\r\n\r\n        // 2. Vérifier si admin requis\r\n        if (adminOnly && !isUserAdmin() && !isUserSuperAdmin()) {\r\n          console.log('❌ Accès administrateur requis mais utilisateur non admin');\r\n          if (isMounted) {\r\n            setErrorDetails({\r\n              type: 'admin',\r\n              message: 'Accès réservé aux administrateurs.',\r\n              suggestion: 'Contactez votre administrateur système pour obtenir les droits nécessaires.'\r\n            });\r\n            setHasAccess(false);\r\n            setPermissionLoading(false);\r\n          }\r\n          return;\r\n        }\r\n\r\n        // 3. Vérifier les permissions spécifiques\r\n        if (module && hasPermission) {\r\n          const hasModulePermission = hasPermission(module, action);\r\n          console.log(`🔍 Permission ${module}:${action} = ${hasModulePermission ? '✅' : '❌'}`);\r\n\r\n          if (!hasModulePermission) {\r\n            if (isMounted) {\r\n              setErrorDetails({\r\n                type: 'permission',\r\n                message: `Vous n'avez pas les permissions nécessaires pour ${action === 'voir' ? 'consulter' : action} ce module.`,\r\n                suggestion: `Module requis: ${module} (${action}). Contactez votre administrateur pour obtenir ces permissions.`\r\n              });\r\n              setHasAccess(false);\r\n              setPermissionLoading(false);\r\n            }\r\n            return;\r\n          }\r\n        }\r\n\r\n        // 4. Vérifier l'accès par route\r\n        if (canAccessRoute) {\r\n          const routeAccess = canAccessRoute(location.pathname);\r\n          console.log(`🚦 Accès route ${location.pathname} = ${routeAccess ? '✅' : '❌'}`);\r\n\r\n          if (!routeAccess) {\r\n            if (isMounted) {\r\n              setErrorDetails({\r\n                type: 'permission',\r\n                message: 'Vous n\\'avez pas accès à cette page.',\r\n                suggestion: 'Vérifiez que vous avez les permissions nécessaires ou contactez votre administrateur.'\r\n              });\r\n              setHasAccess(false);\r\n              setPermissionLoading(false);\r\n            }\r\n            return;\r\n          }\r\n        }\r\n\r\n        // 5. Accès autorisé\r\n        console.log('✅ Accès autorisé');\r\n        if (isMounted) {\r\n          setHasAccess(true);\r\n          setPermissionLoading(false);\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('❌ Erreur lors de la vérification des permissions:', error);\r\n        if (isMounted) {\r\n          setErrorDetails({\r\n            type: 'permission',\r\n            message: 'Erreur lors de la vérification des permissions.',\r\n            suggestion: 'Veuillez rafraîchir la page ou contacter le support technique.'\r\n          });\r\n          setHasAccess(false);\r\n          setPermissionLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Attendre que isLoading soit false avant de vérifier\r\n    if (!isLoading) {\r\n      checkPermissions();\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [\r\n    // UNIQUEMENT les valeurs primitives pour éviter les boucles\r\n    isAuthenticated, \r\n    isLoading, \r\n    module, \r\n    action, \r\n    adminOnly, \r\n    location.pathname,\r\n    currentUser?.id_acteur, // Uniquement l'ID au lieu de l'objet entier\r\n    currentUser?.nom_role\r\n  ]); // NE PAS inclure les fonctions ici\r\n\r\n  // Affichage du chargement\r\n  if (isLoading || (permissionLoading && isAuthenticated)) {\r\n    return (\r\n      <Box \r\n        display=\"flex\" \r\n        flexDirection=\"column\"\r\n        justifyContent=\"center\" \r\n        alignItems=\"center\" \r\n        minHeight=\"80vh\"\r\n        gap={2}\r\n      >\r\n        <CircularProgress size={48} />\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          Vérification des permissions...\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Redirection si non authentifié\r\n  if (!isAuthenticated) {\r\n    console.log('🔄 Redirection vers page de connexion');\r\n    return <Navigate to={fallbackUrl} state={{ from: location }} replace />;\r\n  }\r\n\r\n  // Affichage des erreurs de permission\r\n  if (!hasAccess && errorDetails) {\r\n    if (!showDetailedError) {\r\n      return <Navigate to=\"/\" replace />;\r\n    }\r\n\r\n    return (\r\n      <Container maxWidth=\"md\" sx={{ mt: 8, mb: 4 }}>\r\n        <Paper elevation={3} sx={{ p: 4, textAlign: 'center' }}>\r\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" gap={3}>\r\n            {/* Icône selon le type d'erreur */}\r\n            {errorDetails.type === 'auth' && (\r\n              <LockIcon color=\"error\" sx={{ fontSize: 64 }} />\r\n            )}\r\n            {errorDetails.type === 'admin' && (\r\n              <AdminIcon color=\"warning\" sx={{ fontSize: 64 }} />\r\n            )}\r\n            {errorDetails.type === 'permission' && (\r\n              <WarningIcon color=\"error\" sx={{ fontSize: 64 }} />\r\n            )}\r\n\r\n            {/* Message d'erreur */}\r\n            <Alert \r\n              severity={errorDetails.type === 'admin' ? 'warning' : 'error'} \r\n              sx={{ width: '100%', textAlign: 'left' }}\r\n            >\r\n              <AlertTitle>\r\n                {errorDetails.type === 'auth' && 'Authentification requise'}\r\n                {errorDetails.type === 'admin' && 'Accès administrateur requis'}\r\n                {errorDetails.type === 'permission' && 'Permissions insuffisantes'}\r\n              </AlertTitle>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                {errorDetails.message}\r\n              </Typography>\r\n              {errorDetails.suggestion && (\r\n                <Typography variant=\"body2\" sx={{ mt: 1, opacity: 0.8 }}>\r\n                  💡 {errorDetails.suggestion}\r\n                </Typography>\r\n              )}\r\n            </Alert>\r\n\r\n            {/* Actions */}\r\n            <Box display=\"flex\" gap={2} mt={2}>\r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={() => window.history.back()}\r\n                color=\"primary\"\r\n              >\r\n                Retour\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                onClick={() => window.location.href = '/'}\r\n                color=\"primary\"\r\n              >\r\n                Accueil\r\n              </Button>\r\n              {errorDetails.type === 'auth' && (\r\n                <Button \r\n                  variant=\"contained\" \r\n                  onClick={() => window.location.href = fallbackUrl}\r\n                  color=\"secondary\"\r\n                >\r\n                  Se connecter\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  // Affichage du contenu protégé\r\n  console.log('✅ Affichage du contenu protégé');\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default ProtectedRoute;","// src/App.tsx - Version corrigée avec route login\nimport React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { frFR } from '@mui/material/locale';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { fr } from 'date-fns/locale';\n\n// Contexts\nimport { AuthProvider } from './contexts/AuthContext';\nimport { ToastProvider } from './contexts/ToastContext';\n\n// Layouts\nimport MainLayout from './layouts/MainLayout';\nimport AuthLayout from './layouts/AuthLayout';\n\n// Pages d'authentification\nimport Login from './pages/auth/Login';\n\n// Pages principales\nimport Dashboard from './pages/dashboard';\nimport QuestionnaireIndex from './pages/dashboard/questionnaires';\nimport QuestionnaireDetail from './pages/dashboard/questionnaires/[id]';\nimport QuestionnaireAdmin from './pages/dashboard/questionnaires/admin';\nimport Applications from './pages/dashboard/applications';\nimport Organisations from './pages/dashboard/organisations';\nimport AnalysesInterpretations from './pages/dashboard/AnalysesInterpretations';\nimport AnalysesFonctions from './pages/dashboard/AnalysesInterpretationfunctions';\nimport CalculateScore from './pages/dashboard/CalculateScore';\nimport Forms from './pages/dashboard/forms';\nimport FormDetail from './pages/dashboard/forms/FormDetail';\nimport FormNew from './pages/dashboard/forms/FormNew';\n\n// Pages d'administration unifiées\nimport Administration from './pages/Administration';\nimport MaturityModelAdmin from './pages/MaturityModelAdmin';\n\n// Composant de protection des routes avec permissions\nimport ProtectedRoute from './components/ProtectedRoute';\n\n// Utils\nimport logger from './utils/logger';\n\n// Configuration du logger global\nif (typeof window !== 'undefined') {\n  window.onerror = (message, source, lineno, colno, error) => {\n    logger.error('Erreur globale non gérée', {\n      message,\n      source,\n      lineno,\n      colno,\n      stack: error?.stack\n    });\n    return false;\n  };\n\n  window.addEventListener('unhandledrejection', (event) => {\n    logger.error('Promesse rejetée non gérée', {\n      reason: event.reason?.message || String(event.reason),\n      stack: event.reason?.stack\n    });\n  });\n\n  (window as any).initialLoadTime = performance.now();\n}\n\n// Création du thème\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#0B4E87',\n    },\n    secondary: {\n      main: '#09C4B8',\n    },\n  },\n  typography: {\n    fontFamily: '\"Ubuntu\", sans-serif',\n  },\n  components: {\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          textTransform: 'none',\n        },\n      },\n    },\n  },\n}, frFR);\n\n// Composant de route protégée avec vérification de permissions spécifiques\ninterface PermissionRouteProps {\n  children: React.ReactNode;\n  module: string;\n  action?: string;\n  adminOnly?: boolean;\n}\n\nconst PermissionRoute: React.FC<PermissionRouteProps> = ({ \n  children, \n  module, \n  action = 'voir',\n  adminOnly = false \n}) => {\n  return (\n    <ProtectedRoute \n      module={module} \n      action={action} \n      adminOnly={adminOnly}\n      showDetailedError={true}\n    >\n      {children}\n    </ProtectedRoute>\n  );\n};\n\nconst App: React.FC = () => {\n  useEffect(() => {\n    logger.info('Application initialisée avec administration unifiée', {\n      version: import.meta.env.VITE_APP_VERSION || 'développement',\n      environment: import.meta.env.MODE,\n      features: ['unified_administration', 'enhanced_permissions']\n    });\n\n    const loadTime = performance.now() - ((window as any).initialLoadTime || 0);\n    if (loadTime > 0) {\n      logger.logPerformance('app-initial-load', loadTime);\n    }\n\n    return () => {\n      logger.flush().catch(console.error);\n    };\n  }, []);\n  \n  return (\n    <ThemeProvider theme={theme}>\n      <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={fr}>\n        <ToastProvider>\n          <AuthProvider>\n            <Router>\n              <Routes>\n                {/* === ROUTES PUBLIQUES / AUTHENTIFICATION === */}\n                <Route path=\"/auth\" element={<AuthLayout />}>\n                  <Route path=\"login\" element={<Login />} />\n                  {/* Ajoutez d'autres routes d'auth ici si nécessaire */}\n                </Route>\n\n                {/* === ROUTES PROTÉGÉES AVEC LAYOUT PRINCIPAL === */}\n                <Route \n                  path=\"/\" \n                  element={\n                    <ProtectedRoute fallbackUrl=\"/auth/login\">\n                      <MainLayout />\n                    </ProtectedRoute>\n                  }\n                >\n                  {/* Dashboard */}\n                  <Route \n                    index \n                    element={\n                      <PermissionRoute module=\"DASHBOARD\">\n                        <Dashboard />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  {/* Analyses et recommandations */}\n                  <Route \n                    path=\"analyses-interpretations\" \n                    element={\n                      <PermissionRoute module=\"ANALYSES\">\n                        <AnalysesInterpretations />\n                      </PermissionRoute>\n                    } \n                  />\n                  <Route \n                    path=\"analyses-fonctions\" \n                    element={\n                      <PermissionRoute module=\"ANALYSES\">\n                        <AnalysesFonctions />\n                      </PermissionRoute>\n                    } \n                  />\n                  <Route \n                    path=\"analyses-fonctions/:id\" \n                    element={\n                      <PermissionRoute module=\"ANALYSES\">\n                        <AnalysesFonctions />\n                      </PermissionRoute>\n                    } \n                  />\n                  <Route \n                    path=\"analyses-interpretations/:id\" \n                    element={\n                      <PermissionRoute module=\"ANALYSES\">\n                        <AnalysesInterpretations />\n                      </PermissionRoute>\n                    } \n                  />\n                  <Route \n                    path=\"analyses/calculer/:id\" \n                    element={\n                      <PermissionRoute module=\"ANALYSES\" action=\"editer\">\n                        <CalculateScore />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  {/* Applications */}\n                  <Route \n                    path=\"applications\" \n                    element={\n                      <PermissionRoute module=\"APPLICATIONS\">\n                        <Applications />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  {/* Formulaires */}\n                  <Route \n                    path=\"formulaires\" \n                    element={\n                      <PermissionRoute module=\"FORMULAIRES\">\n                        <Forms />\n                      </PermissionRoute>\n                    } \n                  />\n                  <Route \n                    path=\"formulaires/new\" \n                    element={\n                      <PermissionRoute module=\"FORMULAIRES\" action=\"editer\">\n                        <FormNew />\n                      </PermissionRoute>\n                    } \n                  />\n                  <Route \n                    path=\"formulaires/:id\" \n                    element={\n                      <PermissionRoute module=\"FORMULAIRES\">\n                        <FormDetail />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  {/* Questionnaires */}\n                  <Route \n                    path=\"questionnaires\" \n                    element={\n                      <PermissionRoute module=\"QUESTIONNAIRES\">\n                        <QuestionnaireIndex />\n                      </PermissionRoute>\n                    } \n                  />\n                  <Route \n                    path=\"questionnaires/:id\" \n                    element={\n                      <PermissionRoute module=\"QUESTIONNAIRES\">\n                        <QuestionnaireDetail />\n                      </PermissionRoute>\n                    } \n                  />\n                  <Route \n                    path=\"questionnaires/admin\" \n                    element={\n                      <PermissionRoute module=\"QUESTIONNAIRES\" action=\"administrer\">\n                        <QuestionnaireAdmin />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  {/* Organisations/Entreprises */}\n                  <Route \n                    path=\"organisations\" \n                    element={\n                      <PermissionRoute module=\"ENTREPRISES\">\n                        <Organisations />\n                      </PermissionRoute>\n                    } \n                  />\n                  <Route \n                    path=\"organisations/:name\" \n                    element={\n                      <PermissionRoute module=\"ENTREPRISES\">\n                        <Organisations />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  {/* === ROUTES D'ADMINISTRATION UNIFIÉES === */}\n                  \n                  <Route \n                    path=\"admin\" \n                    element={\n                      <PermissionRoute module=\"ADMINISTRATION\" adminOnly={true}>\n                        <Administration />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  <Route \n                    path=\"admin/users\" \n                    element={\n                      <PermissionRoute module=\"ADMIN_USERS\" adminOnly={true}>\n                        <Administration />\n                      </PermissionRoute>\n                    } \n                  />\n                  \n                  <Route \n                    path=\"admin/users/:id\" \n                    element={\n                      <PermissionRoute module=\"ADMIN_USERS\" adminOnly={true}>\n                        <Administration />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  <Route \n                    path=\"admin/permissions\" \n                    element={\n                      <PermissionRoute module=\"ADMIN_PERMISSIONS\" adminOnly={true}>\n                        <Administration />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  <Route \n                    path=\"admin/roles\" \n                    element={\n                      <PermissionRoute module=\"ADMIN_ROLES\" adminOnly={true}>\n                        <Administration />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  <Route \n                    path=\"admin/maturity-model\" \n                    element={\n                      <PermissionRoute module=\"ADMIN_MATURITY\" adminOnly={true}>\n                        <MaturityModelAdmin />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  <Route \n                    path=\"admin/system\" \n                    element={\n                      <PermissionRoute module=\"ADMIN_SYSTEM\" adminOnly={true}>\n                        <Administration />\n                      </PermissionRoute>\n                    } \n                  />\n\n                  {/* === REDIRECTIONS POUR RÉTROCOMPATIBILITÉ === */}\n                  <Route \n                    path=\"users\" \n                    element={<Navigate to=\"/admin/users\" replace />} \n                  />\n                  <Route \n                    path=\"users/:id\" \n                    element={<Navigate to=\"/admin/users\" replace />} \n                  />\n                  <Route \n                    path=\"permissions\" \n                    element={<Navigate to=\"/admin/permissions\" replace />} \n                  />\n                </Route>\n                \n                {/* === REDIRECTIONS VERS LOGIN === */}\n                <Route path=\"/login\" element={<Navigate to=\"/auth/login\" replace />} />\n                <Route path=\"*\" element={<Navigate to=\"/auth/login\" replace />} />\n              </Routes>\n            </Router>\n          </AuthProvider>\n        </ToastProvider>\n      </LocalizationProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n//import { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { ToastProvider } from './contexts/ToastContext';\nimport './index.css';\n\n// Configure React Router v6 with v7 transitions\nwindow.__reactRouterVersion = {\n  v7_startTransition: true,\n};\n\n// Fonction pour masquer le splash screen\nconst hideSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen');\n  if (splashScreen) {\n    // D'abord on réduit l'opacité\n    splashScreen.style.opacity = '0';\n    \n    // Puis on le retire complètement après la transition\n    setTimeout(() => {\n      splashScreen.style.display = 'none';\n    }, 500); // Correspond à la durée de transition dans le CSS\n  }\n};\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n      <ToastProvider>\n      <App />\n      </ToastProvider>\n    </React.StrictMode>\n);\n\nsetTimeout(hideSplashScreen, 1000);"],"names":["defaultConfig","LOG_LEVEL_ORDER","Logger","customConfig","__publicField","sessionId","event","_a","_b","force","logsToSend","metadata","response","error","level","message","details","logEntry","newConfig","action","path","operation","durationMs","endpoint","method","status","logger","API_URL","API_PREFIX","apiClient","axios","config","token","logData","dataString","errorMessage","errorStack","duration","calculateRequestDuration","url","_c","errorData","_d","_e","_f","normalizePath","withPerformanceLogging","extraDetails","normalizedUrl","startTime","result","api","data","formData","ALL_APP_MODULES","AuthContext","createContext","useAuth","useContext","AuthProvider","children","currentUser","setCurrentUser","useState","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","setError","permissions","setPermissions","hasGlobalAccess","setHasGlobalAccess","isUserAdmin","useCallback","user","isUserSuperAdmin","generateFullAdminPermissions","module","mainPermission","sousModule","getDefaultPermissionsForRole","nomRole","niveauAcces","basePermissions","p","checkAuthStatus","permissionsResponse","err","login","email","password","logout","register","userData","forgotPassword","updateProfile","isAdmin","isSuperAdmin","hasPermission","permission","sp","canAccessRoute","route","cleanRoute","routeToModuleMap","moduleForRoute","routePath","moduleName","canAccessAdminModule","subModule","getAccessibleModules","getAdminSubModules","adminModule","adminPermission","refreshPermissions","getAllAppModules","useEffect","value","jsxDEV","this","Toast","type","onClose","isVisible","setIsVisible","timer","bgColorClass","iconMap","ToastContext","ToastProvider","toasts","setToasts","addToast","id","prevToasts","removeToast","toast","drawerWidth","MainLayout","theme","useTheme","isMobile","useMediaQuery","open","setOpen","adminMenuOpen","setAdminMenuOpen","navigate","useNavigate","location","useLocation","menuItems","DashboardIcon","AssessmentIcon","ComputerIcon","AssignmentIcon","QuestionIcon","Fragment","AdminIcon","PeopleIcon","SecurityIcon","MaturityIcon","SettingsIcon","handleDrawerToggle","handleNavigate","handleAdminMenuToggle","handleLogout","isMenuItemAccessible","item","isMenuItemActive","isAdminMenuActive","renderMenuItem","isSubItem","Divider","isActive","hasSubItems","ListItem","ListItemButton","ListItemIcon","ListItemText","Box","Typography","Chip","ExpandLess","ExpandMore","renderAdminSubItems","adminItem","Collapse","List","subItem","React","CssBaseline","AppBar","Toolbar","IconButton","MenuIcon","Badge","LogoutIcon","Drawer","ChevronLeftIcon","Outlet","AuthLayout","Link","Login","setFormData","localError","setLocalError","isSubmitting","setIsSubmitting","from","handleChange","name","checked","prev","handleSubmit","Container","CircularProgress","Paper","Alert","TextField","FormControlLabel","Checkbox","Button","COLORS","Dashboard","loading","setLoading","entreprises","setEntreprises","secteurs","setSecteurs","fonctions","setFonctions","applications","setApplications","formulaires","setFormulaires","searchTerm","setSearchTerm","hebergementFilter","setHebergementFilter","technologieFilter","setTechnologieFilter","tabValue","setTabValue","hebergementOptions","setHebergementOptions","technologieOptions","setTechnologieOptions","entreprisesResponse","fonctionsResponse","applicationsResponse","formulairesResponse","entreprisesData","secteursData","calculerStatistiquesSecteur","fonctionsData","applicationsData","app","hebergements","technologies","formulairesData","secteursMap","acc","entreprise","secteur","nom","scoreTotal","count","a","b","countFormulairesByFunction","countByFunction","form","fonction","getFilteredApplications","scoreA","handleTabChange","newValue","CustomTooltip","active","payload","label","getScoreColor","score","Grid","Card","CardContent","Avatar","BusinessIcon","DescriptionIcon","ResponsiveContainer","BarChart","CartesianGrid","XAxis","YAxis","Tooltip","Legend","Bar","entry","index","Cell","PieChart","Pie","e","InputAdornment","SearchIcon","CardHeader","FormControl","InputLabel","Select","MenuItem","option","Tabs","Tab","Table","TableHead","TableRow","TableCell","TableBody","QuestionnairesIndex","questionnaires","setQuestionnaires","questionnaireStats","setQuestionnaireStats","fetchQuestionnaires","questionnaireData","normalizedQuestionnaires","q","statsResponse","statsData","statsObj","stat","handleViewQuestionnaire","questionnaire","handleGoToAdmin","formatDate","dateString","getStats","questionnaireId","statType","AddIcon","TableContainer","ExpandMoreIcon","QuestionnaireDetail","useParams","setQuestionnaire","questions","setQuestions","stats","setStats","fetchQuestionnaireData","questionnaireResponse","questionsResponse","questionsData","questionsError","statsError","handleBackToList","sortedQuestions","ArrowBackIcon","EditIcon","question","Accordion","AccordionSummary","AccordionDetails","TabPanel","props","other","initialQuestionnaireFormValues","initialQuestionFormValues","QuestionnaireAdmin","searchParams","useSearchParams","selectedQuestionnaire","setSelectedQuestionnaire","loadingFonctions","setLoadingFonctions","questionnaireFormValues","setQuestionnaireFormValues","questionFormValues","setQuestionFormValues","openQuestionnaireDialog","setOpenQuestionnaireDialog","openQuestionDialog","setOpenQuestionDialog","openDeleteDialog","setOpenDeleteDialog","openDeleteQuestionDialog","setOpenDeleteQuestionDialog","currentQuestion","setCurrentQuestion","snackbar","setSnackbar","dialogMode","setDialogMode","questionDialogMode","setQuestionDialogMode","fetchQuestionnaireById","fetchFonctions","showSnackbar","handleOpenCreateQuestionnaireDialog","handleOpenEditQuestionnaireDialog","handleCloseQuestionnaireDialog","handleQuestionnaireFormChange","handleSubmitQuestionnaire","newId","handleOpenDeleteDialog","handleCloseDeleteDialog","handleDeleteQuestionnaire","handleSelectQuestionnaire","handleOpenCreateQuestionDialog","handleOpenEditQuestionDialog","handleCloseQuestionDialog","handleQuestionFormChange","handleSubmitQuestion","questionData","handleOpenDeleteQuestionDialog","handleCloseDeleteQuestionDialog","handleDeleteQuestion","handleCloneQuestionnaire","newQuestionnaireData","newQuestionnaireResponse","newQuestionnaireId","questionsToClone","questionError","handleReorderQuestion","newOrder","severity","handleCloseSnackbar","ListItemSecondaryAction","CloneIcon","DeleteIcon","DragIcon","Dialog","DialogTitle","DialogContent","FormHelperText","DialogActions","SaveIcon","Snackbar","CloseIcon","DatePickerWrapper","onChange","minDate","maxDate","disabled","fullWidth","required","helperText","textFieldProps","LocalizationProvider","AdapterDateFns","fr","DatePicker","initialFormValues","Applications","openDialog","setOpenDialog","currentApplication","setCurrentApplication","formValues","setFormValues","deleteConfirmOpen","setDeleteConfirmOpen","selectedDate","setSelectedDate","fetchApplications","handleOpenCreateDialog","handleOpenEditDialog","application","handleCloseDialog","handleFormChange","handleDateChange","date","formattedDate","handleOpenDeleteConfirm","handleCloseDeleteConfirm","handleDelete","handleCalculateScore","Organisations","organisations","setOrganisations","analyses","setAnalyses","scoresMoyens","setScoresMoyens","selectedOrganisation","setSelectedOrganisation","fetchOrganisations","fetchAnalysesOrganisation","orgs","acteur","organisationsData","org","appCount","sum","analyse","scoreMoyen","orgName","analysesResponse","scoresMoyensResponse","handleOrganisationChange","formatForRadarChart","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","Radar","niveau","percentage","normalizeAnalyse","score_global","thematiques","getNiveauColor","StatCard","title","variant","size","subtitle","trend","getVariantClasses","getSizeClasses","variantClasses","sizeClasses","getNiveauLabel","EntrepriseScoresPanel","entrepriseId","setEntreprise","historique","setHistorique","updatingScore","setUpdatingScore","fetchEntrepriseData","entrepriseData","historiqueResponse","recalculateScore","prepareChartData","scoreGlobal","niveauLabel","niveauColor","chartData","RefreshIcon","LineChart","RechartsTooltip","Line","AnalysesInterpretationsUI","selectedApplication","selectedEntreprise","selectedAnalyse","interpretation","filteredHistorique","selectedThematique","newAnalyseData","interpretationsSummary","page","rowsPerPage","order","orderBy","filters","showFilters","uniqueThematiques","handleApplicationChange","handleEntrepriseChange","handleAnalyseChange","handleThematiqueChange","handleOpenNewAnalyseDialog","addThematique","updateThematique","removeThematique","createNewAnalyse","calculateNewAnalyse","getScoreGlobal","prepareHistoriqueData","handleChangePage","handleChangeRowsPerPage","handleRequestSort","getFilteredData","getUniqueValues","setFilters","setShowFilters","fetchAllInterpretations","fetchAnalysesByApplication","fetchAnalysesByEntreprise","fetchHistoriqueByEntreprise","viewMode","setViewMode","toggleViewMode","appsOfEntreprise","CustomRadarTooltip","ToggleButtonGroup","newMode","ToggleButton","AppsTwoToneIcon","CalculateIcon","Autocomplete","params","FilterListIcon","TableSortLabel","entrepriseName","TablePagination","to","AnalysesInterpretations","setSelectedApplication","setSelectedAnalyse","setInterpretation","setSelectedEntreprise","setSelectedThematique","setNewAnalyseData","setInterpretationsSummary","setPage","setRowsPerPage","setOrder","setOrderBy","interpretationsResponse","appEntrepriseMapResponse","interpretationsData","appToEntrepriseMap","mapping","appId","appsResponse","entrepriseResponse","uniqueThemes","normalizedAnalyses","latestAnalyse","fetchInterpretation","fetchHistorique","analyseId","formattedInterpretation","filteredInterpretations","normalizedAnalyse","field","updatedThematiques","_","i","newPage","property","filteredData","row","searchLower","appNameMatch","niveauMatch","orgMatch","valueA","valueB","strA","strB","formatScore","AnalysesFonctions","entrepriseDetails","setEntrepriseDetails","selectedFonction","setSelectedFonction","fonctionDetails","setFonctionDetails","fetchEntreprises","fetchEntrepriseDetails","f","sortedEntreprises","handleFonctionChange","fonctionId","convertToRadarData","CalculateScore","calculating","setCalculating","success","setSuccess","setApplication","activeStep","setActiveStep","steps","appResponse","formResponse","formsData","resolve","canCalculateScore","Stepper","Step","StepLabel","Forms","statusFilter","setStatusFilter","fonctionFilter","setFonctionFilter","entrepriseFilter","setEntrepriseFilter","refreshing","setRefreshing","fetchData","normalizedFormulaires","handleRefresh","filteredFormulaires","matchesSearch","matchesStatus","matchesFonction","matchesEntreprise","paginatedFormulaires","comparison","getStatusColor","getProgressColor","progress","uniqueFonctions","statsByEntreprise","formsByEntreprise","validatedCount","statsByFonction","formsByFonction","ent","LinearProgress","VisibilityIcon","FormDetail","saving","setSaving","formulaire","setFormulaire","reponses","setReponses","currentStep","setCurrentStep","openConfirmDialog","setOpenConfirmDialog","questionsPerStep","formulaireResponse","formulaireData","normalizedFormulaire","normalizedQuestions","reponsesResponse","reponsesData","normalizedReponses","r","totalSteps","currentStepQuestions","isCurrentStepComplete","reponse","isFormComplete","progression","handleNextStep","handlePrevStep","findReponse","questionId","updateReponse","existingReponseIndex","updatedReponses","newReponse","updateCommentaire","commentaire","handleConfirmAction","handleCloseConfirmDialog","saveFormulaire","newStatus","existingResponses","existingResponsesResult","savePromises","existingReponse","updateResponse","putError","createResponse","postError","refreshedResponsesResult","refreshedResponses","refreshedReponse","fallbackUpdateResponse","refreshError","failedSaves","getStatusInfo","commentCount","criticalQuestions","statusInfo","Breadcrumbs","HomeIcon","WarningIcon","CommentIcon","FunctionIcon","InfoIcon","PersonIcon","isHighPriority","isCritical","RadioGroup","Radio","SendIcon","CheckIcon","DialogContentText","FormNew","submitting","setSubmitting","acteurs","setActeurs","validation","setValidation","filteredActeurs","setFilteredActeurs","filteredQuestionnaires","setFilteredQuestionnaires","acteursResponse","acteursData","questionnairesResponse","questionnairesData","filtered","validateCurrentStep","isValid","newValidation","validateForm","handleNext","prevActiveStep","handleBack","matchingQuestionnaire","id_entreprise","id_fonction","submitData","dataToSubmit","formId","getStepContent","step","renderSummary","Administration","getInitialTab","roles","setRoles","modules","setModules","rolePermissions","setRolePermissions","openActeurDialog","setOpenActeurDialog","openRoleDialog","setOpenRoleDialog","openPermissionDialog","setOpenPermissionDialog","acteurFormValues","setActeurFormValues","roleFormValues","setRoleFormValues","selectedItem","setSelectedItem","selectedRole","setSelectedRole","loadInitialData","currentPath","loadActeurs","loadRoles","loadModules","loadRolePermissions","roleId","handleCreateActeur","handleEditActeur","handleCreateRole","handleEditRole","role","handleSubmitActeur","handleSubmitRole","handleDeleteItem","getRoleLabel","nom_role","SuperAdminIcon","ShieldIcon","GroupIcon","canManageUser","roleInfo","canManage","perm","MaturityModelAdmin","dialogOpen","setDialogOpen","dialogType","setDialogType","editingItem","setEditingItem","itemToDelete","setItemToDelete","loadFonctions","loadFonctionDetails","closeDialog","confirmDelete","handleSave","id_thematique","exportModel","dataStr","dataUri","exportFileDefaultName","linkElement","renderDialog","getDialogTitle","them","DownloadIcon","CategoryIcon","TrendingUpIcon","v","ProtectedRoute","adminOnly","fallbackUrl","showDetailedError","permissionLoading","setPermissionLoading","hasAccess","setHasAccess","errorDetails","setErrorDetails","isMounted","hasModulePermission","routeAccess","LockIcon","AlertTitle","Navigate","source","lineno","colno","createTheme","frFR","PermissionRoute","App","loadTime","ThemeProvider","Router","Routes","Route","QuestionnaireIndex","hideSplashScreen","splashScreen","ReactDOM"],"mappings":"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"}