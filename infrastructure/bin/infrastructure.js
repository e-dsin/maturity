#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const backend_stack_1 = require("../lib/backend-stack");
const app = new cdk.App();
// Configuration par environnement
const environments = {
    dev: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: 'eu-west-1',
        domainName: 'e-dsin.fr',
        hostedZoneId: 'Z03909371P12UQ4UA00F0',
        hostedZoneName: 'e-dsin.fr',
        certificateArn: 'arn:aws:acm:eu-west-1:637423285771:certificate/cf6a160d-877c-428c-bf0a-8a5f75faabfc',
    },
    prod: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: 'eu-west-1',
        domainName: 'e-dsin.fr',
        hostedZoneId: 'Z03909371P12UQ4UA00F0',
        hostedZoneName: 'e-dsin.fr',
        certificateArn: 'arn:aws:acm:eu-west-1:637423285771:certificate/cf6a160d-877c-428c-bf0a-8a5f75faabfc',
    }
};
// R√©cup√©rer l'environnement
const envName = process.env.ENVIRONMENT || 'dev';
const config = environments[envName];
if (!config) {
    throw new Error(`Environment ${envName} not found`);
}
if (!config.account) {
    throw new Error('CDK_DEFAULT_ACCOUNT environment variable is required');
}
console.log(`üöÄ Deploying Maturity Backend - Environment: ${envName}`);
console.log(`üìç Region: ${config.region}`);
console.log(`üèóÔ∏è Account: ${config.account}`);
// Cr√©ation du stack avec les nouveaux param√®tres
new backend_stack_1.BackendStack(app, `MaturityBackend-${envName}`, {
    env: {
        account: config.account,
        region: config.region,
    },
    environment: envName,
    domainName: config.domainName,
    hostedZoneId: config.hostedZoneId,
    hostedZoneName: config.hostedZoneName,
    certificateArn: config.certificateArn,
    description: `Maturity Assessment Backend Infrastructure - ${envName}`,
    tags: {
        Project: 'MaturityAssessment',
        Environment: envName,
        Owner: 'DSIN',
    },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mcmFzdHJ1Y3R1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmZyYXN0cnVjdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx1Q0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DLHdEQUFvRDtBQUVwRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixrQ0FBa0M7QUFDbEMsTUFBTSxZQUFZLEdBQUc7SUFDbkIsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CO1FBQ3hDLE1BQU0sRUFBRSxXQUFXO1FBQ25CLFVBQVUsRUFBRSxXQUFXO1FBQ3ZCLFlBQVksRUFBRSx1QkFBdUI7UUFDckMsY0FBYyxFQUFFLFdBQVc7UUFDM0IsY0FBYyxFQUFFLHFGQUFxRjtLQUN0RztJQUNELElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtRQUN4QyxNQUFNLEVBQUUsV0FBVztRQUNuQixVQUFVLEVBQUUsV0FBVztRQUN2QixZQUFZLEVBQUUsdUJBQXVCO1FBQ3JDLGNBQWMsRUFBRSxXQUFXO1FBQzNCLGNBQWMsRUFBRSxxRkFBcUY7S0FDdEc7Q0FDRixDQUFDO0FBRUYsNEJBQTRCO0FBQzVCLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQztBQUNqRCxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsT0FBb0MsQ0FBQyxDQUFDO0FBRWxFLElBQUksQ0FBQyxNQUFNLEVBQUU7SUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsT0FBTyxZQUFZLENBQUMsQ0FBQztDQUNyRDtBQUVELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztDQUN6RTtBQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0RBQWdELE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDdkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBRTlDLGlEQUFpRDtBQUNqRCxJQUFJLDRCQUFZLENBQUMsR0FBRyxFQUFFLG1CQUFtQixPQUFPLEVBQUUsRUFBRTtJQUNsRCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU87UUFDdkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO0tBQ3RCO0lBQ0QsV0FBVyxFQUFFLE9BQU87SUFDcEIsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVO0lBQzdCLFlBQVksRUFBRSxNQUFNLENBQUMsWUFBWTtJQUNqQyxjQUFjLEVBQUUsTUFBTSxDQUFDLGNBQWM7SUFDckMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxjQUFjO0lBQ3JDLFdBQVcsRUFBRSxnREFBZ0QsT0FBTyxFQUFFO0lBQ3RFLElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsV0FBVyxFQUFFLE9BQU87UUFDcEIsS0FBSyxFQUFFLE1BQU07S0FDZDtDQUNGLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcclxuaW1wb3J0ICdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInO1xyXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xyXG5pbXBvcnQgeyBCYWNrZW5kU3RhY2sgfSBmcm9tICcuLi9saWIvYmFja2VuZC1zdGFjayc7XHJcblxyXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xyXG5cclxuLy8gQ29uZmlndXJhdGlvbiBwYXIgZW52aXJvbm5lbWVudFxyXG5jb25zdCBlbnZpcm9ubWVudHMgPSB7XHJcbiAgZGV2OiB7XHJcbiAgICBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULFxyXG4gICAgcmVnaW9uOiAnZXUtd2VzdC0xJyxcclxuICAgIGRvbWFpbk5hbWU6ICdlLWRzaW4uZnInLFxyXG4gICAgaG9zdGVkWm9uZUlkOiAnWjAzOTA5MzcxUDEyVVE0VUEwMEYwJyxcclxuICAgIGhvc3RlZFpvbmVOYW1lOiAnZS1kc2luLmZyJyxcclxuICAgIGNlcnRpZmljYXRlQXJuOiAnYXJuOmF3czphY206ZXUtd2VzdC0xOjYzNzQyMzI4NTc3MTpjZXJ0aWZpY2F0ZS9jZjZhMTYwZC04NzdjLTQyOGMtYmYwYS04YTVmNzVmYWFiZmMnLFxyXG4gIH0sXHJcbiAgcHJvZDoge1xyXG4gICAgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCxcclxuICAgIHJlZ2lvbjogJ2V1LXdlc3QtMScsXHJcbiAgICBkb21haW5OYW1lOiAnZS1kc2luLmZyJyxcclxuICAgIGhvc3RlZFpvbmVJZDogJ1owMzkwOTM3MVAxMlVRNFVBMDBGMCcsXHJcbiAgICBob3N0ZWRab25lTmFtZTogJ2UtZHNpbi5mcicsXHJcbiAgICBjZXJ0aWZpY2F0ZUFybjogJ2Fybjphd3M6YWNtOmV1LXdlc3QtMTo2Mzc0MjMyODU3NzE6Y2VydGlmaWNhdGUvY2Y2YTE2MGQtODc3Yy00MjhjLWJmMGEtOGE1Zjc1ZmFhYmZjJyxcclxuICB9XHJcbn07XHJcblxyXG4vLyBSw6ljdXDDqXJlciBsJ2Vudmlyb25uZW1lbnRcclxuY29uc3QgZW52TmFtZSA9IHByb2Nlc3MuZW52LkVOVklST05NRU5UIHx8ICdkZXYnO1xyXG5jb25zdCBjb25maWcgPSBlbnZpcm9ubWVudHNbZW52TmFtZSBhcyBrZXlvZiB0eXBlb2YgZW52aXJvbm1lbnRzXTtcclxuXHJcbmlmICghY29uZmlnKSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKGBFbnZpcm9ubWVudCAke2Vudk5hbWV9IG5vdCBmb3VuZGApO1xyXG59XHJcblxyXG5pZiAoIWNvbmZpZy5hY2NvdW50KSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKCdDREtfREVGQVVMVF9BQ0NPVU5UIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHJlcXVpcmVkJyk7XHJcbn1cclxuXHJcbmNvbnNvbGUubG9nKGDwn5qAIERlcGxveWluZyBNYXR1cml0eSBCYWNrZW5kIC0gRW52aXJvbm1lbnQ6ICR7ZW52TmFtZX1gKTtcclxuY29uc29sZS5sb2coYPCfk40gUmVnaW9uOiAke2NvbmZpZy5yZWdpb259YCk7XHJcbmNvbnNvbGUubG9nKGDwn4+X77iPIEFjY291bnQ6ICR7Y29uZmlnLmFjY291bnR9YCk7XHJcblxyXG4vLyBDcsOpYXRpb24gZHUgc3RhY2sgYXZlYyBsZXMgbm91dmVhdXggcGFyYW3DqHRyZXNcclxubmV3IEJhY2tlbmRTdGFjayhhcHAsIGBNYXR1cml0eUJhY2tlbmQtJHtlbnZOYW1lfWAsIHtcclxuICBlbnY6IHtcclxuICAgIGFjY291bnQ6IGNvbmZpZy5hY2NvdW50LFxyXG4gICAgcmVnaW9uOiBjb25maWcucmVnaW9uLFxyXG4gIH0sXHJcbiAgZW52aXJvbm1lbnQ6IGVudk5hbWUsXHJcbiAgZG9tYWluTmFtZTogY29uZmlnLmRvbWFpbk5hbWUsXHJcbiAgaG9zdGVkWm9uZUlkOiBjb25maWcuaG9zdGVkWm9uZUlkLCAgICAgICAgLy8g4oaQIE5vdXZlYXUgZm9ybWF0XHJcbiAgaG9zdGVkWm9uZU5hbWU6IGNvbmZpZy5ob3N0ZWRab25lTmFtZSwgICAgLy8g4oaQIE5vdXZlYXUgZm9ybWF0XHJcbiAgY2VydGlmaWNhdGVBcm46IGNvbmZpZy5jZXJ0aWZpY2F0ZUFybiwgICAvLyDihpAgTm91dmVhdSBmb3JtYXRcclxuICBkZXNjcmlwdGlvbjogYE1hdHVyaXR5IEFzc2Vzc21lbnQgQmFja2VuZCBJbmZyYXN0cnVjdHVyZSAtICR7ZW52TmFtZX1gLFxyXG4gIHRhZ3M6IHtcclxuICAgIFByb2plY3Q6ICdNYXR1cml0eUFzc2Vzc21lbnQnLFxyXG4gICAgRW52aXJvbm1lbnQ6IGVudk5hbWUsXHJcbiAgICBPd25lcjogJ0RTSU4nLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuYXBwLnN5bnRoKCk7Il19