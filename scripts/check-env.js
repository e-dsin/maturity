// scripts/check-env.js
require('dotenv').config();
const crypto = require('crypto');

console.log('üîç V√©rification de la configuration d\'environnement...\n');

// V√©rifications de base de donn√©es
console.log('üìä Configuration de la base de donn√©es:');
console.log('   DB_HOST:', process.env.DB_HOST || '‚ùå Non d√©fini (d√©faut: localhost)');
console.log('   DB_PORT:', process.env.DB_PORT || '‚ùå Non d√©fini (d√©faut: 3306)');
console.log('   DB_USER:', process.env.DB_USER || '‚ùå Non d√©fini');
console.log('   DB_PASSWORD:', process.env.DB_PASSWORD ? '‚úÖ D√©fini' : '‚ùå Non d√©fini');
console.log('   DB_NAME:', process.env.DB_NAME || '‚ùå Non d√©fini');

console.log('');

// V√©rifications JWT
console.log('üîê Configuration JWT:');
const jwtSecret = process.env.JWT_SECRET;
if (jwtSecret) {
  if (jwtSecret.length >= 32) {
    console.log('   JWT_SECRET: ‚úÖ D√©fini et s√©curis√© (' + jwtSecret.length + ' caract√®res)');
  } else {
    console.log('   JWT_SECRET: ‚ö†Ô∏è  D√©fini mais trop court (' + jwtSecret.length + ' caract√®res, minimum 32 recommand√©)');
  }
} else {
  console.log('   JWT_SECRET: ‚ùå Non d√©fini');
  console.log('   üí° G√©n√©rez une cl√© avec: node -e "console.log(require(\'crypto\').randomBytes(32).toString(\'hex\'))"');
}

console.log('   JWT_EXPIRATION:', process.env.JWT_EXPIRATION || '‚ùå Non d√©fini (d√©faut: 24h)');

console.log('');

// V√©rifications admin
console.log('üë§ Configuration administrateur:');
console.log('   ADMIN_EMAIL:', process.env.ADMIN_EMAIL || '‚ùå Non d√©fini (d√©faut: admin@qwanza.fr)');
console.log('   ADMIN_PASSWORD:', process.env.ADMIN_PASSWORD ? '‚úÖ D√©fini' : '‚ùå Non d√©fini (d√©faut: AdminQwanza2025!)');
console.log('   ADMIN_NAME:', process.env.ADMIN_NAME || '‚ùå Non d√©fini (d√©faut: Administrateur Syst√®me)');

console.log('');

// V√©rifications application
console.log('üöÄ Configuration application:');
console.log('   NODE_ENV:', process.env.NODE_ENV || '‚ùå Non d√©fini (d√©faut: development)');
console.log('   PORT:', process.env.PORT || '‚ùå Non d√©fini (d√©faut: 5000)');
console.log('   CLIENT_URL:', process.env.CLIENT_URL || '‚ùå Non d√©fini (d√©faut: http://localhost:3000)');

console.log('');

// G√©n√©rer des valeurs manquantes
console.log('üîß Valeurs sugg√©r√©es pour les variables manquantes:');

if (!jwtSecret || jwtSecret.length < 32) {
  const newJwtSecret = crypto.randomBytes(32).toString('hex');
  console.log('JWT_SECRET=' + newJwtSecret);
}

if (!process.env.ADMIN_PASSWORD) {
  console.log('ADMIN_PASSWORD=AdminQwanza2025!');
}

if (!process.env.JWT_EXPIRATION) {
  console.log('JWT_EXPIRATION=24h');
}

if (!process.env.CLIENT_URL) {
  console.log('CLIENT_URL=http://localhost:3000');
}

console.log('');

// R√©sum√©
let criticalIssues = 0;

if (!process.env.DB_USER) criticalIssues++;
if (!process.env.DB_PASSWORD) criticalIssues++;
if (!process.env.DB_NAME) criticalIssues++;
if (!jwtSecret || jwtSecret.length < 32) criticalIssues++;

if (criticalIssues === 0) {
  console.log('‚úÖ Configuration pr√™te pour le d√©ploiement!');
} else {
  console.log(`‚ö†Ô∏è  ${criticalIssues} probl√®me(s) critique(s) √† corriger avant le d√©ploiement.`);
}

console.log('');
console.log('üìã Prochaines √©tapes:');
console.log('1. Copiez les valeurs sugg√©r√©es dans votre fichier .env');
console.log('2. Ex√©cutez: node scripts/setup-local-auth-mariadb.js');
console.log('3. Cr√©ez les fichiers d\'authentification');
console.log('4. D√©marrez le serveur');