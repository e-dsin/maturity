#!/bin/bash

# Script de migration de base de donn√©es
set -e

# Configuration
ENVIRONMENT=${1:-dev}
AWS_REGION="eu-west-1"

echo "üóÑÔ∏è  Migration de base de donn√©es - Environnement: $ENVIRONMENT"

# Chargement des variables d'environnement
if [ -f .env.$ENVIRONMENT ]; then
    source .env.$ENVIRONMENT
else
    echo "‚ùå Fichier .env.$ENVIRONMENT non trouv√©"
    echo "üí° Ex√©cutez d'abord: ./deploy-backend.sh $ENVIRONMENT"
    exit 1
fi

# V√©rification des variables requises
if [ -z "$DATABASE_SECRET_ARN" ] || [ -z "$DATABASE_ENDPOINT" ]; then
    echo "‚ùå Variables de base de donn√©es non d√©finies"
    exit 1
fi

echo "üìç Endpoint BDD: $DATABASE_ENDPOINT"
echo "üîê Secret ARN: $DATABASE_SECRET_ARN"

# R√©cup√©ration des credentials depuis Secrets Manager
echo "üîë R√©cup√©ration des credentials..."
DB_CREDENTIALS=$(aws secretsmanager get-secret-value \
    --secret-id $DATABASE_SECRET_ARN \
    --region $AWS_REGION \
    --query SecretString --output text)

DB_USER=$(echo $DB_CREDENTIALS | jq -r .username)
DB_PASSWORD=$(echo $DB_CREDENTIALS | jq -r .password)

if [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ]; then
    echo "‚ùå Impossible de r√©cup√©rer les credentials"
    exit 1
fi

echo "‚úÖ Credentials r√©cup√©r√©s"

# V√©rification de la connectivit√©
echo "üîå Test de connectivit√© √† la base de donn√©es..."
if ! mysql -h $DATABASE_ENDPOINT -u $DB_USER -p$DB_PASSWORD -e "SELECT 1;" 2>/dev/null; then
    echo "‚ùå Impossible de se connecter √† la base de donn√©es"
    echo "üí° V√©rifiez que vous √™tes dans le bon r√©seau (VPN ou bastion host)"
    exit 1
fi

echo "‚úÖ Connectivit√© confirm√©e"

# R√©pertoire des scripts SQL
SQL_DIR="../server/database"
if [ ! -d "$SQL_DIR" ]; then
    echo "‚ùå R√©pertoire $SQL_DIR non trouv√©"
    exit 1
fi

# Liste des scripts √† ex√©cuter dans l'ordre
SCRIPTS=(
    "schema-fixed.sql"
    "seed-functions.sql"
    "seed-grille-interpretation.sql"
    "seed-sample-data.sql"
)

echo "üìù Ex√©cution des scripts de migration..."

for script in "${SCRIPTS[@]}"; do
    if [ -f "$SQL_DIR/$script" ]; then
        echo "‚è≥ Ex√©cution de $script..."
        mysql -h $DATABASE_ENDPOINT \
              -u $DB_USER \
              -p$DB_PASSWORD \
              maturity_assessment < "$SQL_DIR/$script"
        echo "‚úÖ $script ex√©cut√© avec succ√®s"
    else
        echo "‚ö†Ô∏è  Script $script non trouv√©, ignor√©"
    fi
done

# V√©rification de la migration
echo "üîç V√©rification de la migration..."

TABLES=$(mysql -h $DATABASE_ENDPOINT \
               -u $DB_USER \
               -p$DB_PASSWORD \
               -D maturity_assessment \
               -e "SHOW TABLES;" -s -N | wc -l)

echo "üìä Nombre de tables cr√©√©es: $TABLES"

if [ $TABLES -gt 0 ]; then
    echo "‚úÖ Migration r√©ussie!"
    
    # Affichage des tables cr√©√©es
    echo ""
    echo "üìã Tables cr√©√©es:"
    mysql -h $DATABASE_ENDPOINT \
          -u $DB_USER \
          -p$DB_PASSWORD \
          -D maturity_assessment \
          -e "SHOW TABLES;" | column -t
else
    echo "‚ùå Aucune table trouv√©e, la migration a √©chou√©"
    exit 1
fi

# Test des donn√©es de base
echo ""
echo "üß™ V√©rification des donn√©es de base..."

FONCTIONS_COUNT=$(mysql -h $DATABASE_ENDPOINT \
                        -u $DB_USER \
                        -p$DB_PASSWORD \
                        -D maturity_assessment \
                        -e "SELECT COUNT(*) FROM fonctions;" -s -N)

GRILLE_COUNT=$(mysql -h $DATABASE_ENDPOINT \
                     -u $DB_USER \
                     -p$DB_PASSWORD \
                     -D maturity_assessment \
                     -e "SELECT COUNT(*) FROM grille_interpretation;" -s -N)

echo "üìä Fonctions: $FONCTIONS_COUNT"
echo "üìä Grille d'interpr√©tation: $GRILLE_COUNT"

echo ""
echo "‚úÖ Migration de base de donn√©es termin√©e avec succ√®s!"
echo ""
echo "üìä R√©sum√©:"
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ üóÑÔ∏è  Database: maturity_assessment"
echo "‚îÇ üìç Endpoint: $DATABASE_ENDPOINT"
echo "‚îÇ üìã Tables: $TABLES"
echo "‚îÇ üîß Fonctions: $FONCTIONS_COUNT"
echo "‚îÇ üìè Grille: $GRILLE_COUNT"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo ""
echo "üéØ Prochaines √©tapes:"
echo "1. üß™ Tester l'API: curl $API_URL/health"
echo "2. üîå Tester la connectivit√© BDD: curl $API_URL/api/fonctions"
echo "3. üåê Configurer le frontend avec la nouvelle API URL"