#!/bin/bash
# verify-infrastructure.sh - V√©rification de l'infrastructure d√©ploy√©e

set -e

ENVIRONMENT="dev"
REGION="eu-west-1"
STACK_NAME="MaturityBackend-${ENVIRONMENT}"

echo "üîç V√©rification de l'infrastructure d√©ploy√©e - ${ENVIRONMENT}"
echo "=================================================="

# Fonction pour v√©rifier le statut d'un service
check_service() {
    local service_name=$1
    local status=$2
    
    if [ "$status" = "SUCCESS" ] || [ "$status" = "available" ] || [ "$status" = "ACTIVE" ]; then
        echo "‚úÖ $service_name: $status"
        return 0
    else
        echo "‚ùå $service_name: $status"
        return 1
    fi
}

# 1. V√©rification du stack CloudFormation
echo "üìã V√©rification du stack CloudFormation..."
STACK_STATUS=$(aws cloudformation describe-stacks \
    --stack-name ${STACK_NAME} \
    --region ${REGION} \
    --query 'Stacks[0].StackStatus' \
    --output text 2>/dev/null || echo "NOT_FOUND")

check_service "CloudFormation Stack" "$STACK_STATUS"

if [ "$STACK_STATUS" != "CREATE_COMPLETE" ] && [ "$STACK_STATUS" != "UPDATE_COMPLETE" ]; then
    echo "‚ùå Le stack n'est pas dans un √©tat stable"
    exit 1
fi

# 2. V√©rification du VPC
echo ""
echo "üåê V√©rification du VPC..."
VPC_ID=$(aws ec2 describe-vpcs \
    --filters "Name=tag:Name,Values=*BackendVPC*" \
    --region ${REGION} \
    --query 'Vpcs[0].VpcId' \
    --output text 2>/dev/null || echo "None")

if [ "$VPC_ID" != "None" ]; then
    VPC_STATE=$(aws ec2 describe-vpcs \
        --vpc-ids ${VPC_ID} \
        --region ${REGION} \
        --query 'Vpcs[0].State' \
        --output text)
    check_service "VPC (${VPC_ID})" "$VPC_STATE"
else
    echo "‚ùå VPC non trouv√©"
fi

# 3. V√©rification de la base de donn√©es RDS
echo ""
echo "üóÑÔ∏è V√©rification de la base de donn√©es RDS..."
DB_STATUS=$(aws rds describe-db-instances \
    --region ${REGION} \
    --query "DBInstances[?contains(DBInstanceIdentifier, 'maturity') || contains(DBInstanceIdentifier, 'backend')].DBInstanceStatus" \
    --output text 2>/dev/null || echo "None")

if [ "$DB_STATUS" != "None" ] && [ ! -z "$DB_STATUS" ]; then
    check_service "RDS Database" "$DB_STATUS"
    
    # Obtenir l'endpoint de la base
    DB_ENDPOINT=$(aws rds describe-db-instances \
        --region ${REGION} \
        --query "DBInstances[?contains(DBInstanceIdentifier, 'maturity') || contains(DBInstanceIdentifier, 'backend')].Endpoint.Address" \
        --output text)
    echo "   üìç Endpoint: $DB_ENDPOINT"
else
    echo "‚ùå Base de donn√©es RDS non trouv√©e"
fi

# 4. V√©rification du cluster ECS
echo ""
echo "üìã V√©rification du cluster ECS..."
CLUSTER_STATUS=$(aws ecs describe-clusters \
    --clusters "maturity-backend-${ENVIRONMENT}" \
    --region ${REGION} \
    --query 'clusters[0].status' \
    --output text 2>/dev/null || echo "None")

if [ "$CLUSTER_STATUS" != "None" ]; then
    check_service "ECS Cluster" "$CLUSTER_STATUS"
    
    # V√©rifier les t√¢ches en cours
    RUNNING_TASKS=$(aws ecs list-tasks \
        --cluster "maturity-backend-${ENVIRONMENT}" \
        --region ${REGION} \
        --query 'length(taskArns)' \
        --output text 2>/dev/null || echo "0")
    echo "   üìä T√¢ches en cours: $RUNNING_TASKS"
else
    echo "‚ùå Cluster ECS non trouv√©"
fi

# 5. V√©rification du service ECS
echo ""
echo "üöÄ V√©rification du service ECS..."
SERVICE_STATUS=$(aws ecs describe-services \
    --cluster "maturity-backend-${ENVIRONMENT}" \
    --services "maturity-backend-${ENVIRONMENT}" \
    --region ${REGION} \
    --query 'services[0].status' \
    --output text 2>/dev/null || echo "None")

if [ "$SERVICE_STATUS" != "None" ]; then
    check_service "ECS Service" "$SERVICE_STATUS"
    
    # V√©rifier le nombre de t√¢ches d√©sir√©es vs en cours
    DESIRED_COUNT=$(aws ecs describe-services \
        --cluster "maturity-backend-${ENVIRONMENT}" \
        --services "maturity-backend-${ENVIRONMENT}" \
        --region ${REGION} \
        --query 'services[0].desiredCount' \
        --output text)
    
    RUNNING_COUNT=$(aws ecs describe-services \
        --cluster "maturity-backend-${ENVIRONMENT}" \
        --services "maturity-backend-${ENVIRONMENT}" \
        --region ${REGION} \
        --query 'services[0].runningCount' \
        --output text)
    
    echo "   üìä T√¢ches d√©sir√©es: $DESIRED_COUNT, En cours: $RUNNING_COUNT"
    
    if [ "$DESIRED_COUNT" = "$RUNNING_COUNT" ]; then
        echo "   ‚úÖ Service √† l'√©tat stable"
    else
        echo "   ‚ö†Ô∏è Service en cours de stabilisation"
    fi
else
    echo "‚ùå Service ECS non trouv√©"
fi

# 6. V√©rification du Load Balancer
echo ""
echo "‚öñÔ∏è V√©rification du Load Balancer..."
ALB_STATE=$(aws elbv2 describe-load-balancers \
    --region ${REGION} \
    --query "LoadBalancers[?contains(LoadBalancerName, 'maturity') || contains(LoadBalancerName, 'Backend')].State.Code" \
    --output text 2>/dev/null || echo "None")

if [ "$ALB_STATE" != "None" ] && [ ! -z "$ALB_STATE" ]; then
    check_service "Application Load Balancer" "$ALB_STATE"
    
    # Obtenir l'URL du load balancer
    ALB_DNS=$(aws elbv2 describe-load-balancers \
        --region ${REGION} \
        --query "LoadBalancers[?contains(LoadBalancerName, 'maturity') || contains(LoadBalancerName, 'Backend')].DNSName" \
        --output text)
    echo "   üåê DNS: $ALB_DNS"
else
    echo "‚ùå Load Balancer non trouv√©"
fi

# 7. V√©rification du repository ECR
echo ""
echo "üì¶ V√©rification du repository ECR..."
ECR_REPOS=$(aws ecr describe-repositories \
    --region ${REGION} \
    --query "repositories[?contains(repositoryName, 'maturity')].repositoryName" \
    --output text 2>/dev/null || echo "None")

if [ "$ECR_REPOS" != "None" ] && [ ! -z "$ECR_REPOS" ]; then
    check_service "ECR Repository" "available"
    echo "   üì¶ Repository: $ECR_REPOS"
    
    # V√©rifier s'il y a des images
    IMAGE_COUNT=$(aws ecr list-images \
        --repository-name $(echo $ECR_REPOS | cut -d' ' -f1) \
        --region ${REGION} \
        --query 'length(imageIds)' \
        --output text 2>/dev/null || echo "0")
    echo "   üñºÔ∏è Images disponibles: $IMAGE_COUNT"
else
    echo "‚ùå Repository ECR non trouv√©"
fi

# 8. V√©rification des secrets
echo ""
echo "üîê V√©rification des secrets..."
DB_SECRET=$(aws secretsmanager list-secrets \
    --region ${REGION} \
    --query "SecretList[?contains(Name, 'maturity-db')].Name" \
    --output text 2>/dev/null || echo "None")

JWT_SECRET=$(aws secretsmanager list-secrets \
    --region ${REGION} \
    --query "SecretList[?contains(Name, 'maturity-jwt')].Name" \
    --output text 2>/dev/null || echo "None")

if [ "$DB_SECRET" != "None" ]; then
    check_service "Database Secret" "available"
else
    echo "‚ùå Secret de base de donn√©es non trouv√©"
fi

if [ "$JWT_SECRET" != "None" ]; then
    check_service "JWT Secret" "available"
else
    echo "‚ùå Secret JWT non trouv√©"
fi

# 9. Test de connectivit√© de l'API (si disponible)
echo ""
echo "üåê Test de connectivit√© de l'API..."

# R√©cup√©rer l'URL de l'API depuis les outputs du stack
API_URL=$(aws cloudformation describe-stacks \
    --stack-name ${STACK_NAME} \
    --region ${REGION} \
    --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" \
    --output text 2>/dev/null || echo "None")

if [ "$API_URL" != "None" ] && [ ! -z "$API_URL" ]; then
    echo "   üîó URL de l'API: $API_URL"
    
    # Test simple de connectivit√© (ping)
    if curl -f -s --max-time 10 "${API_URL}/health" > /dev/null 2>&1; then
        echo "   ‚úÖ API accessible (endpoint /health)"
    else
        echo "   ‚ö†Ô∏è API non accessible (normal si aucune image d√©ploy√©e)"
    fi
else
    echo "   ‚ùå URL de l'API non trouv√©e dans les outputs"
fi

# 10. V√©rification des logs CloudWatch
echo ""
echo "üìä V√©rification des logs CloudWatch..."
LOG_GROUP=$(aws logs describe-log-groups \
    --log-group-name-prefix "/ecs/maturity-backend" \
    --region ${REGION} \
    --query 'logGroups[0].logGroupName' \
    --output text 2>/dev/null || echo "None")

if [ "$LOG_GROUP" != "None" ]; then
    check_service "CloudWatch Log Group" "available"
    echo "   üìù Log Group: $LOG_GROUP"
else
    echo "‚ùå Log Group CloudWatch non trouv√©"
fi

# R√©sum√© final
echo ""
echo "=================================================="
echo "üìä R√âSUM√â DE LA V√âRIFICATION"
echo "=================================================="

if [ "$STACK_STATUS" = "CREATE_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_COMPLETE" ]; then
    echo "‚úÖ Infrastructure d√©ploy√©e avec succ√®s"
    echo ""
    echo "üéØ Prochaines √©tapes:"
    echo "   1. Build et push de l'image Docker vers ECR"
    echo "   2. Mise √† jour du service ECS avec la nouvelle image"
    echo "   3. Migration du sch√©ma de base de donn√©es"
    echo "   4. Tests de connectivit√© end-to-end"
    echo ""
    echo "üìã Commandes utiles:"
    echo "   ‚Ä¢ Logs ECS: aws logs tail $LOG_GROUP --follow"
    echo "   ‚Ä¢ √âtat du service: aws ecs describe-services --cluster maturity-backend-${ENVIRONMENT} --services maturity-backend-${ENVIRONMENT}"
    echo "   ‚Ä¢ T√¢ches: aws ecs list-tasks --cluster maturity-backend-${ENVIRONMENT}"
else
    echo "‚ùå Infrastructure non d√©ploy√©e correctement"
    echo "   Statut du stack: $STACK_STATUS"
    exit 1
fi