// test-rds-setup.js
// Script pour tester la configuration RDS compl√®te

const mysql = require('mysql2/promise');
const path = require('path');
require('dotenv').config();

console.log('üß™ ===============================================');
console.log('   TEST DE CONFIGURATION RDS COMPLETE');
console.log('===============================================');

// Configuration √† tester
const CONFIG = {
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT) || 3306,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  ssl: process.env.DB_SSL_DISABLED === 'true' ? false : {
    rejectUnauthorized: process.env.DB_SSL_REJECT_UNAUTHORIZED === 'true'
  },
  charset: 'utf8mb4',
  timezone: '+00:00'
};

async function testConfiguration() {
  console.log('\nüìã VERIFICATION DE LA CONFIGURATION:');
  console.log('=====================================');
  
  // V√©rifier les variables d'environnement
  const requiredVars = ['DB_HOST', 'DB_NAME', 'DB_USER', 'DB_PASSWORD'];
  let configOK = true;
  
  requiredVars.forEach(varName => {
    const value = process.env[varName];
    if (!value) {
      console.log(`‚ùå ${varName}: MANQUANT`);
      configOK = false;
    } else {
      console.log(`‚úÖ ${varName}: ${'*'.repeat(Math.min(value.length, 20))}`);
    }
  });
  
  console.log(`‚úÖ DB_PORT: ${CONFIG.port}`);
  console.log(`‚úÖ SSL: ${CONFIG.ssl ? 'Activ√©' : 'D√©sactiv√©'}`);
  if (CONFIG.ssl && typeof CONFIG.ssl === 'object') {
    console.log(`   - rejectUnauthorized: ${CONFIG.ssl.rejectUnauthorized}`);
  }
  
  if (!configOK) {
    console.log('\n‚ùå Configuration incompl√®te. V√©rifiez votre fichier .env');
    process.exit(1);
  }
  
  return true;
}

async function testConnection() {
  console.log('\nüîå TEST DE CONNEXION:');
  console.log('=====================');
  
  let connection = null;
  
  try {
    console.log('‚è≥ Connexion √† RDS...');
    connection = await mysql.createConnection(CONFIG);
    console.log('‚úÖ Connexion √©tablie !');
    
    // Test 1: Requ√™te de base
    console.log('\nüß™ Test 1: Requ√™te de base');
    const [basicResult] = await connection.execute('SELECT 1 as test, NOW() as time, VERSION() as version, CONNECTION_ID() as conn_id');
    console.log(`   ‚úÖ Test: ${basicResult[0].test}`);
    console.log(`   ‚úÖ Time: ${basicResult[0].time}`);
    console.log(`   ‚úÖ Version: ${basicResult[0].version}`);
    console.log(`   ‚úÖ Connection ID: ${basicResult[0].conn_id}`);
    
    // Test 2: V√©rifier la base de donn√©es
    console.log('\nüß™ Test 2: Acc√®s √† la base de donn√©es');
    await connection.execute(`USE ${CONFIG.database}`);
    console.log(`   ‚úÖ Base "${CONFIG.database}" accessible`);
    
    // Test 3: Lister les tables
    console.log('\nüß™ Test 3: Inventaire des tables');
    const [tables] = await connection.execute('SHOW TABLES');
    
    if (tables.length === 0) {
      console.log('   ‚ö†Ô∏è  Aucune table trouv√©e (base vide)');
    } else {
      console.log(`   ‚úÖ ${tables.length} tables trouv√©es:`);
      tables.forEach(table => {
        const tableName = Object.values(table)[0];
        console.log(`      - ${tableName}`);
      });
    }
    
    // Test 4: V√©rifier les tables principales
    console.log('\nüß™ Test 4: Tables principales de l\'application');
    const mainTables = ['entreprises', 'acteurs', 'applications', 'questionnaires', 'fonctions', 'thematiques'];
    
    for (const tableName of mainTables) {
      try {
        const [count] = await connection.execute(`SELECT COUNT(*) as count FROM ${tableName}`);
        console.log(`   ‚úÖ ${tableName}: ${count[0].count} enregistrements`);
      } catch (error) {
        console.log(`   ‚ùå ${tableName}: ${error.message}`);
      }
    }
    
    // Test 5: Test d'√©criture (table temporaire)
    console.log('\nüß™ Test 5: Test d\'√©criture');
    try {
      await connection.execute(`
        CREATE TEMPORARY TABLE test_rds_setup (
          id INT AUTO_INCREMENT PRIMARY KEY,
          test_value VARCHAR(255),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
      
      await connection.execute(
        'INSERT INTO test_rds_setup (test_value) VALUES (?)',
        ['Test RDS Setup - ' + new Date().toISOString()]
      );
      
      const [writeResult] = await connection.execute('SELECT * FROM test_rds_setup');
      console.log(`   ‚úÖ √âcriture r√©ussie: ${writeResult[0].test_value}`);
      
    } catch (error) {
      console.log(`   ‚ùå Test d'√©criture √©chou√©: ${error.message}`);
    }
    
    console.log('\nüéâ TOUS LES TESTS DE CONNEXION R√âUSSIS !');
    return true;
    
  } catch (error) {
    console.log(`\n‚ùå ERREUR DE CONNEXION:`);
    console.log(`   Message: ${error.message}`);
    console.log(`   Code: ${error.code}`);
    
    // Diagnostics
    console.log('\nüí° DIAGNOSTICS:');
    if (error.code === 'ENOTFOUND') {
      console.log('   ‚ùå Probl√®me DNS - V√©rifiez DB_HOST');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('   ‚ùå Connexion refus√©e - V√©rifiez les Security Groups AWS');
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('   ‚ùå Acc√®s refus√© - V√©rifiez DB_USER et DB_PASSWORD');
    } else if (error.message.includes('SSL')) {
      console.log('   ‚ùå Probl√®me SSL - Essayez avec DB_SSL_DISABLED=true');
    }
    
    return false;
    
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå Connexion ferm√©e');
    }
  }
}

async function testPool() {
  console.log('\nüèä TEST DU POOL DE CONNEXIONS:');
  console.log('==============================');
  
  let pool = null;
  
  try {
    // Configuration du pool
    const poolConfig = {
      ...CONFIG,
      waitForConnections: true,
      connectionLimit: 5,
      queueLimit: 0
    };
    
    console.log('‚è≥ Cr√©ation du pool de connexions...');
    pool = mysql.createPool(poolConfig);
    console.log('‚úÖ Pool cr√©√©');
    
    // Test de connexions multiples
    console.log('\nüß™ Test de connexions simultan√©es...');
    const promises = [];
    
    for (let i = 1; i <= 3; i++) {
      promises.push(
        pool.execute('SELECT ? as connection_num, CONNECTION_ID() as conn_id', [i])
      );
    }
    
    const results = await Promise.all(promises);
    
    results.forEach(([rows], index) => {
      console.log(`   ‚úÖ Connexion ${index + 1}: ID ${rows[0].conn_id}`);
    });
    
    console.log('\nüéâ POOL DE CONNEXIONS FONCTIONNEL !');
    return true;
    
  } catch (error) {
    console.log(`\n‚ùå ERREUR POOL:`);
    console.log(`   ${error.message}`);
    return false;
    
  } finally {
    if (pool) {
      await pool.end();
      console.log('\nüîå Pool ferm√©');
    }
  }
}

async function testApplicationRoutes() {
  console.log('\nüõ£Ô∏è  TEST DES ROUTES PRINCIPALES:');
  console.log('=================================');
  
  // Simuler l'import du module de connexion
  try {
    // Test d'import du module
    console.log('‚è≥ Test d\'import du module dbConnection...');
    
    // Nettoyer le cache pour un test propre
    const dbConnectionPath = path.resolve('./server/db/dbConnection.js');
    delete require.cache[dbConnectionPath];
    
    const { pool } = require('./server/db/dbConnection');
    console.log('‚úÖ Module dbConnection import√©');
    
    // Attendre que le pool soit initialis√©
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Test d'une requ√™te via le pool
    console.log('\nüß™ Test via le pool de l\'application...');
    const [result] = await pool.execute('SELECT "Application Pool Test" as message, NOW() as timestamp');
    console.log(`   ‚úÖ ${result[0].message} - ${result[0].timestamp}`);
    
    console.log('\nüéâ MODULE D\'APPLICATION FONCTIONNEL !');
    return true;
    
  } catch (error) {
    console.log(`\n‚ùå ERREUR MODULE APPLICATION:`);
    console.log(`   ${error.message}`);
    return false;
  }
}

// Fonction principale
async function main() {
  let allTestsPassed = true;
  
  try {
    // Test 1: Configuration
    await testConfiguration();
    
    // Test 2: Connexion simple
    const connectionTest = await testConnection();
    if (!connectionTest) allTestsPassed = false;
    
    // Test 3: Pool de connexions
    const poolTest = await testPool();
    if (!poolTest) allTestsPassed = false;
    
    // Test 4: Module application
    const appTest = await testApplicationRoutes();
    if (!appTest) allTestsPassed = false;
    
    // R√©sultat final
    console.log('\nüìä R√âSUM√â FINAL:');
    console.log('================');
    
    if (allTestsPassed) {
      console.log('üéâ TOUS LES TESTS R√âUSSIS !');
      console.log('‚úÖ Votre application est pr√™te pour RDS');
      console.log('‚úÖ Vous pouvez d√©marrer votre serveur avec: npm run start:server');
      console.log('‚úÖ Routes de sant√© disponibles:');
      console.log('   - GET http://localhost:5000/health');
      console.log('   - GET http://localhost:5000/api/health');
      console.log('   - GET http://localhost:5000/api/health/database');
    } else {
      console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â');
      console.log('‚ö†Ô∏è  V√©rifiez la configuration avant de d√©marrer l\'application');
    }
    
    process.exit(allTestsPassed ? 0 : 1);
    
  } catch (error) {
    console.error('\n‚ùå ERREUR FATALE:', error.message);
    process.exit(1);
  }
}

// Gestion des signaux
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è  Test interrompu par l\'utilisateur');
  process.exit(1);
});

// Ex√©cuter le test
if (require.main === module) {
  main();
}

module.exports = { testConfiguration, testConnection, testPool };